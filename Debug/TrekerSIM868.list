
TrekerSIM868.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ad18  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002dc  0800ae28  0800ae28  0001ae28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800b104  0800b104  0001b104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800b108  0800b108  0001b108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000180  20000000  0800b10c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001ea4  20000180  0800b28c  00020180  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20002024  0800b28c  00022024  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001f4f2  00000000  00000000  000201a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00004786  00000000  00000000  0003f69b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001808  00000000  00000000  00043e28  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000015f0  00000000  00000000  00045630  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000e93e  00000000  00000000  00046c20  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00006ffc  00000000  00000000  0005555e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0005c55a  2**0
                  CONTENTS, READONLY
 16 .debug_frame  0000609c  00000000  00000000  0005c5d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000180 	.word	0x20000180
 800012c:	00000000 	.word	0x00000000
 8000130:	0800ae10 	.word	0x0800ae10

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000184 	.word	0x20000184
 800014c:	0800ae10 	.word	0x0800ae10

08000150 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	b082      	sub	sp, #8
 8000154:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000156:	4a18      	ldr	r2, [pc, #96]	; (80001b8 <MX_DMA_Init+0x68>)
 8000158:	4b17      	ldr	r3, [pc, #92]	; (80001b8 <MX_DMA_Init+0x68>)
 800015a:	695b      	ldr	r3, [r3, #20]
 800015c:	f043 0301 	orr.w	r3, r3, #1
 8000160:	6153      	str	r3, [r2, #20]
 8000162:	4b15      	ldr	r3, [pc, #84]	; (80001b8 <MX_DMA_Init+0x68>)
 8000164:	695b      	ldr	r3, [r3, #20]
 8000166:	f003 0301 	and.w	r3, r3, #1
 800016a:	607b      	str	r3, [r7, #4]
 800016c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 800016e:	2200      	movs	r2, #0
 8000170:	2105      	movs	r1, #5
 8000172:	200e      	movs	r0, #14
 8000174:	f000 fd94 	bl	8000ca0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000178:	200e      	movs	r0, #14
 800017a:	f000 fdbd 	bl	8000cf8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 800017e:	2200      	movs	r2, #0
 8000180:	2105      	movs	r1, #5
 8000182:	200f      	movs	r0, #15
 8000184:	f000 fd8c 	bl	8000ca0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000188:	200f      	movs	r0, #15
 800018a:	f000 fdb5 	bl	8000cf8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 800018e:	2200      	movs	r2, #0
 8000190:	2105      	movs	r1, #5
 8000192:	2010      	movs	r0, #16
 8000194:	f000 fd84 	bl	8000ca0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000198:	2010      	movs	r0, #16
 800019a:	f000 fdad 	bl	8000cf8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 800019e:	2200      	movs	r2, #0
 80001a0:	2105      	movs	r1, #5
 80001a2:	2011      	movs	r0, #17
 80001a4:	f000 fd7c 	bl	8000ca0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80001a8:	2011      	movs	r0, #17
 80001aa:	f000 fda5 	bl	8000cf8 <HAL_NVIC_EnableIRQ>

}
 80001ae:	bf00      	nop
 80001b0:	3708      	adds	r7, #8
 80001b2:	46bd      	mov	sp, r7
 80001b4:	bd80      	pop	{r7, pc}
 80001b6:	bf00      	nop
 80001b8:	40021000 	.word	0x40021000

080001bc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80001bc:	b480      	push	{r7}
 80001be:	b085      	sub	sp, #20
 80001c0:	af00      	add	r7, sp, #0
 80001c2:	60f8      	str	r0, [r7, #12]
 80001c4:	60b9      	str	r1, [r7, #8]
 80001c6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80001c8:	68fb      	ldr	r3, [r7, #12]
 80001ca:	4a06      	ldr	r2, [pc, #24]	; (80001e4 <vApplicationGetIdleTaskMemory+0x28>)
 80001cc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80001ce:	68bb      	ldr	r3, [r7, #8]
 80001d0:	4a05      	ldr	r2, [pc, #20]	; (80001e8 <vApplicationGetIdleTaskMemory+0x2c>)
 80001d2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	2280      	movs	r2, #128	; 0x80
 80001d8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80001da:	bf00      	nop
 80001dc:	3714      	adds	r7, #20
 80001de:	46bd      	mov	sp, r7
 80001e0:	bc80      	pop	{r7}
 80001e2:	4770      	bx	lr
 80001e4:	2000019c 	.word	0x2000019c
 80001e8:	200001f0 	.word	0x200001f0

080001ec <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80001ec:	b5b0      	push	{r4, r5, r7, lr}
 80001ee:	b09c      	sub	sp, #112	; 0x70
 80001f0:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of GPS */
  osThreadDef(GPS, StartGPS, osPriorityNormal, 0, 128);
 80001f2:	4b27      	ldr	r3, [pc, #156]	; (8000290 <MX_FREERTOS_Init+0xa4>)
 80001f4:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80001f8:	461d      	mov	r5, r3
 80001fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001fe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000202:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  GPSHandle = osThreadCreate(osThread(GPS), NULL);
 8000206:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800020a:	2100      	movs	r1, #0
 800020c:	4618      	mov	r0, r3
 800020e:	f008 fed5 	bl	8008fbc <osThreadCreate>
 8000212:	4602      	mov	r2, r0
 8000214:	4b1f      	ldr	r3, [pc, #124]	; (8000294 <MX_FREERTOS_Init+0xa8>)
 8000216:	601a      	str	r2, [r3, #0]

  /* definition and creation of GSM */
  osThreadDef(GSM, StartGSM, osPriorityIdle, 0, 128);
 8000218:	4b1f      	ldr	r3, [pc, #124]	; (8000298 <MX_FREERTOS_Init+0xac>)
 800021a:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800021e:	461d      	mov	r5, r3
 8000220:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000222:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000224:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000228:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  GSMHandle = osThreadCreate(osThread(GSM), NULL);
 800022c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000230:	2100      	movs	r1, #0
 8000232:	4618      	mov	r0, r3
 8000234:	f008 fec2 	bl	8008fbc <osThreadCreate>
 8000238:	4602      	mov	r2, r0
 800023a:	4b18      	ldr	r3, [pc, #96]	; (800029c <MX_FREERTOS_Init+0xb0>)
 800023c:	601a      	str	r2, [r3, #0]

  /* definition and creation of Masage */
  osThreadDef(Masage, StartMasage, osPriorityIdle, 0, 128);
 800023e:	4b18      	ldr	r3, [pc, #96]	; (80002a0 <MX_FREERTOS_Init+0xb4>)
 8000240:	f107 041c 	add.w	r4, r7, #28
 8000244:	461d      	mov	r5, r3
 8000246:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000248:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800024a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800024e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  MasageHandle = osThreadCreate(osThread(Masage), NULL);
 8000252:	f107 031c 	add.w	r3, r7, #28
 8000256:	2100      	movs	r1, #0
 8000258:	4618      	mov	r0, r3
 800025a:	f008 feaf 	bl	8008fbc <osThreadCreate>
 800025e:	4602      	mov	r2, r0
 8000260:	4b10      	ldr	r3, [pc, #64]	; (80002a4 <MX_FREERTOS_Init+0xb8>)
 8000262:	601a      	str	r2, [r3, #0]

  /* definition and creation of mySTATUS */
  osThreadDef(mySTATUS, StartSTATUS, osPriorityIdle, 0, 128);
 8000264:	4b10      	ldr	r3, [pc, #64]	; (80002a8 <MX_FREERTOS_Init+0xbc>)
 8000266:	463c      	mov	r4, r7
 8000268:	461d      	mov	r5, r3
 800026a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800026c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800026e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000272:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  mySTATUSHandle = osThreadCreate(osThread(mySTATUS), NULL);
 8000276:	463b      	mov	r3, r7
 8000278:	2100      	movs	r1, #0
 800027a:	4618      	mov	r0, r3
 800027c:	f008 fe9e 	bl	8008fbc <osThreadCreate>
 8000280:	4602      	mov	r2, r0
 8000282:	4b0a      	ldr	r3, [pc, #40]	; (80002ac <MX_FREERTOS_Init+0xc0>)
 8000284:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000286:	bf00      	nop
 8000288:	3770      	adds	r7, #112	; 0x70
 800028a:	46bd      	mov	sp, r7
 800028c:	bdb0      	pop	{r4, r5, r7, pc}
 800028e:	bf00      	nop
 8000290:	0800ae2c 	.word	0x0800ae2c
 8000294:	200015b8 	.word	0x200015b8
 8000298:	0800ae4c 	.word	0x0800ae4c
 800029c:	200015c4 	.word	0x200015c4
 80002a0:	0800ae70 	.word	0x0800ae70
 80002a4:	200015c0 	.word	0x200015c0
 80002a8:	0800ae98 	.word	0x0800ae98
 80002ac:	200015bc 	.word	0x200015bc

080002b0 <StartGPS>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartGPS */
void StartGPS(void const * argument)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b082      	sub	sp, #8
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80002b8:	f00a f820 	bl	800a2fc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartGPS */
  /* Infinite loop */
  for(;;)
  {
    osDelay(500);
 80002bc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002c0:	f008 fec8 	bl	8009054 <osDelay>
    HAL_GPIO_WritePin(GPIOC, LED_WORK_Pin, GPIO_PIN_RESET);
 80002c4:	2200      	movs	r2, #0
 80002c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002ca:	4807      	ldr	r0, [pc, #28]	; (80002e8 <StartGPS+0x38>)
 80002cc:	f001 faca 	bl	8001864 <HAL_GPIO_WritePin>
    osDelay(500);
 80002d0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002d4:	f008 febe 	bl	8009054 <osDelay>
    HAL_GPIO_WritePin(GPIOC, LED_WORK_Pin, GPIO_PIN_SET);
 80002d8:	2201      	movs	r2, #1
 80002da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002de:	4802      	ldr	r0, [pc, #8]	; (80002e8 <StartGPS+0x38>)
 80002e0:	f001 fac0 	bl	8001864 <HAL_GPIO_WritePin>
    osDelay(500);
 80002e4:	e7ea      	b.n	80002bc <StartGPS+0xc>
 80002e6:	bf00      	nop
 80002e8:	40011000 	.word	0x40011000

080002ec <StartGSM>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGSM */
void StartGSM(void const * argument)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b082      	sub	sp, #8
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartGSM */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80002f4:	2001      	movs	r0, #1
 80002f6:	f008 fead 	bl	8009054 <osDelay>
 80002fa:	e7fb      	b.n	80002f4 <StartGSM+0x8>

080002fc <StartMasage>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMasage */
void StartMasage(void const * argument)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b082      	sub	sp, #8
 8000300:	af00      	add	r7, sp, #0
 8000302:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMasage */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000304:	2001      	movs	r0, #1
 8000306:	f008 fea5 	bl	8009054 <osDelay>
 800030a:	e7fb      	b.n	8000304 <StartMasage+0x8>

0800030c <StartSTATUS>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSTATUS */
void StartSTATUS(void const * argument)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	b082      	sub	sp, #8
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSTATUS */
  /* Infinite loop */
  for(;;)
  {

      osDelay(500);
 8000314:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000318:	f008 fe9c 	bl	8009054 <osDelay>
      HAL_GPIO_WritePin(GPIOC, LED_WORK_Pin, GPIO_PIN_RESET);
 800031c:	2200      	movs	r2, #0
 800031e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000322:	4807      	ldr	r0, [pc, #28]	; (8000340 <StartSTATUS+0x34>)
 8000324:	f001 fa9e 	bl	8001864 <HAL_GPIO_WritePin>
      osDelay(500);
 8000328:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800032c:	f008 fe92 	bl	8009054 <osDelay>
      HAL_GPIO_WritePin(GPIOC, LED_WORK_Pin, GPIO_PIN_SET);
 8000330:	2201      	movs	r2, #1
 8000332:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000336:	4802      	ldr	r0, [pc, #8]	; (8000340 <StartSTATUS+0x34>)
 8000338:	f001 fa94 	bl	8001864 <HAL_GPIO_WritePin>
      osDelay(500);
 800033c:	e7ea      	b.n	8000314 <StartSTATUS+0x8>
 800033e:	bf00      	nop
 8000340:	40011000 	.word	0x40011000

08000344 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b088      	sub	sp, #32
 8000348:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800034a:	f107 0310 	add.w	r3, r7, #16
 800034e:	2200      	movs	r2, #0
 8000350:	601a      	str	r2, [r3, #0]
 8000352:	605a      	str	r2, [r3, #4]
 8000354:	609a      	str	r2, [r3, #8]
 8000356:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000358:	4a3e      	ldr	r2, [pc, #248]	; (8000454 <MX_GPIO_Init+0x110>)
 800035a:	4b3e      	ldr	r3, [pc, #248]	; (8000454 <MX_GPIO_Init+0x110>)
 800035c:	699b      	ldr	r3, [r3, #24]
 800035e:	f043 0310 	orr.w	r3, r3, #16
 8000362:	6193      	str	r3, [r2, #24]
 8000364:	4b3b      	ldr	r3, [pc, #236]	; (8000454 <MX_GPIO_Init+0x110>)
 8000366:	699b      	ldr	r3, [r3, #24]
 8000368:	f003 0310 	and.w	r3, r3, #16
 800036c:	60fb      	str	r3, [r7, #12]
 800036e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000370:	4a38      	ldr	r2, [pc, #224]	; (8000454 <MX_GPIO_Init+0x110>)
 8000372:	4b38      	ldr	r3, [pc, #224]	; (8000454 <MX_GPIO_Init+0x110>)
 8000374:	699b      	ldr	r3, [r3, #24]
 8000376:	f043 0320 	orr.w	r3, r3, #32
 800037a:	6193      	str	r3, [r2, #24]
 800037c:	4b35      	ldr	r3, [pc, #212]	; (8000454 <MX_GPIO_Init+0x110>)
 800037e:	699b      	ldr	r3, [r3, #24]
 8000380:	f003 0320 	and.w	r3, r3, #32
 8000384:	60bb      	str	r3, [r7, #8]
 8000386:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000388:	4a32      	ldr	r2, [pc, #200]	; (8000454 <MX_GPIO_Init+0x110>)
 800038a:	4b32      	ldr	r3, [pc, #200]	; (8000454 <MX_GPIO_Init+0x110>)
 800038c:	699b      	ldr	r3, [r3, #24]
 800038e:	f043 0304 	orr.w	r3, r3, #4
 8000392:	6193      	str	r3, [r2, #24]
 8000394:	4b2f      	ldr	r3, [pc, #188]	; (8000454 <MX_GPIO_Init+0x110>)
 8000396:	699b      	ldr	r3, [r3, #24]
 8000398:	f003 0304 	and.w	r3, r3, #4
 800039c:	607b      	str	r3, [r7, #4]
 800039e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003a0:	4a2c      	ldr	r2, [pc, #176]	; (8000454 <MX_GPIO_Init+0x110>)
 80003a2:	4b2c      	ldr	r3, [pc, #176]	; (8000454 <MX_GPIO_Init+0x110>)
 80003a4:	699b      	ldr	r3, [r3, #24]
 80003a6:	f043 0308 	orr.w	r3, r3, #8
 80003aa:	6193      	str	r3, [r2, #24]
 80003ac:	4b29      	ldr	r3, [pc, #164]	; (8000454 <MX_GPIO_Init+0x110>)
 80003ae:	699b      	ldr	r3, [r3, #24]
 80003b0:	f003 0308 	and.w	r3, r3, #8
 80003b4:	603b      	str	r3, [r7, #0]
 80003b6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_WORK_GPIO_Port, LED_WORK_Pin, GPIO_PIN_SET);
 80003b8:	2201      	movs	r2, #1
 80003ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003be:	4826      	ldr	r0, [pc, #152]	; (8000458 <MX_GPIO_Init+0x114>)
 80003c0:	f001 fa50 	bl	8001864 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DTR_SlEEP_Pin|SIM_PWR_KEY_Pin|GNSS_EN_Pin|PWR_Sensor_Pin, GPIO_PIN_RESET);
 80003c4:	2200      	movs	r2, #0
 80003c6:	2172      	movs	r1, #114	; 0x72
 80003c8:	4824      	ldr	r0, [pc, #144]	; (800045c <MX_GPIO_Init+0x118>)
 80003ca:	f001 fa4b 	bl	8001864 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_WORK_Pin;
 80003ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003d4:	2301      	movs	r3, #1
 80003d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003d8:	2300      	movs	r3, #0
 80003da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003dc:	2302      	movs	r3, #2
 80003de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_WORK_GPIO_Port, &GPIO_InitStruct);
 80003e0:	f107 0310 	add.w	r3, r7, #16
 80003e4:	4619      	mov	r1, r3
 80003e6:	481c      	ldr	r0, [pc, #112]	; (8000458 <MX_GPIO_Init+0x114>)
 80003e8:	f001 f802 	bl	80013f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80003ec:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80003f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80003f2:	2303      	movs	r3, #3
 80003f4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003f6:	f107 0310 	add.w	r3, r7, #16
 80003fa:	4619      	mov	r1, r3
 80003fc:	4816      	ldr	r0, [pc, #88]	; (8000458 <MX_GPIO_Init+0x114>)
 80003fe:	f000 fff7 	bl	80013f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = DTR_SlEEP_Pin|SIM_PWR_KEY_Pin|GNSS_EN_Pin|PWR_Sensor_Pin;
 8000402:	2372      	movs	r3, #114	; 0x72
 8000404:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000406:	2301      	movs	r3, #1
 8000408:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800040a:	2300      	movs	r3, #0
 800040c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800040e:	2302      	movs	r3, #2
 8000410:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000412:	f107 0310 	add.w	r3, r7, #16
 8000416:	4619      	mov	r1, r3
 8000418:	4810      	ldr	r0, [pc, #64]	; (800045c <MX_GPIO_Init+0x118>)
 800041a:	f000 ffe9 	bl	80013f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA7 PA8 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_15;
 800041e:	f248 1380 	movw	r3, #33152	; 0x8180
 8000422:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000424:	2303      	movs	r3, #3
 8000426:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000428:	f107 0310 	add.w	r3, r7, #16
 800042c:	4619      	mov	r1, r3
 800042e:	480b      	ldr	r0, [pc, #44]	; (800045c <MX_GPIO_Init+0x118>)
 8000430:	f000 ffde 	bl	80013f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB4 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000434:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 8000438:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800043a:	2303      	movs	r3, #3
 800043c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800043e:	f107 0310 	add.w	r3, r7, #16
 8000442:	4619      	mov	r1, r3
 8000444:	4806      	ldr	r0, [pc, #24]	; (8000460 <MX_GPIO_Init+0x11c>)
 8000446:	f000 ffd3 	bl	80013f0 <HAL_GPIO_Init>

}
 800044a:	bf00      	nop
 800044c:	3720      	adds	r7, #32
 800044e:	46bd      	mov	sp, r7
 8000450:	bd80      	pop	{r7, pc}
 8000452:	bf00      	nop
 8000454:	40021000 	.word	0x40021000
 8000458:	40011000 	.word	0x40011000
 800045c:	40010800 	.word	0x40010800
 8000460:	40010c00 	.word	0x40010c00

08000464 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000468:	f000 fb20 	bl	8000aac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800046c:	f000 f811 	bl	8000492 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000470:	f7ff ff68 	bl	8000344 <MX_GPIO_Init>
  MX_DMA_Init();
 8000474:	f7ff fe6c 	bl	8000150 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000478:	f000 f986 	bl	8000788 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800047c:	f000 f9ae 	bl	80007dc <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000480:	f000 f97c 	bl	800077c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_StatusTypeDef  ReadUart(void);
                    ReadUart();
 8000484:	f00a fc62 	bl	800ad4c <ReadUart>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000488:	f7ff feb0 	bl	80001ec <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800048c:	f008 fd8f 	bl	8008fae <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000490:	e7fe      	b.n	8000490 <main+0x2c>

08000492 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000492:	b580      	push	{r7, lr}
 8000494:	b094      	sub	sp, #80	; 0x50
 8000496:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000498:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800049c:	2228      	movs	r2, #40	; 0x28
 800049e:	2100      	movs	r1, #0
 80004a0:	4618      	mov	r0, r3
 80004a2:	f00a fcad 	bl	800ae00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004a6:	f107 0314 	add.w	r3, r7, #20
 80004aa:	2200      	movs	r2, #0
 80004ac:	601a      	str	r2, [r3, #0]
 80004ae:	605a      	str	r2, [r3, #4]
 80004b0:	609a      	str	r2, [r3, #8]
 80004b2:	60da      	str	r2, [r3, #12]
 80004b4:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004b6:	1d3b      	adds	r3, r7, #4
 80004b8:	2200      	movs	r2, #0
 80004ba:	601a      	str	r2, [r3, #0]
 80004bc:	605a      	str	r2, [r3, #4]
 80004be:	609a      	str	r2, [r3, #8]
 80004c0:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80004c2:	2301      	movs	r3, #1
 80004c4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80004c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80004cc:	2300      	movs	r3, #0
 80004ce:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004d0:	2301      	movs	r3, #1
 80004d2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004d4:	2302      	movs	r3, #2
 80004d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80004d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004dc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80004de:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80004e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80004e8:	4618      	mov	r0, r3
 80004ea:	f002 fedd 	bl	80032a8 <HAL_RCC_OscConfig>
 80004ee:	4603      	mov	r3, r0
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d001      	beq.n	80004f8 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80004f4:	f000 f83a 	bl	800056c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004f8:	230f      	movs	r3, #15
 80004fa:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004fc:	2302      	movs	r3, #2
 80004fe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000500:	2300      	movs	r3, #0
 8000502:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000504:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000508:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800050a:	2300      	movs	r3, #0
 800050c:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800050e:	f107 0314 	add.w	r3, r7, #20
 8000512:	2101      	movs	r1, #1
 8000514:	4618      	mov	r0, r3
 8000516:	f003 fa37 	bl	8003988 <HAL_RCC_ClockConfig>
 800051a:	4603      	mov	r3, r0
 800051c:	2b00      	cmp	r3, #0
 800051e:	d001      	beq.n	8000524 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000520:	f000 f824 	bl	800056c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000524:	2310      	movs	r3, #16
 8000526:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000528:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800052c:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800052e:	1d3b      	adds	r3, r7, #4
 8000530:	4618      	mov	r0, r3
 8000532:	f003 fcad 	bl	8003e90 <HAL_RCCEx_PeriphCLKConfig>
 8000536:	4603      	mov	r3, r0
 8000538:	2b00      	cmp	r3, #0
 800053a:	d001      	beq.n	8000540 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800053c:	f000 f816 	bl	800056c <Error_Handler>
  }
}
 8000540:	bf00      	nop
 8000542:	3750      	adds	r7, #80	; 0x50
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}

08000548 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	4a04      	ldr	r2, [pc, #16]	; (8000568 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000556:	4293      	cmp	r3, r2
 8000558:	d101      	bne.n	800055e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800055a:	f000 fabd 	bl	8000ad8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800055e:	bf00      	nop
 8000560:	3708      	adds	r7, #8
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	40012c00 	.word	0x40012c00

0800056c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000570:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000572:	e7fe      	b.n	8000572 <Error_Handler+0x6>

08000574 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8000574:	b480      	push	{r7}
 8000576:	b083      	sub	sp, #12
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
 800057c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 800057e:	bf00      	nop
 8000580:	370c      	adds	r7, #12
 8000582:	46bd      	mov	sp, r7
 8000584:	bc80      	pop	{r7}
 8000586:	4770      	bx	lr

08000588 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b084      	sub	sp, #16
 800058c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800058e:	4a18      	ldr	r2, [pc, #96]	; (80005f0 <HAL_MspInit+0x68>)
 8000590:	4b17      	ldr	r3, [pc, #92]	; (80005f0 <HAL_MspInit+0x68>)
 8000592:	699b      	ldr	r3, [r3, #24]
 8000594:	f043 0301 	orr.w	r3, r3, #1
 8000598:	6193      	str	r3, [r2, #24]
 800059a:	4b15      	ldr	r3, [pc, #84]	; (80005f0 <HAL_MspInit+0x68>)
 800059c:	699b      	ldr	r3, [r3, #24]
 800059e:	f003 0301 	and.w	r3, r3, #1
 80005a2:	60bb      	str	r3, [r7, #8]
 80005a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a6:	4a12      	ldr	r2, [pc, #72]	; (80005f0 <HAL_MspInit+0x68>)
 80005a8:	4b11      	ldr	r3, [pc, #68]	; (80005f0 <HAL_MspInit+0x68>)
 80005aa:	69db      	ldr	r3, [r3, #28]
 80005ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005b0:	61d3      	str	r3, [r2, #28]
 80005b2:	4b0f      	ldr	r3, [pc, #60]	; (80005f0 <HAL_MspInit+0x68>)
 80005b4:	69db      	ldr	r3, [r3, #28]
 80005b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005ba:	607b      	str	r3, [r7, #4]
 80005bc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80005be:	2200      	movs	r2, #0
 80005c0:	210f      	movs	r1, #15
 80005c2:	f06f 0001 	mvn.w	r0, #1
 80005c6:	f000 fb6b 	bl	8000ca0 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80005ca:	4b0a      	ldr	r3, [pc, #40]	; (80005f4 <HAL_MspInit+0x6c>)
 80005cc:	685b      	ldr	r3, [r3, #4]
 80005ce:	60fb      	str	r3, [r7, #12]
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80005d6:	60fb      	str	r3, [r7, #12]
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005de:	60fb      	str	r3, [r7, #12]
 80005e0:	4a04      	ldr	r2, [pc, #16]	; (80005f4 <HAL_MspInit+0x6c>)
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005e6:	bf00      	nop
 80005e8:	3710      	adds	r7, #16
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	40021000 	.word	0x40021000
 80005f4:	40010000 	.word	0x40010000

080005f8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b08c      	sub	sp, #48	; 0x30
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000600:	2300      	movs	r3, #0
 8000602:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000604:	2300      	movs	r3, #0
 8000606:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8000608:	2200      	movs	r2, #0
 800060a:	6879      	ldr	r1, [r7, #4]
 800060c:	2019      	movs	r0, #25
 800060e:	f000 fb47 	bl	8000ca0 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000612:	2019      	movs	r0, #25
 8000614:	f000 fb70 	bl	8000cf8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000618:	4a1e      	ldr	r2, [pc, #120]	; (8000694 <HAL_InitTick+0x9c>)
 800061a:	4b1e      	ldr	r3, [pc, #120]	; (8000694 <HAL_InitTick+0x9c>)
 800061c:	699b      	ldr	r3, [r3, #24]
 800061e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000622:	6193      	str	r3, [r2, #24]
 8000624:	4b1b      	ldr	r3, [pc, #108]	; (8000694 <HAL_InitTick+0x9c>)
 8000626:	699b      	ldr	r3, [r3, #24]
 8000628:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800062c:	60fb      	str	r3, [r7, #12]
 800062e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000630:	f107 0210 	add.w	r2, r7, #16
 8000634:	f107 0314 	add.w	r3, r7, #20
 8000638:	4611      	mov	r1, r2
 800063a:	4618      	mov	r0, r3
 800063c:	f003 fbc8 	bl	8003dd0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000640:	f003 fbb2 	bl	8003da8 <HAL_RCC_GetPCLK2Freq>
 8000644:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000648:	4a13      	ldr	r2, [pc, #76]	; (8000698 <HAL_InitTick+0xa0>)
 800064a:	fba2 2303 	umull	r2, r3, r2, r3
 800064e:	0c9b      	lsrs	r3, r3, #18
 8000650:	3b01      	subs	r3, #1
 8000652:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000654:	4b11      	ldr	r3, [pc, #68]	; (800069c <HAL_InitTick+0xa4>)
 8000656:	4a12      	ldr	r2, [pc, #72]	; (80006a0 <HAL_InitTick+0xa8>)
 8000658:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800065a:	4b10      	ldr	r3, [pc, #64]	; (800069c <HAL_InitTick+0xa4>)
 800065c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000660:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000662:	4a0e      	ldr	r2, [pc, #56]	; (800069c <HAL_InitTick+0xa4>)
 8000664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000666:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000668:	4b0c      	ldr	r3, [pc, #48]	; (800069c <HAL_InitTick+0xa4>)
 800066a:	2200      	movs	r2, #0
 800066c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800066e:	4b0b      	ldr	r3, [pc, #44]	; (800069c <HAL_InitTick+0xa4>)
 8000670:	2200      	movs	r2, #0
 8000672:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000674:	4809      	ldr	r0, [pc, #36]	; (800069c <HAL_InitTick+0xa4>)
 8000676:	f003 fd15 	bl	80040a4 <HAL_TIM_Base_Init>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d104      	bne.n	800068a <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000680:	4806      	ldr	r0, [pc, #24]	; (800069c <HAL_InitTick+0xa4>)
 8000682:	f003 fdc3 	bl	800420c <HAL_TIM_Base_Start_IT>
 8000686:	4603      	mov	r3, r0
 8000688:	e000      	b.n	800068c <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800068a:	2301      	movs	r3, #1
}
 800068c:	4618      	mov	r0, r3
 800068e:	3730      	adds	r7, #48	; 0x30
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	40021000 	.word	0x40021000
 8000698:	431bde83 	.word	0x431bde83
 800069c:	200015c8 	.word	0x200015c8
 80006a0:	40012c00 	.word	0x40012c00

080006a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006a8:	e7fe      	b.n	80006a8 <NMI_Handler+0x4>

080006aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006aa:	b480      	push	{r7}
 80006ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006ae:	e7fe      	b.n	80006ae <HardFault_Handler+0x4>

080006b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006b4:	e7fe      	b.n	80006b4 <MemManage_Handler+0x4>

080006b6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006b6:	b480      	push	{r7}
 80006b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006ba:	e7fe      	b.n	80006ba <BusFault_Handler+0x4>

080006bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006c0:	e7fe      	b.n	80006c0 <UsageFault_Handler+0x4>

080006c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006c2:	b480      	push	{r7}
 80006c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006c6:	bf00      	nop
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bc80      	pop	{r7}
 80006cc:	4770      	bx	lr
	...

080006d0 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80006d4:	4802      	ldr	r0, [pc, #8]	; (80006e0 <DMA1_Channel4_IRQHandler+0x10>)
 80006d6:	f000 fd4b 	bl	8001170 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80006da:	bf00      	nop
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	20001654 	.word	0x20001654

080006e4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80006e8:	4802      	ldr	r0, [pc, #8]	; (80006f4 <DMA1_Channel5_IRQHandler+0x10>)
 80006ea:	f000 fd41 	bl	8001170 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80006ee:	bf00      	nop
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	20001698 	.word	0x20001698

080006f8 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80006fc:	4802      	ldr	r0, [pc, #8]	; (8000708 <DMA1_Channel6_IRQHandler+0x10>)
 80006fe:	f000 fd37 	bl	8001170 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000702:	bf00      	nop
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	20001610 	.word	0x20001610

0800070c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000710:	4802      	ldr	r0, [pc, #8]	; (800071c <DMA1_Channel7_IRQHandler+0x10>)
 8000712:	f000 fd2d 	bl	8001170 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000716:	bf00      	nop
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	200016dc 	.word	0x200016dc

08000720 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000724:	4802      	ldr	r0, [pc, #8]	; (8000730 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000726:	f001 fa0d 	bl	8001b44 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800072a:	bf00      	nop
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	20001d38 	.word	0x20001d38

08000734 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000738:	4802      	ldr	r0, [pc, #8]	; (8000744 <TIM1_UP_IRQHandler+0x10>)
 800073a:	f003 fdd3 	bl	80042e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800073e:	bf00      	nop
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	200015c8 	.word	0x200015c8

08000748 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800074c:	4802      	ldr	r0, [pc, #8]	; (8000758 <USART1_IRQHandler+0x10>)
 800074e:	f004 f8cd 	bl	80048ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	20001720 	.word	0x20001720

0800075c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000760:	4802      	ldr	r0, [pc, #8]	; (800076c <USART2_IRQHandler+0x10>)
 8000762:	f004 f8c3 	bl	80048ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000766:	bf00      	nop
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	20001764 	.word	0x20001764

08000770 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000774:	bf00      	nop
 8000776:	46bd      	mov	sp, r7
 8000778:	bc80      	pop	{r7}
 800077a:	4770      	bx	lr

0800077c <MX_TIM2_Init>:

/* USER CODE END 0 */

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM2_Init 1 */
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000780:	bf00      	nop
 8000782:	46bd      	mov	sp, r7
 8000784:	bc80      	pop	{r7}
 8000786:	4770      	bx	lr

08000788 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800078c:	4b11      	ldr	r3, [pc, #68]	; (80007d4 <MX_USART1_UART_Init+0x4c>)
 800078e:	4a12      	ldr	r2, [pc, #72]	; (80007d8 <MX_USART1_UART_Init+0x50>)
 8000790:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000792:	4b10      	ldr	r3, [pc, #64]	; (80007d4 <MX_USART1_UART_Init+0x4c>)
 8000794:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000798:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800079a:	4b0e      	ldr	r3, [pc, #56]	; (80007d4 <MX_USART1_UART_Init+0x4c>)
 800079c:	2200      	movs	r2, #0
 800079e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007a0:	4b0c      	ldr	r3, [pc, #48]	; (80007d4 <MX_USART1_UART_Init+0x4c>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007a6:	4b0b      	ldr	r3, [pc, #44]	; (80007d4 <MX_USART1_UART_Init+0x4c>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007ac:	4b09      	ldr	r3, [pc, #36]	; (80007d4 <MX_USART1_UART_Init+0x4c>)
 80007ae:	220c      	movs	r2, #12
 80007b0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007b2:	4b08      	ldr	r3, [pc, #32]	; (80007d4 <MX_USART1_UART_Init+0x4c>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007b8:	4b06      	ldr	r3, [pc, #24]	; (80007d4 <MX_USART1_UART_Init+0x4c>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007be:	4805      	ldr	r0, [pc, #20]	; (80007d4 <MX_USART1_UART_Init+0x4c>)
 80007c0:	f003 ff30 	bl	8004624 <HAL_UART_Init>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80007ca:	f7ff fecf 	bl	800056c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007ce:	bf00      	nop
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	20001720 	.word	0x20001720
 80007d8:	40013800 	.word	0x40013800

080007dc <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007e0:	4b11      	ldr	r3, [pc, #68]	; (8000828 <MX_USART2_UART_Init+0x4c>)
 80007e2:	4a12      	ldr	r2, [pc, #72]	; (800082c <MX_USART2_UART_Init+0x50>)
 80007e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80007e6:	4b10      	ldr	r3, [pc, #64]	; (8000828 <MX_USART2_UART_Init+0x4c>)
 80007e8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80007ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007ee:	4b0e      	ldr	r3, [pc, #56]	; (8000828 <MX_USART2_UART_Init+0x4c>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007f4:	4b0c      	ldr	r3, [pc, #48]	; (8000828 <MX_USART2_UART_Init+0x4c>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007fa:	4b0b      	ldr	r3, [pc, #44]	; (8000828 <MX_USART2_UART_Init+0x4c>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000800:	4b09      	ldr	r3, [pc, #36]	; (8000828 <MX_USART2_UART_Init+0x4c>)
 8000802:	220c      	movs	r2, #12
 8000804:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000806:	4b08      	ldr	r3, [pc, #32]	; (8000828 <MX_USART2_UART_Init+0x4c>)
 8000808:	2200      	movs	r2, #0
 800080a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800080c:	4b06      	ldr	r3, [pc, #24]	; (8000828 <MX_USART2_UART_Init+0x4c>)
 800080e:	2200      	movs	r2, #0
 8000810:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000812:	4805      	ldr	r0, [pc, #20]	; (8000828 <MX_USART2_UART_Init+0x4c>)
 8000814:	f003 ff06 	bl	8004624 <HAL_UART_Init>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800081e:	f7ff fea5 	bl	800056c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	20001764 	.word	0x20001764
 800082c:	40004400 	.word	0x40004400

08000830 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b08a      	sub	sp, #40	; 0x28
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000838:	f107 0318 	add.w	r3, r7, #24
 800083c:	2200      	movs	r2, #0
 800083e:	601a      	str	r2, [r3, #0]
 8000840:	605a      	str	r2, [r3, #4]
 8000842:	609a      	str	r2, [r3, #8]
 8000844:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	4a8c      	ldr	r2, [pc, #560]	; (8000a7c <HAL_UART_MspInit+0x24c>)
 800084c:	4293      	cmp	r3, r2
 800084e:	f040 8087 	bne.w	8000960 <HAL_UART_MspInit+0x130>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000852:	4a8b      	ldr	r2, [pc, #556]	; (8000a80 <HAL_UART_MspInit+0x250>)
 8000854:	4b8a      	ldr	r3, [pc, #552]	; (8000a80 <HAL_UART_MspInit+0x250>)
 8000856:	699b      	ldr	r3, [r3, #24]
 8000858:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800085c:	6193      	str	r3, [r2, #24]
 800085e:	4b88      	ldr	r3, [pc, #544]	; (8000a80 <HAL_UART_MspInit+0x250>)
 8000860:	699b      	ldr	r3, [r3, #24]
 8000862:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000866:	617b      	str	r3, [r7, #20]
 8000868:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800086a:	4a85      	ldr	r2, [pc, #532]	; (8000a80 <HAL_UART_MspInit+0x250>)
 800086c:	4b84      	ldr	r3, [pc, #528]	; (8000a80 <HAL_UART_MspInit+0x250>)
 800086e:	699b      	ldr	r3, [r3, #24]
 8000870:	f043 0304 	orr.w	r3, r3, #4
 8000874:	6193      	str	r3, [r2, #24]
 8000876:	4b82      	ldr	r3, [pc, #520]	; (8000a80 <HAL_UART_MspInit+0x250>)
 8000878:	699b      	ldr	r3, [r3, #24]
 800087a:	f003 0304 	and.w	r3, r3, #4
 800087e:	613b      	str	r3, [r7, #16]
 8000880:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000882:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000886:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000888:	2302      	movs	r3, #2
 800088a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800088c:	2303      	movs	r3, #3
 800088e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000890:	f107 0318 	add.w	r3, r7, #24
 8000894:	4619      	mov	r1, r3
 8000896:	487b      	ldr	r0, [pc, #492]	; (8000a84 <HAL_UART_MspInit+0x254>)
 8000898:	f000 fdaa 	bl	80013f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800089c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008a2:	2300      	movs	r3, #0
 80008a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a6:	2300      	movs	r3, #0
 80008a8:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008aa:	f107 0318 	add.w	r3, r7, #24
 80008ae:	4619      	mov	r1, r3
 80008b0:	4874      	ldr	r0, [pc, #464]	; (8000a84 <HAL_UART_MspInit+0x254>)
 80008b2:	f000 fd9d 	bl	80013f0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80008b6:	4b74      	ldr	r3, [pc, #464]	; (8000a88 <HAL_UART_MspInit+0x258>)
 80008b8:	4a74      	ldr	r2, [pc, #464]	; (8000a8c <HAL_UART_MspInit+0x25c>)
 80008ba:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008bc:	4b72      	ldr	r3, [pc, #456]	; (8000a88 <HAL_UART_MspInit+0x258>)
 80008be:	2200      	movs	r2, #0
 80008c0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008c2:	4b71      	ldr	r3, [pc, #452]	; (8000a88 <HAL_UART_MspInit+0x258>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80008c8:	4b6f      	ldr	r3, [pc, #444]	; (8000a88 <HAL_UART_MspInit+0x258>)
 80008ca:	2280      	movs	r2, #128	; 0x80
 80008cc:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80008ce:	4b6e      	ldr	r3, [pc, #440]	; (8000a88 <HAL_UART_MspInit+0x258>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80008d4:	4b6c      	ldr	r3, [pc, #432]	; (8000a88 <HAL_UART_MspInit+0x258>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80008da:	4b6b      	ldr	r3, [pc, #428]	; (8000a88 <HAL_UART_MspInit+0x258>)
 80008dc:	2200      	movs	r2, #0
 80008de:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80008e0:	4b69      	ldr	r3, [pc, #420]	; (8000a88 <HAL_UART_MspInit+0x258>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80008e6:	4868      	ldr	r0, [pc, #416]	; (8000a88 <HAL_UART_MspInit+0x258>)
 80008e8:	f000 fa1e 	bl	8000d28 <HAL_DMA_Init>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 80008f2:	f7ff fe3b 	bl	800056c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	4a63      	ldr	r2, [pc, #396]	; (8000a88 <HAL_UART_MspInit+0x258>)
 80008fa:	639a      	str	r2, [r3, #56]	; 0x38
 80008fc:	4a62      	ldr	r2, [pc, #392]	; (8000a88 <HAL_UART_MspInit+0x258>)
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8000902:	4b63      	ldr	r3, [pc, #396]	; (8000a90 <HAL_UART_MspInit+0x260>)
 8000904:	4a63      	ldr	r2, [pc, #396]	; (8000a94 <HAL_UART_MspInit+0x264>)
 8000906:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000908:	4b61      	ldr	r3, [pc, #388]	; (8000a90 <HAL_UART_MspInit+0x260>)
 800090a:	2210      	movs	r2, #16
 800090c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800090e:	4b60      	ldr	r3, [pc, #384]	; (8000a90 <HAL_UART_MspInit+0x260>)
 8000910:	2200      	movs	r2, #0
 8000912:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000914:	4b5e      	ldr	r3, [pc, #376]	; (8000a90 <HAL_UART_MspInit+0x260>)
 8000916:	2280      	movs	r2, #128	; 0x80
 8000918:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800091a:	4b5d      	ldr	r3, [pc, #372]	; (8000a90 <HAL_UART_MspInit+0x260>)
 800091c:	2200      	movs	r2, #0
 800091e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000920:	4b5b      	ldr	r3, [pc, #364]	; (8000a90 <HAL_UART_MspInit+0x260>)
 8000922:	2200      	movs	r2, #0
 8000924:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000926:	4b5a      	ldr	r3, [pc, #360]	; (8000a90 <HAL_UART_MspInit+0x260>)
 8000928:	2200      	movs	r2, #0
 800092a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800092c:	4b58      	ldr	r3, [pc, #352]	; (8000a90 <HAL_UART_MspInit+0x260>)
 800092e:	2200      	movs	r2, #0
 8000930:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000932:	4857      	ldr	r0, [pc, #348]	; (8000a90 <HAL_UART_MspInit+0x260>)
 8000934:	f000 f9f8 	bl	8000d28 <HAL_DMA_Init>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 800093e:	f7ff fe15 	bl	800056c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	4a52      	ldr	r2, [pc, #328]	; (8000a90 <HAL_UART_MspInit+0x260>)
 8000946:	635a      	str	r2, [r3, #52]	; 0x34
 8000948:	4a51      	ldr	r2, [pc, #324]	; (8000a90 <HAL_UART_MspInit+0x260>)
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800094e:	2200      	movs	r2, #0
 8000950:	2105      	movs	r1, #5
 8000952:	2025      	movs	r0, #37	; 0x25
 8000954:	f000 f9a4 	bl	8000ca0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000958:	2025      	movs	r0, #37	; 0x25
 800095a:	f000 f9cd 	bl	8000cf8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800095e:	e089      	b.n	8000a74 <HAL_UART_MspInit+0x244>
  else if(uartHandle->Instance==USART2)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a4c      	ldr	r2, [pc, #304]	; (8000a98 <HAL_UART_MspInit+0x268>)
 8000966:	4293      	cmp	r3, r2
 8000968:	f040 8084 	bne.w	8000a74 <HAL_UART_MspInit+0x244>
    __HAL_RCC_USART2_CLK_ENABLE();
 800096c:	4a44      	ldr	r2, [pc, #272]	; (8000a80 <HAL_UART_MspInit+0x250>)
 800096e:	4b44      	ldr	r3, [pc, #272]	; (8000a80 <HAL_UART_MspInit+0x250>)
 8000970:	69db      	ldr	r3, [r3, #28]
 8000972:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000976:	61d3      	str	r3, [r2, #28]
 8000978:	4b41      	ldr	r3, [pc, #260]	; (8000a80 <HAL_UART_MspInit+0x250>)
 800097a:	69db      	ldr	r3, [r3, #28]
 800097c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000980:	60fb      	str	r3, [r7, #12]
 8000982:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000984:	4a3e      	ldr	r2, [pc, #248]	; (8000a80 <HAL_UART_MspInit+0x250>)
 8000986:	4b3e      	ldr	r3, [pc, #248]	; (8000a80 <HAL_UART_MspInit+0x250>)
 8000988:	699b      	ldr	r3, [r3, #24]
 800098a:	f043 0304 	orr.w	r3, r3, #4
 800098e:	6193      	str	r3, [r2, #24]
 8000990:	4b3b      	ldr	r3, [pc, #236]	; (8000a80 <HAL_UART_MspInit+0x250>)
 8000992:	699b      	ldr	r3, [r3, #24]
 8000994:	f003 0304 	and.w	r3, r3, #4
 8000998:	60bb      	str	r3, [r7, #8]
 800099a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800099c:	2304      	movs	r3, #4
 800099e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a0:	2302      	movs	r3, #2
 80009a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009a4:	2303      	movs	r3, #3
 80009a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a8:	f107 0318 	add.w	r3, r7, #24
 80009ac:	4619      	mov	r1, r3
 80009ae:	4835      	ldr	r0, [pc, #212]	; (8000a84 <HAL_UART_MspInit+0x254>)
 80009b0:	f000 fd1e 	bl	80013f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80009b4:	2308      	movs	r3, #8
 80009b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009b8:	2300      	movs	r3, #0
 80009ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009bc:	2300      	movs	r3, #0
 80009be:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c0:	f107 0318 	add.w	r3, r7, #24
 80009c4:	4619      	mov	r1, r3
 80009c6:	482f      	ldr	r0, [pc, #188]	; (8000a84 <HAL_UART_MspInit+0x254>)
 80009c8:	f000 fd12 	bl	80013f0 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80009cc:	4b33      	ldr	r3, [pc, #204]	; (8000a9c <HAL_UART_MspInit+0x26c>)
 80009ce:	4a34      	ldr	r2, [pc, #208]	; (8000aa0 <HAL_UART_MspInit+0x270>)
 80009d0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009d2:	4b32      	ldr	r3, [pc, #200]	; (8000a9c <HAL_UART_MspInit+0x26c>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009d8:	4b30      	ldr	r3, [pc, #192]	; (8000a9c <HAL_UART_MspInit+0x26c>)
 80009da:	2200      	movs	r2, #0
 80009dc:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80009de:	4b2f      	ldr	r3, [pc, #188]	; (8000a9c <HAL_UART_MspInit+0x26c>)
 80009e0:	2280      	movs	r2, #128	; 0x80
 80009e2:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80009e4:	4b2d      	ldr	r3, [pc, #180]	; (8000a9c <HAL_UART_MspInit+0x26c>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80009ea:	4b2c      	ldr	r3, [pc, #176]	; (8000a9c <HAL_UART_MspInit+0x26c>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80009f0:	4b2a      	ldr	r3, [pc, #168]	; (8000a9c <HAL_UART_MspInit+0x26c>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80009f6:	4b29      	ldr	r3, [pc, #164]	; (8000a9c <HAL_UART_MspInit+0x26c>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80009fc:	4827      	ldr	r0, [pc, #156]	; (8000a9c <HAL_UART_MspInit+0x26c>)
 80009fe:	f000 f993 	bl	8000d28 <HAL_DMA_Init>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <HAL_UART_MspInit+0x1dc>
      Error_Handler();
 8000a08:	f7ff fdb0 	bl	800056c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	4a23      	ldr	r2, [pc, #140]	; (8000a9c <HAL_UART_MspInit+0x26c>)
 8000a10:	639a      	str	r2, [r3, #56]	; 0x38
 8000a12:	4a22      	ldr	r2, [pc, #136]	; (8000a9c <HAL_UART_MspInit+0x26c>)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8000a18:	4b22      	ldr	r3, [pc, #136]	; (8000aa4 <HAL_UART_MspInit+0x274>)
 8000a1a:	4a23      	ldr	r2, [pc, #140]	; (8000aa8 <HAL_UART_MspInit+0x278>)
 8000a1c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a1e:	4b21      	ldr	r3, [pc, #132]	; (8000aa4 <HAL_UART_MspInit+0x274>)
 8000a20:	2210      	movs	r2, #16
 8000a22:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a24:	4b1f      	ldr	r3, [pc, #124]	; (8000aa4 <HAL_UART_MspInit+0x274>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000a2a:	4b1e      	ldr	r3, [pc, #120]	; (8000aa4 <HAL_UART_MspInit+0x274>)
 8000a2c:	2280      	movs	r2, #128	; 0x80
 8000a2e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a30:	4b1c      	ldr	r3, [pc, #112]	; (8000aa4 <HAL_UART_MspInit+0x274>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a36:	4b1b      	ldr	r3, [pc, #108]	; (8000aa4 <HAL_UART_MspInit+0x274>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000a3c:	4b19      	ldr	r3, [pc, #100]	; (8000aa4 <HAL_UART_MspInit+0x274>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000a42:	4b18      	ldr	r3, [pc, #96]	; (8000aa4 <HAL_UART_MspInit+0x274>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000a48:	4816      	ldr	r0, [pc, #88]	; (8000aa4 <HAL_UART_MspInit+0x274>)
 8000a4a:	f000 f96d 	bl	8000d28 <HAL_DMA_Init>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <HAL_UART_MspInit+0x228>
      Error_Handler();
 8000a54:	f7ff fd8a 	bl	800056c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	4a12      	ldr	r2, [pc, #72]	; (8000aa4 <HAL_UART_MspInit+0x274>)
 8000a5c:	635a      	str	r2, [r3, #52]	; 0x34
 8000a5e:	4a11      	ldr	r2, [pc, #68]	; (8000aa4 <HAL_UART_MspInit+0x274>)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000a64:	2200      	movs	r2, #0
 8000a66:	2105      	movs	r1, #5
 8000a68:	2026      	movs	r0, #38	; 0x26
 8000a6a:	f000 f919 	bl	8000ca0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a6e:	2026      	movs	r0, #38	; 0x26
 8000a70:	f000 f942 	bl	8000cf8 <HAL_NVIC_EnableIRQ>
}
 8000a74:	bf00      	nop
 8000a76:	3728      	adds	r7, #40	; 0x28
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	40013800 	.word	0x40013800
 8000a80:	40021000 	.word	0x40021000
 8000a84:	40010800 	.word	0x40010800
 8000a88:	20001698 	.word	0x20001698
 8000a8c:	40020058 	.word	0x40020058
 8000a90:	20001654 	.word	0x20001654
 8000a94:	40020044 	.word	0x40020044
 8000a98:	40004400 	.word	0x40004400
 8000a9c:	20001610 	.word	0x20001610
 8000aa0:	4002006c 	.word	0x4002006c
 8000aa4:	200016dc 	.word	0x200016dc
 8000aa8:	40020080 	.word	0x40020080

08000aac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ab0:	4a08      	ldr	r2, [pc, #32]	; (8000ad4 <HAL_Init+0x28>)
 8000ab2:	4b08      	ldr	r3, [pc, #32]	; (8000ad4 <HAL_Init+0x28>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	f043 0310 	orr.w	r3, r3, #16
 8000aba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000abc:	2003      	movs	r0, #3
 8000abe:	f000 f8cf 	bl	8000c60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ac2:	200f      	movs	r0, #15
 8000ac4:	f7ff fd98 	bl	80005f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ac8:	f7ff fd5e 	bl	8000588 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000acc:	2300      	movs	r3, #0
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	40022000 	.word	0x40022000

08000ad8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000adc:	4b05      	ldr	r3, [pc, #20]	; (8000af4 <HAL_IncTick+0x1c>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	461a      	mov	r2, r3
 8000ae2:	4b05      	ldr	r3, [pc, #20]	; (8000af8 <HAL_IncTick+0x20>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4413      	add	r3, r2
 8000ae8:	4a03      	ldr	r2, [pc, #12]	; (8000af8 <HAL_IncTick+0x20>)
 8000aea:	6013      	str	r3, [r2, #0]
}
 8000aec:	bf00      	nop
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bc80      	pop	{r7}
 8000af2:	4770      	bx	lr
 8000af4:	20000008 	.word	0x20000008
 8000af8:	200017a8 	.word	0x200017a8

08000afc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  return uwTick;
 8000b00:	4b02      	ldr	r3, [pc, #8]	; (8000b0c <HAL_GetTick+0x10>)
 8000b02:	681b      	ldr	r3, [r3, #0]
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bc80      	pop	{r7}
 8000b0a:	4770      	bx	lr
 8000b0c:	200017a8 	.word	0x200017a8

08000b10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b085      	sub	sp, #20
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	f003 0307 	and.w	r3, r3, #7
 8000b1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b20:	4b0c      	ldr	r3, [pc, #48]	; (8000b54 <__NVIC_SetPriorityGrouping+0x44>)
 8000b22:	68db      	ldr	r3, [r3, #12]
 8000b24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b26:	68ba      	ldr	r2, [r7, #8]
 8000b28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b2c:	4013      	ands	r3, r2
 8000b2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b34:	68bb      	ldr	r3, [r7, #8]
 8000b36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b42:	4a04      	ldr	r2, [pc, #16]	; (8000b54 <__NVIC_SetPriorityGrouping+0x44>)
 8000b44:	68bb      	ldr	r3, [r7, #8]
 8000b46:	60d3      	str	r3, [r2, #12]
}
 8000b48:	bf00      	nop
 8000b4a:	3714      	adds	r7, #20
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bc80      	pop	{r7}
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	e000ed00 	.word	0xe000ed00

08000b58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b5c:	4b04      	ldr	r3, [pc, #16]	; (8000b70 <__NVIC_GetPriorityGrouping+0x18>)
 8000b5e:	68db      	ldr	r3, [r3, #12]
 8000b60:	0a1b      	lsrs	r3, r3, #8
 8000b62:	f003 0307 	and.w	r3, r3, #7
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bc80      	pop	{r7}
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	e000ed00 	.word	0xe000ed00

08000b74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	db0b      	blt.n	8000b9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b86:	4908      	ldr	r1, [pc, #32]	; (8000ba8 <__NVIC_EnableIRQ+0x34>)
 8000b88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8c:	095b      	lsrs	r3, r3, #5
 8000b8e:	79fa      	ldrb	r2, [r7, #7]
 8000b90:	f002 021f 	and.w	r2, r2, #31
 8000b94:	2001      	movs	r0, #1
 8000b96:	fa00 f202 	lsl.w	r2, r0, r2
 8000b9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b9e:	bf00      	nop
 8000ba0:	370c      	adds	r7, #12
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bc80      	pop	{r7}
 8000ba6:	4770      	bx	lr
 8000ba8:	e000e100 	.word	0xe000e100

08000bac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	6039      	str	r1, [r7, #0]
 8000bb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	db0a      	blt.n	8000bd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc0:	490d      	ldr	r1, [pc, #52]	; (8000bf8 <__NVIC_SetPriority+0x4c>)
 8000bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc6:	683a      	ldr	r2, [r7, #0]
 8000bc8:	b2d2      	uxtb	r2, r2
 8000bca:	0112      	lsls	r2, r2, #4
 8000bcc:	b2d2      	uxtb	r2, r2
 8000bce:	440b      	add	r3, r1
 8000bd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bd4:	e00a      	b.n	8000bec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bd6:	4909      	ldr	r1, [pc, #36]	; (8000bfc <__NVIC_SetPriority+0x50>)
 8000bd8:	79fb      	ldrb	r3, [r7, #7]
 8000bda:	f003 030f 	and.w	r3, r3, #15
 8000bde:	3b04      	subs	r3, #4
 8000be0:	683a      	ldr	r2, [r7, #0]
 8000be2:	b2d2      	uxtb	r2, r2
 8000be4:	0112      	lsls	r2, r2, #4
 8000be6:	b2d2      	uxtb	r2, r2
 8000be8:	440b      	add	r3, r1
 8000bea:	761a      	strb	r2, [r3, #24]
}
 8000bec:	bf00      	nop
 8000bee:	370c      	adds	r7, #12
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bc80      	pop	{r7}
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	e000e100 	.word	0xe000e100
 8000bfc:	e000ed00 	.word	0xe000ed00

08000c00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b089      	sub	sp, #36	; 0x24
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	60f8      	str	r0, [r7, #12]
 8000c08:	60b9      	str	r1, [r7, #8]
 8000c0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	f003 0307 	and.w	r3, r3, #7
 8000c12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c14:	69fb      	ldr	r3, [r7, #28]
 8000c16:	f1c3 0307 	rsb	r3, r3, #7
 8000c1a:	2b04      	cmp	r3, #4
 8000c1c:	bf28      	it	cs
 8000c1e:	2304      	movcs	r3, #4
 8000c20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c22:	69fb      	ldr	r3, [r7, #28]
 8000c24:	3304      	adds	r3, #4
 8000c26:	2b06      	cmp	r3, #6
 8000c28:	d902      	bls.n	8000c30 <NVIC_EncodePriority+0x30>
 8000c2a:	69fb      	ldr	r3, [r7, #28]
 8000c2c:	3b03      	subs	r3, #3
 8000c2e:	e000      	b.n	8000c32 <NVIC_EncodePriority+0x32>
 8000c30:	2300      	movs	r3, #0
 8000c32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c34:	2201      	movs	r2, #1
 8000c36:	69bb      	ldr	r3, [r7, #24]
 8000c38:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3c:	1e5a      	subs	r2, r3, #1
 8000c3e:	68bb      	ldr	r3, [r7, #8]
 8000c40:	401a      	ands	r2, r3
 8000c42:	697b      	ldr	r3, [r7, #20]
 8000c44:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c46:	2101      	movs	r1, #1
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c4e:	1e59      	subs	r1, r3, #1
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c54:	4313      	orrs	r3, r2
         );
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	3724      	adds	r7, #36	; 0x24
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bc80      	pop	{r7}
 8000c5e:	4770      	bx	lr

08000c60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	2b07      	cmp	r3, #7
 8000c6c:	d00f      	beq.n	8000c8e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	2b06      	cmp	r3, #6
 8000c72:	d00c      	beq.n	8000c8e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	2b05      	cmp	r3, #5
 8000c78:	d009      	beq.n	8000c8e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	2b04      	cmp	r3, #4
 8000c7e:	d006      	beq.n	8000c8e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	2b03      	cmp	r3, #3
 8000c84:	d003      	beq.n	8000c8e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000c86:	2192      	movs	r1, #146	; 0x92
 8000c88:	4804      	ldr	r0, [pc, #16]	; (8000c9c <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8000c8a:	f7ff fc73 	bl	8000574 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c8e:	6878      	ldr	r0, [r7, #4]
 8000c90:	f7ff ff3e 	bl	8000b10 <__NVIC_SetPriorityGrouping>
}
 8000c94:	bf00      	nop
 8000c96:	3708      	adds	r7, #8
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	0800aeb4 	.word	0x0800aeb4

08000ca0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b086      	sub	sp, #24
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	60b9      	str	r1, [r7, #8]
 8000caa:	607a      	str	r2, [r7, #4]
 8000cac:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	2b0f      	cmp	r3, #15
 8000cb6:	d903      	bls.n	8000cc0 <HAL_NVIC_SetPriority+0x20>
 8000cb8:	21aa      	movs	r1, #170	; 0xaa
 8000cba:	480e      	ldr	r0, [pc, #56]	; (8000cf4 <HAL_NVIC_SetPriority+0x54>)
 8000cbc:	f7ff fc5a 	bl	8000574 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	2b0f      	cmp	r3, #15
 8000cc4:	d903      	bls.n	8000cce <HAL_NVIC_SetPriority+0x2e>
 8000cc6:	21ab      	movs	r1, #171	; 0xab
 8000cc8:	480a      	ldr	r0, [pc, #40]	; (8000cf4 <HAL_NVIC_SetPriority+0x54>)
 8000cca:	f7ff fc53 	bl	8000574 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cce:	f7ff ff43 	bl	8000b58 <__NVIC_GetPriorityGrouping>
 8000cd2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cd4:	687a      	ldr	r2, [r7, #4]
 8000cd6:	68b9      	ldr	r1, [r7, #8]
 8000cd8:	6978      	ldr	r0, [r7, #20]
 8000cda:	f7ff ff91 	bl	8000c00 <NVIC_EncodePriority>
 8000cde:	4602      	mov	r2, r0
 8000ce0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ce4:	4611      	mov	r1, r2
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f7ff ff60 	bl	8000bac <__NVIC_SetPriority>
}
 8000cec:	bf00      	nop
 8000cee:	3718      	adds	r7, #24
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	0800aeb4 	.word	0x0800aeb4

08000cf8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	4603      	mov	r3, r0
 8000d00:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8000d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	da03      	bge.n	8000d12 <HAL_NVIC_EnableIRQ+0x1a>
 8000d0a:	21be      	movs	r1, #190	; 0xbe
 8000d0c:	4805      	ldr	r0, [pc, #20]	; (8000d24 <HAL_NVIC_EnableIRQ+0x2c>)
 8000d0e:	f7ff fc31 	bl	8000574 <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d16:	4618      	mov	r0, r3
 8000d18:	f7ff ff2c 	bl	8000b74 <__NVIC_EnableIRQ>
}
 8000d1c:	bf00      	nop
 8000d1e:	3708      	adds	r7, #8
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	0800aeb4 	.word	0x0800aeb4

08000d28 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b084      	sub	sp, #16
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000d30:	2300      	movs	r3, #0
 8000d32:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d101      	bne.n	8000d3e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	e0da      	b.n	8000ef4 <HAL_DMA_Init+0x1cc>
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4a6e      	ldr	r2, [pc, #440]	; (8000efc <HAL_DMA_Init+0x1d4>)
 8000d44:	4293      	cmp	r3, r2
 8000d46:	d021      	beq.n	8000d8c <HAL_DMA_Init+0x64>
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a6c      	ldr	r2, [pc, #432]	; (8000f00 <HAL_DMA_Init+0x1d8>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d01c      	beq.n	8000d8c <HAL_DMA_Init+0x64>
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4a6b      	ldr	r2, [pc, #428]	; (8000f04 <HAL_DMA_Init+0x1dc>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d017      	beq.n	8000d8c <HAL_DMA_Init+0x64>
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a69      	ldr	r2, [pc, #420]	; (8000f08 <HAL_DMA_Init+0x1e0>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d012      	beq.n	8000d8c <HAL_DMA_Init+0x64>
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4a68      	ldr	r2, [pc, #416]	; (8000f0c <HAL_DMA_Init+0x1e4>)
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	d00d      	beq.n	8000d8c <HAL_DMA_Init+0x64>
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a66      	ldr	r2, [pc, #408]	; (8000f10 <HAL_DMA_Init+0x1e8>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d008      	beq.n	8000d8c <HAL_DMA_Init+0x64>
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	4a65      	ldr	r2, [pc, #404]	; (8000f14 <HAL_DMA_Init+0x1ec>)
 8000d80:	4293      	cmp	r3, r2
 8000d82:	d003      	beq.n	8000d8c <HAL_DMA_Init+0x64>
 8000d84:	219a      	movs	r1, #154	; 0x9a
 8000d86:	4864      	ldr	r0, [pc, #400]	; (8000f18 <HAL_DMA_Init+0x1f0>)
 8000d88:	f7ff fbf4 	bl	8000574 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d00c      	beq.n	8000dae <HAL_DMA_Init+0x86>
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	2b10      	cmp	r3, #16
 8000d9a:	d008      	beq.n	8000dae <HAL_DMA_Init+0x86>
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000da4:	d003      	beq.n	8000dae <HAL_DMA_Init+0x86>
 8000da6:	219b      	movs	r1, #155	; 0x9b
 8000da8:	485b      	ldr	r0, [pc, #364]	; (8000f18 <HAL_DMA_Init+0x1f0>)
 8000daa:	f7ff fbe3 	bl	8000574 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	689b      	ldr	r3, [r3, #8]
 8000db2:	2b40      	cmp	r3, #64	; 0x40
 8000db4:	d007      	beq.n	8000dc6 <HAL_DMA_Init+0x9e>
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	689b      	ldr	r3, [r3, #8]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d003      	beq.n	8000dc6 <HAL_DMA_Init+0x9e>
 8000dbe:	219c      	movs	r1, #156	; 0x9c
 8000dc0:	4855      	ldr	r0, [pc, #340]	; (8000f18 <HAL_DMA_Init+0x1f0>)
 8000dc2:	f7ff fbd7 	bl	8000574 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	68db      	ldr	r3, [r3, #12]
 8000dca:	2b80      	cmp	r3, #128	; 0x80
 8000dcc:	d007      	beq.n	8000dde <HAL_DMA_Init+0xb6>
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	68db      	ldr	r3, [r3, #12]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d003      	beq.n	8000dde <HAL_DMA_Init+0xb6>
 8000dd6:	219d      	movs	r1, #157	; 0x9d
 8000dd8:	484f      	ldr	r0, [pc, #316]	; (8000f18 <HAL_DMA_Init+0x1f0>)
 8000dda:	f7ff fbcb 	bl	8000574 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	691b      	ldr	r3, [r3, #16]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d00d      	beq.n	8000e02 <HAL_DMA_Init+0xda>
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	691b      	ldr	r3, [r3, #16]
 8000dea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000dee:	d008      	beq.n	8000e02 <HAL_DMA_Init+0xda>
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	691b      	ldr	r3, [r3, #16]
 8000df4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000df8:	d003      	beq.n	8000e02 <HAL_DMA_Init+0xda>
 8000dfa:	219e      	movs	r1, #158	; 0x9e
 8000dfc:	4846      	ldr	r0, [pc, #280]	; (8000f18 <HAL_DMA_Init+0x1f0>)
 8000dfe:	f7ff fbb9 	bl	8000574 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	695b      	ldr	r3, [r3, #20]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d00d      	beq.n	8000e26 <HAL_DMA_Init+0xfe>
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	695b      	ldr	r3, [r3, #20]
 8000e0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e12:	d008      	beq.n	8000e26 <HAL_DMA_Init+0xfe>
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	695b      	ldr	r3, [r3, #20]
 8000e18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000e1c:	d003      	beq.n	8000e26 <HAL_DMA_Init+0xfe>
 8000e1e:	219f      	movs	r1, #159	; 0x9f
 8000e20:	483d      	ldr	r0, [pc, #244]	; (8000f18 <HAL_DMA_Init+0x1f0>)
 8000e22:	f7ff fba7 	bl	8000574 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	699b      	ldr	r3, [r3, #24]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d007      	beq.n	8000e3e <HAL_DMA_Init+0x116>
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	699b      	ldr	r3, [r3, #24]
 8000e32:	2b20      	cmp	r3, #32
 8000e34:	d003      	beq.n	8000e3e <HAL_DMA_Init+0x116>
 8000e36:	21a0      	movs	r1, #160	; 0xa0
 8000e38:	4837      	ldr	r0, [pc, #220]	; (8000f18 <HAL_DMA_Init+0x1f0>)
 8000e3a:	f7ff fb9b 	bl	8000574 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	69db      	ldr	r3, [r3, #28]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d012      	beq.n	8000e6c <HAL_DMA_Init+0x144>
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	69db      	ldr	r3, [r3, #28]
 8000e4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000e4e:	d00d      	beq.n	8000e6c <HAL_DMA_Init+0x144>
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	69db      	ldr	r3, [r3, #28]
 8000e54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000e58:	d008      	beq.n	8000e6c <HAL_DMA_Init+0x144>
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	69db      	ldr	r3, [r3, #28]
 8000e5e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8000e62:	d003      	beq.n	8000e6c <HAL_DMA_Init+0x144>
 8000e64:	21a1      	movs	r1, #161	; 0xa1
 8000e66:	482c      	ldr	r0, [pc, #176]	; (8000f18 <HAL_DMA_Init+0x1f0>)
 8000e68:	f7ff fb84 	bl	8000574 <assert_failed>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	461a      	mov	r2, r3
 8000e72:	4b2a      	ldr	r3, [pc, #168]	; (8000f1c <HAL_DMA_Init+0x1f4>)
 8000e74:	4413      	add	r3, r2
 8000e76:	4a2a      	ldr	r2, [pc, #168]	; (8000f20 <HAL_DMA_Init+0x1f8>)
 8000e78:	fba2 2303 	umull	r2, r3, r2, r3
 8000e7c:	091b      	lsrs	r3, r3, #4
 8000e7e:	009a      	lsls	r2, r3, #2
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	4a27      	ldr	r2, [pc, #156]	; (8000f24 <HAL_DMA_Init+0x1fc>)
 8000e88:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	2202      	movs	r2, #2
 8000e8e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000ea0:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000ea4:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000eae:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	68db      	ldr	r3, [r3, #12]
 8000eb4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000eba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	695b      	ldr	r3, [r3, #20]
 8000ec0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ec6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	69db      	ldr	r3, [r3, #28]
 8000ecc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000ece:	68fa      	ldr	r2, [r7, #12]
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	68fa      	ldr	r2, [r7, #12]
 8000eda:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2200      	movs	r2, #0
 8000ee0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2200      	movs	r2, #0
 8000eee:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000ef2:	2300      	movs	r3, #0
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	3710      	adds	r7, #16
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	40020008 	.word	0x40020008
 8000f00:	4002001c 	.word	0x4002001c
 8000f04:	40020030 	.word	0x40020030
 8000f08:	40020044 	.word	0x40020044
 8000f0c:	40020058 	.word	0x40020058
 8000f10:	4002006c 	.word	0x4002006c
 8000f14:	40020080 	.word	0x40020080
 8000f18:	0800aef0 	.word	0x0800aef0
 8000f1c:	bffdfff8 	.word	0xbffdfff8
 8000f20:	cccccccd 	.word	0xcccccccd
 8000f24:	40020000 	.word	0x40020000

08000f28 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b086      	sub	sp, #24
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	60f8      	str	r0, [r7, #12]
 8000f30:	60b9      	str	r1, [r7, #8]
 8000f32:	607a      	str	r2, [r7, #4]
 8000f34:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000f36:	2300      	movs	r3, #0
 8000f38:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d003      	beq.n	8000f48 <HAL_DMA_Start_IT+0x20>
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f46:	d304      	bcc.n	8000f52 <HAL_DMA_Start_IT+0x2a>
 8000f48:	f240 116f 	movw	r1, #367	; 0x16f
 8000f4c:	482c      	ldr	r0, [pc, #176]	; (8001000 <HAL_DMA_Start_IT+0xd8>)
 8000f4e:	f7ff fb11 	bl	8000574 <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdma);
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d101      	bne.n	8000f60 <HAL_DMA_Start_IT+0x38>
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	e04a      	b.n	8000ff6 <HAL_DMA_Start_IT+0xce>
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	2201      	movs	r2, #1
 8000f64:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	d13a      	bne.n	8000fe8 <HAL_DMA_Start_IT+0xc0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	2202      	movs	r2, #2
 8000f76:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	68fa      	ldr	r2, [r7, #12]
 8000f86:	6812      	ldr	r2, [r2, #0]
 8000f88:	6812      	ldr	r2, [r2, #0]
 8000f8a:	f022 0201 	bic.w	r2, r2, #1
 8000f8e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	687a      	ldr	r2, [r7, #4]
 8000f94:	68b9      	ldr	r1, [r7, #8]
 8000f96:	68f8      	ldr	r0, [r7, #12]
 8000f98:	f000 f9fc 	bl	8001394 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d008      	beq.n	8000fb6 <HAL_DMA_Start_IT+0x8e>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	68fa      	ldr	r2, [r7, #12]
 8000faa:	6812      	ldr	r2, [r2, #0]
 8000fac:	6812      	ldr	r2, [r2, #0]
 8000fae:	f042 020e 	orr.w	r2, r2, #14
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	e00f      	b.n	8000fd6 <HAL_DMA_Start_IT+0xae>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	68fa      	ldr	r2, [r7, #12]
 8000fbc:	6812      	ldr	r2, [r2, #0]
 8000fbe:	6812      	ldr	r2, [r2, #0]
 8000fc0:	f022 0204 	bic.w	r2, r2, #4
 8000fc4:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	68fa      	ldr	r2, [r7, #12]
 8000fcc:	6812      	ldr	r2, [r2, #0]
 8000fce:	6812      	ldr	r2, [r2, #0]
 8000fd0:	f042 020a 	orr.w	r2, r2, #10
 8000fd4:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	68fa      	ldr	r2, [r7, #12]
 8000fdc:	6812      	ldr	r2, [r2, #0]
 8000fde:	6812      	ldr	r2, [r2, #0]
 8000fe0:	f042 0201 	orr.w	r2, r2, #1
 8000fe4:	601a      	str	r2, [r3, #0]
 8000fe6:	e005      	b.n	8000ff4 <HAL_DMA_Start_IT+0xcc>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	2200      	movs	r2, #0
 8000fec:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8000ff4:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3718      	adds	r7, #24
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	0800aef0 	.word	0x0800aef0

08001004 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001004:	b480      	push	{r7}
 8001006:	b085      	sub	sp, #20
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800100c:	2300      	movs	r3, #0
 800100e:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001016:	2b02      	cmp	r3, #2
 8001018:	d008      	beq.n	800102c <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2204      	movs	r2, #4
 800101e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2200      	movs	r2, #0
 8001024:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001028:	2301      	movs	r3, #1
 800102a:	e020      	b.n	800106e <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	687a      	ldr	r2, [r7, #4]
 8001032:	6812      	ldr	r2, [r2, #0]
 8001034:	6812      	ldr	r2, [r2, #0]
 8001036:	f022 020e 	bic.w	r2, r2, #14
 800103a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	687a      	ldr	r2, [r7, #4]
 8001042:	6812      	ldr	r2, [r2, #0]
 8001044:	6812      	ldr	r2, [r2, #0]
 8001046:	f022 0201 	bic.w	r2, r2, #1
 800104a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001050:	687a      	ldr	r2, [r7, #4]
 8001052:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001054:	2101      	movs	r1, #1
 8001056:	fa01 f202 	lsl.w	r2, r1, r2
 800105a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2201      	movs	r2, #1
 8001060:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2200      	movs	r2, #0
 8001068:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800106c:	7bfb      	ldrb	r3, [r7, #15]
}
 800106e:	4618      	mov	r0, r3
 8001070:	3714      	adds	r7, #20
 8001072:	46bd      	mov	sp, r7
 8001074:	bc80      	pop	{r7}
 8001076:	4770      	bx	lr

08001078 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001080:	2300      	movs	r3, #0
 8001082:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800108a:	2b02      	cmp	r3, #2
 800108c:	d005      	beq.n	800109a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2204      	movs	r2, #4
 8001092:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001094:	2301      	movs	r3, #1
 8001096:	73fb      	strb	r3, [r7, #15]
 8001098:	e057      	b.n	800114a <HAL_DMA_Abort_IT+0xd2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	687a      	ldr	r2, [r7, #4]
 80010a0:	6812      	ldr	r2, [r2, #0]
 80010a2:	6812      	ldr	r2, [r2, #0]
 80010a4:	f022 020e 	bic.w	r2, r2, #14
 80010a8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	687a      	ldr	r2, [r7, #4]
 80010b0:	6812      	ldr	r2, [r2, #0]
 80010b2:	6812      	ldr	r2, [r2, #0]
 80010b4:	f022 0201 	bic.w	r2, r2, #1
 80010b8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80010ba:	4a26      	ldr	r2, [pc, #152]	; (8001154 <HAL_DMA_Abort_IT+0xdc>)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4619      	mov	r1, r3
 80010c2:	4b25      	ldr	r3, [pc, #148]	; (8001158 <HAL_DMA_Abort_IT+0xe0>)
 80010c4:	4299      	cmp	r1, r3
 80010c6:	d02e      	beq.n	8001126 <HAL_DMA_Abort_IT+0xae>
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4619      	mov	r1, r3
 80010ce:	4b23      	ldr	r3, [pc, #140]	; (800115c <HAL_DMA_Abort_IT+0xe4>)
 80010d0:	4299      	cmp	r1, r3
 80010d2:	d026      	beq.n	8001122 <HAL_DMA_Abort_IT+0xaa>
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4619      	mov	r1, r3
 80010da:	4b21      	ldr	r3, [pc, #132]	; (8001160 <HAL_DMA_Abort_IT+0xe8>)
 80010dc:	4299      	cmp	r1, r3
 80010de:	d01d      	beq.n	800111c <HAL_DMA_Abort_IT+0xa4>
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4619      	mov	r1, r3
 80010e6:	4b1f      	ldr	r3, [pc, #124]	; (8001164 <HAL_DMA_Abort_IT+0xec>)
 80010e8:	4299      	cmp	r1, r3
 80010ea:	d014      	beq.n	8001116 <HAL_DMA_Abort_IT+0x9e>
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4619      	mov	r1, r3
 80010f2:	4b1d      	ldr	r3, [pc, #116]	; (8001168 <HAL_DMA_Abort_IT+0xf0>)
 80010f4:	4299      	cmp	r1, r3
 80010f6:	d00b      	beq.n	8001110 <HAL_DMA_Abort_IT+0x98>
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4619      	mov	r1, r3
 80010fe:	4b1b      	ldr	r3, [pc, #108]	; (800116c <HAL_DMA_Abort_IT+0xf4>)
 8001100:	4299      	cmp	r1, r3
 8001102:	d102      	bne.n	800110a <HAL_DMA_Abort_IT+0x92>
 8001104:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001108:	e00e      	b.n	8001128 <HAL_DMA_Abort_IT+0xb0>
 800110a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800110e:	e00b      	b.n	8001128 <HAL_DMA_Abort_IT+0xb0>
 8001110:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001114:	e008      	b.n	8001128 <HAL_DMA_Abort_IT+0xb0>
 8001116:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800111a:	e005      	b.n	8001128 <HAL_DMA_Abort_IT+0xb0>
 800111c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001120:	e002      	b.n	8001128 <HAL_DMA_Abort_IT+0xb0>
 8001122:	2310      	movs	r3, #16
 8001124:	e000      	b.n	8001128 <HAL_DMA_Abort_IT+0xb0>
 8001126:	2301      	movs	r3, #1
 8001128:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2201      	movs	r2, #1
 800112e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2200      	movs	r2, #0
 8001136:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800113e:	2b00      	cmp	r3, #0
 8001140:	d003      	beq.n	800114a <HAL_DMA_Abort_IT+0xd2>
    {
      hdma->XferAbortCallback(hdma);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	4798      	blx	r3
    } 
  }
  return status;
 800114a:	7bfb      	ldrb	r3, [r7, #15]
}
 800114c:	4618      	mov	r0, r3
 800114e:	3710      	adds	r7, #16
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	40020000 	.word	0x40020000
 8001158:	40020008 	.word	0x40020008
 800115c:	4002001c 	.word	0x4002001c
 8001160:	40020030 	.word	0x40020030
 8001164:	40020044 	.word	0x40020044
 8001168:	40020058 	.word	0x40020058
 800116c:	4002006c 	.word	0x4002006c

08001170 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118c:	2204      	movs	r2, #4
 800118e:	409a      	lsls	r2, r3
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	4013      	ands	r3, r2
 8001194:	2b00      	cmp	r3, #0
 8001196:	d055      	beq.n	8001244 <HAL_DMA_IRQHandler+0xd4>
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	f003 0304 	and.w	r3, r3, #4
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d050      	beq.n	8001244 <HAL_DMA_IRQHandler+0xd4>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f003 0320 	and.w	r3, r3, #32
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d107      	bne.n	80011c0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	687a      	ldr	r2, [r7, #4]
 80011b6:	6812      	ldr	r2, [r2, #0]
 80011b8:	6812      	ldr	r2, [r2, #0]
 80011ba:	f022 0204 	bic.w	r2, r2, #4
 80011be:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80011c0:	4a6d      	ldr	r2, [pc, #436]	; (8001378 <HAL_DMA_IRQHandler+0x208>)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4619      	mov	r1, r3
 80011c8:	4b6c      	ldr	r3, [pc, #432]	; (800137c <HAL_DMA_IRQHandler+0x20c>)
 80011ca:	4299      	cmp	r1, r3
 80011cc:	d02e      	beq.n	800122c <HAL_DMA_IRQHandler+0xbc>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4619      	mov	r1, r3
 80011d4:	4b6a      	ldr	r3, [pc, #424]	; (8001380 <HAL_DMA_IRQHandler+0x210>)
 80011d6:	4299      	cmp	r1, r3
 80011d8:	d026      	beq.n	8001228 <HAL_DMA_IRQHandler+0xb8>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4619      	mov	r1, r3
 80011e0:	4b68      	ldr	r3, [pc, #416]	; (8001384 <HAL_DMA_IRQHandler+0x214>)
 80011e2:	4299      	cmp	r1, r3
 80011e4:	d01d      	beq.n	8001222 <HAL_DMA_IRQHandler+0xb2>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4619      	mov	r1, r3
 80011ec:	4b66      	ldr	r3, [pc, #408]	; (8001388 <HAL_DMA_IRQHandler+0x218>)
 80011ee:	4299      	cmp	r1, r3
 80011f0:	d014      	beq.n	800121c <HAL_DMA_IRQHandler+0xac>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4619      	mov	r1, r3
 80011f8:	4b64      	ldr	r3, [pc, #400]	; (800138c <HAL_DMA_IRQHandler+0x21c>)
 80011fa:	4299      	cmp	r1, r3
 80011fc:	d00b      	beq.n	8001216 <HAL_DMA_IRQHandler+0xa6>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4619      	mov	r1, r3
 8001204:	4b62      	ldr	r3, [pc, #392]	; (8001390 <HAL_DMA_IRQHandler+0x220>)
 8001206:	4299      	cmp	r1, r3
 8001208:	d102      	bne.n	8001210 <HAL_DMA_IRQHandler+0xa0>
 800120a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800120e:	e00e      	b.n	800122e <HAL_DMA_IRQHandler+0xbe>
 8001210:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001214:	e00b      	b.n	800122e <HAL_DMA_IRQHandler+0xbe>
 8001216:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800121a:	e008      	b.n	800122e <HAL_DMA_IRQHandler+0xbe>
 800121c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001220:	e005      	b.n	800122e <HAL_DMA_IRQHandler+0xbe>
 8001222:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001226:	e002      	b.n	800122e <HAL_DMA_IRQHandler+0xbe>
 8001228:	2340      	movs	r3, #64	; 0x40
 800122a:	e000      	b.n	800122e <HAL_DMA_IRQHandler+0xbe>
 800122c:	2304      	movs	r3, #4
 800122e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001234:	2b00      	cmp	r3, #0
 8001236:	f000 809a 	beq.w	800136e <HAL_DMA_IRQHandler+0x1fe>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001242:	e094      	b.n	800136e <HAL_DMA_IRQHandler+0x1fe>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001248:	2202      	movs	r2, #2
 800124a:	409a      	lsls	r2, r3
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	4013      	ands	r3, r2
 8001250:	2b00      	cmp	r3, #0
 8001252:	d05c      	beq.n	800130e <HAL_DMA_IRQHandler+0x19e>
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	f003 0302 	and.w	r3, r3, #2
 800125a:	2b00      	cmp	r3, #0
 800125c:	d057      	beq.n	800130e <HAL_DMA_IRQHandler+0x19e>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f003 0320 	and.w	r3, r3, #32
 8001268:	2b00      	cmp	r3, #0
 800126a:	d10b      	bne.n	8001284 <HAL_DMA_IRQHandler+0x114>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	687a      	ldr	r2, [r7, #4]
 8001272:	6812      	ldr	r2, [r2, #0]
 8001274:	6812      	ldr	r2, [r2, #0]
 8001276:	f022 020a 	bic.w	r2, r2, #10
 800127a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2201      	movs	r2, #1
 8001280:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001284:	4a3c      	ldr	r2, [pc, #240]	; (8001378 <HAL_DMA_IRQHandler+0x208>)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4619      	mov	r1, r3
 800128c:	4b3b      	ldr	r3, [pc, #236]	; (800137c <HAL_DMA_IRQHandler+0x20c>)
 800128e:	4299      	cmp	r1, r3
 8001290:	d02e      	beq.n	80012f0 <HAL_DMA_IRQHandler+0x180>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4619      	mov	r1, r3
 8001298:	4b39      	ldr	r3, [pc, #228]	; (8001380 <HAL_DMA_IRQHandler+0x210>)
 800129a:	4299      	cmp	r1, r3
 800129c:	d026      	beq.n	80012ec <HAL_DMA_IRQHandler+0x17c>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4619      	mov	r1, r3
 80012a4:	4b37      	ldr	r3, [pc, #220]	; (8001384 <HAL_DMA_IRQHandler+0x214>)
 80012a6:	4299      	cmp	r1, r3
 80012a8:	d01d      	beq.n	80012e6 <HAL_DMA_IRQHandler+0x176>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4619      	mov	r1, r3
 80012b0:	4b35      	ldr	r3, [pc, #212]	; (8001388 <HAL_DMA_IRQHandler+0x218>)
 80012b2:	4299      	cmp	r1, r3
 80012b4:	d014      	beq.n	80012e0 <HAL_DMA_IRQHandler+0x170>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4619      	mov	r1, r3
 80012bc:	4b33      	ldr	r3, [pc, #204]	; (800138c <HAL_DMA_IRQHandler+0x21c>)
 80012be:	4299      	cmp	r1, r3
 80012c0:	d00b      	beq.n	80012da <HAL_DMA_IRQHandler+0x16a>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4619      	mov	r1, r3
 80012c8:	4b31      	ldr	r3, [pc, #196]	; (8001390 <HAL_DMA_IRQHandler+0x220>)
 80012ca:	4299      	cmp	r1, r3
 80012cc:	d102      	bne.n	80012d4 <HAL_DMA_IRQHandler+0x164>
 80012ce:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80012d2:	e00e      	b.n	80012f2 <HAL_DMA_IRQHandler+0x182>
 80012d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80012d8:	e00b      	b.n	80012f2 <HAL_DMA_IRQHandler+0x182>
 80012da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012de:	e008      	b.n	80012f2 <HAL_DMA_IRQHandler+0x182>
 80012e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012e4:	e005      	b.n	80012f2 <HAL_DMA_IRQHandler+0x182>
 80012e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012ea:	e002      	b.n	80012f2 <HAL_DMA_IRQHandler+0x182>
 80012ec:	2320      	movs	r3, #32
 80012ee:	e000      	b.n	80012f2 <HAL_DMA_IRQHandler+0x182>
 80012f0:	2302      	movs	r3, #2
 80012f2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2200      	movs	r2, #0
 80012f8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001300:	2b00      	cmp	r3, #0
 8001302:	d034      	beq.n	800136e <HAL_DMA_IRQHandler+0x1fe>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001308:	6878      	ldr	r0, [r7, #4]
 800130a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800130c:	e02f      	b.n	800136e <HAL_DMA_IRQHandler+0x1fe>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001312:	2208      	movs	r2, #8
 8001314:	409a      	lsls	r2, r3
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	4013      	ands	r3, r2
 800131a:	2b00      	cmp	r3, #0
 800131c:	d028      	beq.n	8001370 <HAL_DMA_IRQHandler+0x200>
 800131e:	68bb      	ldr	r3, [r7, #8]
 8001320:	f003 0308 	and.w	r3, r3, #8
 8001324:	2b00      	cmp	r3, #0
 8001326:	d023      	beq.n	8001370 <HAL_DMA_IRQHandler+0x200>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	687a      	ldr	r2, [r7, #4]
 800132e:	6812      	ldr	r2, [r2, #0]
 8001330:	6812      	ldr	r2, [r2, #0]
 8001332:	f022 020e 	bic.w	r2, r2, #14
 8001336:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800133c:	687a      	ldr	r2, [r7, #4]
 800133e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001340:	2101      	movs	r1, #1
 8001342:	fa01 f202 	lsl.w	r2, r1, r2
 8001346:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2201      	movs	r2, #1
 800134c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2201      	movs	r2, #1
 8001352:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2200      	movs	r2, #0
 800135a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001362:	2b00      	cmp	r3, #0
 8001364:	d004      	beq.n	8001370 <HAL_DMA_IRQHandler+0x200>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	4798      	blx	r3
    }
  }
  return;
 800136e:	bf00      	nop
 8001370:	bf00      	nop
}
 8001372:	3710      	adds	r7, #16
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	40020000 	.word	0x40020000
 800137c:	40020008 	.word	0x40020008
 8001380:	4002001c 	.word	0x4002001c
 8001384:	40020030 	.word	0x40020030
 8001388:	40020044 	.word	0x40020044
 800138c:	40020058 	.word	0x40020058
 8001390:	4002006c 	.word	0x4002006c

08001394 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001394:	b480      	push	{r7}
 8001396:	b085      	sub	sp, #20
 8001398:	af00      	add	r7, sp, #0
 800139a:	60f8      	str	r0, [r7, #12]
 800139c:	60b9      	str	r1, [r7, #8]
 800139e:	607a      	str	r2, [r7, #4]
 80013a0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013a6:	68fa      	ldr	r2, [r7, #12]
 80013a8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80013aa:	2101      	movs	r1, #1
 80013ac:	fa01 f202 	lsl.w	r2, r1, r2
 80013b0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	683a      	ldr	r2, [r7, #0]
 80013b8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	2b10      	cmp	r3, #16
 80013c0:	d108      	bne.n	80013d4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	687a      	ldr	r2, [r7, #4]
 80013c8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	68ba      	ldr	r2, [r7, #8]
 80013d0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80013d2:	e007      	b.n	80013e4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	68ba      	ldr	r2, [r7, #8]
 80013da:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	687a      	ldr	r2, [r7, #4]
 80013e2:	60da      	str	r2, [r3, #12]
}
 80013e4:	bf00      	nop
 80013e6:	3714      	adds	r7, #20
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bc80      	pop	{r7}
 80013ec:	4770      	bx	lr
	...

080013f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b08a      	sub	sp, #40	; 0x28
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013fa:	2300      	movs	r3, #0
 80013fc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80013fe:	2300      	movs	r3, #0
 8001400:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset;       /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4a9c      	ldr	r2, [pc, #624]	; (8001678 <HAL_GPIO_Init+0x288>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d013      	beq.n	8001432 <HAL_GPIO_Init+0x42>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4a9b      	ldr	r2, [pc, #620]	; (800167c <HAL_GPIO_Init+0x28c>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d00f      	beq.n	8001432 <HAL_GPIO_Init+0x42>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4a9a      	ldr	r2, [pc, #616]	; (8001680 <HAL_GPIO_Init+0x290>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d00b      	beq.n	8001432 <HAL_GPIO_Init+0x42>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4a99      	ldr	r2, [pc, #612]	; (8001684 <HAL_GPIO_Init+0x294>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d007      	beq.n	8001432 <HAL_GPIO_Init+0x42>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4a98      	ldr	r2, [pc, #608]	; (8001688 <HAL_GPIO_Init+0x298>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d003      	beq.n	8001432 <HAL_GPIO_Init+0x42>
 800142a:	21bd      	movs	r1, #189	; 0xbd
 800142c:	4897      	ldr	r0, [pc, #604]	; (800168c <HAL_GPIO_Init+0x29c>)
 800142e:	f7ff f8a1 	bl	8000574 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	b29b      	uxth	r3, r3
 8001438:	2b00      	cmp	r3, #0
 800143a:	d005      	beq.n	8001448 <HAL_GPIO_Init+0x58>
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	0c1b      	lsrs	r3, r3, #16
 8001442:	041b      	lsls	r3, r3, #16
 8001444:	2b00      	cmp	r3, #0
 8001446:	d003      	beq.n	8001450 <HAL_GPIO_Init+0x60>
 8001448:	21be      	movs	r1, #190	; 0xbe
 800144a:	4890      	ldr	r0, [pc, #576]	; (800168c <HAL_GPIO_Init+0x29c>)
 800144c:	f7ff f892 	bl	8000574 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	2b00      	cmp	r3, #0
 8001456:	f000 81eb 	beq.w	8001830 <HAL_GPIO_Init+0x440>
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	2b01      	cmp	r3, #1
 8001460:	f000 81e6 	beq.w	8001830 <HAL_GPIO_Init+0x440>
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	2b11      	cmp	r3, #17
 800146a:	f000 81e1 	beq.w	8001830 <HAL_GPIO_Init+0x440>
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	2b02      	cmp	r3, #2
 8001474:	f000 81dc 	beq.w	8001830 <HAL_GPIO_Init+0x440>
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	2b12      	cmp	r3, #18
 800147e:	f000 81d7 	beq.w	8001830 <HAL_GPIO_Init+0x440>
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	4a82      	ldr	r2, [pc, #520]	; (8001690 <HAL_GPIO_Init+0x2a0>)
 8001488:	4293      	cmp	r3, r2
 800148a:	f000 81d1 	beq.w	8001830 <HAL_GPIO_Init+0x440>
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	4a80      	ldr	r2, [pc, #512]	; (8001694 <HAL_GPIO_Init+0x2a4>)
 8001494:	4293      	cmp	r3, r2
 8001496:	f000 81cb 	beq.w	8001830 <HAL_GPIO_Init+0x440>
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	4a7e      	ldr	r2, [pc, #504]	; (8001698 <HAL_GPIO_Init+0x2a8>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	f000 81c5 	beq.w	8001830 <HAL_GPIO_Init+0x440>
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	4a7c      	ldr	r2, [pc, #496]	; (800169c <HAL_GPIO_Init+0x2ac>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	f000 81bf 	beq.w	8001830 <HAL_GPIO_Init+0x440>
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	4a7a      	ldr	r2, [pc, #488]	; (80016a0 <HAL_GPIO_Init+0x2b0>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	f000 81b9 	beq.w	8001830 <HAL_GPIO_Init+0x440>
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	4a78      	ldr	r2, [pc, #480]	; (80016a4 <HAL_GPIO_Init+0x2b4>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	f000 81b3 	beq.w	8001830 <HAL_GPIO_Init+0x440>
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	2b03      	cmp	r3, #3
 80014d0:	f000 81ae 	beq.w	8001830 <HAL_GPIO_Init+0x440>
 80014d4:	21bf      	movs	r1, #191	; 0xbf
 80014d6:	486d      	ldr	r0, [pc, #436]	; (800168c <HAL_GPIO_Init+0x29c>)
 80014d8:	f7ff f84c 	bl	8000574 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014dc:	e1a8      	b.n	8001830 <HAL_GPIO_Init+0x440>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80014de:	2201      	movs	r2, #1
 80014e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e2:	fa02 f303 	lsl.w	r3, r2, r3
 80014e6:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	69fb      	ldr	r3, [r7, #28]
 80014ee:	4013      	ands	r3, r2
 80014f0:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80014f2:	69ba      	ldr	r2, [r7, #24]
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	429a      	cmp	r2, r3
 80014f8:	f040 8197 	bne.w	800182a <HAL_GPIO_Init+0x43a>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	4a5e      	ldr	r2, [pc, #376]	; (8001678 <HAL_GPIO_Init+0x288>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d013      	beq.n	800152c <HAL_GPIO_Init+0x13c>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	4a5d      	ldr	r2, [pc, #372]	; (800167c <HAL_GPIO_Init+0x28c>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d00f      	beq.n	800152c <HAL_GPIO_Init+0x13c>
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	4a5c      	ldr	r2, [pc, #368]	; (8001680 <HAL_GPIO_Init+0x290>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d00b      	beq.n	800152c <HAL_GPIO_Init+0x13c>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	4a5b      	ldr	r2, [pc, #364]	; (8001684 <HAL_GPIO_Init+0x294>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d007      	beq.n	800152c <HAL_GPIO_Init+0x13c>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	4a5a      	ldr	r2, [pc, #360]	; (8001688 <HAL_GPIO_Init+0x298>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d003      	beq.n	800152c <HAL_GPIO_Init+0x13c>
 8001524:	21cd      	movs	r1, #205	; 0xcd
 8001526:	4859      	ldr	r0, [pc, #356]	; (800168c <HAL_GPIO_Init+0x29c>)
 8001528:	f7ff f824 	bl	8000574 <assert_failed>

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	2b12      	cmp	r3, #18
 8001532:	d065      	beq.n	8001600 <HAL_GPIO_Init+0x210>
 8001534:	2b12      	cmp	r3, #18
 8001536:	d80e      	bhi.n	8001556 <HAL_GPIO_Init+0x166>
 8001538:	2b02      	cmp	r3, #2
 800153a:	d04c      	beq.n	80015d6 <HAL_GPIO_Init+0x1e6>
 800153c:	2b02      	cmp	r3, #2
 800153e:	d804      	bhi.n	800154a <HAL_GPIO_Init+0x15a>
 8001540:	2b00      	cmp	r3, #0
 8001542:	d072      	beq.n	800162a <HAL_GPIO_Init+0x23a>
 8001544:	2b01      	cmp	r3, #1
 8001546:	d01d      	beq.n	8001584 <HAL_GPIO_Init+0x194>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001548:	e0b1      	b.n	80016ae <HAL_GPIO_Init+0x2be>
      switch (GPIO_Init->Mode)
 800154a:	2b03      	cmp	r3, #3
 800154c:	f000 80ac 	beq.w	80016a8 <HAL_GPIO_Init+0x2b8>
 8001550:	2b11      	cmp	r3, #17
 8001552:	d02b      	beq.n	80015ac <HAL_GPIO_Init+0x1bc>
          break;
 8001554:	e0ab      	b.n	80016ae <HAL_GPIO_Init+0x2be>
      switch (GPIO_Init->Mode)
 8001556:	4a4f      	ldr	r2, [pc, #316]	; (8001694 <HAL_GPIO_Init+0x2a4>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d066      	beq.n	800162a <HAL_GPIO_Init+0x23a>
 800155c:	4a4d      	ldr	r2, [pc, #308]	; (8001694 <HAL_GPIO_Init+0x2a4>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d806      	bhi.n	8001570 <HAL_GPIO_Init+0x180>
 8001562:	4a4b      	ldr	r2, [pc, #300]	; (8001690 <HAL_GPIO_Init+0x2a0>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d060      	beq.n	800162a <HAL_GPIO_Init+0x23a>
 8001568:	4a4c      	ldr	r2, [pc, #304]	; (800169c <HAL_GPIO_Init+0x2ac>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d05d      	beq.n	800162a <HAL_GPIO_Init+0x23a>
          break;
 800156e:	e09e      	b.n	80016ae <HAL_GPIO_Init+0x2be>
      switch (GPIO_Init->Mode)
 8001570:	4a49      	ldr	r2, [pc, #292]	; (8001698 <HAL_GPIO_Init+0x2a8>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d059      	beq.n	800162a <HAL_GPIO_Init+0x23a>
 8001576:	4a4b      	ldr	r2, [pc, #300]	; (80016a4 <HAL_GPIO_Init+0x2b4>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d056      	beq.n	800162a <HAL_GPIO_Init+0x23a>
 800157c:	4a48      	ldr	r2, [pc, #288]	; (80016a0 <HAL_GPIO_Init+0x2b0>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d053      	beq.n	800162a <HAL_GPIO_Init+0x23a>
          break;
 8001582:	e094      	b.n	80016ae <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	2b02      	cmp	r3, #2
 800158a:	d00b      	beq.n	80015a4 <HAL_GPIO_Init+0x1b4>
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	2b01      	cmp	r3, #1
 8001592:	d007      	beq.n	80015a4 <HAL_GPIO_Init+0x1b4>
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	2b03      	cmp	r3, #3
 800159a:	d003      	beq.n	80015a4 <HAL_GPIO_Init+0x1b4>
 800159c:	21d5      	movs	r1, #213	; 0xd5
 800159e:	483b      	ldr	r0, [pc, #236]	; (800168c <HAL_GPIO_Init+0x29c>)
 80015a0:	f7fe ffe8 	bl	8000574 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	623b      	str	r3, [r7, #32]
          break;
 80015aa:	e080      	b.n	80016ae <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	2b02      	cmp	r3, #2
 80015b2:	d00b      	beq.n	80015cc <HAL_GPIO_Init+0x1dc>
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d007      	beq.n	80015cc <HAL_GPIO_Init+0x1dc>
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	2b03      	cmp	r3, #3
 80015c2:	d003      	beq.n	80015cc <HAL_GPIO_Init+0x1dc>
 80015c4:	21dc      	movs	r1, #220	; 0xdc
 80015c6:	4831      	ldr	r0, [pc, #196]	; (800168c <HAL_GPIO_Init+0x29c>)
 80015c8:	f7fe ffd4 	bl	8000574 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	3304      	adds	r3, #4
 80015d2:	623b      	str	r3, [r7, #32]
          break;
 80015d4:	e06b      	b.n	80016ae <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	68db      	ldr	r3, [r3, #12]
 80015da:	2b02      	cmp	r3, #2
 80015dc:	d00b      	beq.n	80015f6 <HAL_GPIO_Init+0x206>
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	68db      	ldr	r3, [r3, #12]
 80015e2:	2b01      	cmp	r3, #1
 80015e4:	d007      	beq.n	80015f6 <HAL_GPIO_Init+0x206>
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	68db      	ldr	r3, [r3, #12]
 80015ea:	2b03      	cmp	r3, #3
 80015ec:	d003      	beq.n	80015f6 <HAL_GPIO_Init+0x206>
 80015ee:	21e3      	movs	r1, #227	; 0xe3
 80015f0:	4826      	ldr	r0, [pc, #152]	; (800168c <HAL_GPIO_Init+0x29c>)
 80015f2:	f7fe ffbf 	bl	8000574 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	68db      	ldr	r3, [r3, #12]
 80015fa:	3308      	adds	r3, #8
 80015fc:	623b      	str	r3, [r7, #32]
          break;
 80015fe:	e056      	b.n	80016ae <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	2b02      	cmp	r3, #2
 8001606:	d00b      	beq.n	8001620 <HAL_GPIO_Init+0x230>
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	2b01      	cmp	r3, #1
 800160e:	d007      	beq.n	8001620 <HAL_GPIO_Init+0x230>
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	2b03      	cmp	r3, #3
 8001616:	d003      	beq.n	8001620 <HAL_GPIO_Init+0x230>
 8001618:	21ea      	movs	r1, #234	; 0xea
 800161a:	481c      	ldr	r0, [pc, #112]	; (800168c <HAL_GPIO_Init+0x29c>)
 800161c:	f7fe ffaa 	bl	8000574 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	330c      	adds	r3, #12
 8001626:	623b      	str	r3, [r7, #32]
          break;
 8001628:	e041      	b.n	80016ae <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d00b      	beq.n	800164a <HAL_GPIO_Init+0x25a>
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	2b01      	cmp	r3, #1
 8001638:	d007      	beq.n	800164a <HAL_GPIO_Init+0x25a>
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	2b02      	cmp	r3, #2
 8001640:	d003      	beq.n	800164a <HAL_GPIO_Init+0x25a>
 8001642:	21f7      	movs	r1, #247	; 0xf7
 8001644:	4811      	ldr	r0, [pc, #68]	; (800168c <HAL_GPIO_Init+0x29c>)
 8001646:	f7fe ff95 	bl	8000574 <assert_failed>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d102      	bne.n	8001658 <HAL_GPIO_Init+0x268>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001652:	2304      	movs	r3, #4
 8001654:	623b      	str	r3, [r7, #32]
          break;
 8001656:	e02a      	b.n	80016ae <HAL_GPIO_Init+0x2be>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	2b01      	cmp	r3, #1
 800165e:	d105      	bne.n	800166c <HAL_GPIO_Init+0x27c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001660:	2308      	movs	r3, #8
 8001662:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	69fa      	ldr	r2, [r7, #28]
 8001668:	611a      	str	r2, [r3, #16]
          break;
 800166a:	e020      	b.n	80016ae <HAL_GPIO_Init+0x2be>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800166c:	2308      	movs	r3, #8
 800166e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	69fa      	ldr	r2, [r7, #28]
 8001674:	615a      	str	r2, [r3, #20]
          break;
 8001676:	e01a      	b.n	80016ae <HAL_GPIO_Init+0x2be>
 8001678:	40010800 	.word	0x40010800
 800167c:	40010c00 	.word	0x40010c00
 8001680:	40011000 	.word	0x40011000
 8001684:	40011400 	.word	0x40011400
 8001688:	40011800 	.word	0x40011800
 800168c:	0800af28 	.word	0x0800af28
 8001690:	10110000 	.word	0x10110000
 8001694:	10210000 	.word	0x10210000
 8001698:	10310000 	.word	0x10310000
 800169c:	10120000 	.word	0x10120000
 80016a0:	10220000 	.word	0x10220000
 80016a4:	10320000 	.word	0x10320000
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80016a8:	2300      	movs	r3, #0
 80016aa:	623b      	str	r3, [r7, #32]
          break;
 80016ac:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80016ae:	69bb      	ldr	r3, [r7, #24]
 80016b0:	2bff      	cmp	r3, #255	; 0xff
 80016b2:	d801      	bhi.n	80016b8 <HAL_GPIO_Init+0x2c8>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	e001      	b.n	80016bc <HAL_GPIO_Init+0x2cc>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	3304      	adds	r3, #4
 80016bc:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80016be:	69bb      	ldr	r3, [r7, #24]
 80016c0:	2bff      	cmp	r3, #255	; 0xff
 80016c2:	d802      	bhi.n	80016ca <HAL_GPIO_Init+0x2da>
 80016c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	e002      	b.n	80016d0 <HAL_GPIO_Init+0x2e0>
 80016ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016cc:	3b08      	subs	r3, #8
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	210f      	movs	r1, #15
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	fa01 f303 	lsl.w	r3, r1, r3
 80016de:	43db      	mvns	r3, r3
 80016e0:	401a      	ands	r2, r3
 80016e2:	6a39      	ldr	r1, [r7, #32]
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	fa01 f303 	lsl.w	r3, r1, r3
 80016ea:	431a      	orrs	r2, r3
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	f000 8096 	beq.w	800182a <HAL_GPIO_Init+0x43a>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80016fe:	4a52      	ldr	r2, [pc, #328]	; (8001848 <HAL_GPIO_Init+0x458>)
 8001700:	4b51      	ldr	r3, [pc, #324]	; (8001848 <HAL_GPIO_Init+0x458>)
 8001702:	699b      	ldr	r3, [r3, #24]
 8001704:	f043 0301 	orr.w	r3, r3, #1
 8001708:	6193      	str	r3, [r2, #24]
 800170a:	4b4f      	ldr	r3, [pc, #316]	; (8001848 <HAL_GPIO_Init+0x458>)
 800170c:	699b      	ldr	r3, [r3, #24]
 800170e:	f003 0301 	and.w	r3, r3, #1
 8001712:	60bb      	str	r3, [r7, #8]
 8001714:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001716:	4a4d      	ldr	r2, [pc, #308]	; (800184c <HAL_GPIO_Init+0x45c>)
 8001718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800171a:	089b      	lsrs	r3, r3, #2
 800171c:	3302      	adds	r3, #2
 800171e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001722:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001726:	f003 0303 	and.w	r3, r3, #3
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	220f      	movs	r2, #15
 800172e:	fa02 f303 	lsl.w	r3, r2, r3
 8001732:	43db      	mvns	r3, r3
 8001734:	68fa      	ldr	r2, [r7, #12]
 8001736:	4013      	ands	r3, r2
 8001738:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4a44      	ldr	r2, [pc, #272]	; (8001850 <HAL_GPIO_Init+0x460>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d013      	beq.n	800176a <HAL_GPIO_Init+0x37a>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	4a43      	ldr	r2, [pc, #268]	; (8001854 <HAL_GPIO_Init+0x464>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d00d      	beq.n	8001766 <HAL_GPIO_Init+0x376>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4a42      	ldr	r2, [pc, #264]	; (8001858 <HAL_GPIO_Init+0x468>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d007      	beq.n	8001762 <HAL_GPIO_Init+0x372>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4a41      	ldr	r2, [pc, #260]	; (800185c <HAL_GPIO_Init+0x46c>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d101      	bne.n	800175e <HAL_GPIO_Init+0x36e>
 800175a:	2303      	movs	r3, #3
 800175c:	e006      	b.n	800176c <HAL_GPIO_Init+0x37c>
 800175e:	2304      	movs	r3, #4
 8001760:	e004      	b.n	800176c <HAL_GPIO_Init+0x37c>
 8001762:	2302      	movs	r3, #2
 8001764:	e002      	b.n	800176c <HAL_GPIO_Init+0x37c>
 8001766:	2301      	movs	r3, #1
 8001768:	e000      	b.n	800176c <HAL_GPIO_Init+0x37c>
 800176a:	2300      	movs	r3, #0
 800176c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800176e:	f002 0203 	and.w	r2, r2, #3
 8001772:	0092      	lsls	r2, r2, #2
 8001774:	4093      	lsls	r3, r2
 8001776:	68fa      	ldr	r2, [r7, #12]
 8001778:	4313      	orrs	r3, r2
 800177a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800177c:	4933      	ldr	r1, [pc, #204]	; (800184c <HAL_GPIO_Init+0x45c>)
 800177e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001780:	089b      	lsrs	r3, r3, #2
 8001782:	3302      	adds	r3, #2
 8001784:	68fa      	ldr	r2, [r7, #12]
 8001786:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d006      	beq.n	80017a4 <HAL_GPIO_Init+0x3b4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001796:	4932      	ldr	r1, [pc, #200]	; (8001860 <HAL_GPIO_Init+0x470>)
 8001798:	4b31      	ldr	r3, [pc, #196]	; (8001860 <HAL_GPIO_Init+0x470>)
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	69bb      	ldr	r3, [r7, #24]
 800179e:	4313      	orrs	r3, r2
 80017a0:	600b      	str	r3, [r1, #0]
 80017a2:	e006      	b.n	80017b2 <HAL_GPIO_Init+0x3c2>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80017a4:	492e      	ldr	r1, [pc, #184]	; (8001860 <HAL_GPIO_Init+0x470>)
 80017a6:	4b2e      	ldr	r3, [pc, #184]	; (8001860 <HAL_GPIO_Init+0x470>)
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	69bb      	ldr	r3, [r7, #24]
 80017ac:	43db      	mvns	r3, r3
 80017ae:	4013      	ands	r3, r2
 80017b0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d006      	beq.n	80017cc <HAL_GPIO_Init+0x3dc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80017be:	4928      	ldr	r1, [pc, #160]	; (8001860 <HAL_GPIO_Init+0x470>)
 80017c0:	4b27      	ldr	r3, [pc, #156]	; (8001860 <HAL_GPIO_Init+0x470>)
 80017c2:	685a      	ldr	r2, [r3, #4]
 80017c4:	69bb      	ldr	r3, [r7, #24]
 80017c6:	4313      	orrs	r3, r2
 80017c8:	604b      	str	r3, [r1, #4]
 80017ca:	e006      	b.n	80017da <HAL_GPIO_Init+0x3ea>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80017cc:	4924      	ldr	r1, [pc, #144]	; (8001860 <HAL_GPIO_Init+0x470>)
 80017ce:	4b24      	ldr	r3, [pc, #144]	; (8001860 <HAL_GPIO_Init+0x470>)
 80017d0:	685a      	ldr	r2, [r3, #4]
 80017d2:	69bb      	ldr	r3, [r7, #24]
 80017d4:	43db      	mvns	r3, r3
 80017d6:	4013      	ands	r3, r2
 80017d8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d006      	beq.n	80017f4 <HAL_GPIO_Init+0x404>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80017e6:	491e      	ldr	r1, [pc, #120]	; (8001860 <HAL_GPIO_Init+0x470>)
 80017e8:	4b1d      	ldr	r3, [pc, #116]	; (8001860 <HAL_GPIO_Init+0x470>)
 80017ea:	689a      	ldr	r2, [r3, #8]
 80017ec:	69bb      	ldr	r3, [r7, #24]
 80017ee:	4313      	orrs	r3, r2
 80017f0:	608b      	str	r3, [r1, #8]
 80017f2:	e006      	b.n	8001802 <HAL_GPIO_Init+0x412>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80017f4:	491a      	ldr	r1, [pc, #104]	; (8001860 <HAL_GPIO_Init+0x470>)
 80017f6:	4b1a      	ldr	r3, [pc, #104]	; (8001860 <HAL_GPIO_Init+0x470>)
 80017f8:	689a      	ldr	r2, [r3, #8]
 80017fa:	69bb      	ldr	r3, [r7, #24]
 80017fc:	43db      	mvns	r3, r3
 80017fe:	4013      	ands	r3, r2
 8001800:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d006      	beq.n	800181c <HAL_GPIO_Init+0x42c>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800180e:	4914      	ldr	r1, [pc, #80]	; (8001860 <HAL_GPIO_Init+0x470>)
 8001810:	4b13      	ldr	r3, [pc, #76]	; (8001860 <HAL_GPIO_Init+0x470>)
 8001812:	68da      	ldr	r2, [r3, #12]
 8001814:	69bb      	ldr	r3, [r7, #24]
 8001816:	4313      	orrs	r3, r2
 8001818:	60cb      	str	r3, [r1, #12]
 800181a:	e006      	b.n	800182a <HAL_GPIO_Init+0x43a>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800181c:	4910      	ldr	r1, [pc, #64]	; (8001860 <HAL_GPIO_Init+0x470>)
 800181e:	4b10      	ldr	r3, [pc, #64]	; (8001860 <HAL_GPIO_Init+0x470>)
 8001820:	68da      	ldr	r2, [r3, #12]
 8001822:	69bb      	ldr	r3, [r7, #24]
 8001824:	43db      	mvns	r3, r3
 8001826:	4013      	ands	r3, r2
 8001828:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800182a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182c:	3301      	adds	r3, #1
 800182e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001836:	fa22 f303 	lsr.w	r3, r2, r3
 800183a:	2b00      	cmp	r3, #0
 800183c:	f47f ae4f 	bne.w	80014de <HAL_GPIO_Init+0xee>
  }
}
 8001840:	bf00      	nop
 8001842:	3728      	adds	r7, #40	; 0x28
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	40021000 	.word	0x40021000
 800184c:	40010000 	.word	0x40010000
 8001850:	40010800 	.word	0x40010800
 8001854:	40010c00 	.word	0x40010c00
 8001858:	40011000 	.word	0x40011000
 800185c:	40011400 	.word	0x40011400
 8001860:	40010400 	.word	0x40010400

08001864 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	460b      	mov	r3, r1
 800186e:	807b      	strh	r3, [r7, #2]
 8001870:	4613      	mov	r3, r2
 8001872:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8001874:	887b      	ldrh	r3, [r7, #2]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d004      	beq.n	8001884 <HAL_GPIO_WritePin+0x20>
 800187a:	887b      	ldrh	r3, [r7, #2]
 800187c:	0c1b      	lsrs	r3, r3, #16
 800187e:	041b      	lsls	r3, r3, #16
 8001880:	2b00      	cmp	r3, #0
 8001882:	d004      	beq.n	800188e <HAL_GPIO_WritePin+0x2a>
 8001884:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8001888:	480e      	ldr	r0, [pc, #56]	; (80018c4 <HAL_GPIO_WritePin+0x60>)
 800188a:	f7fe fe73 	bl	8000574 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800188e:	787b      	ldrb	r3, [r7, #1]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d007      	beq.n	80018a4 <HAL_GPIO_WritePin+0x40>
 8001894:	787b      	ldrb	r3, [r7, #1]
 8001896:	2b01      	cmp	r3, #1
 8001898:	d004      	beq.n	80018a4 <HAL_GPIO_WritePin+0x40>
 800189a:	f240 11d5 	movw	r1, #469	; 0x1d5
 800189e:	4809      	ldr	r0, [pc, #36]	; (80018c4 <HAL_GPIO_WritePin+0x60>)
 80018a0:	f7fe fe68 	bl	8000574 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 80018a4:	787b      	ldrb	r3, [r7, #1]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d003      	beq.n	80018b2 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018aa:	887a      	ldrh	r2, [r7, #2]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80018b0:	e003      	b.n	80018ba <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80018b2:	887b      	ldrh	r3, [r7, #2]
 80018b4:	041a      	lsls	r2, r3, #16
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	611a      	str	r2, [r3, #16]
}
 80018ba:	bf00      	nop
 80018bc:	3708      	adds	r7, #8
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	0800af28 	.word	0x0800af28

080018c8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80018c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018ca:	b08b      	sub	sp, #44	; 0x2c
 80018cc:	af06      	add	r7, sp, #24
 80018ce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d101      	bne.n	80018da <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e106      	b.n	8001ae8 <HAL_PCD_Init+0x220>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a84      	ldr	r2, [pc, #528]	; (8001af0 <HAL_PCD_Init+0x228>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d003      	beq.n	80018ec <HAL_PCD_Init+0x24>
 80018e4:	218e      	movs	r1, #142	; 0x8e
 80018e6:	4883      	ldr	r0, [pc, #524]	; (8001af4 <HAL_PCD_Init+0x22c>)
 80018e8:	f7fe fe44 	bl	8000574 <assert_failed>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d106      	bne.n	8001906 <HAL_PCD_Init+0x3e>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2200      	movs	r2, #0
 80018fc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	f008 ff17 	bl	800a734 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2203      	movs	r2, #3
 800190a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4618      	mov	r0, r3
 8001914:	f003 fd66 	bl	80053e4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	603b      	str	r3, [r7, #0]
 800191e:	687e      	ldr	r6, [r7, #4]
 8001920:	466d      	mov	r5, sp
 8001922:	f106 0410 	add.w	r4, r6, #16
 8001926:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001928:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800192a:	6823      	ldr	r3, [r4, #0]
 800192c:	602b      	str	r3, [r5, #0]
 800192e:	1d33      	adds	r3, r6, #4
 8001930:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001932:	6838      	ldr	r0, [r7, #0]
 8001934:	f003 fd30 	bl	8005398 <USB_CoreInit>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d005      	beq.n	800194a <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2202      	movs	r2, #2
 8001942:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e0ce      	b.n	8001ae8 <HAL_PCD_Init+0x220>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	2100      	movs	r1, #0
 8001950:	4618      	mov	r0, r3
 8001952:	f003 fd61 	bl	8005418 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001956:	2300      	movs	r3, #0
 8001958:	73fb      	strb	r3, [r7, #15]
 800195a:	e04c      	b.n	80019f6 <HAL_PCD_Init+0x12e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800195c:	7bfb      	ldrb	r3, [r7, #15]
 800195e:	6879      	ldr	r1, [r7, #4]
 8001960:	1c5a      	adds	r2, r3, #1
 8001962:	4613      	mov	r3, r2
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	4413      	add	r3, r2
 8001968:	00db      	lsls	r3, r3, #3
 800196a:	440b      	add	r3, r1
 800196c:	3301      	adds	r3, #1
 800196e:	2201      	movs	r2, #1
 8001970:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001972:	7bfb      	ldrb	r3, [r7, #15]
 8001974:	6879      	ldr	r1, [r7, #4]
 8001976:	1c5a      	adds	r2, r3, #1
 8001978:	4613      	mov	r3, r2
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	4413      	add	r3, r2
 800197e:	00db      	lsls	r3, r3, #3
 8001980:	440b      	add	r3, r1
 8001982:	7bfa      	ldrb	r2, [r7, #15]
 8001984:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001986:	7bfa      	ldrb	r2, [r7, #15]
 8001988:	7bfb      	ldrb	r3, [r7, #15]
 800198a:	b298      	uxth	r0, r3
 800198c:	6879      	ldr	r1, [r7, #4]
 800198e:	4613      	mov	r3, r2
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	4413      	add	r3, r2
 8001994:	00db      	lsls	r3, r3, #3
 8001996:	440b      	add	r3, r1
 8001998:	3336      	adds	r3, #54	; 0x36
 800199a:	4602      	mov	r2, r0
 800199c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800199e:	7bfb      	ldrb	r3, [r7, #15]
 80019a0:	6879      	ldr	r1, [r7, #4]
 80019a2:	1c5a      	adds	r2, r3, #1
 80019a4:	4613      	mov	r3, r2
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	4413      	add	r3, r2
 80019aa:	00db      	lsls	r3, r3, #3
 80019ac:	440b      	add	r3, r1
 80019ae:	3303      	adds	r3, #3
 80019b0:	2200      	movs	r2, #0
 80019b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80019b4:	7bfa      	ldrb	r2, [r7, #15]
 80019b6:	6879      	ldr	r1, [r7, #4]
 80019b8:	4613      	mov	r3, r2
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	4413      	add	r3, r2
 80019be:	00db      	lsls	r3, r3, #3
 80019c0:	440b      	add	r3, r1
 80019c2:	3338      	adds	r3, #56	; 0x38
 80019c4:	2200      	movs	r2, #0
 80019c6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80019c8:	7bfa      	ldrb	r2, [r7, #15]
 80019ca:	6879      	ldr	r1, [r7, #4]
 80019cc:	4613      	mov	r3, r2
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	4413      	add	r3, r2
 80019d2:	00db      	lsls	r3, r3, #3
 80019d4:	440b      	add	r3, r1
 80019d6:	333c      	adds	r3, #60	; 0x3c
 80019d8:	2200      	movs	r2, #0
 80019da:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80019dc:	7bfa      	ldrb	r2, [r7, #15]
 80019de:	6879      	ldr	r1, [r7, #4]
 80019e0:	4613      	mov	r3, r2
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	4413      	add	r3, r2
 80019e6:	00db      	lsls	r3, r3, #3
 80019e8:	440b      	add	r3, r1
 80019ea:	3340      	adds	r3, #64	; 0x40
 80019ec:	2200      	movs	r2, #0
 80019ee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019f0:	7bfb      	ldrb	r3, [r7, #15]
 80019f2:	3301      	adds	r3, #1
 80019f4:	73fb      	strb	r3, [r7, #15]
 80019f6:	7bfa      	ldrb	r2, [r7, #15]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d3ad      	bcc.n	800195c <HAL_PCD_Init+0x94>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a00:	2300      	movs	r3, #0
 8001a02:	73fb      	strb	r3, [r7, #15]
 8001a04:	e044      	b.n	8001a90 <HAL_PCD_Init+0x1c8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001a06:	7bfa      	ldrb	r2, [r7, #15]
 8001a08:	6879      	ldr	r1, [r7, #4]
 8001a0a:	4613      	mov	r3, r2
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	4413      	add	r3, r2
 8001a10:	00db      	lsls	r3, r3, #3
 8001a12:	440b      	add	r3, r1
 8001a14:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001a18:	2200      	movs	r2, #0
 8001a1a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001a1c:	7bfa      	ldrb	r2, [r7, #15]
 8001a1e:	6879      	ldr	r1, [r7, #4]
 8001a20:	4613      	mov	r3, r2
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	4413      	add	r3, r2
 8001a26:	00db      	lsls	r3, r3, #3
 8001a28:	440b      	add	r3, r1
 8001a2a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a2e:	7bfa      	ldrb	r2, [r7, #15]
 8001a30:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001a32:	7bfa      	ldrb	r2, [r7, #15]
 8001a34:	6879      	ldr	r1, [r7, #4]
 8001a36:	4613      	mov	r3, r2
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	4413      	add	r3, r2
 8001a3c:	00db      	lsls	r3, r3, #3
 8001a3e:	440b      	add	r3, r1
 8001a40:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001a44:	2200      	movs	r2, #0
 8001a46:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001a48:	7bfa      	ldrb	r2, [r7, #15]
 8001a4a:	6879      	ldr	r1, [r7, #4]
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	4413      	add	r3, r2
 8001a52:	00db      	lsls	r3, r3, #3
 8001a54:	440b      	add	r3, r1
 8001a56:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001a5e:	7bfa      	ldrb	r2, [r7, #15]
 8001a60:	6879      	ldr	r1, [r7, #4]
 8001a62:	4613      	mov	r3, r2
 8001a64:	009b      	lsls	r3, r3, #2
 8001a66:	4413      	add	r3, r2
 8001a68:	00db      	lsls	r3, r3, #3
 8001a6a:	440b      	add	r3, r1
 8001a6c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001a70:	2200      	movs	r2, #0
 8001a72:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001a74:	7bfa      	ldrb	r2, [r7, #15]
 8001a76:	6879      	ldr	r1, [r7, #4]
 8001a78:	4613      	mov	r3, r2
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	4413      	add	r3, r2
 8001a7e:	00db      	lsls	r3, r3, #3
 8001a80:	440b      	add	r3, r1
 8001a82:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001a86:	2200      	movs	r2, #0
 8001a88:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a8a:	7bfb      	ldrb	r3, [r7, #15]
 8001a8c:	3301      	adds	r3, #1
 8001a8e:	73fb      	strb	r3, [r7, #15]
 8001a90:	7bfa      	ldrb	r2, [r7, #15]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d3b5      	bcc.n	8001a06 <HAL_PCD_Init+0x13e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	603b      	str	r3, [r7, #0]
 8001aa0:	687e      	ldr	r6, [r7, #4]
 8001aa2:	466d      	mov	r5, sp
 8001aa4:	f106 0410 	add.w	r4, r6, #16
 8001aa8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001aaa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001aac:	6823      	ldr	r3, [r4, #0]
 8001aae:	602b      	str	r3, [r5, #0]
 8001ab0:	1d33      	adds	r3, r6, #4
 8001ab2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ab4:	6838      	ldr	r0, [r7, #0]
 8001ab6:	f003 fcbb 	bl	8005430 <USB_DevInit>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d005      	beq.n	8001acc <HAL_PCD_Init+0x204>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2202      	movs	r2, #2
 8001ac4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e00d      	b.n	8001ae8 <HAL_PCD_Init+0x220>
  }

  hpcd->USB_Address = 0U;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f005 fe36 	bl	8007752 <USB_DevDisconnect>

  return HAL_OK;
 8001ae6:	2300      	movs	r3, #0
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3714      	adds	r7, #20
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001af0:	40005c00 	.word	0x40005c00
 8001af4:	0800af64 	.word	0x0800af64

08001af8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d101      	bne.n	8001b0e <HAL_PCD_Start+0x16>
 8001b0a:	2302      	movs	r3, #2
 8001b0c:	e016      	b.n	8001b3c <HAL_PCD_Start+0x44>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2201      	movs	r2, #1
 8001b12:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f003 fc4c 	bl	80053b8 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001b20:	2101      	movs	r1, #1
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f009 f879 	bl	800ac1a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f005 fe06 	bl	800773e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2200      	movs	r2, #0
 8001b36:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001b3a:	2300      	movs	r3, #0
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3708      	adds	r7, #8
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}

08001b44 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b088      	sub	sp, #32
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4618      	mov	r0, r3
 8001b52:	f005 fe08 	bl	8007766 <USB_ReadInterrupts>
 8001b56:	4603      	mov	r3, r0
 8001b58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b60:	d102      	bne.n	8001b68 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f000 fb61 	bl	800222a <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f005 fdfa 	bl	8007766 <USB_ReadInterrupts>
 8001b72:	4603      	mov	r3, r0
 8001b74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b7c:	d112      	bne.n	8001ba4 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	687a      	ldr	r2, [r7, #4]
 8001b84:	6812      	ldr	r2, [r2, #0]
 8001b86:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8001b8a:	b292      	uxth	r2, r2
 8001b8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b90:	b292      	uxth	r2, r2
 8001b92:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f008 fe47 	bl	800a82a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f000 f925 	bl	8001dee <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f005 fddc 	bl	8007766 <USB_ReadInterrupts>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bb4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001bb8:	d10b      	bne.n	8001bd2 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	687a      	ldr	r2, [r7, #4]
 8001bc0:	6812      	ldr	r2, [r2, #0]
 8001bc2:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8001bc6:	b292      	uxth	r2, r2
 8001bc8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001bcc:	b292      	uxth	r2, r2
 8001bce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f005 fdc5 	bl	8007766 <USB_ReadInterrupts>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001be2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001be6:	d10b      	bne.n	8001c00 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	6812      	ldr	r2, [r2, #0]
 8001bf0:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8001bf4:	b292      	uxth	r2, r2
 8001bf6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001bfa:	b292      	uxth	r2, r2
 8001bfc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4618      	mov	r0, r3
 8001c06:	f005 fdae 	bl	8007766 <USB_ReadInterrupts>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c14:	d126      	bne.n	8001c64 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	687a      	ldr	r2, [r7, #4]
 8001c1c:	6812      	ldr	r2, [r2, #0]
 8001c1e:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8001c22:	b292      	uxth	r2, r2
 8001c24:	f022 0204 	bic.w	r2, r2, #4
 8001c28:	b292      	uxth	r2, r2
 8001c2a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	6812      	ldr	r2, [r2, #0]
 8001c36:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8001c3a:	b292      	uxth	r2, r2
 8001c3c:	f022 0208 	bic.w	r2, r2, #8
 8001c40:	b292      	uxth	r2, r2
 8001c42:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f008 fe28 	bl	800a89c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	687a      	ldr	r2, [r7, #4]
 8001c52:	6812      	ldr	r2, [r2, #0]
 8001c54:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8001c58:	b292      	uxth	r2, r2
 8001c5a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001c5e:	b292      	uxth	r2, r2
 8001c60:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f005 fd7c 	bl	8007766 <USB_ReadInterrupts>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001c78:	f040 8084 	bne.w	8001d84 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	77fb      	strb	r3, [r7, #31]
 8001c80:	e011      	b.n	8001ca6 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001c82:	7ffb      	ldrb	r3, [r7, #31]
 8001c84:	687a      	ldr	r2, [r7, #4]
 8001c86:	6812      	ldr	r2, [r2, #0]
 8001c88:	4611      	mov	r1, r2
 8001c8a:	7ffa      	ldrb	r2, [r7, #31]
 8001c8c:	0092      	lsls	r2, r2, #2
 8001c8e:	440a      	add	r2, r1
 8001c90:	8812      	ldrh	r2, [r2, #0]
 8001c92:	b292      	uxth	r2, r2
 8001c94:	005b      	lsls	r3, r3, #1
 8001c96:	f107 0120 	add.w	r1, r7, #32
 8001c9a:	440b      	add	r3, r1
 8001c9c:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8001ca0:	7ffb      	ldrb	r3, [r7, #31]
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	77fb      	strb	r3, [r7, #31]
 8001ca6:	7ffb      	ldrb	r3, [r7, #31]
 8001ca8:	2b07      	cmp	r3, #7
 8001caa:	d9ea      	bls.n	8001c82 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	687a      	ldr	r2, [r7, #4]
 8001cb2:	6812      	ldr	r2, [r2, #0]
 8001cb4:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8001cb8:	b292      	uxth	r2, r2
 8001cba:	f042 0201 	orr.w	r2, r2, #1
 8001cbe:	b292      	uxth	r2, r2
 8001cc0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	687a      	ldr	r2, [r7, #4]
 8001cca:	6812      	ldr	r2, [r2, #0]
 8001ccc:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8001cd0:	b292      	uxth	r2, r2
 8001cd2:	f022 0201 	bic.w	r2, r2, #1
 8001cd6:	b292      	uxth	r2, r2
 8001cd8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001cdc:	bf00      	nop
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ce6:	b29b      	uxth	r3, r3
 8001ce8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d0f6      	beq.n	8001cde <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	6812      	ldr	r2, [r2, #0]
 8001cf8:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8001cfc:	b292      	uxth	r2, r2
 8001cfe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d02:	b292      	uxth	r2, r2
 8001d04:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001d08:	2300      	movs	r3, #0
 8001d0a:	77fb      	strb	r3, [r7, #31]
 8001d0c:	e010      	b.n	8001d30 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	461a      	mov	r2, r3
 8001d14:	7ffb      	ldrb	r3, [r7, #31]
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	441a      	add	r2, r3
 8001d1a:	7ffb      	ldrb	r3, [r7, #31]
 8001d1c:	005b      	lsls	r3, r3, #1
 8001d1e:	f107 0120 	add.w	r1, r7, #32
 8001d22:	440b      	add	r3, r1
 8001d24:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001d28:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001d2a:	7ffb      	ldrb	r3, [r7, #31]
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	77fb      	strb	r3, [r7, #31]
 8001d30:	7ffb      	ldrb	r3, [r7, #31]
 8001d32:	2b07      	cmp	r3, #7
 8001d34:	d9eb      	bls.n	8001d0e <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	6812      	ldr	r2, [r2, #0]
 8001d3e:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8001d42:	b292      	uxth	r2, r2
 8001d44:	f042 0208 	orr.w	r2, r2, #8
 8001d48:	b292      	uxth	r2, r2
 8001d4a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	687a      	ldr	r2, [r7, #4]
 8001d54:	6812      	ldr	r2, [r2, #0]
 8001d56:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8001d5a:	b292      	uxth	r2, r2
 8001d5c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d60:	b292      	uxth	r2, r2
 8001d62:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	6812      	ldr	r2, [r2, #0]
 8001d6e:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8001d72:	b292      	uxth	r2, r2
 8001d74:	f042 0204 	orr.w	r2, r2, #4
 8001d78:	b292      	uxth	r2, r2
 8001d7a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f008 fd72 	bl	800a868 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f005 fcec 	bl	8007766 <USB_ReadInterrupts>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d98:	d10e      	bne.n	8001db8 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	687a      	ldr	r2, [r7, #4]
 8001da0:	6812      	ldr	r2, [r2, #0]
 8001da2:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8001da6:	b292      	uxth	r2, r2
 8001da8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001dac:	b292      	uxth	r2, r2
 8001dae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f008 fd2b 	bl	800a80e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f005 fcd2 	bl	8007766 <USB_ReadInterrupts>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001dcc:	d10b      	bne.n	8001de6 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	6812      	ldr	r2, [r2, #0]
 8001dd6:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8001dda:	b292      	uxth	r2, r2
 8001ddc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001de0:	b292      	uxth	r2, r2
 8001de2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001de6:	bf00      	nop
 8001de8:	3720      	adds	r7, #32
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}

08001dee <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001dee:	b580      	push	{r7, lr}
 8001df0:	b082      	sub	sp, #8
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
 8001df6:	460b      	mov	r3, r1
 8001df8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d101      	bne.n	8001e08 <HAL_PCD_SetAddress+0x1a>
 8001e04:	2302      	movs	r3, #2
 8001e06:	e013      	b.n	8001e30 <HAL_PCD_SetAddress+0x42>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	78fa      	ldrb	r2, [r7, #3]
 8001e14:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	78fa      	ldrb	r2, [r7, #3]
 8001e1e:	4611      	mov	r1, r2
 8001e20:	4618      	mov	r0, r3
 8001e22:	f005 fc79 	bl	8007718 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001e2e:	2300      	movs	r3, #0
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3708      	adds	r7, #8
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}

08001e38 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
 8001e40:	4608      	mov	r0, r1
 8001e42:	4611      	mov	r1, r2
 8001e44:	461a      	mov	r2, r3
 8001e46:	4603      	mov	r3, r0
 8001e48:	70fb      	strb	r3, [r7, #3]
 8001e4a:	460b      	mov	r3, r1
 8001e4c:	803b      	strh	r3, [r7, #0]
 8001e4e:	4613      	mov	r3, r2
 8001e50:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001e52:	2300      	movs	r3, #0
 8001e54:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001e56:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	da0e      	bge.n	8001e7c <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e5e:	78fb      	ldrb	r3, [r7, #3]
 8001e60:	f003 0307 	and.w	r3, r3, #7
 8001e64:	1c5a      	adds	r2, r3, #1
 8001e66:	4613      	mov	r3, r2
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	4413      	add	r3, r2
 8001e6c:	00db      	lsls	r3, r3, #3
 8001e6e:	687a      	ldr	r2, [r7, #4]
 8001e70:	4413      	add	r3, r2
 8001e72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	2201      	movs	r2, #1
 8001e78:	705a      	strb	r2, [r3, #1]
 8001e7a:	e00e      	b.n	8001e9a <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e7c:	78fb      	ldrb	r3, [r7, #3]
 8001e7e:	f003 0207 	and.w	r2, r3, #7
 8001e82:	4613      	mov	r3, r2
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	4413      	add	r3, r2
 8001e88:	00db      	lsls	r3, r3, #3
 8001e8a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	4413      	add	r3, r2
 8001e92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2200      	movs	r2, #0
 8001e98:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001e9a:	78fb      	ldrb	r3, [r7, #3]
 8001e9c:	f003 0307 	and.w	r3, r3, #7
 8001ea0:	b2da      	uxtb	r2, r3
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001ea6:	883a      	ldrh	r2, [r7, #0]
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	78ba      	ldrb	r2, [r7, #2]
 8001eb0:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	785b      	ldrb	r3, [r3, #1]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d004      	beq.n	8001ec4 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	b29a      	uxth	r2, r3
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001ec4:	78bb      	ldrb	r3, [r7, #2]
 8001ec6:	2b02      	cmp	r3, #2
 8001ec8:	d102      	bne.n	8001ed0 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d101      	bne.n	8001ede <HAL_PCD_EP_Open+0xa6>
 8001eda:	2302      	movs	r3, #2
 8001edc:	e00e      	b.n	8001efc <HAL_PCD_EP_Open+0xc4>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	68f9      	ldr	r1, [r7, #12]
 8001eec:	4618      	mov	r0, r3
 8001eee:	f003 fabf 	bl	8005470 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001efa:	7afb      	ldrb	r3, [r7, #11]
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3710      	adds	r7, #16
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}

08001f04 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b084      	sub	sp, #16
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001f10:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	da0e      	bge.n	8001f36 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f18:	78fb      	ldrb	r3, [r7, #3]
 8001f1a:	f003 0307 	and.w	r3, r3, #7
 8001f1e:	1c5a      	adds	r2, r3, #1
 8001f20:	4613      	mov	r3, r2
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	4413      	add	r3, r2
 8001f26:	00db      	lsls	r3, r3, #3
 8001f28:	687a      	ldr	r2, [r7, #4]
 8001f2a:	4413      	add	r3, r2
 8001f2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2201      	movs	r2, #1
 8001f32:	705a      	strb	r2, [r3, #1]
 8001f34:	e00e      	b.n	8001f54 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f36:	78fb      	ldrb	r3, [r7, #3]
 8001f38:	f003 0207 	and.w	r2, r3, #7
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	4413      	add	r3, r2
 8001f42:	00db      	lsls	r3, r3, #3
 8001f44:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	4413      	add	r3, r2
 8001f4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	2200      	movs	r2, #0
 8001f52:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001f54:	78fb      	ldrb	r3, [r7, #3]
 8001f56:	f003 0307 	and.w	r3, r3, #7
 8001f5a:	b2da      	uxtb	r2, r3
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d101      	bne.n	8001f6e <HAL_PCD_EP_Close+0x6a>
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	e00e      	b.n	8001f8c <HAL_PCD_EP_Close+0x88>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2201      	movs	r2, #1
 8001f72:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	68f9      	ldr	r1, [r7, #12]
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f003 fddb 	bl	8005b38 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2200      	movs	r2, #0
 8001f86:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001f8a:	2300      	movs	r3, #0
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3710      	adds	r7, #16
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}

08001f94 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b086      	sub	sp, #24
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	60f8      	str	r0, [r7, #12]
 8001f9c:	607a      	str	r2, [r7, #4]
 8001f9e:	603b      	str	r3, [r7, #0]
 8001fa0:	460b      	mov	r3, r1
 8001fa2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fa4:	7afb      	ldrb	r3, [r7, #11]
 8001fa6:	f003 0207 	and.w	r2, r3, #7
 8001faa:	4613      	mov	r3, r2
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	4413      	add	r3, r2
 8001fb0:	00db      	lsls	r3, r3, #3
 8001fb2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001fb6:	68fa      	ldr	r2, [r7, #12]
 8001fb8:	4413      	add	r3, r2
 8001fba:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	683a      	ldr	r2, [r7, #0]
 8001fc6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fd4:	7afb      	ldrb	r3, [r7, #11]
 8001fd6:	f003 0307 	and.w	r3, r3, #7
 8001fda:	b2da      	uxtb	r2, r3
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001fe0:	7afb      	ldrb	r3, [r7, #11]
 8001fe2:	f003 0307 	and.w	r3, r3, #7
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d106      	bne.n	8001ff8 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	6979      	ldr	r1, [r7, #20]
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f003 ff8d 	bl	8005f10 <USB_EPStartXfer>
 8001ff6:	e005      	b.n	8002004 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	6979      	ldr	r1, [r7, #20]
 8001ffe:	4618      	mov	r0, r3
 8002000:	f003 ff86 	bl	8005f10 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002004:	2300      	movs	r3, #0
}
 8002006:	4618      	mov	r0, r3
 8002008:	3718      	adds	r7, #24
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}

0800200e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800200e:	b480      	push	{r7}
 8002010:	b083      	sub	sp, #12
 8002012:	af00      	add	r7, sp, #0
 8002014:	6078      	str	r0, [r7, #4]
 8002016:	460b      	mov	r3, r1
 8002018:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800201a:	78fb      	ldrb	r3, [r7, #3]
 800201c:	f003 0207 	and.w	r2, r3, #7
 8002020:	6879      	ldr	r1, [r7, #4]
 8002022:	4613      	mov	r3, r2
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	4413      	add	r3, r2
 8002028:	00db      	lsls	r3, r3, #3
 800202a:	440b      	add	r3, r1
 800202c:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8002030:	681b      	ldr	r3, [r3, #0]
}
 8002032:	4618      	mov	r0, r3
 8002034:	370c      	adds	r7, #12
 8002036:	46bd      	mov	sp, r7
 8002038:	bc80      	pop	{r7}
 800203a:	4770      	bx	lr

0800203c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b086      	sub	sp, #24
 8002040:	af00      	add	r7, sp, #0
 8002042:	60f8      	str	r0, [r7, #12]
 8002044:	607a      	str	r2, [r7, #4]
 8002046:	603b      	str	r3, [r7, #0]
 8002048:	460b      	mov	r3, r1
 800204a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800204c:	7afb      	ldrb	r3, [r7, #11]
 800204e:	f003 0307 	and.w	r3, r3, #7
 8002052:	1c5a      	adds	r2, r3, #1
 8002054:	4613      	mov	r3, r2
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	4413      	add	r3, r2
 800205a:	00db      	lsls	r3, r3, #3
 800205c:	68fa      	ldr	r2, [r7, #12]
 800205e:	4413      	add	r3, r2
 8002060:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	687a      	ldr	r2, [r7, #4]
 8002066:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	683a      	ldr	r2, [r7, #0]
 800206c:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	2201      	movs	r2, #1
 8002072:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	683a      	ldr	r2, [r7, #0]
 800207a:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	2200      	movs	r2, #0
 8002080:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	2201      	movs	r2, #1
 8002086:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002088:	7afb      	ldrb	r3, [r7, #11]
 800208a:	f003 0307 	and.w	r3, r3, #7
 800208e:	b2da      	uxtb	r2, r3
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002094:	7afb      	ldrb	r3, [r7, #11]
 8002096:	f003 0307 	and.w	r3, r3, #7
 800209a:	2b00      	cmp	r3, #0
 800209c:	d106      	bne.n	80020ac <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	6979      	ldr	r1, [r7, #20]
 80020a4:	4618      	mov	r0, r3
 80020a6:	f003 ff33 	bl	8005f10 <USB_EPStartXfer>
 80020aa:	e005      	b.n	80020b8 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	6979      	ldr	r1, [r7, #20]
 80020b2:	4618      	mov	r0, r3
 80020b4:	f003 ff2c 	bl	8005f10 <USB_EPStartXfer>
  }

  return HAL_OK;
 80020b8:	2300      	movs	r3, #0
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3718      	adds	r7, #24
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}

080020c2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020c2:	b580      	push	{r7, lr}
 80020c4:	b084      	sub	sp, #16
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	6078      	str	r0, [r7, #4]
 80020ca:	460b      	mov	r3, r1
 80020cc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80020ce:	78fb      	ldrb	r3, [r7, #3]
 80020d0:	f003 0207 	and.w	r2, r3, #7
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	429a      	cmp	r2, r3
 80020da:	d901      	bls.n	80020e0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	e04c      	b.n	800217a <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80020e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	da0e      	bge.n	8002106 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020e8:	78fb      	ldrb	r3, [r7, #3]
 80020ea:	f003 0307 	and.w	r3, r3, #7
 80020ee:	1c5a      	adds	r2, r3, #1
 80020f0:	4613      	mov	r3, r2
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	4413      	add	r3, r2
 80020f6:	00db      	lsls	r3, r3, #3
 80020f8:	687a      	ldr	r2, [r7, #4]
 80020fa:	4413      	add	r3, r2
 80020fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	2201      	movs	r2, #1
 8002102:	705a      	strb	r2, [r3, #1]
 8002104:	e00c      	b.n	8002120 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002106:	78fa      	ldrb	r2, [r7, #3]
 8002108:	4613      	mov	r3, r2
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	4413      	add	r3, r2
 800210e:	00db      	lsls	r3, r3, #3
 8002110:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	4413      	add	r3, r2
 8002118:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2200      	movs	r2, #0
 800211e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2201      	movs	r2, #1
 8002124:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002126:	78fb      	ldrb	r3, [r7, #3]
 8002128:	f003 0307 	and.w	r3, r3, #7
 800212c:	b2da      	uxtb	r2, r3
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002138:	2b01      	cmp	r3, #1
 800213a:	d101      	bne.n	8002140 <HAL_PCD_EP_SetStall+0x7e>
 800213c:	2302      	movs	r3, #2
 800213e:	e01c      	b.n	800217a <HAL_PCD_EP_SetStall+0xb8>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2201      	movs	r2, #1
 8002144:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	68f9      	ldr	r1, [r7, #12]
 800214e:	4618      	mov	r0, r3
 8002150:	f005 f9e5 	bl	800751e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002154:	78fb      	ldrb	r3, [r7, #3]
 8002156:	f003 0307 	and.w	r3, r3, #7
 800215a:	2b00      	cmp	r3, #0
 800215c:	d108      	bne.n	8002170 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8002168:	4619      	mov	r1, r3
 800216a:	4610      	mov	r0, r2
 800216c:	f005 fb0a 	bl	8007784 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2200      	movs	r2, #0
 8002174:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002178:	2300      	movs	r3, #0
}
 800217a:	4618      	mov	r0, r3
 800217c:	3710      	adds	r7, #16
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}

08002182 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002182:	b580      	push	{r7, lr}
 8002184:	b084      	sub	sp, #16
 8002186:	af00      	add	r7, sp, #0
 8002188:	6078      	str	r0, [r7, #4]
 800218a:	460b      	mov	r3, r1
 800218c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800218e:	78fb      	ldrb	r3, [r7, #3]
 8002190:	f003 020f 	and.w	r2, r3, #15
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	429a      	cmp	r2, r3
 800219a:	d901      	bls.n	80021a0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e040      	b.n	8002222 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80021a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	da0e      	bge.n	80021c6 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021a8:	78fb      	ldrb	r3, [r7, #3]
 80021aa:	f003 0307 	and.w	r3, r3, #7
 80021ae:	1c5a      	adds	r2, r3, #1
 80021b0:	4613      	mov	r3, r2
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	4413      	add	r3, r2
 80021b6:	00db      	lsls	r3, r3, #3
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	4413      	add	r3, r2
 80021bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2201      	movs	r2, #1
 80021c2:	705a      	strb	r2, [r3, #1]
 80021c4:	e00e      	b.n	80021e4 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021c6:	78fb      	ldrb	r3, [r7, #3]
 80021c8:	f003 0207 	and.w	r2, r3, #7
 80021cc:	4613      	mov	r3, r2
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	4413      	add	r3, r2
 80021d2:	00db      	lsls	r3, r3, #3
 80021d4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	4413      	add	r3, r2
 80021dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2200      	movs	r2, #0
 80021e2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2200      	movs	r2, #0
 80021e8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021ea:	78fb      	ldrb	r3, [r7, #3]
 80021ec:	f003 0307 	and.w	r3, r3, #7
 80021f0:	b2da      	uxtb	r2, r3
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d101      	bne.n	8002204 <HAL_PCD_EP_ClrStall+0x82>
 8002200:	2302      	movs	r3, #2
 8002202:	e00e      	b.n	8002222 <HAL_PCD_EP_ClrStall+0xa0>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2201      	movs	r2, #1
 8002208:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	68f9      	ldr	r1, [r7, #12]
 8002212:	4618      	mov	r0, r3
 8002214:	f005 f9d3 	bl	80075be <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2200      	movs	r2, #0
 800221c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002220:	2300      	movs	r3, #0
}
 8002222:	4618      	mov	r0, r3
 8002224:	3710      	adds	r7, #16
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}

0800222a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800222a:	b580      	push	{r7, lr}
 800222c:	b08e      	sub	sp, #56	; 0x38
 800222e:	af00      	add	r7, sp, #0
 8002230:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002232:	e2ec      	b.n	800280e <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800223c:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800223e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002240:	b2db      	uxtb	r3, r3
 8002242:	f003 030f 	and.w	r3, r3, #15
 8002246:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 800224a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800224e:	2b00      	cmp	r3, #0
 8002250:	f040 8161 	bne.w	8002516 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002254:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002256:	f003 0310 	and.w	r3, r3, #16
 800225a:	2b00      	cmp	r3, #0
 800225c:	d152      	bne.n	8002304 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	881b      	ldrh	r3, [r3, #0]
 8002264:	b29b      	uxth	r3, r3
 8002266:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800226a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800226e:	857b      	strh	r3, [r7, #42]	; 0x2a
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002276:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800227a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800227e:	b29b      	uxth	r3, r3
 8002280:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	3328      	adds	r3, #40	; 0x28
 8002286:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002290:	b29b      	uxth	r3, r3
 8002292:	461a      	mov	r2, r3
 8002294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	00db      	lsls	r3, r3, #3
 800229a:	4413      	add	r3, r2
 800229c:	3302      	adds	r3, #2
 800229e:	005b      	lsls	r3, r3, #1
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	6812      	ldr	r2, [r2, #0]
 80022a4:	4413      	add	r3, r2
 80022a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022aa:	881b      	ldrh	r3, [r3, #0]
 80022ac:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80022b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80022b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b6:	695a      	ldr	r2, [r3, #20]
 80022b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ba:	69db      	ldr	r3, [r3, #28]
 80022bc:	441a      	add	r2, r3
 80022be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c0:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80022c2:	2100      	movs	r1, #0
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f008 fa88 	bl	800a7da <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	f000 829b 	beq.w	800280e <PCD_EP_ISR_Handler+0x5e4>
 80022d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022da:	699b      	ldr	r3, [r3, #24]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	f040 8296 	bne.w	800280e <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 80022ec:	b2d2      	uxtb	r2, r2
 80022ee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80022f2:	b2d2      	uxtb	r2, r2
 80022f4:	b292      	uxth	r2, r2
 80022f6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2200      	movs	r2, #0
 80022fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002302:	e284      	b.n	800280e <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800230a:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	881b      	ldrh	r3, [r3, #0]
 8002312:	847b      	strh	r3, [r7, #34]	; 0x22

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002314:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002316:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800231a:	2b00      	cmp	r3, #0
 800231c:	d034      	beq.n	8002388 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002326:	b29b      	uxth	r3, r3
 8002328:	461a      	mov	r2, r3
 800232a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	00db      	lsls	r3, r3, #3
 8002330:	4413      	add	r3, r2
 8002332:	3306      	adds	r3, #6
 8002334:	005b      	lsls	r3, r3, #1
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	6812      	ldr	r2, [r2, #0]
 800233a:	4413      	add	r3, r2
 800233c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002340:	881b      	ldrh	r3, [r3, #0]
 8002342:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002348:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6818      	ldr	r0, [r3, #0]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002356:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800235c:	b29b      	uxth	r3, r3
 800235e:	f005 fa60 	bl	8007822 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	881b      	ldrh	r3, [r3, #0]
 8002368:	b29a      	uxth	r2, r3
 800236a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800236e:	4013      	ands	r3, r2
 8002370:	843b      	strh	r3, [r7, #32]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	8c3a      	ldrh	r2, [r7, #32]
 8002378:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800237c:	b292      	uxth	r2, r2
 800237e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002380:	6878      	ldr	r0, [r7, #4]
 8002382:	f008 f9fd 	bl	800a780 <HAL_PCD_SetupStageCallback>
 8002386:	e242      	b.n	800280e <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002388:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800238c:	2b00      	cmp	r3, #0
 800238e:	f280 823e 	bge.w	800280e <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	881b      	ldrh	r3, [r3, #0]
 8002398:	b29a      	uxth	r2, r3
 800239a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800239e:	4013      	ands	r3, r2
 80023a0:	83fb      	strh	r3, [r7, #30]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	8bfa      	ldrh	r2, [r7, #30]
 80023a8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80023ac:	b292      	uxth	r2, r2
 80023ae:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	461a      	mov	r2, r3
 80023bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	00db      	lsls	r3, r3, #3
 80023c2:	4413      	add	r3, r2
 80023c4:	3306      	adds	r3, #6
 80023c6:	005b      	lsls	r3, r3, #1
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	6812      	ldr	r2, [r2, #0]
 80023cc:	4413      	add	r3, r2
 80023ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80023d2:	881b      	ldrh	r3, [r3, #0]
 80023d4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80023d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023da:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80023dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023de:	69db      	ldr	r3, [r3, #28]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d019      	beq.n	8002418 <PCD_EP_ISR_Handler+0x1ee>
 80023e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e6:	695b      	ldr	r3, [r3, #20]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d015      	beq.n	8002418 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6818      	ldr	r0, [r3, #0]
 80023f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f2:	6959      	ldr	r1, [r3, #20]
 80023f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f6:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80023f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fa:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80023fc:	b29b      	uxth	r3, r3
 80023fe:	f005 fa10 	bl	8007822 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002404:	695a      	ldr	r2, [r3, #20]
 8002406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002408:	69db      	ldr	r3, [r3, #28]
 800240a:	441a      	add	r2, r3
 800240c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002410:	2100      	movs	r1, #0
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f008 f9c6 	bl	800a7a4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	881b      	ldrh	r3, [r3, #0]
 800241e:	b29b      	uxth	r3, r3
 8002420:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002424:	2b00      	cmp	r3, #0
 8002426:	f040 81f2 	bne.w	800280e <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	61bb      	str	r3, [r7, #24]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002438:	b29b      	uxth	r3, r3
 800243a:	461a      	mov	r2, r3
 800243c:	69bb      	ldr	r3, [r7, #24]
 800243e:	4413      	add	r3, r2
 8002440:	61bb      	str	r3, [r7, #24]
 8002442:	69bb      	ldr	r3, [r7, #24]
 8002444:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002448:	617b      	str	r3, [r7, #20]
 800244a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244c:	691b      	ldr	r3, [r3, #16]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d112      	bne.n	8002478 <PCD_EP_ISR_Handler+0x24e>
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	881b      	ldrh	r3, [r3, #0]
 8002456:	b29b      	uxth	r3, r3
 8002458:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800245c:	b29a      	uxth	r2, r3
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	801a      	strh	r2, [r3, #0]
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	881b      	ldrh	r3, [r3, #0]
 8002466:	b29b      	uxth	r3, r3
 8002468:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800246c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002470:	b29a      	uxth	r2, r3
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	801a      	strh	r2, [r3, #0]
 8002476:	e02f      	b.n	80024d8 <PCD_EP_ISR_Handler+0x2ae>
 8002478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247a:	691b      	ldr	r3, [r3, #16]
 800247c:	2b3e      	cmp	r3, #62	; 0x3e
 800247e:	d813      	bhi.n	80024a8 <PCD_EP_ISR_Handler+0x27e>
 8002480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002482:	691b      	ldr	r3, [r3, #16]
 8002484:	085b      	lsrs	r3, r3, #1
 8002486:	633b      	str	r3, [r7, #48]	; 0x30
 8002488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248a:	691b      	ldr	r3, [r3, #16]
 800248c:	f003 0301 	and.w	r3, r3, #1
 8002490:	2b00      	cmp	r3, #0
 8002492:	d002      	beq.n	800249a <PCD_EP_ISR_Handler+0x270>
 8002494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002496:	3301      	adds	r3, #1
 8002498:	633b      	str	r3, [r7, #48]	; 0x30
 800249a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800249c:	b29b      	uxth	r3, r3
 800249e:	029b      	lsls	r3, r3, #10
 80024a0:	b29a      	uxth	r2, r3
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	801a      	strh	r2, [r3, #0]
 80024a6:	e017      	b.n	80024d8 <PCD_EP_ISR_Handler+0x2ae>
 80024a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024aa:	691b      	ldr	r3, [r3, #16]
 80024ac:	095b      	lsrs	r3, r3, #5
 80024ae:	633b      	str	r3, [r7, #48]	; 0x30
 80024b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b2:	691b      	ldr	r3, [r3, #16]
 80024b4:	f003 031f 	and.w	r3, r3, #31
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d102      	bne.n	80024c2 <PCD_EP_ISR_Handler+0x298>
 80024bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024be:	3b01      	subs	r3, #1
 80024c0:	633b      	str	r3, [r7, #48]	; 0x30
 80024c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024c4:	b29b      	uxth	r3, r3
 80024c6:	029b      	lsls	r3, r3, #10
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024d2:	b29a      	uxth	r2, r3
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	881b      	ldrh	r3, [r3, #0]
 80024de:	b29b      	uxth	r3, r3
 80024e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80024e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024e8:	827b      	strh	r3, [r7, #18]
 80024ea:	8a7b      	ldrh	r3, [r7, #18]
 80024ec:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80024f0:	827b      	strh	r3, [r7, #18]
 80024f2:	8a7b      	ldrh	r3, [r7, #18]
 80024f4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80024f8:	827b      	strh	r3, [r7, #18]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	8a7b      	ldrh	r3, [r7, #18]
 8002500:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002504:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002508:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800250c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002510:	b29b      	uxth	r3, r3
 8002512:	8013      	strh	r3, [r2, #0]
 8002514:	e17b      	b.n	800280e <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	461a      	mov	r2, r3
 800251c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	4413      	add	r3, r2
 8002524:	881b      	ldrh	r3, [r3, #0]
 8002526:	847b      	strh	r3, [r7, #34]	; 0x22

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002528:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800252c:	2b00      	cmp	r3, #0
 800252e:	f280 80ea 	bge.w	8002706 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	461a      	mov	r2, r3
 8002538:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	4413      	add	r3, r2
 8002540:	881b      	ldrh	r3, [r3, #0]
 8002542:	b29a      	uxth	r2, r3
 8002544:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002548:	4013      	ands	r3, r2
 800254a:	823b      	strh	r3, [r7, #16]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	461a      	mov	r2, r3
 8002552:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	4413      	add	r3, r2
 800255a:	8a3a      	ldrh	r2, [r7, #16]
 800255c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002560:	b292      	uxth	r2, r2
 8002562:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002564:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002568:	4613      	mov	r3, r2
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	4413      	add	r3, r2
 800256e:	00db      	lsls	r3, r3, #3
 8002570:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002574:	687a      	ldr	r2, [r7, #4]
 8002576:	4413      	add	r3, r2
 8002578:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800257a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257c:	7b1b      	ldrb	r3, [r3, #12]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d122      	bne.n	80025c8 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800258a:	b29b      	uxth	r3, r3
 800258c:	461a      	mov	r2, r3
 800258e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	00db      	lsls	r3, r3, #3
 8002594:	4413      	add	r3, r2
 8002596:	3306      	adds	r3, #6
 8002598:	005b      	lsls	r3, r3, #1
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	6812      	ldr	r2, [r2, #0]
 800259e:	4413      	add	r3, r2
 80025a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80025a4:	881b      	ldrh	r3, [r3, #0]
 80025a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025aa:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80025ac:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	f000 8087 	beq.w	80026c2 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6818      	ldr	r0, [r3, #0]
 80025b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ba:	6959      	ldr	r1, [r3, #20]
 80025bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025be:	88da      	ldrh	r2, [r3, #6]
 80025c0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80025c2:	f005 f92e 	bl	8007822 <USB_ReadPMA>
 80025c6:	e07c      	b.n	80026c2 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80025c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ca:	78db      	ldrb	r3, [r3, #3]
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d108      	bne.n	80025e2 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80025d0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80025d2:	461a      	mov	r2, r3
 80025d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f000 f927 	bl	800282a <HAL_PCD_EP_DB_Receive>
 80025dc:	4603      	mov	r3, r0
 80025de:	86fb      	strh	r3, [r7, #54]	; 0x36
 80025e0:	e06f      	b.n	80026c2 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	461a      	mov	r2, r3
 80025e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	4413      	add	r3, r2
 80025f0:	881b      	ldrh	r3, [r3, #0]
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025fc:	81fb      	strh	r3, [r7, #14]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	461a      	mov	r2, r3
 8002604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	441a      	add	r2, r3
 800260c:	89fb      	ldrh	r3, [r7, #14]
 800260e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002612:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002616:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800261a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800261e:	b29b      	uxth	r3, r3
 8002620:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	461a      	mov	r2, r3
 8002628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	4413      	add	r3, r2
 8002630:	881b      	ldrh	r3, [r3, #0]
 8002632:	b29b      	uxth	r3, r3
 8002634:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002638:	2b00      	cmp	r3, #0
 800263a:	d021      	beq.n	8002680 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002644:	b29b      	uxth	r3, r3
 8002646:	461a      	mov	r2, r3
 8002648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	00db      	lsls	r3, r3, #3
 800264e:	4413      	add	r3, r2
 8002650:	3302      	adds	r3, #2
 8002652:	005b      	lsls	r3, r3, #1
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	6812      	ldr	r2, [r2, #0]
 8002658:	4413      	add	r3, r2
 800265a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800265e:	881b      	ldrh	r3, [r3, #0]
 8002660:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002664:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002666:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002668:	2b00      	cmp	r3, #0
 800266a:	d02a      	beq.n	80026c2 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6818      	ldr	r0, [r3, #0]
 8002670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002672:	6959      	ldr	r1, [r3, #20]
 8002674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002676:	891a      	ldrh	r2, [r3, #8]
 8002678:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800267a:	f005 f8d2 	bl	8007822 <USB_ReadPMA>
 800267e:	e020      	b.n	80026c2 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002688:	b29b      	uxth	r3, r3
 800268a:	461a      	mov	r2, r3
 800268c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	00db      	lsls	r3, r3, #3
 8002692:	4413      	add	r3, r2
 8002694:	3306      	adds	r3, #6
 8002696:	005b      	lsls	r3, r3, #1
 8002698:	687a      	ldr	r2, [r7, #4]
 800269a:	6812      	ldr	r2, [r2, #0]
 800269c:	4413      	add	r3, r2
 800269e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80026a2:	881b      	ldrh	r3, [r3, #0]
 80026a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026a8:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80026aa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d008      	beq.n	80026c2 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6818      	ldr	r0, [r3, #0]
 80026b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b6:	6959      	ldr	r1, [r3, #20]
 80026b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ba:	895a      	ldrh	r2, [r3, #10]
 80026bc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80026be:	f005 f8b0 	bl	8007822 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80026c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c4:	69da      	ldr	r2, [r3, #28]
 80026c6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80026c8:	441a      	add	r2, r3
 80026ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026cc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80026ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d0:	695a      	ldr	r2, [r3, #20]
 80026d2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80026d4:	441a      	add	r2, r3
 80026d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d8:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80026da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026dc:	699b      	ldr	r3, [r3, #24]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d004      	beq.n	80026ec <PCD_EP_ISR_Handler+0x4c2>
 80026e2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80026e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e6:	691b      	ldr	r3, [r3, #16]
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d206      	bcs.n	80026fa <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80026ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	4619      	mov	r1, r3
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f008 f856 	bl	800a7a4 <HAL_PCD_DataOutStageCallback>
 80026f8:	e005      	b.n	8002706 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002700:	4618      	mov	r0, r3
 8002702:	f003 fc05 	bl	8005f10 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002706:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002708:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800270c:	2b00      	cmp	r3, #0
 800270e:	d07e      	beq.n	800280e <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8002710:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002714:	1c5a      	adds	r2, r3, #1
 8002716:	4613      	mov	r3, r2
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	4413      	add	r3, r2
 800271c:	00db      	lsls	r3, r3, #3
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	4413      	add	r3, r2
 8002722:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	461a      	mov	r2, r3
 800272a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	4413      	add	r3, r2
 8002732:	881b      	ldrh	r3, [r3, #0]
 8002734:	b29b      	uxth	r3, r3
 8002736:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800273a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800273e:	81bb      	strh	r3, [r7, #12]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	461a      	mov	r2, r3
 8002746:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	441a      	add	r2, r3
 800274e:	89bb      	ldrh	r3, [r7, #12]
 8002750:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002754:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002758:	b29b      	uxth	r3, r3
 800275a:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 800275c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275e:	78db      	ldrb	r3, [r3, #3]
 8002760:	2b03      	cmp	r3, #3
 8002762:	d00c      	beq.n	800277e <PCD_EP_ISR_Handler+0x554>
 8002764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002766:	78db      	ldrb	r3, [r3, #3]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d008      	beq.n	800277e <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800276c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276e:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002770:	2b02      	cmp	r3, #2
 8002772:	d146      	bne.n	8002802 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002774:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002776:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800277a:	2b00      	cmp	r3, #0
 800277c:	d141      	bne.n	8002802 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002786:	b29b      	uxth	r3, r3
 8002788:	461a      	mov	r2, r3
 800278a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	00db      	lsls	r3, r3, #3
 8002790:	4413      	add	r3, r2
 8002792:	3302      	adds	r3, #2
 8002794:	005b      	lsls	r3, r3, #1
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	6812      	ldr	r2, [r2, #0]
 800279a:	4413      	add	r3, r2
 800279c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80027a0:	881b      	ldrh	r3, [r3, #0]
 80027a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027a6:	817b      	strh	r3, [r7, #10]

          if (ep->xfer_len > TxByteNbre)
 80027a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027aa:	699a      	ldr	r2, [r3, #24]
 80027ac:	897b      	ldrh	r3, [r7, #10]
 80027ae:	429a      	cmp	r2, r3
 80027b0:	d906      	bls.n	80027c0 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 80027b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b4:	699a      	ldr	r2, [r3, #24]
 80027b6:	897b      	ldrh	r3, [r7, #10]
 80027b8:	1ad2      	subs	r2, r2, r3
 80027ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027bc:	619a      	str	r2, [r3, #24]
 80027be:	e002      	b.n	80027c6 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 80027c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c2:	2200      	movs	r2, #0
 80027c4:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80027c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c8:	699b      	ldr	r3, [r3, #24]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d106      	bne.n	80027dc <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80027ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	4619      	mov	r1, r3
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	f008 f800 	bl	800a7da <HAL_PCD_DataInStageCallback>
 80027da:	e018      	b.n	800280e <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80027dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027de:	695a      	ldr	r2, [r3, #20]
 80027e0:	897b      	ldrh	r3, [r7, #10]
 80027e2:	441a      	add	r2, r3
 80027e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e6:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80027e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ea:	69da      	ldr	r2, [r3, #28]
 80027ec:	897b      	ldrh	r3, [r7, #10]
 80027ee:	441a      	add	r2, r3
 80027f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f2:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027fa:	4618      	mov	r0, r3
 80027fc:	f003 fb88 	bl	8005f10 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002800:	e005      	b.n	800280e <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002802:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002804:	461a      	mov	r2, r3
 8002806:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f000 f91b 	bl	8002a44 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002816:	b29b      	uxth	r3, r3
 8002818:	b21b      	sxth	r3, r3
 800281a:	2b00      	cmp	r3, #0
 800281c:	f6ff ad0a 	blt.w	8002234 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002820:	2300      	movs	r3, #0
}
 8002822:	4618      	mov	r0, r3
 8002824:	3738      	adds	r7, #56	; 0x38
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}

0800282a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800282a:	b580      	push	{r7, lr}
 800282c:	b088      	sub	sp, #32
 800282e:	af00      	add	r7, sp, #0
 8002830:	60f8      	str	r0, [r7, #12]
 8002832:	60b9      	str	r1, [r7, #8]
 8002834:	4613      	mov	r3, r2
 8002836:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002838:	88fb      	ldrh	r3, [r7, #6]
 800283a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d07e      	beq.n	8002940 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800284a:	b29b      	uxth	r3, r3
 800284c:	461a      	mov	r2, r3
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	00db      	lsls	r3, r3, #3
 8002854:	4413      	add	r3, r2
 8002856:	3302      	adds	r3, #2
 8002858:	005b      	lsls	r3, r3, #1
 800285a:	68fa      	ldr	r2, [r7, #12]
 800285c:	6812      	ldr	r2, [r2, #0]
 800285e:	4413      	add	r3, r2
 8002860:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002864:	881b      	ldrh	r3, [r3, #0]
 8002866:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800286a:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= count)
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	699a      	ldr	r2, [r3, #24]
 8002870:	8bfb      	ldrh	r3, [r7, #30]
 8002872:	429a      	cmp	r2, r3
 8002874:	d306      	bcc.n	8002884 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	699a      	ldr	r2, [r3, #24]
 800287a:	8bfb      	ldrh	r3, [r7, #30]
 800287c:	1ad2      	subs	r2, r2, r3
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	619a      	str	r2, [r3, #24]
 8002882:	e002      	b.n	800288a <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	2200      	movs	r2, #0
 8002888:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	699b      	ldr	r3, [r3, #24]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d123      	bne.n	80028da <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	461a      	mov	r2, r3
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	4413      	add	r3, r2
 80028a0:	881b      	ldrh	r3, [r3, #0]
 80028a2:	b29b      	uxth	r3, r3
 80028a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80028a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028ac:	83bb      	strh	r3, [r7, #28]
 80028ae:	8bbb      	ldrh	r3, [r7, #28]
 80028b0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80028b4:	83bb      	strh	r3, [r7, #28]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	461a      	mov	r2, r3
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	441a      	add	r2, r3
 80028c4:	8bbb      	ldrh	r3, [r7, #28]
 80028c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80028ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80028ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028d6:	b29b      	uxth	r3, r3
 80028d8:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80028da:	88fb      	ldrh	r3, [r7, #6]
 80028dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d01f      	beq.n	8002924 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	461a      	mov	r2, r3
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	781b      	ldrb	r3, [r3, #0]
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	4413      	add	r3, r2
 80028f2:	881b      	ldrh	r3, [r3, #0]
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028fe:	837b      	strh	r3, [r7, #26]
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	461a      	mov	r2, r3
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	781b      	ldrb	r3, [r3, #0]
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	441a      	add	r2, r3
 800290e:	8b7b      	ldrh	r3, [r7, #26]
 8002910:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002914:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002918:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800291c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002920:	b29b      	uxth	r3, r3
 8002922:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002924:	8bfb      	ldrh	r3, [r7, #30]
 8002926:	2b00      	cmp	r3, #0
 8002928:	f000 8087 	beq.w	8002a3a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6818      	ldr	r0, [r3, #0]
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	6959      	ldr	r1, [r3, #20]
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	891a      	ldrh	r2, [r3, #8]
 8002938:	8bfb      	ldrh	r3, [r7, #30]
 800293a:	f004 ff72 	bl	8007822 <USB_ReadPMA>
 800293e:	e07c      	b.n	8002a3a <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002948:	b29b      	uxth	r3, r3
 800294a:	461a      	mov	r2, r3
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	00db      	lsls	r3, r3, #3
 8002952:	4413      	add	r3, r2
 8002954:	3306      	adds	r3, #6
 8002956:	005b      	lsls	r3, r3, #1
 8002958:	68fa      	ldr	r2, [r7, #12]
 800295a:	6812      	ldr	r2, [r2, #0]
 800295c:	4413      	add	r3, r2
 800295e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002962:	881b      	ldrh	r3, [r3, #0]
 8002964:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002968:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= count)
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	699a      	ldr	r2, [r3, #24]
 800296e:	8bfb      	ldrh	r3, [r7, #30]
 8002970:	429a      	cmp	r2, r3
 8002972:	d306      	bcc.n	8002982 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	699a      	ldr	r2, [r3, #24]
 8002978:	8bfb      	ldrh	r3, [r7, #30]
 800297a:	1ad2      	subs	r2, r2, r3
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	619a      	str	r2, [r3, #24]
 8002980:	e002      	b.n	8002988 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	2200      	movs	r2, #0
 8002986:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	699b      	ldr	r3, [r3, #24]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d123      	bne.n	80029d8 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	461a      	mov	r2, r3
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	781b      	ldrb	r3, [r3, #0]
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	4413      	add	r3, r2
 800299e:	881b      	ldrh	r3, [r3, #0]
 80029a0:	b29b      	uxth	r3, r3
 80029a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80029a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029aa:	833b      	strh	r3, [r7, #24]
 80029ac:	8b3b      	ldrh	r3, [r7, #24]
 80029ae:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80029b2:	833b      	strh	r3, [r7, #24]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	461a      	mov	r2, r3
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	781b      	ldrb	r3, [r3, #0]
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	441a      	add	r2, r3
 80029c2:	8b3b      	ldrh	r3, [r7, #24]
 80029c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80029c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80029cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80029d8:	88fb      	ldrh	r3, [r7, #6]
 80029da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d11f      	bne.n	8002a22 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	461a      	mov	r2, r3
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	4413      	add	r3, r2
 80029f0:	881b      	ldrh	r3, [r3, #0]
 80029f2:	b29b      	uxth	r3, r3
 80029f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029fc:	82fb      	strh	r3, [r7, #22]
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	461a      	mov	r2, r3
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	441a      	add	r2, r3
 8002a0c:	8afb      	ldrh	r3, [r7, #22]
 8002a0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a1a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002a1e:	b29b      	uxth	r3, r3
 8002a20:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002a22:	8bfb      	ldrh	r3, [r7, #30]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d008      	beq.n	8002a3a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	6818      	ldr	r0, [r3, #0]
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	6959      	ldr	r1, [r3, #20]
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	895a      	ldrh	r2, [r3, #10]
 8002a34:	8bfb      	ldrh	r3, [r7, #30]
 8002a36:	f004 fef4 	bl	8007822 <USB_ReadPMA>
    }
  }

  return count;
 8002a3a:	8bfb      	ldrh	r3, [r7, #30]
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3720      	adds	r7, #32
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}

08002a44 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b0a4      	sub	sp, #144	; 0x90
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	60f8      	str	r0, [r7, #12]
 8002a4c:	60b9      	str	r1, [r7, #8]
 8002a4e:	4613      	mov	r3, r2
 8002a50:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002a52:	88fb      	ldrh	r3, [r7, #6]
 8002a54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	f000 81dd 	beq.w	8002e18 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a66:	b29b      	uxth	r3, r3
 8002a68:	461a      	mov	r2, r3
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	00db      	lsls	r3, r3, #3
 8002a70:	4413      	add	r3, r2
 8002a72:	3302      	adds	r3, #2
 8002a74:	005b      	lsls	r3, r3, #1
 8002a76:	68fa      	ldr	r2, [r7, #12]
 8002a78:	6812      	ldr	r2, [r2, #0]
 8002a7a:	4413      	add	r3, r2
 8002a7c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a80:	881b      	ldrh	r3, [r3, #0]
 8002a82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a86:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82

    if (ep->xfer_len > TxByteNbre)
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	699a      	ldr	r2, [r3, #24]
 8002a8e:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d907      	bls.n	8002aa6 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	699a      	ldr	r2, [r3, #24]
 8002a9a:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8002a9e:	1ad2      	subs	r2, r2, r3
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	619a      	str	r2, [r3, #24]
 8002aa4:	e002      	b.n	8002aac <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	699b      	ldr	r3, [r3, #24]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	f040 80bb 	bne.w	8002c2c <HAL_PCD_EP_DB_Transmit+0x1e8>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	785b      	ldrb	r3, [r3, #1]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d126      	bne.n	8002b0c <HAL_PCD_EP_DB_Transmit+0xc8>
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002acc:	b29b      	uxth	r3, r3
 8002ace:	461a      	mov	r2, r3
 8002ad0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002ad2:	4413      	add	r3, r2
 8002ad4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	011a      	lsls	r2, r3, #4
 8002adc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002ade:	4413      	add	r3, r2
 8002ae0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002ae4:	67bb      	str	r3, [r7, #120]	; 0x78
 8002ae6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ae8:	881b      	ldrh	r3, [r3, #0]
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002af0:	b29a      	uxth	r2, r3
 8002af2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002af4:	801a      	strh	r2, [r3, #0]
 8002af6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002af8:	881b      	ldrh	r3, [r3, #0]
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b04:	b29a      	uxth	r2, r3
 8002b06:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b08:	801a      	strh	r2, [r3, #0]
 8002b0a:	e01a      	b.n	8002b42 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	785b      	ldrb	r3, [r3, #1]
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d116      	bne.n	8002b42 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	677b      	str	r3, [r7, #116]	; 0x74
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b22:	b29b      	uxth	r3, r3
 8002b24:	461a      	mov	r2, r3
 8002b26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b28:	4413      	add	r3, r2
 8002b2a:	677b      	str	r3, [r7, #116]	; 0x74
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	011a      	lsls	r2, r3, #4
 8002b32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b34:	4413      	add	r3, r2
 8002b36:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002b3a:	673b      	str	r3, [r7, #112]	; 0x70
 8002b3c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b3e:	2200      	movs	r2, #0
 8002b40:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	785b      	ldrb	r3, [r3, #1]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d126      	bne.n	8002b9e <HAL_PCD_EP_DB_Transmit+0x15a>
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	66bb      	str	r3, [r7, #104]	; 0x68
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b5e:	b29b      	uxth	r3, r3
 8002b60:	461a      	mov	r2, r3
 8002b62:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b64:	4413      	add	r3, r2
 8002b66:	66bb      	str	r3, [r7, #104]	; 0x68
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	011a      	lsls	r2, r3, #4
 8002b6e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b70:	4413      	add	r3, r2
 8002b72:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002b76:	667b      	str	r3, [r7, #100]	; 0x64
 8002b78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b7a:	881b      	ldrh	r3, [r3, #0]
 8002b7c:	b29b      	uxth	r3, r3
 8002b7e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002b82:	b29a      	uxth	r2, r3
 8002b84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b86:	801a      	strh	r2, [r3, #0]
 8002b88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b8a:	881b      	ldrh	r3, [r3, #0]
 8002b8c:	b29b      	uxth	r3, r3
 8002b8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b96:	b29a      	uxth	r2, r3
 8002b98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b9a:	801a      	strh	r2, [r3, #0]
 8002b9c:	e017      	b.n	8002bce <HAL_PCD_EP_DB_Transmit+0x18a>
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	785b      	ldrb	r3, [r3, #1]
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d113      	bne.n	8002bce <HAL_PCD_EP_DB_Transmit+0x18a>
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bae:	b29b      	uxth	r3, r3
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bb4:	4413      	add	r3, r2
 8002bb6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	011a      	lsls	r2, r3, #4
 8002bbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bc0:	4413      	add	r3, r2
 8002bc2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002bc6:	663b      	str	r3, [r7, #96]	; 0x60
 8002bc8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002bca:	2200      	movs	r2, #0
 8002bcc:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	781b      	ldrb	r3, [r3, #0]
 8002bd2:	4619      	mov	r1, r3
 8002bd4:	68f8      	ldr	r0, [r7, #12]
 8002bd6:	f007 fe00 	bl	800a7da <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002bda:	88fb      	ldrh	r3, [r7, #6]
 8002bdc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	f000 82f1 	beq.w	80031c8 <HAL_PCD_EP_DB_Transmit+0x784>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	461a      	mov	r2, r3
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	4413      	add	r3, r2
 8002bf4:	881b      	ldrh	r3, [r3, #0]
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c00:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	461a      	mov	r2, r3
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	441a      	add	r2, r3
 8002c12:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8002c16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c1e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c26:	b29b      	uxth	r3, r3
 8002c28:	8013      	strh	r3, [r2, #0]
 8002c2a:	e2cd      	b.n	80031c8 <HAL_PCD_EP_DB_Transmit+0x784>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002c2c:	88fb      	ldrh	r3, [r7, #6]
 8002c2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d021      	beq.n	8002c7a <HAL_PCD_EP_DB_Transmit+0x236>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	4413      	add	r3, r2
 8002c44:	881b      	ldrh	r3, [r3, #0]
 8002c46:	b29b      	uxth	r3, r3
 8002c48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c50:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	461a      	mov	r2, r3
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	441a      	add	r2, r3
 8002c62:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8002c66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c6e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	f040 82a1 	bne.w	80031c8 <HAL_PCD_EP_DB_Transmit+0x784>
      {
        ep->xfer_buff += TxByteNbre;
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	695a      	ldr	r2, [r3, #20]
 8002c8a:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8002c8e:	441a      	add	r2, r3
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	69da      	ldr	r2, [r3, #28]
 8002c98:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8002c9c:	441a      	add	r2, r3
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	6a1a      	ldr	r2, [r3, #32]
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	691b      	ldr	r3, [r3, #16]
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d30b      	bcc.n	8002cc6 <HAL_PCD_EP_DB_Transmit+0x282>
        {
          len = ep->maxpacket;
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	691b      	ldr	r3, [r3, #16]
 8002cb2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	6a1a      	ldr	r2, [r3, #32]
 8002cba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002cbe:	1ad2      	subs	r2, r2, r3
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	621a      	str	r2, [r3, #32]
 8002cc4:	e017      	b.n	8002cf6 <HAL_PCD_EP_DB_Transmit+0x2b2>
        }
        else if (ep->xfer_len_db == 0U)
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	6a1b      	ldr	r3, [r3, #32]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d108      	bne.n	8002ce0 <HAL_PCD_EP_DB_Transmit+0x29c>
        {
          len = TxByteNbre;
 8002cce:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8002cd2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002cde:	e00a      	b.n	8002cf6 <HAL_PCD_EP_DB_Transmit+0x2b2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	6a1b      	ldr	r3, [r3, #32]
 8002cec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	785b      	ldrb	r3, [r3, #1]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d163      	bne.n	8002dc6 <HAL_PCD_EP_DB_Transmit+0x382>
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	65bb      	str	r3, [r7, #88]	; 0x58
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d0c:	b29b      	uxth	r3, r3
 8002d0e:	461a      	mov	r2, r3
 8002d10:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d12:	4413      	add	r3, r2
 8002d14:	65bb      	str	r3, [r7, #88]	; 0x58
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	011a      	lsls	r2, r3, #4
 8002d1c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d1e:	4413      	add	r3, r2
 8002d20:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002d24:	657b      	str	r3, [r7, #84]	; 0x54
 8002d26:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d112      	bne.n	8002d54 <HAL_PCD_EP_DB_Transmit+0x310>
 8002d2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d30:	881b      	ldrh	r3, [r3, #0]
 8002d32:	b29b      	uxth	r3, r3
 8002d34:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002d38:	b29a      	uxth	r2, r3
 8002d3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d3c:	801a      	strh	r2, [r3, #0]
 8002d3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d40:	881b      	ldrh	r3, [r3, #0]
 8002d42:	b29b      	uxth	r3, r3
 8002d44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d4c:	b29a      	uxth	r2, r3
 8002d4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d50:	801a      	strh	r2, [r3, #0]
 8002d52:	e055      	b.n	8002e00 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002d54:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d58:	2b3e      	cmp	r3, #62	; 0x3e
 8002d5a:	d817      	bhi.n	8002d8c <HAL_PCD_EP_DB_Transmit+0x348>
 8002d5c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d60:	085b      	lsrs	r3, r3, #1
 8002d62:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002d66:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d6a:	f003 0301 	and.w	r3, r3, #1
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d004      	beq.n	8002d7c <HAL_PCD_EP_DB_Transmit+0x338>
 8002d72:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d76:	3301      	adds	r3, #1
 8002d78:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002d7c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d80:	b29b      	uxth	r3, r3
 8002d82:	029b      	lsls	r3, r3, #10
 8002d84:	b29a      	uxth	r2, r3
 8002d86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d88:	801a      	strh	r2, [r3, #0]
 8002d8a:	e039      	b.n	8002e00 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002d8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d90:	095b      	lsrs	r3, r3, #5
 8002d92:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002d96:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d9a:	f003 031f 	and.w	r3, r3, #31
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d104      	bne.n	8002dac <HAL_PCD_EP_DB_Transmit+0x368>
 8002da2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002da6:	3b01      	subs	r3, #1
 8002da8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002dac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002db0:	b29b      	uxth	r3, r3
 8002db2:	029b      	lsls	r3, r3, #10
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002dba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002dbe:	b29a      	uxth	r2, r3
 8002dc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002dc2:	801a      	strh	r2, [r3, #0]
 8002dc4:	e01c      	b.n	8002e00 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	785b      	ldrb	r3, [r3, #1]
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d118      	bne.n	8002e00 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	653b      	str	r3, [r7, #80]	; 0x50
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ddc:	b29b      	uxth	r3, r3
 8002dde:	461a      	mov	r2, r3
 8002de0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002de2:	4413      	add	r3, r2
 8002de4:	653b      	str	r3, [r7, #80]	; 0x50
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	011a      	lsls	r2, r3, #4
 8002dec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002dee:	4413      	add	r3, r2
 8002df0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002df4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002df6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002dfa:	b29a      	uxth	r2, r3
 8002dfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dfe:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	6818      	ldr	r0, [r3, #0]
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	6959      	ldr	r1, [r3, #20]
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	891a      	ldrh	r2, [r3, #8]
 8002e0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	f004 fcc2 	bl	800779a <USB_WritePMA>
 8002e16:	e1d7      	b.n	80031c8 <HAL_PCD_EP_DB_Transmit+0x784>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	461a      	mov	r2, r3
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	00db      	lsls	r3, r3, #3
 8002e2a:	4413      	add	r3, r2
 8002e2c:	3306      	adds	r3, #6
 8002e2e:	005b      	lsls	r3, r3, #1
 8002e30:	68fa      	ldr	r2, [r7, #12]
 8002e32:	6812      	ldr	r2, [r2, #0]
 8002e34:	4413      	add	r3, r2
 8002e36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e3a:	881b      	ldrh	r3, [r3, #0]
 8002e3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e40:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82

    if (ep->xfer_len >= TxByteNbre)
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	699a      	ldr	r2, [r3, #24]
 8002e48:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d307      	bcc.n	8002e60 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxByteNbre;
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	699a      	ldr	r2, [r3, #24]
 8002e54:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8002e58:	1ad2      	subs	r2, r2, r3
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	619a      	str	r2, [r3, #24]
 8002e5e:	e002      	b.n	8002e66 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	2200      	movs	r2, #0
 8002e64:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	699b      	ldr	r3, [r3, #24]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	f040 80b9 	bne.w	8002fe2 <HAL_PCD_EP_DB_Transmit+0x59e>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	785b      	ldrb	r3, [r3, #1]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d126      	bne.n	8002ec6 <HAL_PCD_EP_DB_Transmit+0x482>
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	64bb      	str	r3, [r7, #72]	; 0x48
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e86:	b29b      	uxth	r3, r3
 8002e88:	461a      	mov	r2, r3
 8002e8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e8c:	4413      	add	r3, r2
 8002e8e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	011a      	lsls	r2, r3, #4
 8002e96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e98:	4413      	add	r3, r2
 8002e9a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002e9e:	647b      	str	r3, [r7, #68]	; 0x44
 8002ea0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ea2:	881b      	ldrh	r3, [r3, #0]
 8002ea4:	b29b      	uxth	r3, r3
 8002ea6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002eaa:	b29a      	uxth	r2, r3
 8002eac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002eae:	801a      	strh	r2, [r3, #0]
 8002eb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002eb2:	881b      	ldrh	r3, [r3, #0]
 8002eb4:	b29b      	uxth	r3, r3
 8002eb6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002eba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ebe:	b29a      	uxth	r2, r3
 8002ec0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ec2:	801a      	strh	r2, [r3, #0]
 8002ec4:	e01a      	b.n	8002efc <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	785b      	ldrb	r3, [r3, #1]
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d116      	bne.n	8002efc <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	643b      	str	r3, [r7, #64]	; 0x40
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002edc:	b29b      	uxth	r3, r3
 8002ede:	461a      	mov	r2, r3
 8002ee0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ee2:	4413      	add	r3, r2
 8002ee4:	643b      	str	r3, [r7, #64]	; 0x40
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	781b      	ldrb	r3, [r3, #0]
 8002eea:	011a      	lsls	r2, r3, #4
 8002eec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002eee:	4413      	add	r3, r2
 8002ef0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002ef4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ef6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ef8:	2200      	movs	r2, #0
 8002efa:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	785b      	ldrb	r3, [r3, #1]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d126      	bne.n	8002f58 <HAL_PCD_EP_DB_Transmit+0x514>
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	637b      	str	r3, [r7, #52]	; 0x34
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f18:	b29b      	uxth	r3, r3
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f1e:	4413      	add	r3, r2
 8002f20:	637b      	str	r3, [r7, #52]	; 0x34
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	011a      	lsls	r2, r3, #4
 8002f28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f2a:	4413      	add	r3, r2
 8002f2c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002f30:	633b      	str	r3, [r7, #48]	; 0x30
 8002f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f34:	881b      	ldrh	r3, [r3, #0]
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002f3c:	b29a      	uxth	r2, r3
 8002f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f40:	801a      	strh	r2, [r3, #0]
 8002f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f44:	881b      	ldrh	r3, [r3, #0]
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f50:	b29a      	uxth	r2, r3
 8002f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f54:	801a      	strh	r2, [r3, #0]
 8002f56:	e017      	b.n	8002f88 <HAL_PCD_EP_DB_Transmit+0x544>
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	785b      	ldrb	r3, [r3, #1]
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d113      	bne.n	8002f88 <HAL_PCD_EP_DB_Transmit+0x544>
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f68:	b29b      	uxth	r3, r3
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f6e:	4413      	add	r3, r2
 8002f70:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	781b      	ldrb	r3, [r3, #0]
 8002f76:	011a      	lsls	r2, r3, #4
 8002f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f7a:	4413      	add	r3, r2
 8002f7c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002f80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f84:	2200      	movs	r2, #0
 8002f86:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	781b      	ldrb	r3, [r3, #0]
 8002f8c:	4619      	mov	r1, r3
 8002f8e:	68f8      	ldr	r0, [r7, #12]
 8002f90:	f007 fc23 	bl	800a7da <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002f94:	88fb      	ldrh	r3, [r7, #6]
 8002f96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	f040 8114 	bne.w	80031c8 <HAL_PCD_EP_DB_Transmit+0x784>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	4413      	add	r3, r2
 8002fae:	881b      	ldrh	r3, [r3, #0]
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fba:	857b      	strh	r3, [r7, #42]	; 0x2a
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	781b      	ldrb	r3, [r3, #0]
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	441a      	add	r2, r3
 8002fca:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002fcc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002fd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002fd4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002fd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fdc:	b29b      	uxth	r3, r3
 8002fde:	8013      	strh	r3, [r2, #0]
 8002fe0:	e0f2      	b.n	80031c8 <HAL_PCD_EP_DB_Transmit+0x784>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002fe2:	88fb      	ldrh	r3, [r7, #6]
 8002fe4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d11f      	bne.n	800302c <HAL_PCD_EP_DB_Transmit+0x5e8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	781b      	ldrb	r3, [r3, #0]
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	4413      	add	r3, r2
 8002ffa:	881b      	ldrh	r3, [r3, #0]
 8002ffc:	b29b      	uxth	r3, r3
 8002ffe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003002:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003006:	853b      	strh	r3, [r7, #40]	; 0x28
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	461a      	mov	r2, r3
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	781b      	ldrb	r3, [r3, #0]
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	441a      	add	r2, r3
 8003016:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003018:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800301c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003020:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003024:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003028:	b29b      	uxth	r3, r3
 800302a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003032:	2b01      	cmp	r3, #1
 8003034:	f040 80c8 	bne.w	80031c8 <HAL_PCD_EP_DB_Transmit+0x784>
      {
        ep->xfer_buff += TxByteNbre;
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	695a      	ldr	r2, [r3, #20]
 800303c:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8003040:	441a      	add	r2, r3
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	69da      	ldr	r2, [r3, #28]
 800304a:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800304e:	441a      	add	r2, r3
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	6a1a      	ldr	r2, [r3, #32]
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	691b      	ldr	r3, [r3, #16]
 800305c:	429a      	cmp	r2, r3
 800305e:	d30b      	bcc.n	8003078 <HAL_PCD_EP_DB_Transmit+0x634>
        {
          len = ep->maxpacket;
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	691b      	ldr	r3, [r3, #16]
 8003064:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	6a1a      	ldr	r2, [r3, #32]
 800306c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003070:	1ad2      	subs	r2, r2, r3
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	621a      	str	r2, [r3, #32]
 8003076:	e017      	b.n	80030a8 <HAL_PCD_EP_DB_Transmit+0x664>
        }
        else if (ep->xfer_len_db == 0U)
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	6a1b      	ldr	r3, [r3, #32]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d108      	bne.n	8003092 <HAL_PCD_EP_DB_Transmit+0x64e>
        {
          len = TxByteNbre;
 8003080:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8003084:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	2200      	movs	r2, #0
 800308c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003090:	e00a      	b.n	80030a8 <HAL_PCD_EP_DB_Transmit+0x664>
        }
        else
        {
          len = ep->xfer_len_db;
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	6a1b      	ldr	r3, [r3, #32]
 8003096:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	2200      	movs	r2, #0
 800309e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	2200      	movs	r2, #0
 80030a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	627b      	str	r3, [r7, #36]	; 0x24
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	785b      	ldrb	r3, [r3, #1]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d163      	bne.n	800317e <HAL_PCD_EP_DB_Transmit+0x73a>
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	623b      	str	r3, [r7, #32]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	461a      	mov	r2, r3
 80030c8:	6a3b      	ldr	r3, [r7, #32]
 80030ca:	4413      	add	r3, r2
 80030cc:	623b      	str	r3, [r7, #32]
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	781b      	ldrb	r3, [r3, #0]
 80030d2:	011a      	lsls	r2, r3, #4
 80030d4:	6a3b      	ldr	r3, [r7, #32]
 80030d6:	4413      	add	r3, r2
 80030d8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80030dc:	61fb      	str	r3, [r7, #28]
 80030de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d112      	bne.n	800310c <HAL_PCD_EP_DB_Transmit+0x6c8>
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	881b      	ldrh	r3, [r3, #0]
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80030f0:	b29a      	uxth	r2, r3
 80030f2:	69fb      	ldr	r3, [r7, #28]
 80030f4:	801a      	strh	r2, [r3, #0]
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	881b      	ldrh	r3, [r3, #0]
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003100:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003104:	b29a      	uxth	r2, r3
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	801a      	strh	r2, [r3, #0]
 800310a:	e052      	b.n	80031b2 <HAL_PCD_EP_DB_Transmit+0x76e>
 800310c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003110:	2b3e      	cmp	r3, #62	; 0x3e
 8003112:	d817      	bhi.n	8003144 <HAL_PCD_EP_DB_Transmit+0x700>
 8003114:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003118:	085b      	lsrs	r3, r3, #1
 800311a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800311e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003122:	f003 0301 	and.w	r3, r3, #1
 8003126:	2b00      	cmp	r3, #0
 8003128:	d004      	beq.n	8003134 <HAL_PCD_EP_DB_Transmit+0x6f0>
 800312a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800312e:	3301      	adds	r3, #1
 8003130:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003134:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003138:	b29b      	uxth	r3, r3
 800313a:	029b      	lsls	r3, r3, #10
 800313c:	b29a      	uxth	r2, r3
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	801a      	strh	r2, [r3, #0]
 8003142:	e036      	b.n	80031b2 <HAL_PCD_EP_DB_Transmit+0x76e>
 8003144:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003148:	095b      	lsrs	r3, r3, #5
 800314a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800314e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003152:	f003 031f 	and.w	r3, r3, #31
 8003156:	2b00      	cmp	r3, #0
 8003158:	d104      	bne.n	8003164 <HAL_PCD_EP_DB_Transmit+0x720>
 800315a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800315e:	3b01      	subs	r3, #1
 8003160:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003164:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003168:	b29b      	uxth	r3, r3
 800316a:	029b      	lsls	r3, r3, #10
 800316c:	b29b      	uxth	r3, r3
 800316e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003172:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003176:	b29a      	uxth	r2, r3
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	801a      	strh	r2, [r3, #0]
 800317c:	e019      	b.n	80031b2 <HAL_PCD_EP_DB_Transmit+0x76e>
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	785b      	ldrb	r3, [r3, #1]
 8003182:	2b01      	cmp	r3, #1
 8003184:	d115      	bne.n	80031b2 <HAL_PCD_EP_DB_Transmit+0x76e>
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800318e:	b29b      	uxth	r3, r3
 8003190:	461a      	mov	r2, r3
 8003192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003194:	4413      	add	r3, r2
 8003196:	627b      	str	r3, [r7, #36]	; 0x24
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	781b      	ldrb	r3, [r3, #0]
 800319c:	011a      	lsls	r2, r3, #4
 800319e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a0:	4413      	add	r3, r2
 80031a2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80031a6:	61bb      	str	r3, [r7, #24]
 80031a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80031ac:	b29a      	uxth	r2, r3
 80031ae:	69bb      	ldr	r3, [r7, #24]
 80031b0:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	6818      	ldr	r0, [r3, #0]
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	6959      	ldr	r1, [r3, #20]
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	895a      	ldrh	r2, [r3, #10]
 80031be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	f004 fae9 	bl	800779a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	461a      	mov	r2, r3
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	781b      	ldrb	r3, [r3, #0]
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	4413      	add	r3, r2
 80031d6:	881b      	ldrh	r3, [r3, #0]
 80031d8:	b29b      	uxth	r3, r3
 80031da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031e2:	82fb      	strh	r3, [r7, #22]
 80031e4:	8afb      	ldrh	r3, [r7, #22]
 80031e6:	f083 0310 	eor.w	r3, r3, #16
 80031ea:	82fb      	strh	r3, [r7, #22]
 80031ec:	8afb      	ldrh	r3, [r7, #22]
 80031ee:	f083 0320 	eor.w	r3, r3, #32
 80031f2:	82fb      	strh	r3, [r7, #22]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	461a      	mov	r2, r3
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	781b      	ldrb	r3, [r3, #0]
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	441a      	add	r2, r3
 8003202:	8afb      	ldrh	r3, [r7, #22]
 8003204:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003208:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800320c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003210:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003214:	b29b      	uxth	r3, r3
 8003216:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003218:	2300      	movs	r3, #0
}
 800321a:	4618      	mov	r0, r3
 800321c:	3790      	adds	r7, #144	; 0x90
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}

08003222 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003222:	b480      	push	{r7}
 8003224:	b087      	sub	sp, #28
 8003226:	af00      	add	r7, sp, #0
 8003228:	60f8      	str	r0, [r7, #12]
 800322a:	607b      	str	r3, [r7, #4]
 800322c:	460b      	mov	r3, r1
 800322e:	817b      	strh	r3, [r7, #10]
 8003230:	4613      	mov	r3, r2
 8003232:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003234:	897b      	ldrh	r3, [r7, #10]
 8003236:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800323a:	b29b      	uxth	r3, r3
 800323c:	2b00      	cmp	r3, #0
 800323e:	d00b      	beq.n	8003258 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003240:	897b      	ldrh	r3, [r7, #10]
 8003242:	f003 0307 	and.w	r3, r3, #7
 8003246:	1c5a      	adds	r2, r3, #1
 8003248:	4613      	mov	r3, r2
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	4413      	add	r3, r2
 800324e:	00db      	lsls	r3, r3, #3
 8003250:	68fa      	ldr	r2, [r7, #12]
 8003252:	4413      	add	r3, r2
 8003254:	617b      	str	r3, [r7, #20]
 8003256:	e009      	b.n	800326c <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003258:	897a      	ldrh	r2, [r7, #10]
 800325a:	4613      	mov	r3, r2
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	4413      	add	r3, r2
 8003260:	00db      	lsls	r3, r3, #3
 8003262:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003266:	68fa      	ldr	r2, [r7, #12]
 8003268:	4413      	add	r3, r2
 800326a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800326c:	893b      	ldrh	r3, [r7, #8]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d107      	bne.n	8003282 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	2200      	movs	r2, #0
 8003276:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	b29a      	uxth	r2, r3
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	80da      	strh	r2, [r3, #6]
 8003280:	e00b      	b.n	800329a <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	2201      	movs	r2, #1
 8003286:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	b29a      	uxth	r2, r3
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	0c1b      	lsrs	r3, r3, #16
 8003294:	b29a      	uxth	r2, r3
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800329a:	2300      	movs	r3, #0
}
 800329c:	4618      	mov	r0, r3
 800329e:	371c      	adds	r7, #28
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bc80      	pop	{r7}
 80032a4:	4770      	bx	lr
	...

080032a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b086      	sub	sp, #24
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d101      	bne.n	80032ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e35c      	b.n	8003974 <HAL_RCC_OscConfig+0x6cc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d01c      	beq.n	80032fc <HAL_RCC_OscConfig+0x54>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 0301 	and.w	r3, r3, #1
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d116      	bne.n	80032fc <HAL_RCC_OscConfig+0x54>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 0302 	and.w	r3, r3, #2
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d110      	bne.n	80032fc <HAL_RCC_OscConfig+0x54>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0308 	and.w	r3, r3, #8
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d10a      	bne.n	80032fc <HAL_RCC_OscConfig+0x54>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0304 	and.w	r3, r3, #4
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d104      	bne.n	80032fc <HAL_RCC_OscConfig+0x54>
 80032f2:	f240 1167 	movw	r1, #359	; 0x167
 80032f6:	48a5      	ldr	r0, [pc, #660]	; (800358c <HAL_RCC_OscConfig+0x2e4>)
 80032f8:	f7fd f93c 	bl	8000574 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0301 	and.w	r3, r3, #1
 8003304:	2b00      	cmp	r3, #0
 8003306:	f000 809a 	beq.w	800343e <HAL_RCC_OscConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d00e      	beq.n	8003330 <HAL_RCC_OscConfig+0x88>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800331a:	d009      	beq.n	8003330 <HAL_RCC_OscConfig+0x88>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003324:	d004      	beq.n	8003330 <HAL_RCC_OscConfig+0x88>
 8003326:	f240 116d 	movw	r1, #365	; 0x16d
 800332a:	4898      	ldr	r0, [pc, #608]	; (800358c <HAL_RCC_OscConfig+0x2e4>)
 800332c:	f7fd f922 	bl	8000574 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003330:	4b97      	ldr	r3, [pc, #604]	; (8003590 <HAL_RCC_OscConfig+0x2e8>)
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	f003 030c 	and.w	r3, r3, #12
 8003338:	2b04      	cmp	r3, #4
 800333a:	d00c      	beq.n	8003356 <HAL_RCC_OscConfig+0xae>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800333c:	4b94      	ldr	r3, [pc, #592]	; (8003590 <HAL_RCC_OscConfig+0x2e8>)
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	f003 030c 	and.w	r3, r3, #12
 8003344:	2b08      	cmp	r3, #8
 8003346:	d112      	bne.n	800336e <HAL_RCC_OscConfig+0xc6>
 8003348:	4b91      	ldr	r3, [pc, #580]	; (8003590 <HAL_RCC_OscConfig+0x2e8>)
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003350:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003354:	d10b      	bne.n	800336e <HAL_RCC_OscConfig+0xc6>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003356:	4b8e      	ldr	r3, [pc, #568]	; (8003590 <HAL_RCC_OscConfig+0x2e8>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d06c      	beq.n	800343c <HAL_RCC_OscConfig+0x194>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d168      	bne.n	800343c <HAL_RCC_OscConfig+0x194>
      {
        return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e302      	b.n	8003974 <HAL_RCC_OscConfig+0x6cc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003376:	d106      	bne.n	8003386 <HAL_RCC_OscConfig+0xde>
 8003378:	4a85      	ldr	r2, [pc, #532]	; (8003590 <HAL_RCC_OscConfig+0x2e8>)
 800337a:	4b85      	ldr	r3, [pc, #532]	; (8003590 <HAL_RCC_OscConfig+0x2e8>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003382:	6013      	str	r3, [r2, #0]
 8003384:	e02e      	b.n	80033e4 <HAL_RCC_OscConfig+0x13c>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d10c      	bne.n	80033a8 <HAL_RCC_OscConfig+0x100>
 800338e:	4a80      	ldr	r2, [pc, #512]	; (8003590 <HAL_RCC_OscConfig+0x2e8>)
 8003390:	4b7f      	ldr	r3, [pc, #508]	; (8003590 <HAL_RCC_OscConfig+0x2e8>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003398:	6013      	str	r3, [r2, #0]
 800339a:	4a7d      	ldr	r2, [pc, #500]	; (8003590 <HAL_RCC_OscConfig+0x2e8>)
 800339c:	4b7c      	ldr	r3, [pc, #496]	; (8003590 <HAL_RCC_OscConfig+0x2e8>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033a4:	6013      	str	r3, [r2, #0]
 80033a6:	e01d      	b.n	80033e4 <HAL_RCC_OscConfig+0x13c>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033b0:	d10c      	bne.n	80033cc <HAL_RCC_OscConfig+0x124>
 80033b2:	4a77      	ldr	r2, [pc, #476]	; (8003590 <HAL_RCC_OscConfig+0x2e8>)
 80033b4:	4b76      	ldr	r3, [pc, #472]	; (8003590 <HAL_RCC_OscConfig+0x2e8>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033bc:	6013      	str	r3, [r2, #0]
 80033be:	4a74      	ldr	r2, [pc, #464]	; (8003590 <HAL_RCC_OscConfig+0x2e8>)
 80033c0:	4b73      	ldr	r3, [pc, #460]	; (8003590 <HAL_RCC_OscConfig+0x2e8>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033c8:	6013      	str	r3, [r2, #0]
 80033ca:	e00b      	b.n	80033e4 <HAL_RCC_OscConfig+0x13c>
 80033cc:	4a70      	ldr	r2, [pc, #448]	; (8003590 <HAL_RCC_OscConfig+0x2e8>)
 80033ce:	4b70      	ldr	r3, [pc, #448]	; (8003590 <HAL_RCC_OscConfig+0x2e8>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033d6:	6013      	str	r3, [r2, #0]
 80033d8:	4a6d      	ldr	r2, [pc, #436]	; (8003590 <HAL_RCC_OscConfig+0x2e8>)
 80033da:	4b6d      	ldr	r3, [pc, #436]	; (8003590 <HAL_RCC_OscConfig+0x2e8>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033e2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d013      	beq.n	8003414 <HAL_RCC_OscConfig+0x16c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ec:	f7fd fb86 	bl	8000afc <HAL_GetTick>
 80033f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033f2:	e008      	b.n	8003406 <HAL_RCC_OscConfig+0x15e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033f4:	f7fd fb82 	bl	8000afc <HAL_GetTick>
 80033f8:	4602      	mov	r2, r0
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	2b64      	cmp	r3, #100	; 0x64
 8003400:	d901      	bls.n	8003406 <HAL_RCC_OscConfig+0x15e>
          {
            return HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	e2b6      	b.n	8003974 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003406:	4b62      	ldr	r3, [pc, #392]	; (8003590 <HAL_RCC_OscConfig+0x2e8>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d0f0      	beq.n	80033f4 <HAL_RCC_OscConfig+0x14c>
 8003412:	e014      	b.n	800343e <HAL_RCC_OscConfig+0x196>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003414:	f7fd fb72 	bl	8000afc <HAL_GetTick>
 8003418:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800341a:	e008      	b.n	800342e <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800341c:	f7fd fb6e 	bl	8000afc <HAL_GetTick>
 8003420:	4602      	mov	r2, r0
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	2b64      	cmp	r3, #100	; 0x64
 8003428:	d901      	bls.n	800342e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	e2a2      	b.n	8003974 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800342e:	4b58      	ldr	r3, [pc, #352]	; (8003590 <HAL_RCC_OscConfig+0x2e8>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d1f0      	bne.n	800341c <HAL_RCC_OscConfig+0x174>
 800343a:	e000      	b.n	800343e <HAL_RCC_OscConfig+0x196>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800343c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 0302 	and.w	r3, r3, #2
 8003446:	2b00      	cmp	r3, #0
 8003448:	d079      	beq.n	800353e <HAL_RCC_OscConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	691b      	ldr	r3, [r3, #16]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d008      	beq.n	8003464 <HAL_RCC_OscConfig+0x1bc>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	691b      	ldr	r3, [r3, #16]
 8003456:	2b01      	cmp	r3, #1
 8003458:	d004      	beq.n	8003464 <HAL_RCC_OscConfig+0x1bc>
 800345a:	f240 11a1 	movw	r1, #417	; 0x1a1
 800345e:	484b      	ldr	r0, [pc, #300]	; (800358c <HAL_RCC_OscConfig+0x2e4>)
 8003460:	f7fd f888 	bl	8000574 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	695b      	ldr	r3, [r3, #20]
 8003468:	2b1f      	cmp	r3, #31
 800346a:	d904      	bls.n	8003476 <HAL_RCC_OscConfig+0x1ce>
 800346c:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 8003470:	4846      	ldr	r0, [pc, #280]	; (800358c <HAL_RCC_OscConfig+0x2e4>)
 8003472:	f7fd f87f 	bl	8000574 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003476:	4b46      	ldr	r3, [pc, #280]	; (8003590 <HAL_RCC_OscConfig+0x2e8>)
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	f003 030c 	and.w	r3, r3, #12
 800347e:	2b00      	cmp	r3, #0
 8003480:	d00b      	beq.n	800349a <HAL_RCC_OscConfig+0x1f2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003482:	4b43      	ldr	r3, [pc, #268]	; (8003590 <HAL_RCC_OscConfig+0x2e8>)
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	f003 030c 	and.w	r3, r3, #12
 800348a:	2b08      	cmp	r3, #8
 800348c:	d11c      	bne.n	80034c8 <HAL_RCC_OscConfig+0x220>
 800348e:	4b40      	ldr	r3, [pc, #256]	; (8003590 <HAL_RCC_OscConfig+0x2e8>)
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003496:	2b00      	cmp	r3, #0
 8003498:	d116      	bne.n	80034c8 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800349a:	4b3d      	ldr	r3, [pc, #244]	; (8003590 <HAL_RCC_OscConfig+0x2e8>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 0302 	and.w	r3, r3, #2
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d005      	beq.n	80034b2 <HAL_RCC_OscConfig+0x20a>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	691b      	ldr	r3, [r3, #16]
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d001      	beq.n	80034b2 <HAL_RCC_OscConfig+0x20a>
      {
        return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e260      	b.n	8003974 <HAL_RCC_OscConfig+0x6cc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034b2:	4937      	ldr	r1, [pc, #220]	; (8003590 <HAL_RCC_OscConfig+0x2e8>)
 80034b4:	4b36      	ldr	r3, [pc, #216]	; (8003590 <HAL_RCC_OscConfig+0x2e8>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	695b      	ldr	r3, [r3, #20]
 80034c0:	00db      	lsls	r3, r3, #3
 80034c2:	4313      	orrs	r3, r2
 80034c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034c6:	e03a      	b.n	800353e <HAL_RCC_OscConfig+0x296>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	691b      	ldr	r3, [r3, #16]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d020      	beq.n	8003512 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034d0:	4b30      	ldr	r3, [pc, #192]	; (8003594 <HAL_RCC_OscConfig+0x2ec>)
 80034d2:	2201      	movs	r2, #1
 80034d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034d6:	f7fd fb11 	bl	8000afc <HAL_GetTick>
 80034da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034dc:	e008      	b.n	80034f0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034de:	f7fd fb0d 	bl	8000afc <HAL_GetTick>
 80034e2:	4602      	mov	r2, r0
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	1ad3      	subs	r3, r2, r3
 80034e8:	2b02      	cmp	r3, #2
 80034ea:	d901      	bls.n	80034f0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80034ec:	2303      	movs	r3, #3
 80034ee:	e241      	b.n	8003974 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034f0:	4b27      	ldr	r3, [pc, #156]	; (8003590 <HAL_RCC_OscConfig+0x2e8>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 0302 	and.w	r3, r3, #2
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d0f0      	beq.n	80034de <HAL_RCC_OscConfig+0x236>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034fc:	4924      	ldr	r1, [pc, #144]	; (8003590 <HAL_RCC_OscConfig+0x2e8>)
 80034fe:	4b24      	ldr	r3, [pc, #144]	; (8003590 <HAL_RCC_OscConfig+0x2e8>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	695b      	ldr	r3, [r3, #20]
 800350a:	00db      	lsls	r3, r3, #3
 800350c:	4313      	orrs	r3, r2
 800350e:	600b      	str	r3, [r1, #0]
 8003510:	e015      	b.n	800353e <HAL_RCC_OscConfig+0x296>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003512:	4b20      	ldr	r3, [pc, #128]	; (8003594 <HAL_RCC_OscConfig+0x2ec>)
 8003514:	2200      	movs	r2, #0
 8003516:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003518:	f7fd faf0 	bl	8000afc <HAL_GetTick>
 800351c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800351e:	e008      	b.n	8003532 <HAL_RCC_OscConfig+0x28a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003520:	f7fd faec 	bl	8000afc <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	2b02      	cmp	r3, #2
 800352c:	d901      	bls.n	8003532 <HAL_RCC_OscConfig+0x28a>
          {
            return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e220      	b.n	8003974 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003532:	4b17      	ldr	r3, [pc, #92]	; (8003590 <HAL_RCC_OscConfig+0x2e8>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0302 	and.w	r3, r3, #2
 800353a:	2b00      	cmp	r3, #0
 800353c:	d1f0      	bne.n	8003520 <HAL_RCC_OscConfig+0x278>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 0308 	and.w	r3, r3, #8
 8003546:	2b00      	cmp	r3, #0
 8003548:	d048      	beq.n	80035dc <HAL_RCC_OscConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	699b      	ldr	r3, [r3, #24]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d008      	beq.n	8003564 <HAL_RCC_OscConfig+0x2bc>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	699b      	ldr	r3, [r3, #24]
 8003556:	2b01      	cmp	r3, #1
 8003558:	d004      	beq.n	8003564 <HAL_RCC_OscConfig+0x2bc>
 800355a:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 800355e:	480b      	ldr	r0, [pc, #44]	; (800358c <HAL_RCC_OscConfig+0x2e4>)
 8003560:	f7fd f808 	bl	8000574 <assert_failed>

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	699b      	ldr	r3, [r3, #24]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d021      	beq.n	80035b0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800356c:	4b0a      	ldr	r3, [pc, #40]	; (8003598 <HAL_RCC_OscConfig+0x2f0>)
 800356e:	2201      	movs	r2, #1
 8003570:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003572:	f7fd fac3 	bl	8000afc <HAL_GetTick>
 8003576:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003578:	e010      	b.n	800359c <HAL_RCC_OscConfig+0x2f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800357a:	f7fd fabf 	bl	8000afc <HAL_GetTick>
 800357e:	4602      	mov	r2, r0
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	2b02      	cmp	r3, #2
 8003586:	d909      	bls.n	800359c <HAL_RCC_OscConfig+0x2f4>
        {
          return HAL_TIMEOUT;
 8003588:	2303      	movs	r3, #3
 800358a:	e1f3      	b.n	8003974 <HAL_RCC_OscConfig+0x6cc>
 800358c:	0800af9c 	.word	0x0800af9c
 8003590:	40021000 	.word	0x40021000
 8003594:	42420000 	.word	0x42420000
 8003598:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800359c:	4b67      	ldr	r3, [pc, #412]	; (800373c <HAL_RCC_OscConfig+0x494>)
 800359e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a0:	f003 0302 	and.w	r3, r3, #2
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d0e8      	beq.n	800357a <HAL_RCC_OscConfig+0x2d2>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80035a8:	2001      	movs	r0, #1
 80035aa:	f000 fc53 	bl	8003e54 <RCC_Delay>
 80035ae:	e015      	b.n	80035dc <HAL_RCC_OscConfig+0x334>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035b0:	4b63      	ldr	r3, [pc, #396]	; (8003740 <HAL_RCC_OscConfig+0x498>)
 80035b2:	2200      	movs	r2, #0
 80035b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035b6:	f7fd faa1 	bl	8000afc <HAL_GetTick>
 80035ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035bc:	e008      	b.n	80035d0 <HAL_RCC_OscConfig+0x328>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035be:	f7fd fa9d 	bl	8000afc <HAL_GetTick>
 80035c2:	4602      	mov	r2, r0
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	2b02      	cmp	r3, #2
 80035ca:	d901      	bls.n	80035d0 <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 80035cc:	2303      	movs	r3, #3
 80035ce:	e1d1      	b.n	8003974 <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035d0:	4b5a      	ldr	r3, [pc, #360]	; (800373c <HAL_RCC_OscConfig+0x494>)
 80035d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d4:	f003 0302 	and.w	r3, r3, #2
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d1f0      	bne.n	80035be <HAL_RCC_OscConfig+0x316>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 0304 	and.w	r3, r3, #4
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	f000 80c0 	beq.w	800376a <HAL_RCC_OscConfig+0x4c2>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035ea:	2300      	movs	r3, #0
 80035ec:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	68db      	ldr	r3, [r3, #12]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d00c      	beq.n	8003610 <HAL_RCC_OscConfig+0x368>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	68db      	ldr	r3, [r3, #12]
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d008      	beq.n	8003610 <HAL_RCC_OscConfig+0x368>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	68db      	ldr	r3, [r3, #12]
 8003602:	2b05      	cmp	r3, #5
 8003604:	d004      	beq.n	8003610 <HAL_RCC_OscConfig+0x368>
 8003606:	f240 2111 	movw	r1, #529	; 0x211
 800360a:	484e      	ldr	r0, [pc, #312]	; (8003744 <HAL_RCC_OscConfig+0x49c>)
 800360c:	f7fc ffb2 	bl	8000574 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003610:	4b4a      	ldr	r3, [pc, #296]	; (800373c <HAL_RCC_OscConfig+0x494>)
 8003612:	69db      	ldr	r3, [r3, #28]
 8003614:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003618:	2b00      	cmp	r3, #0
 800361a:	d10d      	bne.n	8003638 <HAL_RCC_OscConfig+0x390>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800361c:	4a47      	ldr	r2, [pc, #284]	; (800373c <HAL_RCC_OscConfig+0x494>)
 800361e:	4b47      	ldr	r3, [pc, #284]	; (800373c <HAL_RCC_OscConfig+0x494>)
 8003620:	69db      	ldr	r3, [r3, #28]
 8003622:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003626:	61d3      	str	r3, [r2, #28]
 8003628:	4b44      	ldr	r3, [pc, #272]	; (800373c <HAL_RCC_OscConfig+0x494>)
 800362a:	69db      	ldr	r3, [r3, #28]
 800362c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003630:	60bb      	str	r3, [r7, #8]
 8003632:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003634:	2301      	movs	r3, #1
 8003636:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003638:	4b43      	ldr	r3, [pc, #268]	; (8003748 <HAL_RCC_OscConfig+0x4a0>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003640:	2b00      	cmp	r3, #0
 8003642:	d118      	bne.n	8003676 <HAL_RCC_OscConfig+0x3ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003644:	4a40      	ldr	r2, [pc, #256]	; (8003748 <HAL_RCC_OscConfig+0x4a0>)
 8003646:	4b40      	ldr	r3, [pc, #256]	; (8003748 <HAL_RCC_OscConfig+0x4a0>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800364e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003650:	f7fd fa54 	bl	8000afc <HAL_GetTick>
 8003654:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003656:	e008      	b.n	800366a <HAL_RCC_OscConfig+0x3c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003658:	f7fd fa50 	bl	8000afc <HAL_GetTick>
 800365c:	4602      	mov	r2, r0
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	2b64      	cmp	r3, #100	; 0x64
 8003664:	d901      	bls.n	800366a <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	e184      	b.n	8003974 <HAL_RCC_OscConfig+0x6cc>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800366a:	4b37      	ldr	r3, [pc, #220]	; (8003748 <HAL_RCC_OscConfig+0x4a0>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003672:	2b00      	cmp	r3, #0
 8003674:	d0f0      	beq.n	8003658 <HAL_RCC_OscConfig+0x3b0>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	68db      	ldr	r3, [r3, #12]
 800367a:	2b01      	cmp	r3, #1
 800367c:	d106      	bne.n	800368c <HAL_RCC_OscConfig+0x3e4>
 800367e:	4a2f      	ldr	r2, [pc, #188]	; (800373c <HAL_RCC_OscConfig+0x494>)
 8003680:	4b2e      	ldr	r3, [pc, #184]	; (800373c <HAL_RCC_OscConfig+0x494>)
 8003682:	6a1b      	ldr	r3, [r3, #32]
 8003684:	f043 0301 	orr.w	r3, r3, #1
 8003688:	6213      	str	r3, [r2, #32]
 800368a:	e02d      	b.n	80036e8 <HAL_RCC_OscConfig+0x440>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	68db      	ldr	r3, [r3, #12]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d10c      	bne.n	80036ae <HAL_RCC_OscConfig+0x406>
 8003694:	4a29      	ldr	r2, [pc, #164]	; (800373c <HAL_RCC_OscConfig+0x494>)
 8003696:	4b29      	ldr	r3, [pc, #164]	; (800373c <HAL_RCC_OscConfig+0x494>)
 8003698:	6a1b      	ldr	r3, [r3, #32]
 800369a:	f023 0301 	bic.w	r3, r3, #1
 800369e:	6213      	str	r3, [r2, #32]
 80036a0:	4a26      	ldr	r2, [pc, #152]	; (800373c <HAL_RCC_OscConfig+0x494>)
 80036a2:	4b26      	ldr	r3, [pc, #152]	; (800373c <HAL_RCC_OscConfig+0x494>)
 80036a4:	6a1b      	ldr	r3, [r3, #32]
 80036a6:	f023 0304 	bic.w	r3, r3, #4
 80036aa:	6213      	str	r3, [r2, #32]
 80036ac:	e01c      	b.n	80036e8 <HAL_RCC_OscConfig+0x440>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	68db      	ldr	r3, [r3, #12]
 80036b2:	2b05      	cmp	r3, #5
 80036b4:	d10c      	bne.n	80036d0 <HAL_RCC_OscConfig+0x428>
 80036b6:	4a21      	ldr	r2, [pc, #132]	; (800373c <HAL_RCC_OscConfig+0x494>)
 80036b8:	4b20      	ldr	r3, [pc, #128]	; (800373c <HAL_RCC_OscConfig+0x494>)
 80036ba:	6a1b      	ldr	r3, [r3, #32]
 80036bc:	f043 0304 	orr.w	r3, r3, #4
 80036c0:	6213      	str	r3, [r2, #32]
 80036c2:	4a1e      	ldr	r2, [pc, #120]	; (800373c <HAL_RCC_OscConfig+0x494>)
 80036c4:	4b1d      	ldr	r3, [pc, #116]	; (800373c <HAL_RCC_OscConfig+0x494>)
 80036c6:	6a1b      	ldr	r3, [r3, #32]
 80036c8:	f043 0301 	orr.w	r3, r3, #1
 80036cc:	6213      	str	r3, [r2, #32]
 80036ce:	e00b      	b.n	80036e8 <HAL_RCC_OscConfig+0x440>
 80036d0:	4a1a      	ldr	r2, [pc, #104]	; (800373c <HAL_RCC_OscConfig+0x494>)
 80036d2:	4b1a      	ldr	r3, [pc, #104]	; (800373c <HAL_RCC_OscConfig+0x494>)
 80036d4:	6a1b      	ldr	r3, [r3, #32]
 80036d6:	f023 0301 	bic.w	r3, r3, #1
 80036da:	6213      	str	r3, [r2, #32]
 80036dc:	4a17      	ldr	r2, [pc, #92]	; (800373c <HAL_RCC_OscConfig+0x494>)
 80036de:	4b17      	ldr	r3, [pc, #92]	; (800373c <HAL_RCC_OscConfig+0x494>)
 80036e0:	6a1b      	ldr	r3, [r3, #32]
 80036e2:	f023 0304 	bic.w	r3, r3, #4
 80036e6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d015      	beq.n	800371c <HAL_RCC_OscConfig+0x474>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036f0:	f7fd fa04 	bl	8000afc <HAL_GetTick>
 80036f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036f6:	e00a      	b.n	800370e <HAL_RCC_OscConfig+0x466>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036f8:	f7fd fa00 	bl	8000afc <HAL_GetTick>
 80036fc:	4602      	mov	r2, r0
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	1ad3      	subs	r3, r2, r3
 8003702:	f241 3288 	movw	r2, #5000	; 0x1388
 8003706:	4293      	cmp	r3, r2
 8003708:	d901      	bls.n	800370e <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800370a:	2303      	movs	r3, #3
 800370c:	e132      	b.n	8003974 <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800370e:	4b0b      	ldr	r3, [pc, #44]	; (800373c <HAL_RCC_OscConfig+0x494>)
 8003710:	6a1b      	ldr	r3, [r3, #32]
 8003712:	f003 0302 	and.w	r3, r3, #2
 8003716:	2b00      	cmp	r3, #0
 8003718:	d0ee      	beq.n	80036f8 <HAL_RCC_OscConfig+0x450>
 800371a:	e01d      	b.n	8003758 <HAL_RCC_OscConfig+0x4b0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800371c:	f7fd f9ee 	bl	8000afc <HAL_GetTick>
 8003720:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003722:	e013      	b.n	800374c <HAL_RCC_OscConfig+0x4a4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003724:	f7fd f9ea 	bl	8000afc <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003732:	4293      	cmp	r3, r2
 8003734:	d90a      	bls.n	800374c <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8003736:	2303      	movs	r3, #3
 8003738:	e11c      	b.n	8003974 <HAL_RCC_OscConfig+0x6cc>
 800373a:	bf00      	nop
 800373c:	40021000 	.word	0x40021000
 8003740:	42420480 	.word	0x42420480
 8003744:	0800af9c 	.word	0x0800af9c
 8003748:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800374c:	4b8b      	ldr	r3, [pc, #556]	; (800397c <HAL_RCC_OscConfig+0x6d4>)
 800374e:	6a1b      	ldr	r3, [r3, #32]
 8003750:	f003 0302 	and.w	r3, r3, #2
 8003754:	2b00      	cmp	r3, #0
 8003756:	d1e5      	bne.n	8003724 <HAL_RCC_OscConfig+0x47c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003758:	7dfb      	ldrb	r3, [r7, #23]
 800375a:	2b01      	cmp	r3, #1
 800375c:	d105      	bne.n	800376a <HAL_RCC_OscConfig+0x4c2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800375e:	4a87      	ldr	r2, [pc, #540]	; (800397c <HAL_RCC_OscConfig+0x6d4>)
 8003760:	4b86      	ldr	r3, [pc, #536]	; (800397c <HAL_RCC_OscConfig+0x6d4>)
 8003762:	69db      	ldr	r3, [r3, #28]
 8003764:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003768:	61d3      	str	r3, [r2, #28]
  }

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	69db      	ldr	r3, [r3, #28]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d00c      	beq.n	800378c <HAL_RCC_OscConfig+0x4e4>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	69db      	ldr	r3, [r3, #28]
 8003776:	2b01      	cmp	r3, #1
 8003778:	d008      	beq.n	800378c <HAL_RCC_OscConfig+0x4e4>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	69db      	ldr	r3, [r3, #28]
 800377e:	2b02      	cmp	r3, #2
 8003780:	d004      	beq.n	800378c <HAL_RCC_OscConfig+0x4e4>
 8003782:	f240 21af 	movw	r1, #687	; 0x2af
 8003786:	487e      	ldr	r0, [pc, #504]	; (8003980 <HAL_RCC_OscConfig+0x6d8>)
 8003788:	f7fc fef4 	bl	8000574 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	69db      	ldr	r3, [r3, #28]
 8003790:	2b00      	cmp	r3, #0
 8003792:	f000 80ee 	beq.w	8003972 <HAL_RCC_OscConfig+0x6ca>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003796:	4b79      	ldr	r3, [pc, #484]	; (800397c <HAL_RCC_OscConfig+0x6d4>)
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	f003 030c 	and.w	r3, r3, #12
 800379e:	2b08      	cmp	r3, #8
 80037a0:	f000 80ce 	beq.w	8003940 <HAL_RCC_OscConfig+0x698>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	69db      	ldr	r3, [r3, #28]
 80037a8:	2b02      	cmp	r3, #2
 80037aa:	f040 80b2 	bne.w	8003912 <HAL_RCC_OscConfig+0x66a>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6a1b      	ldr	r3, [r3, #32]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d009      	beq.n	80037ca <HAL_RCC_OscConfig+0x522>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6a1b      	ldr	r3, [r3, #32]
 80037ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037be:	d004      	beq.n	80037ca <HAL_RCC_OscConfig+0x522>
 80037c0:	f44f 712e 	mov.w	r1, #696	; 0x2b8
 80037c4:	486e      	ldr	r0, [pc, #440]	; (8003980 <HAL_RCC_OscConfig+0x6d8>)
 80037c6:	f7fc fed5 	bl	8000574 <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d04a      	beq.n	8003868 <HAL_RCC_OscConfig+0x5c0>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80037da:	d045      	beq.n	8003868 <HAL_RCC_OscConfig+0x5c0>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80037e4:	d040      	beq.n	8003868 <HAL_RCC_OscConfig+0x5c0>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ea:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80037ee:	d03b      	beq.n	8003868 <HAL_RCC_OscConfig+0x5c0>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037f8:	d036      	beq.n	8003868 <HAL_RCC_OscConfig+0x5c0>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fe:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003802:	d031      	beq.n	8003868 <HAL_RCC_OscConfig+0x5c0>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003808:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800380c:	d02c      	beq.n	8003868 <HAL_RCC_OscConfig+0x5c0>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003812:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003816:	d027      	beq.n	8003868 <HAL_RCC_OscConfig+0x5c0>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003820:	d022      	beq.n	8003868 <HAL_RCC_OscConfig+0x5c0>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003826:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800382a:	d01d      	beq.n	8003868 <HAL_RCC_OscConfig+0x5c0>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003830:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003834:	d018      	beq.n	8003868 <HAL_RCC_OscConfig+0x5c0>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800383e:	d013      	beq.n	8003868 <HAL_RCC_OscConfig+0x5c0>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003844:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003848:	d00e      	beq.n	8003868 <HAL_RCC_OscConfig+0x5c0>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384e:	f5b3 1f50 	cmp.w	r3, #3407872	; 0x340000
 8003852:	d009      	beq.n	8003868 <HAL_RCC_OscConfig+0x5c0>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003858:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 800385c:	d004      	beq.n	8003868 <HAL_RCC_OscConfig+0x5c0>
 800385e:	f240 21b9 	movw	r1, #697	; 0x2b9
 8003862:	4847      	ldr	r0, [pc, #284]	; (8003980 <HAL_RCC_OscConfig+0x6d8>)
 8003864:	f7fc fe86 	bl	8000574 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003868:	4b46      	ldr	r3, [pc, #280]	; (8003984 <HAL_RCC_OscConfig+0x6dc>)
 800386a:	2200      	movs	r2, #0
 800386c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800386e:	f7fd f945 	bl	8000afc <HAL_GetTick>
 8003872:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003874:	e008      	b.n	8003888 <HAL_RCC_OscConfig+0x5e0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003876:	f7fd f941 	bl	8000afc <HAL_GetTick>
 800387a:	4602      	mov	r2, r0
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	1ad3      	subs	r3, r2, r3
 8003880:	2b02      	cmp	r3, #2
 8003882:	d901      	bls.n	8003888 <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 8003884:	2303      	movs	r3, #3
 8003886:	e075      	b.n	8003974 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003888:	4b3c      	ldr	r3, [pc, #240]	; (800397c <HAL_RCC_OscConfig+0x6d4>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003890:	2b00      	cmp	r3, #0
 8003892:	d1f0      	bne.n	8003876 <HAL_RCC_OscConfig+0x5ce>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6a1b      	ldr	r3, [r3, #32]
 8003898:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800389c:	d116      	bne.n	80038cc <HAL_RCC_OscConfig+0x624>
        {
          /* Check the parameter */
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d009      	beq.n	80038ba <HAL_RCC_OscConfig+0x612>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80038ae:	d004      	beq.n	80038ba <HAL_RCC_OscConfig+0x612>
 80038b0:	f240 21cf 	movw	r1, #719	; 0x2cf
 80038b4:	4832      	ldr	r0, [pc, #200]	; (8003980 <HAL_RCC_OscConfig+0x6d8>)
 80038b6:	f7fc fe5d 	bl	8000574 <assert_failed>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80038ba:	4930      	ldr	r1, [pc, #192]	; (800397c <HAL_RCC_OscConfig+0x6d4>)
 80038bc:	4b2f      	ldr	r3, [pc, #188]	; (800397c <HAL_RCC_OscConfig+0x6d4>)
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	4313      	orrs	r3, r2
 80038ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038cc:	482b      	ldr	r0, [pc, #172]	; (800397c <HAL_RCC_OscConfig+0x6d4>)
 80038ce:	4b2b      	ldr	r3, [pc, #172]	; (800397c <HAL_RCC_OscConfig+0x6d4>)
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6a19      	ldr	r1, [r3, #32]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038de:	430b      	orrs	r3, r1
 80038e0:	4313      	orrs	r3, r2
 80038e2:	6043      	str	r3, [r0, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038e4:	4b27      	ldr	r3, [pc, #156]	; (8003984 <HAL_RCC_OscConfig+0x6dc>)
 80038e6:	2201      	movs	r2, #1
 80038e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ea:	f7fd f907 	bl	8000afc <HAL_GetTick>
 80038ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80038f0:	e008      	b.n	8003904 <HAL_RCC_OscConfig+0x65c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038f2:	f7fd f903 	bl	8000afc <HAL_GetTick>
 80038f6:	4602      	mov	r2, r0
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	1ad3      	subs	r3, r2, r3
 80038fc:	2b02      	cmp	r3, #2
 80038fe:	d901      	bls.n	8003904 <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 8003900:	2303      	movs	r3, #3
 8003902:	e037      	b.n	8003974 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003904:	4b1d      	ldr	r3, [pc, #116]	; (800397c <HAL_RCC_OscConfig+0x6d4>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800390c:	2b00      	cmp	r3, #0
 800390e:	d0f0      	beq.n	80038f2 <HAL_RCC_OscConfig+0x64a>
 8003910:	e02f      	b.n	8003972 <HAL_RCC_OscConfig+0x6ca>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003912:	4b1c      	ldr	r3, [pc, #112]	; (8003984 <HAL_RCC_OscConfig+0x6dc>)
 8003914:	2200      	movs	r2, #0
 8003916:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003918:	f7fd f8f0 	bl	8000afc <HAL_GetTick>
 800391c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800391e:	e008      	b.n	8003932 <HAL_RCC_OscConfig+0x68a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003920:	f7fd f8ec 	bl	8000afc <HAL_GetTick>
 8003924:	4602      	mov	r2, r0
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	2b02      	cmp	r3, #2
 800392c:	d901      	bls.n	8003932 <HAL_RCC_OscConfig+0x68a>
          {
            return HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	e020      	b.n	8003974 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003932:	4b12      	ldr	r3, [pc, #72]	; (800397c <HAL_RCC_OscConfig+0x6d4>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d1f0      	bne.n	8003920 <HAL_RCC_OscConfig+0x678>
 800393e:	e018      	b.n	8003972 <HAL_RCC_OscConfig+0x6ca>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	69db      	ldr	r3, [r3, #28]
 8003944:	2b01      	cmp	r3, #1
 8003946:	d101      	bne.n	800394c <HAL_RCC_OscConfig+0x6a4>
      {
        return HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	e013      	b.n	8003974 <HAL_RCC_OscConfig+0x6cc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800394c:	4b0b      	ldr	r3, [pc, #44]	; (800397c <HAL_RCC_OscConfig+0x6d4>)
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6a1b      	ldr	r3, [r3, #32]
 800395c:	429a      	cmp	r2, r3
 800395e:	d106      	bne.n	800396e <HAL_RCC_OscConfig+0x6c6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800396a:	429a      	cmp	r2, r3
 800396c:	d001      	beq.n	8003972 <HAL_RCC_OscConfig+0x6ca>
        {
          return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e000      	b.n	8003974 <HAL_RCC_OscConfig+0x6cc>
        }
      }
    }
  }

  return HAL_OK;
 8003972:	2300      	movs	r3, #0
}
 8003974:	4618      	mov	r0, r3
 8003976:	3718      	adds	r7, #24
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}
 800397c:	40021000 	.word	0x40021000
 8003980:	0800af9c 	.word	0x0800af9c
 8003984:	42420060 	.word	0x42420060

08003988 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b084      	sub	sp, #16
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d101      	bne.n	800399c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	e176      	b.n	8003c8a <HAL_RCC_ClockConfig+0x302>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0301 	and.w	r3, r3, #1
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d116      	bne.n	80039d6 <HAL_RCC_ClockConfig+0x4e>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 0302 	and.w	r3, r3, #2
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d110      	bne.n	80039d6 <HAL_RCC_ClockConfig+0x4e>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 0304 	and.w	r3, r3, #4
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d10a      	bne.n	80039d6 <HAL_RCC_ClockConfig+0x4e>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 0308 	and.w	r3, r3, #8
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d104      	bne.n	80039d6 <HAL_RCC_ClockConfig+0x4e>
 80039cc:	f44f 714e 	mov.w	r1, #824	; 0x338
 80039d0:	4874      	ldr	r0, [pc, #464]	; (8003ba4 <HAL_RCC_ClockConfig+0x21c>)
 80039d2:	f7fc fdcf 	bl	8000574 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d00a      	beq.n	80039f2 <HAL_RCC_ClockConfig+0x6a>
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d007      	beq.n	80039f2 <HAL_RCC_ClockConfig+0x6a>
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	2b02      	cmp	r3, #2
 80039e6:	d004      	beq.n	80039f2 <HAL_RCC_ClockConfig+0x6a>
 80039e8:	f240 3139 	movw	r1, #825	; 0x339
 80039ec:	486d      	ldr	r0, [pc, #436]	; (8003ba4 <HAL_RCC_ClockConfig+0x21c>)
 80039ee:	f7fc fdc1 	bl	8000574 <assert_failed>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039f2:	4b6d      	ldr	r3, [pc, #436]	; (8003ba8 <HAL_RCC_ClockConfig+0x220>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 0207 	and.w	r2, r3, #7
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d210      	bcs.n	8003a22 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a00:	4969      	ldr	r1, [pc, #420]	; (8003ba8 <HAL_RCC_ClockConfig+0x220>)
 8003a02:	4b69      	ldr	r3, [pc, #420]	; (8003ba8 <HAL_RCC_ClockConfig+0x220>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f023 0207 	bic.w	r2, r3, #7
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a10:	4b65      	ldr	r3, [pc, #404]	; (8003ba8 <HAL_RCC_ClockConfig+0x220>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 0207 	and.w	r2, r3, #7
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d001      	beq.n	8003a22 <HAL_RCC_ClockConfig+0x9a>
  {
    return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e133      	b.n	8003c8a <HAL_RCC_ClockConfig+0x302>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0302 	and.w	r3, r3, #2
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d049      	beq.n	8003ac2 <HAL_RCC_ClockConfig+0x13a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 0304 	and.w	r3, r3, #4
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d005      	beq.n	8003a46 <HAL_RCC_ClockConfig+0xbe>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a3a:	4a5c      	ldr	r2, [pc, #368]	; (8003bac <HAL_RCC_ClockConfig+0x224>)
 8003a3c:	4b5b      	ldr	r3, [pc, #364]	; (8003bac <HAL_RCC_ClockConfig+0x224>)
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003a44:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0308 	and.w	r3, r3, #8
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d005      	beq.n	8003a5e <HAL_RCC_ClockConfig+0xd6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a52:	4a56      	ldr	r2, [pc, #344]	; (8003bac <HAL_RCC_ClockConfig+0x224>)
 8003a54:	4b55      	ldr	r3, [pc, #340]	; (8003bac <HAL_RCC_ClockConfig+0x224>)
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003a5c:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d024      	beq.n	8003ab0 <HAL_RCC_ClockConfig+0x128>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	2b80      	cmp	r3, #128	; 0x80
 8003a6c:	d020      	beq.n	8003ab0 <HAL_RCC_ClockConfig+0x128>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	2b90      	cmp	r3, #144	; 0x90
 8003a74:	d01c      	beq.n	8003ab0 <HAL_RCC_ClockConfig+0x128>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	2ba0      	cmp	r3, #160	; 0xa0
 8003a7c:	d018      	beq.n	8003ab0 <HAL_RCC_ClockConfig+0x128>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	2bb0      	cmp	r3, #176	; 0xb0
 8003a84:	d014      	beq.n	8003ab0 <HAL_RCC_ClockConfig+0x128>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	2bc0      	cmp	r3, #192	; 0xc0
 8003a8c:	d010      	beq.n	8003ab0 <HAL_RCC_ClockConfig+0x128>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	2bd0      	cmp	r3, #208	; 0xd0
 8003a94:	d00c      	beq.n	8003ab0 <HAL_RCC_ClockConfig+0x128>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	2be0      	cmp	r3, #224	; 0xe0
 8003a9c:	d008      	beq.n	8003ab0 <HAL_RCC_ClockConfig+0x128>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	2bf0      	cmp	r3, #240	; 0xf0
 8003aa4:	d004      	beq.n	8003ab0 <HAL_RCC_ClockConfig+0x128>
 8003aa6:	f240 315f 	movw	r1, #863	; 0x35f
 8003aaa:	483e      	ldr	r0, [pc, #248]	; (8003ba4 <HAL_RCC_ClockConfig+0x21c>)
 8003aac:	f7fc fd62 	bl	8000574 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ab0:	493e      	ldr	r1, [pc, #248]	; (8003bac <HAL_RCC_ClockConfig+0x224>)
 8003ab2:	4b3e      	ldr	r3, [pc, #248]	; (8003bac <HAL_RCC_ClockConfig+0x224>)
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 0301 	and.w	r3, r3, #1
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d051      	beq.n	8003b72 <HAL_RCC_ClockConfig+0x1ea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d00c      	beq.n	8003af0 <HAL_RCC_ClockConfig+0x168>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d008      	beq.n	8003af0 <HAL_RCC_ClockConfig+0x168>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	2b02      	cmp	r3, #2
 8003ae4:	d004      	beq.n	8003af0 <HAL_RCC_ClockConfig+0x168>
 8003ae6:	f240 3166 	movw	r1, #870	; 0x366
 8003aea:	482e      	ldr	r0, [pc, #184]	; (8003ba4 <HAL_RCC_ClockConfig+0x21c>)
 8003aec:	f7fc fd42 	bl	8000574 <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d107      	bne.n	8003b08 <HAL_RCC_ClockConfig+0x180>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003af8:	4b2c      	ldr	r3, [pc, #176]	; (8003bac <HAL_RCC_ClockConfig+0x224>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d115      	bne.n	8003b30 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	e0c0      	b.n	8003c8a <HAL_RCC_ClockConfig+0x302>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	2b02      	cmp	r3, #2
 8003b0e:	d107      	bne.n	8003b20 <HAL_RCC_ClockConfig+0x198>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b10:	4b26      	ldr	r3, [pc, #152]	; (8003bac <HAL_RCC_ClockConfig+0x224>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d109      	bne.n	8003b30 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e0b4      	b.n	8003c8a <HAL_RCC_ClockConfig+0x302>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b20:	4b22      	ldr	r3, [pc, #136]	; (8003bac <HAL_RCC_ClockConfig+0x224>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 0302 	and.w	r3, r3, #2
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d101      	bne.n	8003b30 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e0ac      	b.n	8003c8a <HAL_RCC_ClockConfig+0x302>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b30:	491e      	ldr	r1, [pc, #120]	; (8003bac <HAL_RCC_ClockConfig+0x224>)
 8003b32:	4b1e      	ldr	r3, [pc, #120]	; (8003bac <HAL_RCC_ClockConfig+0x224>)
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	f023 0203 	bic.w	r2, r3, #3
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b42:	f7fc ffdb 	bl	8000afc <HAL_GetTick>
 8003b46:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b48:	e00a      	b.n	8003b60 <HAL_RCC_ClockConfig+0x1d8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b4a:	f7fc ffd7 	bl	8000afc <HAL_GetTick>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d901      	bls.n	8003b60 <HAL_RCC_ClockConfig+0x1d8>
      {
        return HAL_TIMEOUT;
 8003b5c:	2303      	movs	r3, #3
 8003b5e:	e094      	b.n	8003c8a <HAL_RCC_ClockConfig+0x302>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b60:	4b12      	ldr	r3, [pc, #72]	; (8003bac <HAL_RCC_ClockConfig+0x224>)
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	f003 020c 	and.w	r2, r3, #12
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	009b      	lsls	r3, r3, #2
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d1eb      	bne.n	8003b4a <HAL_RCC_ClockConfig+0x1c2>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b72:	4b0d      	ldr	r3, [pc, #52]	; (8003ba8 <HAL_RCC_ClockConfig+0x220>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 0207 	and.w	r2, r3, #7
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d917      	bls.n	8003bb0 <HAL_RCC_ClockConfig+0x228>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b80:	4909      	ldr	r1, [pc, #36]	; (8003ba8 <HAL_RCC_ClockConfig+0x220>)
 8003b82:	4b09      	ldr	r3, [pc, #36]	; (8003ba8 <HAL_RCC_ClockConfig+0x220>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f023 0207 	bic.w	r2, r3, #7
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b90:	4b05      	ldr	r3, [pc, #20]	; (8003ba8 <HAL_RCC_ClockConfig+0x220>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 0207 	and.w	r2, r3, #7
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d008      	beq.n	8003bb0 <HAL_RCC_ClockConfig+0x228>
  {
    return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e073      	b.n	8003c8a <HAL_RCC_ClockConfig+0x302>
 8003ba2:	bf00      	nop
 8003ba4:	0800af9c 	.word	0x0800af9c
 8003ba8:	40022000 	.word	0x40022000
 8003bac:	40021000 	.word	0x40021000
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f003 0304 	and.w	r3, r3, #4
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d025      	beq.n	8003c08 <HAL_RCC_ClockConfig+0x280>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d018      	beq.n	8003bf6 <HAL_RCC_ClockConfig+0x26e>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bcc:	d013      	beq.n	8003bf6 <HAL_RCC_ClockConfig+0x26e>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	68db      	ldr	r3, [r3, #12]
 8003bd2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003bd6:	d00e      	beq.n	8003bf6 <HAL_RCC_ClockConfig+0x26e>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003be0:	d009      	beq.n	8003bf6 <HAL_RCC_ClockConfig+0x26e>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	68db      	ldr	r3, [r3, #12]
 8003be6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003bea:	d004      	beq.n	8003bf6 <HAL_RCC_ClockConfig+0x26e>
 8003bec:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 8003bf0:	4828      	ldr	r0, [pc, #160]	; (8003c94 <HAL_RCC_ClockConfig+0x30c>)
 8003bf2:	f7fc fcbf 	bl	8000574 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bf6:	4928      	ldr	r1, [pc, #160]	; (8003c98 <HAL_RCC_ClockConfig+0x310>)
 8003bf8:	4b27      	ldr	r3, [pc, #156]	; (8003c98 <HAL_RCC_ClockConfig+0x310>)
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	4313      	orrs	r3, r2
 8003c06:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 0308 	and.w	r3, r3, #8
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d026      	beq.n	8003c62 <HAL_RCC_ClockConfig+0x2da>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	691b      	ldr	r3, [r3, #16]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d018      	beq.n	8003c4e <HAL_RCC_ClockConfig+0x2c6>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	691b      	ldr	r3, [r3, #16]
 8003c20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c24:	d013      	beq.n	8003c4e <HAL_RCC_ClockConfig+0x2c6>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	691b      	ldr	r3, [r3, #16]
 8003c2a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003c2e:	d00e      	beq.n	8003c4e <HAL_RCC_ClockConfig+0x2c6>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	691b      	ldr	r3, [r3, #16]
 8003c34:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003c38:	d009      	beq.n	8003c4e <HAL_RCC_ClockConfig+0x2c6>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	691b      	ldr	r3, [r3, #16]
 8003c3e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003c42:	d004      	beq.n	8003c4e <HAL_RCC_ClockConfig+0x2c6>
 8003c44:	f240 31ab 	movw	r1, #939	; 0x3ab
 8003c48:	4812      	ldr	r0, [pc, #72]	; (8003c94 <HAL_RCC_ClockConfig+0x30c>)
 8003c4a:	f7fc fc93 	bl	8000574 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003c4e:	4912      	ldr	r1, [pc, #72]	; (8003c98 <HAL_RCC_ClockConfig+0x310>)
 8003c50:	4b11      	ldr	r3, [pc, #68]	; (8003c98 <HAL_RCC_ClockConfig+0x310>)
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	691b      	ldr	r3, [r3, #16]
 8003c5c:	00db      	lsls	r3, r3, #3
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003c62:	f000 f821 	bl	8003ca8 <HAL_RCC_GetSysClockFreq>
 8003c66:	4601      	mov	r1, r0
 8003c68:	4b0b      	ldr	r3, [pc, #44]	; (8003c98 <HAL_RCC_ClockConfig+0x310>)
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	091b      	lsrs	r3, r3, #4
 8003c6e:	f003 030f 	and.w	r3, r3, #15
 8003c72:	4a0a      	ldr	r2, [pc, #40]	; (8003c9c <HAL_RCC_ClockConfig+0x314>)
 8003c74:	5cd3      	ldrb	r3, [r2, r3]
 8003c76:	fa21 f303 	lsr.w	r3, r1, r3
 8003c7a:	4a09      	ldr	r2, [pc, #36]	; (8003ca0 <HAL_RCC_ClockConfig+0x318>)
 8003c7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003c7e:	4b09      	ldr	r3, [pc, #36]	; (8003ca4 <HAL_RCC_ClockConfig+0x31c>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4618      	mov	r0, r3
 8003c84:	f7fc fcb8 	bl	80005f8 <HAL_InitTick>

  return HAL_OK;
 8003c88:	2300      	movs	r3, #0
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3710      	adds	r7, #16
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	0800af9c 	.word	0x0800af9c
 8003c98:	40021000 	.word	0x40021000
 8003c9c:	0800b0ec 	.word	0x0800b0ec
 8003ca0:	20000000 	.word	0x20000000
 8003ca4:	20000004 	.word	0x20000004

08003ca8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ca8:	b490      	push	{r4, r7}
 8003caa:	b08a      	sub	sp, #40	; 0x28
 8003cac:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003cae:	4b2a      	ldr	r3, [pc, #168]	; (8003d58 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003cb0:	1d3c      	adds	r4, r7, #4
 8003cb2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003cb4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003cb8:	4b28      	ldr	r3, [pc, #160]	; (8003d5c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003cba:	881b      	ldrh	r3, [r3, #0]
 8003cbc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	61fb      	str	r3, [r7, #28]
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	61bb      	str	r3, [r7, #24]
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	627b      	str	r3, [r7, #36]	; 0x24
 8003cca:	2300      	movs	r3, #0
 8003ccc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003cd2:	4b23      	ldr	r3, [pc, #140]	; (8003d60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003cd8:	69fb      	ldr	r3, [r7, #28]
 8003cda:	f003 030c 	and.w	r3, r3, #12
 8003cde:	2b04      	cmp	r3, #4
 8003ce0:	d002      	beq.n	8003ce8 <HAL_RCC_GetSysClockFreq+0x40>
 8003ce2:	2b08      	cmp	r3, #8
 8003ce4:	d003      	beq.n	8003cee <HAL_RCC_GetSysClockFreq+0x46>
 8003ce6:	e02d      	b.n	8003d44 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003ce8:	4b1e      	ldr	r3, [pc, #120]	; (8003d64 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003cea:	623b      	str	r3, [r7, #32]
      break;
 8003cec:	e02d      	b.n	8003d4a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	0c9b      	lsrs	r3, r3, #18
 8003cf2:	f003 030f 	and.w	r3, r3, #15
 8003cf6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003cfa:	4413      	add	r3, r2
 8003cfc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003d00:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d013      	beq.n	8003d34 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003d0c:	4b14      	ldr	r3, [pc, #80]	; (8003d60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	0c5b      	lsrs	r3, r3, #17
 8003d12:	f003 0301 	and.w	r3, r3, #1
 8003d16:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003d1a:	4413      	add	r3, r2
 8003d1c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003d20:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	4a0f      	ldr	r2, [pc, #60]	; (8003d64 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003d26:	fb02 f203 	mul.w	r2, r2, r3
 8003d2a:	69bb      	ldr	r3, [r7, #24]
 8003d2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d30:	627b      	str	r3, [r7, #36]	; 0x24
 8003d32:	e004      	b.n	8003d3e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	4a0c      	ldr	r2, [pc, #48]	; (8003d68 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003d38:	fb02 f303 	mul.w	r3, r2, r3
 8003d3c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d40:	623b      	str	r3, [r7, #32]
      break;
 8003d42:	e002      	b.n	8003d4a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003d44:	4b07      	ldr	r3, [pc, #28]	; (8003d64 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003d46:	623b      	str	r3, [r7, #32]
      break;
 8003d48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d4a:	6a3b      	ldr	r3, [r7, #32]
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3728      	adds	r7, #40	; 0x28
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bc90      	pop	{r4, r7}
 8003d54:	4770      	bx	lr
 8003d56:	bf00      	nop
 8003d58:	0800afd4 	.word	0x0800afd4
 8003d5c:	0800afe4 	.word	0x0800afe4
 8003d60:	40021000 	.word	0x40021000
 8003d64:	007a1200 	.word	0x007a1200
 8003d68:	003d0900 	.word	0x003d0900

08003d6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d70:	4b02      	ldr	r3, [pc, #8]	; (8003d7c <HAL_RCC_GetHCLKFreq+0x10>)
 8003d72:	681b      	ldr	r3, [r3, #0]
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bc80      	pop	{r7}
 8003d7a:	4770      	bx	lr
 8003d7c:	20000000 	.word	0x20000000

08003d80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003d84:	f7ff fff2 	bl	8003d6c <HAL_RCC_GetHCLKFreq>
 8003d88:	4601      	mov	r1, r0
 8003d8a:	4b05      	ldr	r3, [pc, #20]	; (8003da0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	0a1b      	lsrs	r3, r3, #8
 8003d90:	f003 0307 	and.w	r3, r3, #7
 8003d94:	4a03      	ldr	r2, [pc, #12]	; (8003da4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d96:	5cd3      	ldrb	r3, [r2, r3]
 8003d98:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	bd80      	pop	{r7, pc}
 8003da0:	40021000 	.word	0x40021000
 8003da4:	0800b0fc 	.word	0x0800b0fc

08003da8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003dac:	f7ff ffde 	bl	8003d6c <HAL_RCC_GetHCLKFreq>
 8003db0:	4601      	mov	r1, r0
 8003db2:	4b05      	ldr	r3, [pc, #20]	; (8003dc8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	0adb      	lsrs	r3, r3, #11
 8003db8:	f003 0307 	and.w	r3, r3, #7
 8003dbc:	4a03      	ldr	r2, [pc, #12]	; (8003dcc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003dbe:	5cd3      	ldrb	r3, [r2, r3]
 8003dc0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	bd80      	pop	{r7, pc}
 8003dc8:	40021000 	.word	0x40021000
 8003dcc:	0800b0fc 	.word	0x0800b0fc

08003dd0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b082      	sub	sp, #8
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d104      	bne.n	8003dea <HAL_RCC_GetClockConfig+0x1a>
 8003de0:	f240 5123 	movw	r1, #1315	; 0x523
 8003de4:	4818      	ldr	r0, [pc, #96]	; (8003e48 <HAL_RCC_GetClockConfig+0x78>)
 8003de6:	f7fc fbc5 	bl	8000574 <assert_failed>
  assert_param(pFLatency != NULL);
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d104      	bne.n	8003dfa <HAL_RCC_GetClockConfig+0x2a>
 8003df0:	f240 5124 	movw	r1, #1316	; 0x524
 8003df4:	4814      	ldr	r0, [pc, #80]	; (8003e48 <HAL_RCC_GetClockConfig+0x78>)
 8003df6:	f7fc fbbd 	bl	8000574 <assert_failed>

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	220f      	movs	r2, #15
 8003dfe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003e00:	4b12      	ldr	r3, [pc, #72]	; (8003e4c <HAL_RCC_GetClockConfig+0x7c>)
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	f003 0203 	and.w	r2, r3, #3
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003e0c:	4b0f      	ldr	r3, [pc, #60]	; (8003e4c <HAL_RCC_GetClockConfig+0x7c>)
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003e18:	4b0c      	ldr	r3, [pc, #48]	; (8003e4c <HAL_RCC_GetClockConfig+0x7c>)
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003e24:	4b09      	ldr	r3, [pc, #36]	; (8003e4c <HAL_RCC_GetClockConfig+0x7c>)
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	08db      	lsrs	r3, r3, #3
 8003e2a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003e32:	4b07      	ldr	r3, [pc, #28]	; (8003e50 <HAL_RCC_GetClockConfig+0x80>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 0207 	and.w	r2, r3, #7
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8003e3e:	bf00      	nop
 8003e40:	3708      	adds	r7, #8
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	bf00      	nop
 8003e48:	0800af9c 	.word	0x0800af9c
 8003e4c:	40021000 	.word	0x40021000
 8003e50:	40022000 	.word	0x40022000

08003e54 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b085      	sub	sp, #20
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003e5c:	4b0a      	ldr	r3, [pc, #40]	; (8003e88 <RCC_Delay+0x34>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a0a      	ldr	r2, [pc, #40]	; (8003e8c <RCC_Delay+0x38>)
 8003e62:	fba2 2303 	umull	r2, r3, r2, r3
 8003e66:	0a5b      	lsrs	r3, r3, #9
 8003e68:	687a      	ldr	r2, [r7, #4]
 8003e6a:	fb02 f303 	mul.w	r3, r2, r3
 8003e6e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003e70:	bf00      	nop
  }
  while (Delay --);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	1e5a      	subs	r2, r3, #1
 8003e76:	60fa      	str	r2, [r7, #12]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d1f9      	bne.n	8003e70 <RCC_Delay+0x1c>
}
 8003e7c:	bf00      	nop
 8003e7e:	3714      	adds	r7, #20
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bc80      	pop	{r7}
 8003e84:	4770      	bx	lr
 8003e86:	bf00      	nop
 8003e88:	20000000 	.word	0x20000000
 8003e8c:	10624dd3 	.word	0x10624dd3

08003e90 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b086      	sub	sp, #24
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	613b      	str	r3, [r7, #16]
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	60fb      	str	r3, [r7, #12]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
#endif /* STM32F105xC || STM32F107xC */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 0301 	and.w	r3, r3, #1
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d10f      	bne.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 0302 	and.w	r3, r3, #2
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d109      	bne.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 0310 	and.w	r3, r3, #16
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d103      	bne.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8003ec4:	216c      	movs	r1, #108	; 0x6c
 8003ec6:	4873      	ldr	r0, [pc, #460]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8003ec8:	f7fc fb54 	bl	8000574 <assert_failed>

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 0301 	and.w	r3, r3, #1
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	f000 8095 	beq.w	8004004 <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    FlagStatus pwrclkchanged = RESET;
 8003eda:	2300      	movs	r3, #0
 8003edc:	75fb      	strb	r3, [r7, #23]

    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d012      	beq.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003eee:	d00d      	beq.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ef8:	d008      	beq.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f02:	d003      	beq.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003f04:	2174      	movs	r1, #116	; 0x74
 8003f06:	4863      	ldr	r0, [pc, #396]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8003f08:	f7fc fb34 	bl	8000574 <assert_failed>

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f0c:	4b62      	ldr	r3, [pc, #392]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003f0e:	69db      	ldr	r3, [r3, #28]
 8003f10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d10d      	bne.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f18:	4a5f      	ldr	r2, [pc, #380]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003f1a:	4b5f      	ldr	r3, [pc, #380]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003f1c:	69db      	ldr	r3, [r3, #28]
 8003f1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f22:	61d3      	str	r3, [r2, #28]
 8003f24:	4b5c      	ldr	r3, [pc, #368]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003f26:	69db      	ldr	r3, [r3, #28]
 8003f28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f2c:	60bb      	str	r3, [r7, #8]
 8003f2e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f30:	2301      	movs	r3, #1
 8003f32:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f34:	4b59      	ldr	r3, [pc, #356]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d118      	bne.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0xe2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f40:	4a56      	ldr	r2, [pc, #344]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8003f42:	4b56      	ldr	r3, [pc, #344]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f4a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f4c:	f7fc fdd6 	bl	8000afc <HAL_GetTick>
 8003f50:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f52:	e008      	b.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0xd6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f54:	f7fc fdd2 	bl	8000afc <HAL_GetTick>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	2b64      	cmp	r3, #100	; 0x64
 8003f60:	d901      	bls.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0xd6>
        {
          return HAL_TIMEOUT;
 8003f62:	2303      	movs	r3, #3
 8003f64:	e092      	b.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x1fc>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f66:	4b4d      	ldr	r3, [pc, #308]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d0f0      	beq.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0xc4>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003f72:	4b49      	ldr	r3, [pc, #292]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003f74:	6a1b      	ldr	r3, [r3, #32]
 8003f76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f7a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d02e      	beq.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x150>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d027      	beq.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f90:	4b41      	ldr	r3, [pc, #260]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003f92:	6a1b      	ldr	r3, [r3, #32]
 8003f94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f98:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f9a:	4b41      	ldr	r3, [pc, #260]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003fa0:	4b3f      	ldr	r3, [pc, #252]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003fa6:	4a3c      	ldr	r2, [pc, #240]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	f003 0301 	and.w	r3, r3, #1
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d014      	beq.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fb6:	f7fc fda1 	bl	8000afc <HAL_GetTick>
 8003fba:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fbc:	e00a      	b.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x144>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fbe:	f7fc fd9d 	bl	8000afc <HAL_GetTick>
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	1ad3      	subs	r3, r2, r3
 8003fc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d901      	bls.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x144>
          {
            return HAL_TIMEOUT;
 8003fd0:	2303      	movs	r3, #3
 8003fd2:	e05b      	b.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x1fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fd4:	4b30      	ldr	r3, [pc, #192]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003fd6:	6a1b      	ldr	r3, [r3, #32]
 8003fd8:	f003 0302 	and.w	r3, r3, #2
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d0ee      	beq.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x12e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003fe0:	492d      	ldr	r1, [pc, #180]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003fe2:	4b2d      	ldr	r3, [pc, #180]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003fe4:	6a1b      	ldr	r3, [r3, #32]
 8003fe6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003ff2:	7dfb      	ldrb	r3, [r7, #23]
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d105      	bne.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ff8:	4a27      	ldr	r2, [pc, #156]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003ffa:	4b27      	ldr	r3, [pc, #156]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003ffc:	69db      	ldr	r3, [r3, #28]
 8003ffe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004002:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 0302 	and.w	r3, r3, #2
 800400c:	2b00      	cmp	r3, #0
 800400e:	d01f      	beq.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d012      	beq.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004020:	d00d      	beq.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800402a:	d008      	beq.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004034:	d003      	beq.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8004036:	21b9      	movs	r1, #185	; 0xb9
 8004038:	4816      	ldr	r0, [pc, #88]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 800403a:	f7fc fa9b 	bl	8000574 <assert_failed>

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800403e:	4916      	ldr	r1, [pc, #88]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8004040:	4b15      	ldr	r3, [pc, #84]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	4313      	orrs	r3, r2
 800404e:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f003 0310 	and.w	r3, r3, #16
 8004058:	2b00      	cmp	r3, #0
 800405a:	d016      	beq.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	68db      	ldr	r3, [r3, #12]
 8004060:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004064:	d008      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	68db      	ldr	r3, [r3, #12]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d004      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800406e:	f240 1115 	movw	r1, #277	; 0x115
 8004072:	4808      	ldr	r0, [pc, #32]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8004074:	f7fc fa7e 	bl	8000574 <assert_failed>

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004078:	4907      	ldr	r1, [pc, #28]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800407a:	4b07      	ldr	r3, [pc, #28]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	68db      	ldr	r3, [r3, #12]
 8004086:	4313      	orrs	r3, r2
 8004088:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800408a:	2300      	movs	r3, #0
}
 800408c:	4618      	mov	r0, r3
 800408e:	3718      	adds	r7, #24
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}
 8004094:	0800afe8 	.word	0x0800afe8
 8004098:	40021000 	.word	0x40021000
 800409c:	40007000 	.word	0x40007000
 80040a0:	42420440 	.word	0x42420440

080040a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b082      	sub	sp, #8
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d101      	bne.n	80040b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e093      	b.n	80041de <HAL_TIM_Base_Init+0x13a>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a4b      	ldr	r2, [pc, #300]	; (80041e8 <HAL_TIM_Base_Init+0x144>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d013      	beq.n	80040e8 <HAL_TIM_Base_Init+0x44>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040c8:	d00e      	beq.n	80040e8 <HAL_TIM_Base_Init+0x44>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a47      	ldr	r2, [pc, #284]	; (80041ec <HAL_TIM_Base_Init+0x148>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d009      	beq.n	80040e8 <HAL_TIM_Base_Init+0x44>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a45      	ldr	r2, [pc, #276]	; (80041f0 <HAL_TIM_Base_Init+0x14c>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d004      	beq.n	80040e8 <HAL_TIM_Base_Init+0x44>
 80040de:	f240 1113 	movw	r1, #275	; 0x113
 80040e2:	4844      	ldr	r0, [pc, #272]	; (80041f4 <HAL_TIM_Base_Init+0x150>)
 80040e4:	f7fc fa46 	bl	8000574 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d014      	beq.n	800411a <HAL_TIM_Base_Init+0x76>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	2b10      	cmp	r3, #16
 80040f6:	d010      	beq.n	800411a <HAL_TIM_Base_Init+0x76>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	2b20      	cmp	r3, #32
 80040fe:	d00c      	beq.n	800411a <HAL_TIM_Base_Init+0x76>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	2b40      	cmp	r3, #64	; 0x40
 8004106:	d008      	beq.n	800411a <HAL_TIM_Base_Init+0x76>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	2b60      	cmp	r3, #96	; 0x60
 800410e:	d004      	beq.n	800411a <HAL_TIM_Base_Init+0x76>
 8004110:	f44f 718a 	mov.w	r1, #276	; 0x114
 8004114:	4837      	ldr	r0, [pc, #220]	; (80041f4 <HAL_TIM_Base_Init+0x150>)
 8004116:	f7fc fa2d 	bl	8000574 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	691b      	ldr	r3, [r3, #16]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d00e      	beq.n	8004140 <HAL_TIM_Base_Init+0x9c>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	691b      	ldr	r3, [r3, #16]
 8004126:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800412a:	d009      	beq.n	8004140 <HAL_TIM_Base_Init+0x9c>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	691b      	ldr	r3, [r3, #16]
 8004130:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004134:	d004      	beq.n	8004140 <HAL_TIM_Base_Init+0x9c>
 8004136:	f240 1115 	movw	r1, #277	; 0x115
 800413a:	482e      	ldr	r0, [pc, #184]	; (80041f4 <HAL_TIM_Base_Init+0x150>)
 800413c:	f7fc fa1a 	bl	8000574 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	699b      	ldr	r3, [r3, #24]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d008      	beq.n	800415a <HAL_TIM_Base_Init+0xb6>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	699b      	ldr	r3, [r3, #24]
 800414c:	2b80      	cmp	r3, #128	; 0x80
 800414e:	d004      	beq.n	800415a <HAL_TIM_Base_Init+0xb6>
 8004150:	f44f 718b 	mov.w	r1, #278	; 0x116
 8004154:	4827      	ldr	r0, [pc, #156]	; (80041f4 <HAL_TIM_Base_Init+0x150>)
 8004156:	f7fc fa0d 	bl	8000574 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004160:	b2db      	uxtb	r3, r3
 8004162:	2b00      	cmp	r3, #0
 8004164:	d106      	bne.n	8004174 <HAL_TIM_Base_Init+0xd0>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f000 f842 	bl	80041f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2202      	movs	r2, #2
 8004178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	3304      	adds	r3, #4
 8004184:	4619      	mov	r1, r3
 8004186:	4610      	mov	r0, r2
 8004188:	f000 f9d8 	bl	800453c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2201      	movs	r2, #1
 8004198:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2201      	movs	r2, #1
 80041a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2201      	movs	r2, #1
 80041a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2201      	movs	r2, #1
 80041b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2201      	movs	r2, #1
 80041b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2201      	movs	r2, #1
 80041c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2201      	movs	r2, #1
 80041c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2201      	movs	r2, #1
 80041d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2201      	movs	r2, #1
 80041d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041dc:	2300      	movs	r3, #0
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3708      	adds	r7, #8
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}
 80041e6:	bf00      	nop
 80041e8:	40012c00 	.word	0x40012c00
 80041ec:	40000400 	.word	0x40000400
 80041f0:	40000800 	.word	0x40000800
 80041f4:	0800b038 	.word	0x0800b038

080041f8 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b083      	sub	sp, #12
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004200:	bf00      	nop
 8004202:	370c      	adds	r7, #12
 8004204:	46bd      	mov	sp, r7
 8004206:	bc80      	pop	{r7}
 8004208:	4770      	bx	lr
	...

0800420c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b084      	sub	sp, #16
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a2e      	ldr	r2, [pc, #184]	; (80042d4 <HAL_TIM_Base_Start_IT+0xc8>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d013      	beq.n	8004246 <HAL_TIM_Base_Start_IT+0x3a>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004226:	d00e      	beq.n	8004246 <HAL_TIM_Base_Start_IT+0x3a>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a2a      	ldr	r2, [pc, #168]	; (80042d8 <HAL_TIM_Base_Start_IT+0xcc>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d009      	beq.n	8004246 <HAL_TIM_Base_Start_IT+0x3a>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a29      	ldr	r2, [pc, #164]	; (80042dc <HAL_TIM_Base_Start_IT+0xd0>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d004      	beq.n	8004246 <HAL_TIM_Base_Start_IT+0x3a>
 800423c:	f240 11cf 	movw	r1, #463	; 0x1cf
 8004240:	4827      	ldr	r0, [pc, #156]	; (80042e0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004242:	f7fc f997 	bl	8000574 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800424c:	b2db      	uxtb	r3, r3
 800424e:	2b01      	cmp	r3, #1
 8004250:	d001      	beq.n	8004256 <HAL_TIM_Base_Start_IT+0x4a>
  {
    return HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	e03a      	b.n	80042cc <HAL_TIM_Base_Start_IT+0xc0>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2202      	movs	r2, #2
 800425a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	687a      	ldr	r2, [r7, #4]
 8004264:	6812      	ldr	r2, [r2, #0]
 8004266:	68d2      	ldr	r2, [r2, #12]
 8004268:	f042 0201 	orr.w	r2, r2, #1
 800426c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a18      	ldr	r2, [pc, #96]	; (80042d4 <HAL_TIM_Base_Start_IT+0xc8>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d00e      	beq.n	8004296 <HAL_TIM_Base_Start_IT+0x8a>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004280:	d009      	beq.n	8004296 <HAL_TIM_Base_Start_IT+0x8a>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a14      	ldr	r2, [pc, #80]	; (80042d8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d004      	beq.n	8004296 <HAL_TIM_Base_Start_IT+0x8a>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a12      	ldr	r2, [pc, #72]	; (80042dc <HAL_TIM_Base_Start_IT+0xd0>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d111      	bne.n	80042ba <HAL_TIM_Base_Start_IT+0xae>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	f003 0307 	and.w	r3, r3, #7
 80042a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2b06      	cmp	r3, #6
 80042a6:	d010      	beq.n	80042ca <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	687a      	ldr	r2, [r7, #4]
 80042ae:	6812      	ldr	r2, [r2, #0]
 80042b0:	6812      	ldr	r2, [r2, #0]
 80042b2:	f042 0201 	orr.w	r2, r2, #1
 80042b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042b8:	e007      	b.n	80042ca <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	6812      	ldr	r2, [r2, #0]
 80042c2:	6812      	ldr	r2, [r2, #0]
 80042c4:	f042 0201 	orr.w	r2, r2, #1
 80042c8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80042ca:	2300      	movs	r3, #0
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	3710      	adds	r7, #16
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}
 80042d4:	40012c00 	.word	0x40012c00
 80042d8:	40000400 	.word	0x40000400
 80042dc:	40000800 	.word	0x40000800
 80042e0:	0800b038 	.word	0x0800b038

080042e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b082      	sub	sp, #8
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	691b      	ldr	r3, [r3, #16]
 80042f2:	f003 0302 	and.w	r3, r3, #2
 80042f6:	2b02      	cmp	r3, #2
 80042f8:	d122      	bne.n	8004340 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	f003 0302 	and.w	r3, r3, #2
 8004304:	2b02      	cmp	r3, #2
 8004306:	d11b      	bne.n	8004340 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f06f 0202 	mvn.w	r2, #2
 8004310:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2201      	movs	r2, #1
 8004316:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	699b      	ldr	r3, [r3, #24]
 800431e:	f003 0303 	and.w	r3, r3, #3
 8004322:	2b00      	cmp	r3, #0
 8004324:	d003      	beq.n	800432e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f000 f8ed 	bl	8004506 <HAL_TIM_IC_CaptureCallback>
 800432c:	e005      	b.n	800433a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f000 f8e0 	bl	80044f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f000 f8ef 	bl	8004518 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	691b      	ldr	r3, [r3, #16]
 8004346:	f003 0304 	and.w	r3, r3, #4
 800434a:	2b04      	cmp	r3, #4
 800434c:	d122      	bne.n	8004394 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	f003 0304 	and.w	r3, r3, #4
 8004358:	2b04      	cmp	r3, #4
 800435a:	d11b      	bne.n	8004394 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f06f 0204 	mvn.w	r2, #4
 8004364:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2202      	movs	r2, #2
 800436a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	699b      	ldr	r3, [r3, #24]
 8004372:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004376:	2b00      	cmp	r3, #0
 8004378:	d003      	beq.n	8004382 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f000 f8c3 	bl	8004506 <HAL_TIM_IC_CaptureCallback>
 8004380:	e005      	b.n	800438e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f000 f8b6 	bl	80044f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004388:	6878      	ldr	r0, [r7, #4]
 800438a:	f000 f8c5 	bl	8004518 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2200      	movs	r2, #0
 8004392:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	691b      	ldr	r3, [r3, #16]
 800439a:	f003 0308 	and.w	r3, r3, #8
 800439e:	2b08      	cmp	r3, #8
 80043a0:	d122      	bne.n	80043e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	68db      	ldr	r3, [r3, #12]
 80043a8:	f003 0308 	and.w	r3, r3, #8
 80043ac:	2b08      	cmp	r3, #8
 80043ae:	d11b      	bne.n	80043e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f06f 0208 	mvn.w	r2, #8
 80043b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2204      	movs	r2, #4
 80043be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	69db      	ldr	r3, [r3, #28]
 80043c6:	f003 0303 	and.w	r3, r3, #3
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d003      	beq.n	80043d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f000 f899 	bl	8004506 <HAL_TIM_IC_CaptureCallback>
 80043d4:	e005      	b.n	80043e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f000 f88c 	bl	80044f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	f000 f89b 	bl	8004518 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	691b      	ldr	r3, [r3, #16]
 80043ee:	f003 0310 	and.w	r3, r3, #16
 80043f2:	2b10      	cmp	r3, #16
 80043f4:	d122      	bne.n	800443c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	f003 0310 	and.w	r3, r3, #16
 8004400:	2b10      	cmp	r3, #16
 8004402:	d11b      	bne.n	800443c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f06f 0210 	mvn.w	r2, #16
 800440c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2208      	movs	r2, #8
 8004412:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	69db      	ldr	r3, [r3, #28]
 800441a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800441e:	2b00      	cmp	r3, #0
 8004420:	d003      	beq.n	800442a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f000 f86f 	bl	8004506 <HAL_TIM_IC_CaptureCallback>
 8004428:	e005      	b.n	8004436 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f000 f862 	bl	80044f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	f000 f871 	bl	8004518 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2200      	movs	r2, #0
 800443a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	691b      	ldr	r3, [r3, #16]
 8004442:	f003 0301 	and.w	r3, r3, #1
 8004446:	2b01      	cmp	r3, #1
 8004448:	d10e      	bne.n	8004468 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	f003 0301 	and.w	r3, r3, #1
 8004454:	2b01      	cmp	r3, #1
 8004456:	d107      	bne.n	8004468 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f06f 0201 	mvn.w	r2, #1
 8004460:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f7fc f870 	bl	8000548 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	691b      	ldr	r3, [r3, #16]
 800446e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004472:	2b80      	cmp	r3, #128	; 0x80
 8004474:	d10e      	bne.n	8004494 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	68db      	ldr	r3, [r3, #12]
 800447c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004480:	2b80      	cmp	r3, #128	; 0x80
 8004482:	d107      	bne.n	8004494 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800448c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f000 f8bf 	bl	8004612 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	691b      	ldr	r3, [r3, #16]
 800449a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800449e:	2b40      	cmp	r3, #64	; 0x40
 80044a0:	d10e      	bne.n	80044c0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	68db      	ldr	r3, [r3, #12]
 80044a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ac:	2b40      	cmp	r3, #64	; 0x40
 80044ae:	d107      	bne.n	80044c0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80044b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f000 f835 	bl	800452a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	691b      	ldr	r3, [r3, #16]
 80044c6:	f003 0320 	and.w	r3, r3, #32
 80044ca:	2b20      	cmp	r3, #32
 80044cc:	d10e      	bne.n	80044ec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	f003 0320 	and.w	r3, r3, #32
 80044d8:	2b20      	cmp	r3, #32
 80044da:	d107      	bne.n	80044ec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f06f 0220 	mvn.w	r2, #32
 80044e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f000 f88a 	bl	8004600 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80044ec:	bf00      	nop
 80044ee:	3708      	adds	r7, #8
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}

080044f4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b083      	sub	sp, #12
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80044fc:	bf00      	nop
 80044fe:	370c      	adds	r7, #12
 8004500:	46bd      	mov	sp, r7
 8004502:	bc80      	pop	{r7}
 8004504:	4770      	bx	lr

08004506 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004506:	b480      	push	{r7}
 8004508:	b083      	sub	sp, #12
 800450a:	af00      	add	r7, sp, #0
 800450c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800450e:	bf00      	nop
 8004510:	370c      	adds	r7, #12
 8004512:	46bd      	mov	sp, r7
 8004514:	bc80      	pop	{r7}
 8004516:	4770      	bx	lr

08004518 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004518:	b480      	push	{r7}
 800451a:	b083      	sub	sp, #12
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004520:	bf00      	nop
 8004522:	370c      	adds	r7, #12
 8004524:	46bd      	mov	sp, r7
 8004526:	bc80      	pop	{r7}
 8004528:	4770      	bx	lr

0800452a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800452a:	b480      	push	{r7}
 800452c:	b083      	sub	sp, #12
 800452e:	af00      	add	r7, sp, #0
 8004530:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004532:	bf00      	nop
 8004534:	370c      	adds	r7, #12
 8004536:	46bd      	mov	sp, r7
 8004538:	bc80      	pop	{r7}
 800453a:	4770      	bx	lr

0800453c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800453c:	b480      	push	{r7}
 800453e:	b085      	sub	sp, #20
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	4a29      	ldr	r2, [pc, #164]	; (80045f4 <TIM_Base_SetConfig+0xb8>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d00b      	beq.n	800456c <TIM_Base_SetConfig+0x30>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800455a:	d007      	beq.n	800456c <TIM_Base_SetConfig+0x30>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	4a26      	ldr	r2, [pc, #152]	; (80045f8 <TIM_Base_SetConfig+0xbc>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d003      	beq.n	800456c <TIM_Base_SetConfig+0x30>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	4a25      	ldr	r2, [pc, #148]	; (80045fc <TIM_Base_SetConfig+0xc0>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d108      	bne.n	800457e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004572:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	68fa      	ldr	r2, [r7, #12]
 800457a:	4313      	orrs	r3, r2
 800457c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	4a1c      	ldr	r2, [pc, #112]	; (80045f4 <TIM_Base_SetConfig+0xb8>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d00b      	beq.n	800459e <TIM_Base_SetConfig+0x62>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800458c:	d007      	beq.n	800459e <TIM_Base_SetConfig+0x62>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	4a19      	ldr	r2, [pc, #100]	; (80045f8 <TIM_Base_SetConfig+0xbc>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d003      	beq.n	800459e <TIM_Base_SetConfig+0x62>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	4a18      	ldr	r2, [pc, #96]	; (80045fc <TIM_Base_SetConfig+0xc0>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d108      	bne.n	80045b0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	68db      	ldr	r3, [r3, #12]
 80045aa:	68fa      	ldr	r2, [r7, #12]
 80045ac:	4313      	orrs	r3, r2
 80045ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	695b      	ldr	r3, [r3, #20]
 80045ba:	4313      	orrs	r3, r2
 80045bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	68fa      	ldr	r2, [r7, #12]
 80045c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	689a      	ldr	r2, [r3, #8]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	4a07      	ldr	r2, [pc, #28]	; (80045f4 <TIM_Base_SetConfig+0xb8>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d103      	bne.n	80045e4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	691a      	ldr	r2, [r3, #16]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2201      	movs	r2, #1
 80045e8:	615a      	str	r2, [r3, #20]
}
 80045ea:	bf00      	nop
 80045ec:	3714      	adds	r7, #20
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bc80      	pop	{r7}
 80045f2:	4770      	bx	lr
 80045f4:	40012c00 	.word	0x40012c00
 80045f8:	40000400 	.word	0x40000400
 80045fc:	40000800 	.word	0x40000800

08004600 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004600:	b480      	push	{r7}
 8004602:	b083      	sub	sp, #12
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004608:	bf00      	nop
 800460a:	370c      	adds	r7, #12
 800460c:	46bd      	mov	sp, r7
 800460e:	bc80      	pop	{r7}
 8004610:	4770      	bx	lr

08004612 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004612:	b480      	push	{r7}
 8004614:	b083      	sub	sp, #12
 8004616:	af00      	add	r7, sp, #0
 8004618:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800461a:	bf00      	nop
 800461c:	370c      	adds	r7, #12
 800461e:	46bd      	mov	sp, r7
 8004620:	bc80      	pop	{r7}
 8004622:	4770      	bx	lr

08004624 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b082      	sub	sp, #8
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d101      	bne.n	8004636 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	e092      	b.n	800475c <HAL_UART_Init+0x138>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	699b      	ldr	r3, [r3, #24]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d02c      	beq.n	8004698 <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2 and USART3 */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a48      	ldr	r2, [pc, #288]	; (8004764 <HAL_UART_Init+0x140>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d00e      	beq.n	8004666 <HAL_UART_Init+0x42>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a46      	ldr	r2, [pc, #280]	; (8004768 <HAL_UART_Init+0x144>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d009      	beq.n	8004666 <HAL_UART_Init+0x42>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a45      	ldr	r2, [pc, #276]	; (800476c <HAL_UART_Init+0x148>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d004      	beq.n	8004666 <HAL_UART_Init+0x42>
 800465c:	f44f 71b6 	mov.w	r1, #364	; 0x16c
 8004660:	4843      	ldr	r0, [pc, #268]	; (8004770 <HAL_UART_Init+0x14c>)
 8004662:	f7fb ff87 	bl	8000574 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	699b      	ldr	r3, [r3, #24]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d028      	beq.n	80046c0 <HAL_UART_Init+0x9c>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	699b      	ldr	r3, [r3, #24]
 8004672:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004676:	d023      	beq.n	80046c0 <HAL_UART_Init+0x9c>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	699b      	ldr	r3, [r3, #24]
 800467c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004680:	d01e      	beq.n	80046c0 <HAL_UART_Init+0x9c>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	699b      	ldr	r3, [r3, #24]
 8004686:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800468a:	d019      	beq.n	80046c0 <HAL_UART_Init+0x9c>
 800468c:	f240 116d 	movw	r1, #365	; 0x16d
 8004690:	4837      	ldr	r0, [pc, #220]	; (8004770 <HAL_UART_Init+0x14c>)
 8004692:	f7fb ff6f 	bl	8000574 <assert_failed>
 8004696:	e013      	b.n	80046c0 <HAL_UART_Init+0x9c>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a31      	ldr	r2, [pc, #196]	; (8004764 <HAL_UART_Init+0x140>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d00e      	beq.n	80046c0 <HAL_UART_Init+0x9c>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a30      	ldr	r2, [pc, #192]	; (8004768 <HAL_UART_Init+0x144>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d009      	beq.n	80046c0 <HAL_UART_Init+0x9c>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a2e      	ldr	r2, [pc, #184]	; (800476c <HAL_UART_Init+0x148>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d004      	beq.n	80046c0 <HAL_UART_Init+0x9c>
 80046b6:	f240 1171 	movw	r1, #369	; 0x171
 80046ba:	482d      	ldr	r0, [pc, #180]	; (8004770 <HAL_UART_Init+0x14c>)
 80046bc:	f7fb ff5a 	bl	8000574 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d009      	beq.n	80046dc <HAL_UART_Init+0xb8>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046d0:	d004      	beq.n	80046dc <HAL_UART_Init+0xb8>
 80046d2:	f240 1173 	movw	r1, #371	; 0x173
 80046d6:	4826      	ldr	r0, [pc, #152]	; (8004770 <HAL_UART_Init+0x14c>)
 80046d8:	f7fb ff4c 	bl	8000574 <assert_failed>
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d106      	bne.n	80046f6 <HAL_UART_Init+0xd2>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2200      	movs	r2, #0
 80046ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	f7fc f89d 	bl	8000830 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2224      	movs	r2, #36	; 0x24
 80046fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	6812      	ldr	r2, [r2, #0]
 8004706:	68d2      	ldr	r2, [r2, #12]
 8004708:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800470c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f000 fd74 	bl	80051fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	687a      	ldr	r2, [r7, #4]
 800471a:	6812      	ldr	r2, [r2, #0]
 800471c:	6912      	ldr	r2, [r2, #16]
 800471e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004722:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	6812      	ldr	r2, [r2, #0]
 800472c:	6952      	ldr	r2, [r2, #20]
 800472e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004732:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	687a      	ldr	r2, [r7, #4]
 800473a:	6812      	ldr	r2, [r2, #0]
 800473c:	68d2      	ldr	r2, [r2, #12]
 800473e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004742:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2200      	movs	r2, #0
 8004748:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2220      	movs	r2, #32
 800474e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2220      	movs	r2, #32
 8004756:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800475a:	2300      	movs	r3, #0
}
 800475c:	4618      	mov	r0, r3
 800475e:	3708      	adds	r7, #8
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}
 8004764:	40013800 	.word	0x40013800
 8004768:	40004400 	.word	0x40004400
 800476c:	40004800 	.word	0x40004800
 8004770:	0800b070 	.word	0x0800b070

08004774 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b086      	sub	sp, #24
 8004778:	af00      	add	r7, sp, #0
 800477a:	60f8      	str	r0, [r7, #12]
 800477c:	60b9      	str	r1, [r7, #8]
 800477e:	4613      	mov	r3, r2
 8004780:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004788:	b2db      	uxtb	r3, r3
 800478a:	2b20      	cmp	r3, #32
 800478c:	d153      	bne.n	8004836 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d002      	beq.n	800479a <HAL_UART_Transmit_DMA+0x26>
 8004794:	88fb      	ldrh	r3, [r7, #6]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d101      	bne.n	800479e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	e04c      	b.n	8004838 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d101      	bne.n	80047ac <HAL_UART_Transmit_DMA+0x38>
 80047a8:	2302      	movs	r3, #2
 80047aa:	e045      	b.n	8004838 <HAL_UART_Transmit_DMA+0xc4>
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2201      	movs	r2, #1
 80047b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80047b4:	68ba      	ldr	r2, [r7, #8]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	88fa      	ldrh	r2, [r7, #6]
 80047be:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	88fa      	ldrh	r2, [r7, #6]
 80047c4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2200      	movs	r2, #0
 80047ca:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2221      	movs	r2, #33	; 0x21
 80047d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047d8:	4a19      	ldr	r2, [pc, #100]	; (8004840 <HAL_UART_Transmit_DMA+0xcc>)
 80047da:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047e0:	4a18      	ldr	r2, [pc, #96]	; (8004844 <HAL_UART_Transmit_DMA+0xd0>)
 80047e2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047e8:	4a17      	ldr	r2, [pc, #92]	; (8004848 <HAL_UART_Transmit_DMA+0xd4>)
 80047ea:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047f0:	2200      	movs	r2, #0
 80047f2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 80047f4:	f107 0308 	add.w	r3, r7, #8
 80047f8:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	6819      	ldr	r1, [r3, #0]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	3304      	adds	r3, #4
 8004808:	461a      	mov	r2, r3
 800480a:	88fb      	ldrh	r3, [r7, #6]
 800480c:	f7fc fb8c 	bl	8000f28 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004818:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2200      	movs	r2, #0
 800481e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	68fa      	ldr	r2, [r7, #12]
 8004828:	6812      	ldr	r2, [r2, #0]
 800482a:	6952      	ldr	r2, [r2, #20]
 800482c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004830:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8004832:	2300      	movs	r3, #0
 8004834:	e000      	b.n	8004838 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8004836:	2302      	movs	r3, #2
  }
}
 8004838:	4618      	mov	r0, r3
 800483a:	3718      	adds	r7, #24
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}
 8004840:	08004c9f 	.word	0x08004c9f
 8004844:	08004cf1 	.word	0x08004cf1
 8004848:	08004dd9 	.word	0x08004dd9

0800484c <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b086      	sub	sp, #24
 8004850:	af00      	add	r7, sp, #0
 8004852:	60f8      	str	r0, [r7, #12]
 8004854:	60b9      	str	r1, [r7, #8]
 8004856:	4613      	mov	r3, r2
 8004858:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004860:	b2db      	uxtb	r3, r3
 8004862:	2b20      	cmp	r3, #32
 8004864:	d13c      	bne.n	80048e0 <HAL_UARTEx_ReceiveToIdle_DMA+0x94>
  {
    if ((pData == NULL) || (Size == 0U))
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d002      	beq.n	8004872 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800486c:	88fb      	ldrh	r3, [r7, #6]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d101      	bne.n	8004876 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e035      	b.n	80048e2 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
    }

    __HAL_LOCK(huart);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800487c:	2b01      	cmp	r3, #1
 800487e:	d101      	bne.n	8004884 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8004880:	2302      	movs	r3, #2
 8004882:	e02e      	b.n	80048e2 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2201      	movs	r2, #1
 8004888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2201      	movs	r2, #1
 8004890:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8004892:	88fb      	ldrh	r3, [r7, #6]
 8004894:	461a      	mov	r2, r3
 8004896:	68b9      	ldr	r1, [r7, #8]
 8004898:	68f8      	ldr	r0, [r7, #12]
 800489a:	f000 fae7 	bl	8004e6c <UART_Start_Receive_DMA>
 800489e:	4603      	mov	r3, r0
 80048a0:	75fb      	strb	r3, [r7, #23]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80048a2:	7dfb      	ldrb	r3, [r7, #23]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d119      	bne.n	80048dc <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d113      	bne.n	80048d8 <HAL_UARTEx_ReceiveToIdle_DMA+0x8c>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80048b0:	2300      	movs	r3, #0
 80048b2:	613b      	str	r3, [r7, #16]
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	613b      	str	r3, [r7, #16]
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	613b      	str	r3, [r7, #16]
 80048c4:	693b      	ldr	r3, [r7, #16]
        SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	68fa      	ldr	r2, [r7, #12]
 80048cc:	6812      	ldr	r2, [r2, #0]
 80048ce:	68d2      	ldr	r2, [r2, #12]
 80048d0:	f042 0210 	orr.w	r2, r2, #16
 80048d4:	60da      	str	r2, [r3, #12]
 80048d6:	e001      	b.n	80048dc <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	75fb      	strb	r3, [r7, #23]
      }
    }

    return status;
 80048dc:	7dfb      	ldrb	r3, [r7, #23]
 80048de:	e000      	b.n	80048e2 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
  }
  else
  {
    return HAL_BUSY;
 80048e0:	2302      	movs	r3, #2
  }
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	3718      	adds	r7, #24
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}
	...

080048ec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b08a      	sub	sp, #40	; 0x28
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	68db      	ldr	r3, [r3, #12]
 8004902:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	695b      	ldr	r3, [r3, #20]
 800490a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800490c:	2300      	movs	r3, #0
 800490e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004910:	2300      	movs	r3, #0
 8004912:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004916:	f003 030f 	and.w	r3, r3, #15
 800491a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800491c:	69bb      	ldr	r3, [r7, #24]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d10d      	bne.n	800493e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004924:	f003 0320 	and.w	r3, r3, #32
 8004928:	2b00      	cmp	r3, #0
 800492a:	d008      	beq.n	800493e <HAL_UART_IRQHandler+0x52>
 800492c:	6a3b      	ldr	r3, [r7, #32]
 800492e:	f003 0320 	and.w	r3, r3, #32
 8004932:	2b00      	cmp	r3, #0
 8004934:	d003      	beq.n	800493e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f000 fbb7 	bl	80050aa <UART_Receive_IT>
      return;
 800493c:	e17c      	b.n	8004c38 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800493e:	69bb      	ldr	r3, [r7, #24]
 8004940:	2b00      	cmp	r3, #0
 8004942:	f000 80b1 	beq.w	8004aa8 <HAL_UART_IRQHandler+0x1bc>
 8004946:	69fb      	ldr	r3, [r7, #28]
 8004948:	f003 0301 	and.w	r3, r3, #1
 800494c:	2b00      	cmp	r3, #0
 800494e:	d105      	bne.n	800495c <HAL_UART_IRQHandler+0x70>
 8004950:	6a3b      	ldr	r3, [r7, #32]
 8004952:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004956:	2b00      	cmp	r3, #0
 8004958:	f000 80a6 	beq.w	8004aa8 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800495c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495e:	f003 0301 	and.w	r3, r3, #1
 8004962:	2b00      	cmp	r3, #0
 8004964:	d00a      	beq.n	800497c <HAL_UART_IRQHandler+0x90>
 8004966:	6a3b      	ldr	r3, [r7, #32]
 8004968:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800496c:	2b00      	cmp	r3, #0
 800496e:	d005      	beq.n	800497c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004974:	f043 0201 	orr.w	r2, r3, #1
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800497c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800497e:	f003 0304 	and.w	r3, r3, #4
 8004982:	2b00      	cmp	r3, #0
 8004984:	d00a      	beq.n	800499c <HAL_UART_IRQHandler+0xb0>
 8004986:	69fb      	ldr	r3, [r7, #28]
 8004988:	f003 0301 	and.w	r3, r3, #1
 800498c:	2b00      	cmp	r3, #0
 800498e:	d005      	beq.n	800499c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004994:	f043 0202 	orr.w	r2, r3, #2
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800499c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499e:	f003 0302 	and.w	r3, r3, #2
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d00a      	beq.n	80049bc <HAL_UART_IRQHandler+0xd0>
 80049a6:	69fb      	ldr	r3, [r7, #28]
 80049a8:	f003 0301 	and.w	r3, r3, #1
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d005      	beq.n	80049bc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b4:	f043 0204 	orr.w	r2, r3, #4
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80049bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049be:	f003 0308 	and.w	r3, r3, #8
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d00f      	beq.n	80049e6 <HAL_UART_IRQHandler+0xfa>
 80049c6:	6a3b      	ldr	r3, [r7, #32]
 80049c8:	f003 0320 	and.w	r3, r3, #32
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d104      	bne.n	80049da <HAL_UART_IRQHandler+0xee>
 80049d0:	69fb      	ldr	r3, [r7, #28]
 80049d2:	f003 0301 	and.w	r3, r3, #1
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d005      	beq.n	80049e6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049de:	f043 0208 	orr.w	r2, r3, #8
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	f000 811f 	beq.w	8004c2e <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80049f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f2:	f003 0320 	and.w	r3, r3, #32
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d007      	beq.n	8004a0a <HAL_UART_IRQHandler+0x11e>
 80049fa:	6a3b      	ldr	r3, [r7, #32]
 80049fc:	f003 0320 	and.w	r3, r3, #32
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d002      	beq.n	8004a0a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004a04:	6878      	ldr	r0, [r7, #4]
 8004a06:	f000 fb50 	bl	80050aa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	695b      	ldr	r3, [r3, #20]
 8004a10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	bf14      	ite	ne
 8004a18:	2301      	movne	r3, #1
 8004a1a:	2300      	moveq	r3, #0
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a24:	f003 0308 	and.w	r3, r3, #8
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d102      	bne.n	8004a32 <HAL_UART_IRQHandler+0x146>
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d031      	beq.n	8004a96 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f000 fa93 	bl	8004f5e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	695b      	ldr	r3, [r3, #20]
 8004a3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d023      	beq.n	8004a8e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	687a      	ldr	r2, [r7, #4]
 8004a4c:	6812      	ldr	r2, [r2, #0]
 8004a4e:	6952      	ldr	r2, [r2, #20]
 8004a50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a54:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d013      	beq.n	8004a86 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a62:	4a77      	ldr	r2, [pc, #476]	; (8004c40 <HAL_UART_IRQHandler+0x354>)
 8004a64:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f7fc fb04 	bl	8001078 <HAL_DMA_Abort_IT>
 8004a70:	4603      	mov	r3, r0
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d016      	beq.n	8004aa4 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a7c:	687a      	ldr	r2, [r7, #4]
 8004a7e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004a80:	4610      	mov	r0, r2
 8004a82:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a84:	e00e      	b.n	8004aa4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f000 f900 	bl	8004c8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a8c:	e00a      	b.n	8004aa4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f000 f8fc 	bl	8004c8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a94:	e006      	b.n	8004aa4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f000 f8f8 	bl	8004c8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004aa2:	e0c4      	b.n	8004c2e <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004aa4:	bf00      	nop
    return;
 8004aa6:	e0c2      	b.n	8004c2e <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	f040 80a1 	bne.w	8004bf4 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab4:	f003 0310 	and.w	r3, r3, #16
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	f000 809b 	beq.w	8004bf4 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004abe:	6a3b      	ldr	r3, [r7, #32]
 8004ac0:	f003 0310 	and.w	r3, r3, #16
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	f000 8095 	beq.w	8004bf4 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004aca:	2300      	movs	r3, #0
 8004acc:	60fb      	str	r3, [r7, #12]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	60fb      	str	r3, [r7, #12]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	60fb      	str	r3, [r7, #12]
 8004ade:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	695b      	ldr	r3, [r3, #20]
 8004ae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d04e      	beq.n	8004b8c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	827b      	strh	r3, [r7, #18]
      if (  (nb_remaining_rx_data > 0U)
 8004af8:	8a7b      	ldrh	r3, [r7, #18]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	f000 8099 	beq.w	8004c32 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004b04:	8a7a      	ldrh	r2, [r7, #18]
 8004b06:	429a      	cmp	r2, r3
 8004b08:	f080 8093 	bcs.w	8004c32 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	8a7a      	ldrh	r2, [r7, #18]
 8004b10:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b16:	699b      	ldr	r3, [r3, #24]
 8004b18:	2b20      	cmp	r3, #32
 8004b1a:	d02b      	beq.n	8004b74 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	687a      	ldr	r2, [r7, #4]
 8004b22:	6812      	ldr	r2, [r2, #0]
 8004b24:	68d2      	ldr	r2, [r2, #12]
 8004b26:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b2a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	687a      	ldr	r2, [r7, #4]
 8004b32:	6812      	ldr	r2, [r2, #0]
 8004b34:	6952      	ldr	r2, [r2, #20]
 8004b36:	f022 0201 	bic.w	r2, r2, #1
 8004b3a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	687a      	ldr	r2, [r7, #4]
 8004b42:	6812      	ldr	r2, [r2, #0]
 8004b44:	6952      	ldr	r2, [r2, #20]
 8004b46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b4a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2220      	movs	r2, #32
 8004b50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2200      	movs	r2, #0
 8004b58:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	6812      	ldr	r2, [r2, #0]
 8004b62:	68d2      	ldr	r2, [r2, #12]
 8004b64:	f022 0210 	bic.w	r2, r2, #16
 8004b68:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f7fc fa48 	bl	8001004 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b7c:	b29b      	uxth	r3, r3
 8004b7e:	1ad3      	subs	r3, r2, r3
 8004b80:	b29b      	uxth	r3, r3
 8004b82:	4619      	mov	r1, r3
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	f006 f899 	bl	800acbc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004b8a:	e052      	b.n	8004c32 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b94:	b29b      	uxth	r3, r3
 8004b96:	1ad3      	subs	r3, r2, r3
 8004b98:	823b      	strh	r3, [r7, #16]
      if (  (huart->RxXferCount > 0U)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d048      	beq.n	8004c36 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8004ba4:	8a3b      	ldrh	r3, [r7, #16]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d045      	beq.n	8004c36 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	687a      	ldr	r2, [r7, #4]
 8004bb0:	6812      	ldr	r2, [r2, #0]
 8004bb2:	68d2      	ldr	r2, [r2, #12]
 8004bb4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004bb8:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	687a      	ldr	r2, [r7, #4]
 8004bc0:	6812      	ldr	r2, [r2, #0]
 8004bc2:	6952      	ldr	r2, [r2, #20]
 8004bc4:	f022 0201 	bic.w	r2, r2, #1
 8004bc8:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2220      	movs	r2, #32
 8004bce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	687a      	ldr	r2, [r7, #4]
 8004bde:	6812      	ldr	r2, [r2, #0]
 8004be0:	68d2      	ldr	r2, [r2, #12]
 8004be2:	f022 0210 	bic.w	r2, r2, #16
 8004be6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004be8:	8a3b      	ldrh	r3, [r7, #16]
 8004bea:	4619      	mov	r1, r3
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	f006 f865 	bl	800acbc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004bf2:	e020      	b.n	8004c36 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d008      	beq.n	8004c10 <HAL_UART_IRQHandler+0x324>
 8004bfe:	6a3b      	ldr	r3, [r7, #32]
 8004c00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d003      	beq.n	8004c10 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f000 f9e8 	bl	8004fde <UART_Transmit_IT>
    return;
 8004c0e:	e013      	b.n	8004c38 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d00e      	beq.n	8004c38 <HAL_UART_IRQHandler+0x34c>
 8004c1a:	6a3b      	ldr	r3, [r7, #32]
 8004c1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d009      	beq.n	8004c38 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8004c24:	6878      	ldr	r0, [r7, #4]
 8004c26:	f000 fa28 	bl	800507a <UART_EndTransmit_IT>
    return;
 8004c2a:	bf00      	nop
 8004c2c:	e004      	b.n	8004c38 <HAL_UART_IRQHandler+0x34c>
    return;
 8004c2e:	bf00      	nop
 8004c30:	e002      	b.n	8004c38 <HAL_UART_IRQHandler+0x34c>
      return;
 8004c32:	bf00      	nop
 8004c34:	e000      	b.n	8004c38 <HAL_UART_IRQHandler+0x34c>
      return;
 8004c36:	bf00      	nop
  }
}
 8004c38:	3728      	adds	r7, #40	; 0x28
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}
 8004c3e:	bf00      	nop
 8004c40:	08004fb7 	.word	0x08004fb7

08004c44 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b083      	sub	sp, #12
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004c4c:	bf00      	nop
 8004c4e:	370c      	adds	r7, #12
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bc80      	pop	{r7}
 8004c54:	4770      	bx	lr

08004c56 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004c56:	b480      	push	{r7}
 8004c58:	b083      	sub	sp, #12
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8004c5e:	bf00      	nop
 8004c60:	370c      	adds	r7, #12
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bc80      	pop	{r7}
 8004c66:	4770      	bx	lr

08004c68 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b083      	sub	sp, #12
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004c70:	bf00      	nop
 8004c72:	370c      	adds	r7, #12
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bc80      	pop	{r7}
 8004c78:	4770      	bx	lr

08004c7a <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004c7a:	b480      	push	{r7}
 8004c7c:	b083      	sub	sp, #12
 8004c7e:	af00      	add	r7, sp, #0
 8004c80:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004c82:	bf00      	nop
 8004c84:	370c      	adds	r7, #12
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bc80      	pop	{r7}
 8004c8a:	4770      	bx	lr

08004c8c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b083      	sub	sp, #12
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004c94:	bf00      	nop
 8004c96:	370c      	adds	r7, #12
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bc80      	pop	{r7}
 8004c9c:	4770      	bx	lr

08004c9e <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004c9e:	b580      	push	{r7, lr}
 8004ca0:	b084      	sub	sp, #16
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004caa:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f003 0320 	and.w	r3, r3, #32
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d113      	bne.n	8004ce2 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	68fa      	ldr	r2, [r7, #12]
 8004cc6:	6812      	ldr	r2, [r2, #0]
 8004cc8:	6952      	ldr	r2, [r2, #20]
 8004cca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004cce:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	68fa      	ldr	r2, [r7, #12]
 8004cd6:	6812      	ldr	r2, [r2, #0]
 8004cd8:	68d2      	ldr	r2, [r2, #12]
 8004cda:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004cde:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004ce0:	e002      	b.n	8004ce8 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8004ce2:	68f8      	ldr	r0, [r7, #12]
 8004ce4:	f7ff ffae 	bl	8004c44 <HAL_UART_TxCpltCallback>
}
 8004ce8:	bf00      	nop
 8004cea:	3710      	adds	r7, #16
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}

08004cf0 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b084      	sub	sp, #16
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cfc:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004cfe:	68f8      	ldr	r0, [r7, #12]
 8004d00:	f7ff ffa9 	bl	8004c56 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d04:	bf00      	nop
 8004d06:	3710      	adds	r7, #16
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}

08004d0c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b084      	sub	sp, #16
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d18:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 0320 	and.w	r3, r3, #32
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d12a      	bne.n	8004d7e <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	68fa      	ldr	r2, [r7, #12]
 8004d34:	6812      	ldr	r2, [r2, #0]
 8004d36:	68d2      	ldr	r2, [r2, #12]
 8004d38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d3c:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	68fa      	ldr	r2, [r7, #12]
 8004d44:	6812      	ldr	r2, [r2, #0]
 8004d46:	6952      	ldr	r2, [r2, #20]
 8004d48:	f022 0201 	bic.w	r2, r2, #1
 8004d4c:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	68fa      	ldr	r2, [r7, #12]
 8004d54:	6812      	ldr	r2, [r2, #0]
 8004d56:	6952      	ldr	r2, [r2, #20]
 8004d58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d5c:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2220      	movs	r2, #32
 8004d62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d6a:	2b01      	cmp	r3, #1
 8004d6c:	d107      	bne.n	8004d7e <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	68fa      	ldr	r2, [r7, #12]
 8004d74:	6812      	ldr	r2, [r2, #0]
 8004d76:	68d2      	ldr	r2, [r2, #12]
 8004d78:	f022 0210 	bic.w	r2, r2, #16
 8004d7c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d106      	bne.n	8004d94 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004d8a:	4619      	mov	r1, r3
 8004d8c:	68f8      	ldr	r0, [r7, #12]
 8004d8e:	f005 ff95 	bl	800acbc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004d92:	e002      	b.n	8004d9a <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8004d94:	68f8      	ldr	r0, [r7, #12]
 8004d96:	f7ff ff67 	bl	8004c68 <HAL_UART_RxCpltCallback>
}
 8004d9a:	bf00      	nop
 8004d9c:	3710      	adds	r7, #16
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}

08004da2 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004da2:	b580      	push	{r7, lr}
 8004da4:	b084      	sub	sp, #16
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dae:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d108      	bne.n	8004dca <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004dbc:	085b      	lsrs	r3, r3, #1
 8004dbe:	b29b      	uxth	r3, r3
 8004dc0:	4619      	mov	r1, r3
 8004dc2:	68f8      	ldr	r0, [r7, #12]
 8004dc4:	f005 ff7a 	bl	800acbc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004dc8:	e002      	b.n	8004dd0 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8004dca:	68f8      	ldr	r0, [r7, #12]
 8004dcc:	f7ff ff55 	bl	8004c7a <HAL_UART_RxHalfCpltCallback>
}
 8004dd0:	bf00      	nop
 8004dd2:	3710      	adds	r7, #16
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}

08004dd8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b084      	sub	sp, #16
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004de0:	2300      	movs	r3, #0
 8004de2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	695b      	ldr	r3, [r3, #20]
 8004df0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	bf14      	ite	ne
 8004df8:	2301      	movne	r3, #1
 8004dfa:	2300      	moveq	r3, #0
 8004dfc:	b2db      	uxtb	r3, r3
 8004dfe:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e06:	b2db      	uxtb	r3, r3
 8004e08:	2b21      	cmp	r3, #33	; 0x21
 8004e0a:	d108      	bne.n	8004e1e <UART_DMAError+0x46>
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d005      	beq.n	8004e1e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	2200      	movs	r2, #0
 8004e16:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004e18:	68b8      	ldr	r0, [r7, #8]
 8004e1a:	f000 f88b 	bl	8004f34 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	695b      	ldr	r3, [r3, #20]
 8004e24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	bf14      	ite	ne
 8004e2c:	2301      	movne	r3, #1
 8004e2e:	2300      	moveq	r3, #0
 8004e30:	b2db      	uxtb	r3, r3
 8004e32:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e3a:	b2db      	uxtb	r3, r3
 8004e3c:	2b22      	cmp	r3, #34	; 0x22
 8004e3e:	d108      	bne.n	8004e52 <UART_DMAError+0x7a>
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d005      	beq.n	8004e52 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004e4c:	68b8      	ldr	r0, [r7, #8]
 8004e4e:	f000 f886 	bl	8004f5e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e56:	f043 0210 	orr.w	r2, r3, #16
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004e5e:	68b8      	ldr	r0, [r7, #8]
 8004e60:	f7ff ff14 	bl	8004c8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e64:	bf00      	nop
 8004e66:	3710      	adds	r7, #16
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}

08004e6c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b086      	sub	sp, #24
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	60f8      	str	r0, [r7, #12]
 8004e74:	60b9      	str	r1, [r7, #8]
 8004e76:	4613      	mov	r3, r2
 8004e78:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004e7a:	68ba      	ldr	r2, [r7, #8]
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	88fa      	ldrh	r2, [r7, #6]
 8004e84:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2222      	movs	r2, #34	; 0x22
 8004e90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e98:	4a23      	ldr	r2, [pc, #140]	; (8004f28 <UART_Start_Receive_DMA+0xbc>)
 8004e9a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ea0:	4a22      	ldr	r2, [pc, #136]	; (8004f2c <UART_Start_Receive_DMA+0xc0>)
 8004ea2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ea8:	4a21      	ldr	r2, [pc, #132]	; (8004f30 <UART_Start_Receive_DMA+0xc4>)
 8004eaa:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004eb4:	f107 0308 	add.w	r3, r7, #8
 8004eb8:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	3304      	adds	r3, #4
 8004ec4:	4619      	mov	r1, r3
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	88fb      	ldrh	r3, [r7, #6]
 8004ecc:	f7fc f82c 	bl	8000f28 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	613b      	str	r3, [r7, #16]
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	613b      	str	r3, [r7, #16]
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	613b      	str	r3, [r7, #16]
 8004ee4:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	68fa      	ldr	r2, [r7, #12]
 8004ef4:	6812      	ldr	r2, [r2, #0]
 8004ef6:	68d2      	ldr	r2, [r2, #12]
 8004ef8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004efc:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	68fa      	ldr	r2, [r7, #12]
 8004f04:	6812      	ldr	r2, [r2, #0]
 8004f06:	6952      	ldr	r2, [r2, #20]
 8004f08:	f042 0201 	orr.w	r2, r2, #1
 8004f0c:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	68fa      	ldr	r2, [r7, #12]
 8004f14:	6812      	ldr	r2, [r2, #0]
 8004f16:	6952      	ldr	r2, [r2, #20]
 8004f18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f1c:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8004f1e:	2300      	movs	r3, #0
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3718      	adds	r7, #24
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}
 8004f28:	08004d0d 	.word	0x08004d0d
 8004f2c:	08004da3 	.word	0x08004da3
 8004f30:	08004dd9 	.word	0x08004dd9

08004f34 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b083      	sub	sp, #12
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	687a      	ldr	r2, [r7, #4]
 8004f42:	6812      	ldr	r2, [r2, #0]
 8004f44:	68d2      	ldr	r2, [r2, #12]
 8004f46:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004f4a:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2220      	movs	r2, #32
 8004f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8004f54:	bf00      	nop
 8004f56:	370c      	adds	r7, #12
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bc80      	pop	{r7}
 8004f5c:	4770      	bx	lr

08004f5e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f5e:	b480      	push	{r7}
 8004f60:	b083      	sub	sp, #12
 8004f62:	af00      	add	r7, sp, #0
 8004f64:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	687a      	ldr	r2, [r7, #4]
 8004f6c:	6812      	ldr	r2, [r2, #0]
 8004f6e:	68d2      	ldr	r2, [r2, #12]
 8004f70:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004f74:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	687a      	ldr	r2, [r7, #4]
 8004f7c:	6812      	ldr	r2, [r2, #0]
 8004f7e:	6952      	ldr	r2, [r2, #20]
 8004f80:	f022 0201 	bic.w	r2, r2, #1
 8004f84:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	d107      	bne.n	8004f9e <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	6812      	ldr	r2, [r2, #0]
 8004f96:	68d2      	ldr	r2, [r2, #12]
 8004f98:	f022 0210 	bic.w	r2, r2, #16
 8004f9c:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2220      	movs	r2, #32
 8004fa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004fac:	bf00      	nop
 8004fae:	370c      	adds	r7, #12
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bc80      	pop	{r7}
 8004fb4:	4770      	bx	lr

08004fb6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004fb6:	b580      	push	{r7, lr}
 8004fb8:	b084      	sub	sp, #16
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004fd0:	68f8      	ldr	r0, [r7, #12]
 8004fd2:	f7ff fe5b 	bl	8004c8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004fd6:	bf00      	nop
 8004fd8:	3710      	adds	r7, #16
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}

08004fde <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004fde:	b480      	push	{r7}
 8004fe0:	b085      	sub	sp, #20
 8004fe2:	af00      	add	r7, sp, #0
 8004fe4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	2b21      	cmp	r3, #33	; 0x21
 8004ff0:	d13d      	bne.n	800506e <UART_Transmit_IT+0x90>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ffa:	d113      	bne.n	8005024 <UART_Transmit_IT+0x46>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	691b      	ldr	r3, [r3, #16]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d10f      	bne.n	8005024 <UART_Transmit_IT+0x46>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6a1b      	ldr	r3, [r3, #32]
 8005008:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	68fa      	ldr	r2, [r7, #12]
 8005010:	8812      	ldrh	r2, [r2, #0]
 8005012:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005016:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6a1b      	ldr	r3, [r3, #32]
 800501c:	1c9a      	adds	r2, r3, #2
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	621a      	str	r2, [r3, #32]
 8005022:	e008      	b.n	8005036 <UART_Transmit_IT+0x58>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6a1b      	ldr	r3, [r3, #32]
 800502c:	1c58      	adds	r0, r3, #1
 800502e:	6879      	ldr	r1, [r7, #4]
 8005030:	6208      	str	r0, [r1, #32]
 8005032:	781b      	ldrb	r3, [r3, #0]
 8005034:	6053      	str	r3, [r2, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800503a:	b29b      	uxth	r3, r3
 800503c:	3b01      	subs	r3, #1
 800503e:	b29b      	uxth	r3, r3
 8005040:	687a      	ldr	r2, [r7, #4]
 8005042:	4619      	mov	r1, r3
 8005044:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005046:	2b00      	cmp	r3, #0
 8005048:	d10f      	bne.n	800506a <UART_Transmit_IT+0x8c>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	687a      	ldr	r2, [r7, #4]
 8005050:	6812      	ldr	r2, [r2, #0]
 8005052:	68d2      	ldr	r2, [r2, #12]
 8005054:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005058:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	687a      	ldr	r2, [r7, #4]
 8005060:	6812      	ldr	r2, [r2, #0]
 8005062:	68d2      	ldr	r2, [r2, #12]
 8005064:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005068:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800506a:	2300      	movs	r3, #0
 800506c:	e000      	b.n	8005070 <UART_Transmit_IT+0x92>
  }
  else
  {
    return HAL_BUSY;
 800506e:	2302      	movs	r3, #2
  }
}
 8005070:	4618      	mov	r0, r3
 8005072:	3714      	adds	r7, #20
 8005074:	46bd      	mov	sp, r7
 8005076:	bc80      	pop	{r7}
 8005078:	4770      	bx	lr

0800507a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800507a:	b580      	push	{r7, lr}
 800507c:	b082      	sub	sp, #8
 800507e:	af00      	add	r7, sp, #0
 8005080:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	687a      	ldr	r2, [r7, #4]
 8005088:	6812      	ldr	r2, [r2, #0]
 800508a:	68d2      	ldr	r2, [r2, #12]
 800508c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005090:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2220      	movs	r2, #32
 8005096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f7ff fdd2 	bl	8004c44 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80050a0:	2300      	movs	r3, #0
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	3708      	adds	r7, #8
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}

080050aa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80050aa:	b580      	push	{r7, lr}
 80050ac:	b086      	sub	sp, #24
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050b8:	b2db      	uxtb	r3, r3
 80050ba:	2b22      	cmp	r3, #34	; 0x22
 80050bc:	f040 8099 	bne.w	80051f2 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050c8:	d117      	bne.n	80050fa <UART_Receive_IT+0x50>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	691b      	ldr	r3, [r3, #16]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d113      	bne.n	80050fa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80050d2:	2300      	movs	r3, #0
 80050d4:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050da:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050e8:	b29a      	uxth	r2, r3
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050f2:	1c9a      	adds	r2, r3, #2
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	629a      	str	r2, [r3, #40]	; 0x28
 80050f8:	e026      	b.n	8005148 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050fe:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8005100:	2300      	movs	r3, #0
 8005102:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800510c:	d007      	beq.n	800511e <UART_Receive_IT+0x74>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d10a      	bne.n	800512c <UART_Receive_IT+0x82>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	691b      	ldr	r3, [r3, #16]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d106      	bne.n	800512c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	b2da      	uxtb	r2, r3
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	701a      	strb	r2, [r3, #0]
 800512a:	e008      	b.n	800513e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	b2db      	uxtb	r3, r3
 8005134:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005138:	b2da      	uxtb	r2, r3
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005142:	1c5a      	adds	r2, r3, #1
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800514c:	b29b      	uxth	r3, r3
 800514e:	3b01      	subs	r3, #1
 8005150:	b29b      	uxth	r3, r3
 8005152:	687a      	ldr	r2, [r7, #4]
 8005154:	4619      	mov	r1, r3
 8005156:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005158:	2b00      	cmp	r3, #0
 800515a:	d148      	bne.n	80051ee <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	687a      	ldr	r2, [r7, #4]
 8005162:	6812      	ldr	r2, [r2, #0]
 8005164:	68d2      	ldr	r2, [r2, #12]
 8005166:	f022 0220 	bic.w	r2, r2, #32
 800516a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	687a      	ldr	r2, [r7, #4]
 8005172:	6812      	ldr	r2, [r2, #0]
 8005174:	68d2      	ldr	r2, [r2, #12]
 8005176:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800517a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	687a      	ldr	r2, [r7, #4]
 8005182:	6812      	ldr	r2, [r2, #0]
 8005184:	6952      	ldr	r2, [r2, #20]
 8005186:	f022 0201 	bic.w	r2, r2, #1
 800518a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2220      	movs	r2, #32
 8005190:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005198:	2b01      	cmp	r3, #1
 800519a:	d123      	bne.n	80051e4 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2200      	movs	r2, #0
 80051a0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	687a      	ldr	r2, [r7, #4]
 80051a8:	6812      	ldr	r2, [r2, #0]
 80051aa:	68d2      	ldr	r2, [r2, #12]
 80051ac:	f022 0210 	bic.w	r2, r2, #16
 80051b0:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f003 0310 	and.w	r3, r3, #16
 80051bc:	2b10      	cmp	r3, #16
 80051be:	d10a      	bne.n	80051d6 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80051c0:	2300      	movs	r3, #0
 80051c2:	60fb      	str	r3, [r7, #12]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	60fb      	str	r3, [r7, #12]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	60fb      	str	r3, [r7, #12]
 80051d4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80051da:	4619      	mov	r1, r3
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f005 fd6d 	bl	800acbc <HAL_UARTEx_RxEventCallback>
 80051e2:	e002      	b.n	80051ea <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f7ff fd3f 	bl	8004c68 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80051ea:	2300      	movs	r3, #0
 80051ec:	e002      	b.n	80051f4 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80051ee:	2300      	movs	r3, #0
 80051f0:	e000      	b.n	80051f4 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80051f2:	2302      	movs	r3, #2
  }
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	3718      	adds	r7, #24
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}

080051fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051fc:	b590      	push	{r4, r7, lr}
 80051fe:	b085      	sub	sp, #20
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	4a5f      	ldr	r2, [pc, #380]	; (8005388 <UART_SetConfig+0x18c>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d904      	bls.n	8005218 <UART_SetConfig+0x1c>
 800520e:	f640 6153 	movw	r1, #3667	; 0xe53
 8005212:	485e      	ldr	r0, [pc, #376]	; (800538c <UART_SetConfig+0x190>)
 8005214:	f7fb f9ae 	bl	8000574 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	68db      	ldr	r3, [r3, #12]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d009      	beq.n	8005234 <UART_SetConfig+0x38>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	68db      	ldr	r3, [r3, #12]
 8005224:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005228:	d004      	beq.n	8005234 <UART_SetConfig+0x38>
 800522a:	f640 6154 	movw	r1, #3668	; 0xe54
 800522e:	4857      	ldr	r0, [pc, #348]	; (800538c <UART_SetConfig+0x190>)
 8005230:	f7fb f9a0 	bl	8000574 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	691b      	ldr	r3, [r3, #16]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d00e      	beq.n	800525a <UART_SetConfig+0x5e>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	691b      	ldr	r3, [r3, #16]
 8005240:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005244:	d009      	beq.n	800525a <UART_SetConfig+0x5e>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	691b      	ldr	r3, [r3, #16]
 800524a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800524e:	d004      	beq.n	800525a <UART_SetConfig+0x5e>
 8005250:	f640 6155 	movw	r1, #3669	; 0xe55
 8005254:	484d      	ldr	r0, [pc, #308]	; (800538c <UART_SetConfig+0x190>)
 8005256:	f7fb f98d 	bl	8000574 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	695a      	ldr	r2, [r3, #20]
 800525e:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 8005262:	4013      	ands	r3, r2
 8005264:	2b00      	cmp	r3, #0
 8005266:	d103      	bne.n	8005270 <UART_SetConfig+0x74>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	695b      	ldr	r3, [r3, #20]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d104      	bne.n	800527a <UART_SetConfig+0x7e>
 8005270:	f640 6156 	movw	r1, #3670	; 0xe56
 8005274:	4845      	ldr	r0, [pc, #276]	; (800538c <UART_SetConfig+0x190>)
 8005276:	f7fb f97d 	bl	8000574 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	687a      	ldr	r2, [r7, #4]
 8005280:	6812      	ldr	r2, [r2, #0]
 8005282:	6912      	ldr	r2, [r2, #16]
 8005284:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8005288:	687a      	ldr	r2, [r7, #4]
 800528a:	68d2      	ldr	r2, [r2, #12]
 800528c:	430a      	orrs	r2, r1
 800528e:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	689a      	ldr	r2, [r3, #8]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	691b      	ldr	r3, [r3, #16]
 8005298:	431a      	orrs	r2, r3
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	695b      	ldr	r3, [r3, #20]
 800529e:	4313      	orrs	r3, r2
 80052a0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681a      	ldr	r2, [r3, #0]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	68db      	ldr	r3, [r3, #12]
 80052ac:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80052b0:	f023 030c 	bic.w	r3, r3, #12
 80052b4:	68b9      	ldr	r1, [r7, #8]
 80052b6:	430b      	orrs	r3, r1
 80052b8:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	687a      	ldr	r2, [r7, #4]
 80052c0:	6812      	ldr	r2, [r2, #0]
 80052c2:	6952      	ldr	r2, [r2, #20]
 80052c4:	f422 7140 	bic.w	r1, r2, #768	; 0x300
 80052c8:	687a      	ldr	r2, [r7, #4]
 80052ca:	6992      	ldr	r2, [r2, #24]
 80052cc:	430a      	orrs	r2, r1
 80052ce:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a2e      	ldr	r2, [pc, #184]	; (8005390 <UART_SetConfig+0x194>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d103      	bne.n	80052e2 <UART_SetConfig+0xe6>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80052da:	f7fe fd65 	bl	8003da8 <HAL_RCC_GetPCLK2Freq>
 80052de:	60f8      	str	r0, [r7, #12]
 80052e0:	e002      	b.n	80052e8 <UART_SetConfig+0xec>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80052e2:	f7fe fd4d 	bl	8003d80 <HAL_RCC_GetPCLK1Freq>
 80052e6:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6819      	ldr	r1, [r3, #0]
 80052ec:	68fa      	ldr	r2, [r7, #12]
 80052ee:	4613      	mov	r3, r2
 80052f0:	009b      	lsls	r3, r3, #2
 80052f2:	4413      	add	r3, r2
 80052f4:	009a      	lsls	r2, r3, #2
 80052f6:	441a      	add	r2, r3
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	009b      	lsls	r3, r3, #2
 80052fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005302:	4a24      	ldr	r2, [pc, #144]	; (8005394 <UART_SetConfig+0x198>)
 8005304:	fba2 2303 	umull	r2, r3, r2, r3
 8005308:	095b      	lsrs	r3, r3, #5
 800530a:	0118      	lsls	r0, r3, #4
 800530c:	68fa      	ldr	r2, [r7, #12]
 800530e:	4613      	mov	r3, r2
 8005310:	009b      	lsls	r3, r3, #2
 8005312:	4413      	add	r3, r2
 8005314:	009a      	lsls	r2, r3, #2
 8005316:	441a      	add	r2, r3
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	009b      	lsls	r3, r3, #2
 800531e:	fbb2 f2f3 	udiv	r2, r2, r3
 8005322:	4b1c      	ldr	r3, [pc, #112]	; (8005394 <UART_SetConfig+0x198>)
 8005324:	fba3 4302 	umull	r4, r3, r3, r2
 8005328:	095b      	lsrs	r3, r3, #5
 800532a:	2464      	movs	r4, #100	; 0x64
 800532c:	fb04 f303 	mul.w	r3, r4, r3
 8005330:	1ad3      	subs	r3, r2, r3
 8005332:	011b      	lsls	r3, r3, #4
 8005334:	3332      	adds	r3, #50	; 0x32
 8005336:	4a17      	ldr	r2, [pc, #92]	; (8005394 <UART_SetConfig+0x198>)
 8005338:	fba2 2303 	umull	r2, r3, r2, r3
 800533c:	095b      	lsrs	r3, r3, #5
 800533e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005342:	4418      	add	r0, r3
 8005344:	68fa      	ldr	r2, [r7, #12]
 8005346:	4613      	mov	r3, r2
 8005348:	009b      	lsls	r3, r3, #2
 800534a:	4413      	add	r3, r2
 800534c:	009a      	lsls	r2, r3, #2
 800534e:	441a      	add	r2, r3
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	009b      	lsls	r3, r3, #2
 8005356:	fbb2 f2f3 	udiv	r2, r2, r3
 800535a:	4b0e      	ldr	r3, [pc, #56]	; (8005394 <UART_SetConfig+0x198>)
 800535c:	fba3 4302 	umull	r4, r3, r3, r2
 8005360:	095b      	lsrs	r3, r3, #5
 8005362:	2464      	movs	r4, #100	; 0x64
 8005364:	fb04 f303 	mul.w	r3, r4, r3
 8005368:	1ad3      	subs	r3, r2, r3
 800536a:	011b      	lsls	r3, r3, #4
 800536c:	3332      	adds	r3, #50	; 0x32
 800536e:	4a09      	ldr	r2, [pc, #36]	; (8005394 <UART_SetConfig+0x198>)
 8005370:	fba2 2303 	umull	r2, r3, r2, r3
 8005374:	095b      	lsrs	r3, r3, #5
 8005376:	f003 030f 	and.w	r3, r3, #15
 800537a:	4403      	add	r3, r0
 800537c:	608b      	str	r3, [r1, #8]
#endif /* USART_CR1_OVER8 */
}
 800537e:	bf00      	nop
 8005380:	3714      	adds	r7, #20
 8005382:	46bd      	mov	sp, r7
 8005384:	bd90      	pop	{r4, r7, pc}
 8005386:	bf00      	nop
 8005388:	0044aa20 	.word	0x0044aa20
 800538c:	0800b070 	.word	0x0800b070
 8005390:	40013800 	.word	0x40013800
 8005394:	51eb851f 	.word	0x51eb851f

08005398 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005398:	b084      	sub	sp, #16
 800539a:	b480      	push	{r7}
 800539c:	b083      	sub	sp, #12
 800539e:	af00      	add	r7, sp, #0
 80053a0:	6078      	str	r0, [r7, #4]
 80053a2:	f107 0014 	add.w	r0, r7, #20
 80053a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80053aa:	2300      	movs	r3, #0
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	370c      	adds	r7, #12
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bc80      	pop	{r7}
 80053b4:	b004      	add	sp, #16
 80053b6:	4770      	bx	lr

080053b8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b085      	sub	sp, #20
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2200      	movs	r2, #0
 80053c4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80053c8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80053cc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	b29a      	uxth	r2, r3
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80053d8:	2300      	movs	r3, #0
}
 80053da:	4618      	mov	r0, r3
 80053dc:	3714      	adds	r7, #20
 80053de:	46bd      	mov	sp, r7
 80053e0:	bc80      	pop	{r7}
 80053e2:	4770      	bx	lr

080053e4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b085      	sub	sp, #20
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80053ec:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80053f0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80053f8:	b29a      	uxth	r2, r3
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	b29b      	uxth	r3, r3
 80053fe:	43db      	mvns	r3, r3
 8005400:	b29b      	uxth	r3, r3
 8005402:	4013      	ands	r3, r2
 8005404:	b29a      	uxth	r2, r3
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800540c:	2300      	movs	r3, #0
}
 800540e:	4618      	mov	r0, r3
 8005410:	3714      	adds	r7, #20
 8005412:	46bd      	mov	sp, r7
 8005414:	bc80      	pop	{r7}
 8005416:	4770      	bx	lr

08005418 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8005418:	b480      	push	{r7}
 800541a:	b083      	sub	sp, #12
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
 8005420:	460b      	mov	r3, r1
 8005422:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005424:	2300      	movs	r3, #0
}
 8005426:	4618      	mov	r0, r3
 8005428:	370c      	adds	r7, #12
 800542a:	46bd      	mov	sp, r7
 800542c:	bc80      	pop	{r7}
 800542e:	4770      	bx	lr

08005430 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005430:	b084      	sub	sp, #16
 8005432:	b480      	push	{r7}
 8005434:	b083      	sub	sp, #12
 8005436:	af00      	add	r7, sp, #0
 8005438:	6078      	str	r0, [r7, #4]
 800543a:	f107 0014 	add.w	r0, r7, #20
 800543e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2201      	movs	r2, #1
 8005446:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2200      	movs	r2, #0
 800544e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2200      	movs	r2, #0
 8005456:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2200      	movs	r2, #0
 800545e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005462:	2300      	movs	r3, #0
}
 8005464:	4618      	mov	r0, r3
 8005466:	370c      	adds	r7, #12
 8005468:	46bd      	mov	sp, r7
 800546a:	bc80      	pop	{r7}
 800546c:	b004      	add	sp, #16
 800546e:	4770      	bx	lr

08005470 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005470:	b480      	push	{r7}
 8005472:	b09b      	sub	sp, #108	; 0x6c
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
 8005478:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800547a:	2300      	movs	r3, #0
 800547c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005480:	687a      	ldr	r2, [r7, #4]
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	781b      	ldrb	r3, [r3, #0]
 8005486:	009b      	lsls	r3, r3, #2
 8005488:	4413      	add	r3, r2
 800548a:	881b      	ldrh	r3, [r3, #0]
 800548c:	b29b      	uxth	r3, r3
 800548e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8005492:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005496:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	78db      	ldrb	r3, [r3, #3]
 800549e:	2b03      	cmp	r3, #3
 80054a0:	d81f      	bhi.n	80054e2 <USB_ActivateEndpoint+0x72>
 80054a2:	a201      	add	r2, pc, #4	; (adr r2, 80054a8 <USB_ActivateEndpoint+0x38>)
 80054a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054a8:	080054b9 	.word	0x080054b9
 80054ac:	080054d5 	.word	0x080054d5
 80054b0:	080054eb 	.word	0x080054eb
 80054b4:	080054c7 	.word	0x080054c7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80054b8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80054bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80054c0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80054c4:	e012      	b.n	80054ec <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80054c6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80054ca:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80054ce:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80054d2:	e00b      	b.n	80054ec <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80054d4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80054d8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80054dc:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80054e0:	e004      	b.n	80054ec <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80054e8:	e000      	b.n	80054ec <USB_ActivateEndpoint+0x7c>
      break;
 80054ea:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80054ec:	687a      	ldr	r2, [r7, #4]
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	781b      	ldrb	r3, [r3, #0]
 80054f2:	009b      	lsls	r3, r3, #2
 80054f4:	441a      	add	r2, r3
 80054f6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80054fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005502:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005506:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800550a:	b29b      	uxth	r3, r3
 800550c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800550e:	687a      	ldr	r2, [r7, #4]
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	781b      	ldrb	r3, [r3, #0]
 8005514:	009b      	lsls	r3, r3, #2
 8005516:	4413      	add	r3, r2
 8005518:	881b      	ldrh	r3, [r3, #0]
 800551a:	b29b      	uxth	r3, r3
 800551c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005520:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005524:	b29a      	uxth	r2, r3
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	781b      	ldrb	r3, [r3, #0]
 800552a:	b29b      	uxth	r3, r3
 800552c:	4313      	orrs	r3, r2
 800552e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8005532:	687a      	ldr	r2, [r7, #4]
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	781b      	ldrb	r3, [r3, #0]
 8005538:	009b      	lsls	r3, r3, #2
 800553a:	441a      	add	r2, r3
 800553c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8005540:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005544:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005548:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800554c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005550:	b29b      	uxth	r3, r3
 8005552:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	7b1b      	ldrb	r3, [r3, #12]
 8005558:	2b00      	cmp	r3, #0
 800555a:	f040 8153 	bne.w	8005804 <USB_ActivateEndpoint+0x394>
  {
    if (ep->is_in != 0U)
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	785b      	ldrb	r3, [r3, #1]
 8005562:	2b00      	cmp	r3, #0
 8005564:	f000 808e 	beq.w	8005684 <USB_ActivateEndpoint+0x214>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	65bb      	str	r3, [r7, #88]	; 0x58
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005572:	b29b      	uxth	r3, r3
 8005574:	461a      	mov	r2, r3
 8005576:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005578:	4413      	add	r3, r2
 800557a:	65bb      	str	r3, [r7, #88]	; 0x58
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	781b      	ldrb	r3, [r3, #0]
 8005580:	011a      	lsls	r2, r3, #4
 8005582:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005584:	4413      	add	r3, r2
 8005586:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800558a:	657b      	str	r3, [r7, #84]	; 0x54
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	88db      	ldrh	r3, [r3, #6]
 8005590:	085b      	lsrs	r3, r3, #1
 8005592:	b29b      	uxth	r3, r3
 8005594:	005b      	lsls	r3, r3, #1
 8005596:	b29a      	uxth	r2, r3
 8005598:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800559a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800559c:	687a      	ldr	r2, [r7, #4]
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	781b      	ldrb	r3, [r3, #0]
 80055a2:	009b      	lsls	r3, r3, #2
 80055a4:	4413      	add	r3, r2
 80055a6:	881b      	ldrh	r3, [r3, #0]
 80055a8:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80055ac:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80055b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d01d      	beq.n	80055f4 <USB_ActivateEndpoint+0x184>
 80055b8:	687a      	ldr	r2, [r7, #4]
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	781b      	ldrb	r3, [r3, #0]
 80055be:	009b      	lsls	r3, r3, #2
 80055c0:	4413      	add	r3, r2
 80055c2:	881b      	ldrh	r3, [r3, #0]
 80055c4:	b29b      	uxth	r3, r3
 80055c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055ce:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80055d2:	687a      	ldr	r2, [r7, #4]
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	781b      	ldrb	r3, [r3, #0]
 80055d8:	009b      	lsls	r3, r3, #2
 80055da:	441a      	add	r2, r3
 80055dc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80055e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055ec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80055f0:	b29b      	uxth	r3, r3
 80055f2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	78db      	ldrb	r3, [r3, #3]
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	d024      	beq.n	8005646 <USB_ActivateEndpoint+0x1d6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80055fc:	687a      	ldr	r2, [r7, #4]
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	781b      	ldrb	r3, [r3, #0]
 8005602:	009b      	lsls	r3, r3, #2
 8005604:	4413      	add	r3, r2
 8005606:	881b      	ldrh	r3, [r3, #0]
 8005608:	b29b      	uxth	r3, r3
 800560a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800560e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005612:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8005616:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800561a:	f083 0320 	eor.w	r3, r3, #32
 800561e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8005622:	687a      	ldr	r2, [r7, #4]
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	781b      	ldrb	r3, [r3, #0]
 8005628:	009b      	lsls	r3, r3, #2
 800562a:	441a      	add	r2, r3
 800562c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005630:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005634:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005638:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800563c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005640:	b29b      	uxth	r3, r3
 8005642:	8013      	strh	r3, [r2, #0]
 8005644:	e271      	b.n	8005b2a <USB_ActivateEndpoint+0x6ba>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005646:	687a      	ldr	r2, [r7, #4]
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	781b      	ldrb	r3, [r3, #0]
 800564c:	009b      	lsls	r3, r3, #2
 800564e:	4413      	add	r3, r2
 8005650:	881b      	ldrh	r3, [r3, #0]
 8005652:	b29b      	uxth	r3, r3
 8005654:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005658:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800565c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8005660:	687a      	ldr	r2, [r7, #4]
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	781b      	ldrb	r3, [r3, #0]
 8005666:	009b      	lsls	r3, r3, #2
 8005668:	441a      	add	r2, r3
 800566a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800566e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005672:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005676:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800567a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800567e:	b29b      	uxth	r3, r3
 8005680:	8013      	strh	r3, [r2, #0]
 8005682:	e252      	b.n	8005b2a <USB_ActivateEndpoint+0x6ba>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	64bb      	str	r3, [r7, #72]	; 0x48
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800568e:	b29b      	uxth	r3, r3
 8005690:	461a      	mov	r2, r3
 8005692:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005694:	4413      	add	r3, r2
 8005696:	64bb      	str	r3, [r7, #72]	; 0x48
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	781b      	ldrb	r3, [r3, #0]
 800569c:	011a      	lsls	r2, r3, #4
 800569e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056a0:	4413      	add	r3, r2
 80056a2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80056a6:	647b      	str	r3, [r7, #68]	; 0x44
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	88db      	ldrh	r3, [r3, #6]
 80056ac:	085b      	lsrs	r3, r3, #1
 80056ae:	b29b      	uxth	r3, r3
 80056b0:	005b      	lsls	r3, r3, #1
 80056b2:	b29a      	uxth	r2, r3
 80056b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056b6:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	643b      	str	r3, [r7, #64]	; 0x40
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056c2:	b29b      	uxth	r3, r3
 80056c4:	461a      	mov	r2, r3
 80056c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056c8:	4413      	add	r3, r2
 80056ca:	643b      	str	r3, [r7, #64]	; 0x40
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	781b      	ldrb	r3, [r3, #0]
 80056d0:	011a      	lsls	r2, r3, #4
 80056d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056d4:	4413      	add	r3, r2
 80056d6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80056da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	691b      	ldr	r3, [r3, #16]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d112      	bne.n	800570a <USB_ActivateEndpoint+0x29a>
 80056e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056e6:	881b      	ldrh	r3, [r3, #0]
 80056e8:	b29b      	uxth	r3, r3
 80056ea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80056ee:	b29a      	uxth	r2, r3
 80056f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056f2:	801a      	strh	r2, [r3, #0]
 80056f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056f6:	881b      	ldrh	r3, [r3, #0]
 80056f8:	b29b      	uxth	r3, r3
 80056fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005702:	b29a      	uxth	r2, r3
 8005704:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005706:	801a      	strh	r2, [r3, #0]
 8005708:	e02f      	b.n	800576a <USB_ActivateEndpoint+0x2fa>
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	691b      	ldr	r3, [r3, #16]
 800570e:	2b3e      	cmp	r3, #62	; 0x3e
 8005710:	d813      	bhi.n	800573a <USB_ActivateEndpoint+0x2ca>
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	691b      	ldr	r3, [r3, #16]
 8005716:	085b      	lsrs	r3, r3, #1
 8005718:	663b      	str	r3, [r7, #96]	; 0x60
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	691b      	ldr	r3, [r3, #16]
 800571e:	f003 0301 	and.w	r3, r3, #1
 8005722:	2b00      	cmp	r3, #0
 8005724:	d002      	beq.n	800572c <USB_ActivateEndpoint+0x2bc>
 8005726:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005728:	3301      	adds	r3, #1
 800572a:	663b      	str	r3, [r7, #96]	; 0x60
 800572c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800572e:	b29b      	uxth	r3, r3
 8005730:	029b      	lsls	r3, r3, #10
 8005732:	b29a      	uxth	r2, r3
 8005734:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005736:	801a      	strh	r2, [r3, #0]
 8005738:	e017      	b.n	800576a <USB_ActivateEndpoint+0x2fa>
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	691b      	ldr	r3, [r3, #16]
 800573e:	095b      	lsrs	r3, r3, #5
 8005740:	663b      	str	r3, [r7, #96]	; 0x60
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	691b      	ldr	r3, [r3, #16]
 8005746:	f003 031f 	and.w	r3, r3, #31
 800574a:	2b00      	cmp	r3, #0
 800574c:	d102      	bne.n	8005754 <USB_ActivateEndpoint+0x2e4>
 800574e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005750:	3b01      	subs	r3, #1
 8005752:	663b      	str	r3, [r7, #96]	; 0x60
 8005754:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005756:	b29b      	uxth	r3, r3
 8005758:	029b      	lsls	r3, r3, #10
 800575a:	b29b      	uxth	r3, r3
 800575c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005760:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005764:	b29a      	uxth	r2, r3
 8005766:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005768:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800576a:	687a      	ldr	r2, [r7, #4]
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	781b      	ldrb	r3, [r3, #0]
 8005770:	009b      	lsls	r3, r3, #2
 8005772:	4413      	add	r3, r2
 8005774:	881b      	ldrh	r3, [r3, #0]
 8005776:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005778:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800577a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800577e:	2b00      	cmp	r3, #0
 8005780:	d01b      	beq.n	80057ba <USB_ActivateEndpoint+0x34a>
 8005782:	687a      	ldr	r2, [r7, #4]
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	781b      	ldrb	r3, [r3, #0]
 8005788:	009b      	lsls	r3, r3, #2
 800578a:	4413      	add	r3, r2
 800578c:	881b      	ldrh	r3, [r3, #0]
 800578e:	b29b      	uxth	r3, r3
 8005790:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005794:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005798:	873b      	strh	r3, [r7, #56]	; 0x38
 800579a:	687a      	ldr	r2, [r7, #4]
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	781b      	ldrb	r3, [r3, #0]
 80057a0:	009b      	lsls	r3, r3, #2
 80057a2:	441a      	add	r2, r3
 80057a4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80057a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80057b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057b6:	b29b      	uxth	r3, r3
 80057b8:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80057ba:	687a      	ldr	r2, [r7, #4]
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	781b      	ldrb	r3, [r3, #0]
 80057c0:	009b      	lsls	r3, r3, #2
 80057c2:	4413      	add	r3, r2
 80057c4:	881b      	ldrh	r3, [r3, #0]
 80057c6:	b29b      	uxth	r3, r3
 80057c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80057cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057d0:	86fb      	strh	r3, [r7, #54]	; 0x36
 80057d2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80057d4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80057d8:	86fb      	strh	r3, [r7, #54]	; 0x36
 80057da:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80057dc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80057e0:	86fb      	strh	r3, [r7, #54]	; 0x36
 80057e2:	687a      	ldr	r2, [r7, #4]
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	781b      	ldrb	r3, [r3, #0]
 80057e8:	009b      	lsls	r3, r3, #2
 80057ea:	441a      	add	r2, r3
 80057ec:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80057ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057fe:	b29b      	uxth	r3, r3
 8005800:	8013      	strh	r3, [r2, #0]
 8005802:	e192      	b.n	8005b2a <USB_ActivateEndpoint+0x6ba>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8005804:	687a      	ldr	r2, [r7, #4]
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	781b      	ldrb	r3, [r3, #0]
 800580a:	009b      	lsls	r3, r3, #2
 800580c:	4413      	add	r3, r2
 800580e:	881b      	ldrh	r3, [r3, #0]
 8005810:	b29b      	uxth	r3, r3
 8005812:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005816:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800581a:	86bb      	strh	r3, [r7, #52]	; 0x34
 800581c:	687a      	ldr	r2, [r7, #4]
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	781b      	ldrb	r3, [r3, #0]
 8005822:	009b      	lsls	r3, r3, #2
 8005824:	441a      	add	r2, r3
 8005826:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005828:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800582c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005830:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005834:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005838:	b29b      	uxth	r3, r3
 800583a:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	633b      	str	r3, [r7, #48]	; 0x30
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005846:	b29b      	uxth	r3, r3
 8005848:	461a      	mov	r2, r3
 800584a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800584c:	4413      	add	r3, r2
 800584e:	633b      	str	r3, [r7, #48]	; 0x30
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	781b      	ldrb	r3, [r3, #0]
 8005854:	011a      	lsls	r2, r3, #4
 8005856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005858:	4413      	add	r3, r2
 800585a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800585e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	891b      	ldrh	r3, [r3, #8]
 8005864:	085b      	lsrs	r3, r3, #1
 8005866:	b29b      	uxth	r3, r3
 8005868:	005b      	lsls	r3, r3, #1
 800586a:	b29a      	uxth	r2, r3
 800586c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800586e:	801a      	strh	r2, [r3, #0]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	62bb      	str	r3, [r7, #40]	; 0x28
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800587a:	b29b      	uxth	r3, r3
 800587c:	461a      	mov	r2, r3
 800587e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005880:	4413      	add	r3, r2
 8005882:	62bb      	str	r3, [r7, #40]	; 0x28
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	781b      	ldrb	r3, [r3, #0]
 8005888:	011a      	lsls	r2, r3, #4
 800588a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800588c:	4413      	add	r3, r2
 800588e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005892:	627b      	str	r3, [r7, #36]	; 0x24
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	895b      	ldrh	r3, [r3, #10]
 8005898:	085b      	lsrs	r3, r3, #1
 800589a:	b29b      	uxth	r3, r3
 800589c:	005b      	lsls	r3, r3, #1
 800589e:	b29a      	uxth	r2, r3
 80058a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	785b      	ldrb	r3, [r3, #1]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	f040 8091 	bne.w	80059d0 <USB_ActivateEndpoint+0x560>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80058ae:	687a      	ldr	r2, [r7, #4]
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	781b      	ldrb	r3, [r3, #0]
 80058b4:	009b      	lsls	r3, r3, #2
 80058b6:	4413      	add	r3, r2
 80058b8:	881b      	ldrh	r3, [r3, #0]
 80058ba:	847b      	strh	r3, [r7, #34]	; 0x22
 80058bc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80058be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d01b      	beq.n	80058fe <USB_ActivateEndpoint+0x48e>
 80058c6:	687a      	ldr	r2, [r7, #4]
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	781b      	ldrb	r3, [r3, #0]
 80058cc:	009b      	lsls	r3, r3, #2
 80058ce:	4413      	add	r3, r2
 80058d0:	881b      	ldrh	r3, [r3, #0]
 80058d2:	b29b      	uxth	r3, r3
 80058d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058dc:	843b      	strh	r3, [r7, #32]
 80058de:	687a      	ldr	r2, [r7, #4]
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	781b      	ldrb	r3, [r3, #0]
 80058e4:	009b      	lsls	r3, r3, #2
 80058e6:	441a      	add	r2, r3
 80058e8:	8c3b      	ldrh	r3, [r7, #32]
 80058ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80058f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058fa:	b29b      	uxth	r3, r3
 80058fc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80058fe:	687a      	ldr	r2, [r7, #4]
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	781b      	ldrb	r3, [r3, #0]
 8005904:	009b      	lsls	r3, r3, #2
 8005906:	4413      	add	r3, r2
 8005908:	881b      	ldrh	r3, [r3, #0]
 800590a:	83fb      	strh	r3, [r7, #30]
 800590c:	8bfb      	ldrh	r3, [r7, #30]
 800590e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005912:	2b00      	cmp	r3, #0
 8005914:	d01b      	beq.n	800594e <USB_ActivateEndpoint+0x4de>
 8005916:	687a      	ldr	r2, [r7, #4]
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	781b      	ldrb	r3, [r3, #0]
 800591c:	009b      	lsls	r3, r3, #2
 800591e:	4413      	add	r3, r2
 8005920:	881b      	ldrh	r3, [r3, #0]
 8005922:	b29b      	uxth	r3, r3
 8005924:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005928:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800592c:	83bb      	strh	r3, [r7, #28]
 800592e:	687a      	ldr	r2, [r7, #4]
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	781b      	ldrb	r3, [r3, #0]
 8005934:	009b      	lsls	r3, r3, #2
 8005936:	441a      	add	r2, r3
 8005938:	8bbb      	ldrh	r3, [r7, #28]
 800593a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800593e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005942:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005946:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800594a:	b29b      	uxth	r3, r3
 800594c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800594e:	687a      	ldr	r2, [r7, #4]
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	781b      	ldrb	r3, [r3, #0]
 8005954:	009b      	lsls	r3, r3, #2
 8005956:	4413      	add	r3, r2
 8005958:	881b      	ldrh	r3, [r3, #0]
 800595a:	b29b      	uxth	r3, r3
 800595c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005960:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005964:	837b      	strh	r3, [r7, #26]
 8005966:	8b7b      	ldrh	r3, [r7, #26]
 8005968:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800596c:	837b      	strh	r3, [r7, #26]
 800596e:	8b7b      	ldrh	r3, [r7, #26]
 8005970:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005974:	837b      	strh	r3, [r7, #26]
 8005976:	687a      	ldr	r2, [r7, #4]
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	781b      	ldrb	r3, [r3, #0]
 800597c:	009b      	lsls	r3, r3, #2
 800597e:	441a      	add	r2, r3
 8005980:	8b7b      	ldrh	r3, [r7, #26]
 8005982:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005986:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800598a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800598e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005992:	b29b      	uxth	r3, r3
 8005994:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005996:	687a      	ldr	r2, [r7, #4]
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	781b      	ldrb	r3, [r3, #0]
 800599c:	009b      	lsls	r3, r3, #2
 800599e:	4413      	add	r3, r2
 80059a0:	881b      	ldrh	r3, [r3, #0]
 80059a2:	b29b      	uxth	r3, r3
 80059a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059ac:	833b      	strh	r3, [r7, #24]
 80059ae:	687a      	ldr	r2, [r7, #4]
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	781b      	ldrb	r3, [r3, #0]
 80059b4:	009b      	lsls	r3, r3, #2
 80059b6:	441a      	add	r2, r3
 80059b8:	8b3b      	ldrh	r3, [r7, #24]
 80059ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059ca:	b29b      	uxth	r3, r3
 80059cc:	8013      	strh	r3, [r2, #0]
 80059ce:	e0ac      	b.n	8005b2a <USB_ActivateEndpoint+0x6ba>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80059d0:	687a      	ldr	r2, [r7, #4]
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	781b      	ldrb	r3, [r3, #0]
 80059d6:	009b      	lsls	r3, r3, #2
 80059d8:	4413      	add	r3, r2
 80059da:	881b      	ldrh	r3, [r3, #0]
 80059dc:	82fb      	strh	r3, [r7, #22]
 80059de:	8afb      	ldrh	r3, [r7, #22]
 80059e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d01b      	beq.n	8005a20 <USB_ActivateEndpoint+0x5b0>
 80059e8:	687a      	ldr	r2, [r7, #4]
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	781b      	ldrb	r3, [r3, #0]
 80059ee:	009b      	lsls	r3, r3, #2
 80059f0:	4413      	add	r3, r2
 80059f2:	881b      	ldrh	r3, [r3, #0]
 80059f4:	b29b      	uxth	r3, r3
 80059f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059fe:	82bb      	strh	r3, [r7, #20]
 8005a00:	687a      	ldr	r2, [r7, #4]
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	781b      	ldrb	r3, [r3, #0]
 8005a06:	009b      	lsls	r3, r3, #2
 8005a08:	441a      	add	r2, r3
 8005a0a:	8abb      	ldrh	r3, [r7, #20]
 8005a0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a14:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005a18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a1c:	b29b      	uxth	r3, r3
 8005a1e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005a20:	687a      	ldr	r2, [r7, #4]
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	781b      	ldrb	r3, [r3, #0]
 8005a26:	009b      	lsls	r3, r3, #2
 8005a28:	4413      	add	r3, r2
 8005a2a:	881b      	ldrh	r3, [r3, #0]
 8005a2c:	827b      	strh	r3, [r7, #18]
 8005a2e:	8a7b      	ldrh	r3, [r7, #18]
 8005a30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d01b      	beq.n	8005a70 <USB_ActivateEndpoint+0x600>
 8005a38:	687a      	ldr	r2, [r7, #4]
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	781b      	ldrb	r3, [r3, #0]
 8005a3e:	009b      	lsls	r3, r3, #2
 8005a40:	4413      	add	r3, r2
 8005a42:	881b      	ldrh	r3, [r3, #0]
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a4e:	823b      	strh	r3, [r7, #16]
 8005a50:	687a      	ldr	r2, [r7, #4]
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	781b      	ldrb	r3, [r3, #0]
 8005a56:	009b      	lsls	r3, r3, #2
 8005a58:	441a      	add	r2, r3
 8005a5a:	8a3b      	ldrh	r3, [r7, #16]
 8005a5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a68:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005a6c:	b29b      	uxth	r3, r3
 8005a6e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	78db      	ldrb	r3, [r3, #3]
 8005a74:	2b01      	cmp	r3, #1
 8005a76:	d020      	beq.n	8005aba <USB_ActivateEndpoint+0x64a>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005a78:	687a      	ldr	r2, [r7, #4]
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	781b      	ldrb	r3, [r3, #0]
 8005a7e:	009b      	lsls	r3, r3, #2
 8005a80:	4413      	add	r3, r2
 8005a82:	881b      	ldrh	r3, [r3, #0]
 8005a84:	b29b      	uxth	r3, r3
 8005a86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a8e:	81fb      	strh	r3, [r7, #14]
 8005a90:	89fb      	ldrh	r3, [r7, #14]
 8005a92:	f083 0320 	eor.w	r3, r3, #32
 8005a96:	81fb      	strh	r3, [r7, #14]
 8005a98:	687a      	ldr	r2, [r7, #4]
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	781b      	ldrb	r3, [r3, #0]
 8005a9e:	009b      	lsls	r3, r3, #2
 8005aa0:	441a      	add	r2, r3
 8005aa2:	89fb      	ldrh	r3, [r7, #14]
 8005aa4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005aa8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005aac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ab0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ab4:	b29b      	uxth	r3, r3
 8005ab6:	8013      	strh	r3, [r2, #0]
 8005ab8:	e01b      	b.n	8005af2 <USB_ActivateEndpoint+0x682>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005aba:	687a      	ldr	r2, [r7, #4]
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	781b      	ldrb	r3, [r3, #0]
 8005ac0:	009b      	lsls	r3, r3, #2
 8005ac2:	4413      	add	r3, r2
 8005ac4:	881b      	ldrh	r3, [r3, #0]
 8005ac6:	b29b      	uxth	r3, r3
 8005ac8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005acc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ad0:	81bb      	strh	r3, [r7, #12]
 8005ad2:	687a      	ldr	r2, [r7, #4]
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	781b      	ldrb	r3, [r3, #0]
 8005ad8:	009b      	lsls	r3, r3, #2
 8005ada:	441a      	add	r2, r3
 8005adc:	89bb      	ldrh	r3, [r7, #12]
 8005ade:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ae2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ae6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005aea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005aee:	b29b      	uxth	r3, r3
 8005af0:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005af2:	687a      	ldr	r2, [r7, #4]
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	781b      	ldrb	r3, [r3, #0]
 8005af8:	009b      	lsls	r3, r3, #2
 8005afa:	4413      	add	r3, r2
 8005afc:	881b      	ldrh	r3, [r3, #0]
 8005afe:	b29b      	uxth	r3, r3
 8005b00:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b08:	817b      	strh	r3, [r7, #10]
 8005b0a:	687a      	ldr	r2, [r7, #4]
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	781b      	ldrb	r3, [r3, #0]
 8005b10:	009b      	lsls	r3, r3, #2
 8005b12:	441a      	add	r2, r3
 8005b14:	897b      	ldrh	r3, [r7, #10]
 8005b16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b26:	b29b      	uxth	r3, r3
 8005b28:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8005b2a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	376c      	adds	r7, #108	; 0x6c
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bc80      	pop	{r7}
 8005b36:	4770      	bx	lr

08005b38 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b08d      	sub	sp, #52	; 0x34
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
 8005b40:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	7b1b      	ldrb	r3, [r3, #12]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	f040 808e 	bne.w	8005c68 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	785b      	ldrb	r3, [r3, #1]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d044      	beq.n	8005bde <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005b54:	687a      	ldr	r2, [r7, #4]
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	781b      	ldrb	r3, [r3, #0]
 8005b5a:	009b      	lsls	r3, r3, #2
 8005b5c:	4413      	add	r3, r2
 8005b5e:	881b      	ldrh	r3, [r3, #0]
 8005b60:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005b62:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005b64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d01b      	beq.n	8005ba4 <USB_DeactivateEndpoint+0x6c>
 8005b6c:	687a      	ldr	r2, [r7, #4]
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	781b      	ldrb	r3, [r3, #0]
 8005b72:	009b      	lsls	r3, r3, #2
 8005b74:	4413      	add	r3, r2
 8005b76:	881b      	ldrh	r3, [r3, #0]
 8005b78:	b29b      	uxth	r3, r3
 8005b7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b82:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005b84:	687a      	ldr	r2, [r7, #4]
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	781b      	ldrb	r3, [r3, #0]
 8005b8a:	009b      	lsls	r3, r3, #2
 8005b8c:	441a      	add	r2, r3
 8005b8e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005b90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b9c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005ba0:	b29b      	uxth	r3, r3
 8005ba2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005ba4:	687a      	ldr	r2, [r7, #4]
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	781b      	ldrb	r3, [r3, #0]
 8005baa:	009b      	lsls	r3, r3, #2
 8005bac:	4413      	add	r3, r2
 8005bae:	881b      	ldrh	r3, [r3, #0]
 8005bb0:	b29b      	uxth	r3, r3
 8005bb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bba:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005bbc:	687a      	ldr	r2, [r7, #4]
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	781b      	ldrb	r3, [r3, #0]
 8005bc2:	009b      	lsls	r3, r3, #2
 8005bc4:	441a      	add	r2, r3
 8005bc6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005bc8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bcc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bd8:	b29b      	uxth	r3, r3
 8005bda:	8013      	strh	r3, [r2, #0]
 8005bdc:	e192      	b.n	8005f04 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005bde:	687a      	ldr	r2, [r7, #4]
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	781b      	ldrb	r3, [r3, #0]
 8005be4:	009b      	lsls	r3, r3, #2
 8005be6:	4413      	add	r3, r2
 8005be8:	881b      	ldrh	r3, [r3, #0]
 8005bea:	853b      	strh	r3, [r7, #40]	; 0x28
 8005bec:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005bee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d01b      	beq.n	8005c2e <USB_DeactivateEndpoint+0xf6>
 8005bf6:	687a      	ldr	r2, [r7, #4]
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	781b      	ldrb	r3, [r3, #0]
 8005bfc:	009b      	lsls	r3, r3, #2
 8005bfe:	4413      	add	r3, r2
 8005c00:	881b      	ldrh	r3, [r3, #0]
 8005c02:	b29b      	uxth	r3, r3
 8005c04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c0c:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005c0e:	687a      	ldr	r2, [r7, #4]
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	781b      	ldrb	r3, [r3, #0]
 8005c14:	009b      	lsls	r3, r3, #2
 8005c16:	441a      	add	r2, r3
 8005c18:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005c1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c22:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c2a:	b29b      	uxth	r3, r3
 8005c2c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005c2e:	687a      	ldr	r2, [r7, #4]
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	781b      	ldrb	r3, [r3, #0]
 8005c34:	009b      	lsls	r3, r3, #2
 8005c36:	4413      	add	r3, r2
 8005c38:	881b      	ldrh	r3, [r3, #0]
 8005c3a:	b29b      	uxth	r3, r3
 8005c3c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c44:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005c46:	687a      	ldr	r2, [r7, #4]
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	781b      	ldrb	r3, [r3, #0]
 8005c4c:	009b      	lsls	r3, r3, #2
 8005c4e:	441a      	add	r2, r3
 8005c50:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005c52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c62:	b29b      	uxth	r3, r3
 8005c64:	8013      	strh	r3, [r2, #0]
 8005c66:	e14d      	b.n	8005f04 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	785b      	ldrb	r3, [r3, #1]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	f040 80a5 	bne.w	8005dbc <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005c72:	687a      	ldr	r2, [r7, #4]
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	781b      	ldrb	r3, [r3, #0]
 8005c78:	009b      	lsls	r3, r3, #2
 8005c7a:	4413      	add	r3, r2
 8005c7c:	881b      	ldrh	r3, [r3, #0]
 8005c7e:	847b      	strh	r3, [r7, #34]	; 0x22
 8005c80:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005c82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d01b      	beq.n	8005cc2 <USB_DeactivateEndpoint+0x18a>
 8005c8a:	687a      	ldr	r2, [r7, #4]
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	781b      	ldrb	r3, [r3, #0]
 8005c90:	009b      	lsls	r3, r3, #2
 8005c92:	4413      	add	r3, r2
 8005c94:	881b      	ldrh	r3, [r3, #0]
 8005c96:	b29b      	uxth	r3, r3
 8005c98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ca0:	843b      	strh	r3, [r7, #32]
 8005ca2:	687a      	ldr	r2, [r7, #4]
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	781b      	ldrb	r3, [r3, #0]
 8005ca8:	009b      	lsls	r3, r3, #2
 8005caa:	441a      	add	r2, r3
 8005cac:	8c3b      	ldrh	r3, [r7, #32]
 8005cae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cb6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005cba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cbe:	b29b      	uxth	r3, r3
 8005cc0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005cc2:	687a      	ldr	r2, [r7, #4]
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	781b      	ldrb	r3, [r3, #0]
 8005cc8:	009b      	lsls	r3, r3, #2
 8005cca:	4413      	add	r3, r2
 8005ccc:	881b      	ldrh	r3, [r3, #0]
 8005cce:	83fb      	strh	r3, [r7, #30]
 8005cd0:	8bfb      	ldrh	r3, [r7, #30]
 8005cd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d01b      	beq.n	8005d12 <USB_DeactivateEndpoint+0x1da>
 8005cda:	687a      	ldr	r2, [r7, #4]
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	781b      	ldrb	r3, [r3, #0]
 8005ce0:	009b      	lsls	r3, r3, #2
 8005ce2:	4413      	add	r3, r2
 8005ce4:	881b      	ldrh	r3, [r3, #0]
 8005ce6:	b29b      	uxth	r3, r3
 8005ce8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cf0:	83bb      	strh	r3, [r7, #28]
 8005cf2:	687a      	ldr	r2, [r7, #4]
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	781b      	ldrb	r3, [r3, #0]
 8005cf8:	009b      	lsls	r3, r3, #2
 8005cfa:	441a      	add	r2, r3
 8005cfc:	8bbb      	ldrh	r3, [r7, #28]
 8005cfe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d0a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005d0e:	b29b      	uxth	r3, r3
 8005d10:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005d12:	687a      	ldr	r2, [r7, #4]
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	781b      	ldrb	r3, [r3, #0]
 8005d18:	009b      	lsls	r3, r3, #2
 8005d1a:	4413      	add	r3, r2
 8005d1c:	881b      	ldrh	r3, [r3, #0]
 8005d1e:	b29b      	uxth	r3, r3
 8005d20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d28:	837b      	strh	r3, [r7, #26]
 8005d2a:	687a      	ldr	r2, [r7, #4]
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	781b      	ldrb	r3, [r3, #0]
 8005d30:	009b      	lsls	r3, r3, #2
 8005d32:	441a      	add	r2, r3
 8005d34:	8b7b      	ldrh	r3, [r7, #26]
 8005d36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d42:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005d46:	b29b      	uxth	r3, r3
 8005d48:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005d4a:	687a      	ldr	r2, [r7, #4]
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	781b      	ldrb	r3, [r3, #0]
 8005d50:	009b      	lsls	r3, r3, #2
 8005d52:	4413      	add	r3, r2
 8005d54:	881b      	ldrh	r3, [r3, #0]
 8005d56:	b29b      	uxth	r3, r3
 8005d58:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d60:	833b      	strh	r3, [r7, #24]
 8005d62:	687a      	ldr	r2, [r7, #4]
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	781b      	ldrb	r3, [r3, #0]
 8005d68:	009b      	lsls	r3, r3, #2
 8005d6a:	441a      	add	r2, r3
 8005d6c:	8b3b      	ldrh	r3, [r7, #24]
 8005d6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d7e:	b29b      	uxth	r3, r3
 8005d80:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005d82:	687a      	ldr	r2, [r7, #4]
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	781b      	ldrb	r3, [r3, #0]
 8005d88:	009b      	lsls	r3, r3, #2
 8005d8a:	4413      	add	r3, r2
 8005d8c:	881b      	ldrh	r3, [r3, #0]
 8005d8e:	b29b      	uxth	r3, r3
 8005d90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d98:	82fb      	strh	r3, [r7, #22]
 8005d9a:	687a      	ldr	r2, [r7, #4]
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	781b      	ldrb	r3, [r3, #0]
 8005da0:	009b      	lsls	r3, r3, #2
 8005da2:	441a      	add	r2, r3
 8005da4:	8afb      	ldrh	r3, [r7, #22]
 8005da6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005daa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005db2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005db6:	b29b      	uxth	r3, r3
 8005db8:	8013      	strh	r3, [r2, #0]
 8005dba:	e0a3      	b.n	8005f04 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005dbc:	687a      	ldr	r2, [r7, #4]
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	781b      	ldrb	r3, [r3, #0]
 8005dc2:	009b      	lsls	r3, r3, #2
 8005dc4:	4413      	add	r3, r2
 8005dc6:	881b      	ldrh	r3, [r3, #0]
 8005dc8:	82bb      	strh	r3, [r7, #20]
 8005dca:	8abb      	ldrh	r3, [r7, #20]
 8005dcc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d01b      	beq.n	8005e0c <USB_DeactivateEndpoint+0x2d4>
 8005dd4:	687a      	ldr	r2, [r7, #4]
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	781b      	ldrb	r3, [r3, #0]
 8005dda:	009b      	lsls	r3, r3, #2
 8005ddc:	4413      	add	r3, r2
 8005dde:	881b      	ldrh	r3, [r3, #0]
 8005de0:	b29b      	uxth	r3, r3
 8005de2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005de6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dea:	827b      	strh	r3, [r7, #18]
 8005dec:	687a      	ldr	r2, [r7, #4]
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	781b      	ldrb	r3, [r3, #0]
 8005df2:	009b      	lsls	r3, r3, #2
 8005df4:	441a      	add	r2, r3
 8005df6:	8a7b      	ldrh	r3, [r7, #18]
 8005df8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dfc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e00:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005e04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e08:	b29b      	uxth	r3, r3
 8005e0a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005e0c:	687a      	ldr	r2, [r7, #4]
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	781b      	ldrb	r3, [r3, #0]
 8005e12:	009b      	lsls	r3, r3, #2
 8005e14:	4413      	add	r3, r2
 8005e16:	881b      	ldrh	r3, [r3, #0]
 8005e18:	823b      	strh	r3, [r7, #16]
 8005e1a:	8a3b      	ldrh	r3, [r7, #16]
 8005e1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d01b      	beq.n	8005e5c <USB_DeactivateEndpoint+0x324>
 8005e24:	687a      	ldr	r2, [r7, #4]
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	781b      	ldrb	r3, [r3, #0]
 8005e2a:	009b      	lsls	r3, r3, #2
 8005e2c:	4413      	add	r3, r2
 8005e2e:	881b      	ldrh	r3, [r3, #0]
 8005e30:	b29b      	uxth	r3, r3
 8005e32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e3a:	81fb      	strh	r3, [r7, #14]
 8005e3c:	687a      	ldr	r2, [r7, #4]
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	781b      	ldrb	r3, [r3, #0]
 8005e42:	009b      	lsls	r3, r3, #2
 8005e44:	441a      	add	r2, r3
 8005e46:	89fb      	ldrh	r3, [r7, #14]
 8005e48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e54:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005e58:	b29b      	uxth	r3, r3
 8005e5a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005e5c:	687a      	ldr	r2, [r7, #4]
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	781b      	ldrb	r3, [r3, #0]
 8005e62:	009b      	lsls	r3, r3, #2
 8005e64:	4413      	add	r3, r2
 8005e66:	881b      	ldrh	r3, [r3, #0]
 8005e68:	b29b      	uxth	r3, r3
 8005e6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e72:	81bb      	strh	r3, [r7, #12]
 8005e74:	687a      	ldr	r2, [r7, #4]
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	781b      	ldrb	r3, [r3, #0]
 8005e7a:	009b      	lsls	r3, r3, #2
 8005e7c:	441a      	add	r2, r3
 8005e7e:	89bb      	ldrh	r3, [r7, #12]
 8005e80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e88:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005e8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e90:	b29b      	uxth	r3, r3
 8005e92:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005e94:	687a      	ldr	r2, [r7, #4]
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	781b      	ldrb	r3, [r3, #0]
 8005e9a:	009b      	lsls	r3, r3, #2
 8005e9c:	4413      	add	r3, r2
 8005e9e:	881b      	ldrh	r3, [r3, #0]
 8005ea0:	b29b      	uxth	r3, r3
 8005ea2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ea6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005eaa:	817b      	strh	r3, [r7, #10]
 8005eac:	687a      	ldr	r2, [r7, #4]
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	781b      	ldrb	r3, [r3, #0]
 8005eb2:	009b      	lsls	r3, r3, #2
 8005eb4:	441a      	add	r2, r3
 8005eb6:	897b      	ldrh	r3, [r7, #10]
 8005eb8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ebc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ec0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ec4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ec8:	b29b      	uxth	r3, r3
 8005eca:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005ecc:	687a      	ldr	r2, [r7, #4]
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	781b      	ldrb	r3, [r3, #0]
 8005ed2:	009b      	lsls	r3, r3, #2
 8005ed4:	4413      	add	r3, r2
 8005ed6:	881b      	ldrh	r3, [r3, #0]
 8005ed8:	b29b      	uxth	r3, r3
 8005eda:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ede:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ee2:	813b      	strh	r3, [r7, #8]
 8005ee4:	687a      	ldr	r2, [r7, #4]
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	781b      	ldrb	r3, [r3, #0]
 8005eea:	009b      	lsls	r3, r3, #2
 8005eec:	441a      	add	r2, r3
 8005eee:	893b      	ldrh	r3, [r7, #8]
 8005ef0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ef4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ef8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005efc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f00:	b29b      	uxth	r3, r3
 8005f02:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005f04:	2300      	movs	r3, #0
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	3734      	adds	r7, #52	; 0x34
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bc80      	pop	{r7}
 8005f0e:	4770      	bx	lr

08005f10 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b0ce      	sub	sp, #312	; 0x138
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	1d3b      	adds	r3, r7, #4
 8005f18:	6018      	str	r0, [r3, #0]
 8005f1a:	463b      	mov	r3, r7
 8005f1c:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005f1e:	463b      	mov	r3, r7
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	785b      	ldrb	r3, [r3, #1]
 8005f24:	2b01      	cmp	r3, #1
 8005f26:	f040 873e 	bne.w	8006da6 <USB_EPStartXfer+0xe96>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005f2a:	463b      	mov	r3, r7
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	699a      	ldr	r2, [r3, #24]
 8005f30:	463b      	mov	r3, r7
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	691b      	ldr	r3, [r3, #16]
 8005f36:	429a      	cmp	r2, r3
 8005f38:	d905      	bls.n	8005f46 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8005f3a:	463b      	mov	r3, r7
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	691b      	ldr	r3, [r3, #16]
 8005f40:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8005f44:	e004      	b.n	8005f50 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8005f46:	463b      	mov	r3, r7
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	699b      	ldr	r3, [r3, #24]
 8005f4c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005f50:	463b      	mov	r3, r7
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	7b1b      	ldrb	r3, [r3, #12]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d12e      	bne.n	8005fb8 <USB_EPStartXfer+0xa8>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005f5a:	463b      	mov	r3, r7
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	6959      	ldr	r1, [r3, #20]
 8005f60:	463b      	mov	r3, r7
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	88da      	ldrh	r2, [r3, #6]
 8005f66:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005f6a:	b29b      	uxth	r3, r3
 8005f6c:	1d38      	adds	r0, r7, #4
 8005f6e:	6800      	ldr	r0, [r0, #0]
 8005f70:	f001 fc13 	bl	800779a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005f74:	1d3b      	adds	r3, r7, #4
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005f7c:	1d3b      	adds	r3, r7, #4
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f84:	b29b      	uxth	r3, r3
 8005f86:	461a      	mov	r2, r3
 8005f88:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005f8c:	4413      	add	r3, r2
 8005f8e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005f92:	463b      	mov	r3, r7
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	781b      	ldrb	r3, [r3, #0]
 8005f98:	011a      	lsls	r2, r3, #4
 8005f9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005f9e:	4413      	add	r3, r2
 8005fa0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005fa4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005fa8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005fac:	b29a      	uxth	r2, r3
 8005fae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005fb2:	801a      	strh	r2, [r3, #0]
 8005fb4:	f000 bec2 	b.w	8006d3c <USB_EPStartXfer+0xe2c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005fb8:	463b      	mov	r3, r7
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	78db      	ldrb	r3, [r3, #3]
 8005fbe:	2b02      	cmp	r3, #2
 8005fc0:	f040 836a 	bne.w	8006698 <USB_EPStartXfer+0x788>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005fc4:	463b      	mov	r3, r7
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	6a1a      	ldr	r2, [r3, #32]
 8005fca:	463b      	mov	r3, r7
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	691b      	ldr	r3, [r3, #16]
 8005fd0:	429a      	cmp	r2, r3
 8005fd2:	f240 830e 	bls.w	80065f2 <USB_EPStartXfer+0x6e2>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8005fd6:	1d3b      	adds	r3, r7, #4
 8005fd8:	681a      	ldr	r2, [r3, #0]
 8005fda:	463b      	mov	r3, r7
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	781b      	ldrb	r3, [r3, #0]
 8005fe0:	009b      	lsls	r3, r3, #2
 8005fe2:	4413      	add	r3, r2
 8005fe4:	881b      	ldrh	r3, [r3, #0]
 8005fe6:	b29b      	uxth	r3, r3
 8005fe8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ff0:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 8005ff4:	1d3b      	adds	r3, r7, #4
 8005ff6:	681a      	ldr	r2, [r3, #0]
 8005ff8:	463b      	mov	r3, r7
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	781b      	ldrb	r3, [r3, #0]
 8005ffe:	009b      	lsls	r3, r3, #2
 8006000:	441a      	add	r2, r3
 8006002:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8006006:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800600a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800600e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006012:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006016:	b29b      	uxth	r3, r3
 8006018:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800601a:	463b      	mov	r3, r7
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	6a1a      	ldr	r2, [r3, #32]
 8006020:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006024:	1ad2      	subs	r2, r2, r3
 8006026:	463b      	mov	r3, r7
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800602c:	1d3b      	adds	r3, r7, #4
 800602e:	681a      	ldr	r2, [r3, #0]
 8006030:	463b      	mov	r3, r7
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	781b      	ldrb	r3, [r3, #0]
 8006036:	009b      	lsls	r3, r3, #2
 8006038:	4413      	add	r3, r2
 800603a:	881b      	ldrh	r3, [r3, #0]
 800603c:	b29b      	uxth	r3, r3
 800603e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006042:	2b00      	cmp	r3, #0
 8006044:	f000 817c 	beq.w	8006340 <USB_EPStartXfer+0x430>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006048:	1d3b      	adds	r3, r7, #4
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006050:	463b      	mov	r3, r7
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	785b      	ldrb	r3, [r3, #1]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d16f      	bne.n	800613a <USB_EPStartXfer+0x22a>
 800605a:	1d3b      	adds	r3, r7, #4
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006062:	1d3b      	adds	r3, r7, #4
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800606a:	b29b      	uxth	r3, r3
 800606c:	461a      	mov	r2, r3
 800606e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006072:	4413      	add	r3, r2
 8006074:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006078:	463b      	mov	r3, r7
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	781b      	ldrb	r3, [r3, #0]
 800607e:	011a      	lsls	r2, r3, #4
 8006080:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006084:	4413      	add	r3, r2
 8006086:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800608a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800608e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006092:	2b00      	cmp	r3, #0
 8006094:	d116      	bne.n	80060c4 <USB_EPStartXfer+0x1b4>
 8006096:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800609a:	881b      	ldrh	r3, [r3, #0]
 800609c:	b29b      	uxth	r3, r3
 800609e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80060a2:	b29a      	uxth	r2, r3
 80060a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80060a8:	801a      	strh	r2, [r3, #0]
 80060aa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80060ae:	881b      	ldrh	r3, [r3, #0]
 80060b0:	b29b      	uxth	r3, r3
 80060b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060ba:	b29a      	uxth	r2, r3
 80060bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80060c0:	801a      	strh	r2, [r3, #0]
 80060c2:	e05b      	b.n	800617c <USB_EPStartXfer+0x26c>
 80060c4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80060c8:	2b3e      	cmp	r3, #62	; 0x3e
 80060ca:	d818      	bhi.n	80060fe <USB_EPStartXfer+0x1ee>
 80060cc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80060d0:	085b      	lsrs	r3, r3, #1
 80060d2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80060d6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80060da:	f003 0301 	and.w	r3, r3, #1
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d004      	beq.n	80060ec <USB_EPStartXfer+0x1dc>
 80060e2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80060e6:	3301      	adds	r3, #1
 80060e8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80060ec:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80060f0:	b29b      	uxth	r3, r3
 80060f2:	029b      	lsls	r3, r3, #10
 80060f4:	b29a      	uxth	r2, r3
 80060f6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80060fa:	801a      	strh	r2, [r3, #0]
 80060fc:	e03e      	b.n	800617c <USB_EPStartXfer+0x26c>
 80060fe:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006102:	095b      	lsrs	r3, r3, #5
 8006104:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8006108:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800610c:	f003 031f 	and.w	r3, r3, #31
 8006110:	2b00      	cmp	r3, #0
 8006112:	d104      	bne.n	800611e <USB_EPStartXfer+0x20e>
 8006114:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006118:	3b01      	subs	r3, #1
 800611a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800611e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006122:	b29b      	uxth	r3, r3
 8006124:	029b      	lsls	r3, r3, #10
 8006126:	b29b      	uxth	r3, r3
 8006128:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800612c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006130:	b29a      	uxth	r2, r3
 8006132:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006136:	801a      	strh	r2, [r3, #0]
 8006138:	e020      	b.n	800617c <USB_EPStartXfer+0x26c>
 800613a:	463b      	mov	r3, r7
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	785b      	ldrb	r3, [r3, #1]
 8006140:	2b01      	cmp	r3, #1
 8006142:	d11b      	bne.n	800617c <USB_EPStartXfer+0x26c>
 8006144:	1d3b      	adds	r3, r7, #4
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800614c:	b29b      	uxth	r3, r3
 800614e:	461a      	mov	r2, r3
 8006150:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006154:	4413      	add	r3, r2
 8006156:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800615a:	463b      	mov	r3, r7
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	781b      	ldrb	r3, [r3, #0]
 8006160:	011a      	lsls	r2, r3, #4
 8006162:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006166:	4413      	add	r3, r2
 8006168:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800616c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006170:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006174:	b29a      	uxth	r2, r3
 8006176:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800617a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800617c:	463b      	mov	r3, r7
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	895b      	ldrh	r3, [r3, #10]
 8006182:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006186:	463b      	mov	r3, r7
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	6959      	ldr	r1, [r3, #20]
 800618c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006190:	b29b      	uxth	r3, r3
 8006192:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 8006196:	1d38      	adds	r0, r7, #4
 8006198:	6800      	ldr	r0, [r0, #0]
 800619a:	f001 fafe 	bl	800779a <USB_WritePMA>
            ep->xfer_buff += len;
 800619e:	463b      	mov	r3, r7
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	695a      	ldr	r2, [r3, #20]
 80061a4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80061a8:	441a      	add	r2, r3
 80061aa:	463b      	mov	r3, r7
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80061b0:	463b      	mov	r3, r7
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	6a1a      	ldr	r2, [r3, #32]
 80061b6:	463b      	mov	r3, r7
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	691b      	ldr	r3, [r3, #16]
 80061bc:	429a      	cmp	r2, r3
 80061be:	d909      	bls.n	80061d4 <USB_EPStartXfer+0x2c4>
            {
              ep->xfer_len_db -= len;
 80061c0:	463b      	mov	r3, r7
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	6a1a      	ldr	r2, [r3, #32]
 80061c6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80061ca:	1ad2      	subs	r2, r2, r3
 80061cc:	463b      	mov	r3, r7
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	621a      	str	r2, [r3, #32]
 80061d2:	e008      	b.n	80061e6 <USB_EPStartXfer+0x2d6>
            }
            else
            {
              len = ep->xfer_len_db;
 80061d4:	463b      	mov	r3, r7
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	6a1b      	ldr	r3, [r3, #32]
 80061da:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
              ep->xfer_len_db = 0U;
 80061de:	463b      	mov	r3, r7
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	2200      	movs	r2, #0
 80061e4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80061e6:	463b      	mov	r3, r7
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	785b      	ldrb	r3, [r3, #1]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d16f      	bne.n	80062d0 <USB_EPStartXfer+0x3c0>
 80061f0:	1d3b      	adds	r3, r7, #4
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80061f8:	1d3b      	adds	r3, r7, #4
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006200:	b29b      	uxth	r3, r3
 8006202:	461a      	mov	r2, r3
 8006204:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006208:	4413      	add	r3, r2
 800620a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800620e:	463b      	mov	r3, r7
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	781b      	ldrb	r3, [r3, #0]
 8006214:	011a      	lsls	r2, r3, #4
 8006216:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800621a:	4413      	add	r3, r2
 800621c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006220:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006224:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006228:	2b00      	cmp	r3, #0
 800622a:	d116      	bne.n	800625a <USB_EPStartXfer+0x34a>
 800622c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006230:	881b      	ldrh	r3, [r3, #0]
 8006232:	b29b      	uxth	r3, r3
 8006234:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006238:	b29a      	uxth	r2, r3
 800623a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800623e:	801a      	strh	r2, [r3, #0]
 8006240:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006244:	881b      	ldrh	r3, [r3, #0]
 8006246:	b29b      	uxth	r3, r3
 8006248:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800624c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006250:	b29a      	uxth	r2, r3
 8006252:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006256:	801a      	strh	r2, [r3, #0]
 8006258:	e05f      	b.n	800631a <USB_EPStartXfer+0x40a>
 800625a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800625e:	2b3e      	cmp	r3, #62	; 0x3e
 8006260:	d818      	bhi.n	8006294 <USB_EPStartXfer+0x384>
 8006262:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006266:	085b      	lsrs	r3, r3, #1
 8006268:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800626c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006270:	f003 0301 	and.w	r3, r3, #1
 8006274:	2b00      	cmp	r3, #0
 8006276:	d004      	beq.n	8006282 <USB_EPStartXfer+0x372>
 8006278:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800627c:	3301      	adds	r3, #1
 800627e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8006282:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006286:	b29b      	uxth	r3, r3
 8006288:	029b      	lsls	r3, r3, #10
 800628a:	b29a      	uxth	r2, r3
 800628c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006290:	801a      	strh	r2, [r3, #0]
 8006292:	e042      	b.n	800631a <USB_EPStartXfer+0x40a>
 8006294:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006298:	095b      	lsrs	r3, r3, #5
 800629a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800629e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80062a2:	f003 031f 	and.w	r3, r3, #31
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d104      	bne.n	80062b4 <USB_EPStartXfer+0x3a4>
 80062aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062ae:	3b01      	subs	r3, #1
 80062b0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80062b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062b8:	b29b      	uxth	r3, r3
 80062ba:	029b      	lsls	r3, r3, #10
 80062bc:	b29b      	uxth	r3, r3
 80062be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062c6:	b29a      	uxth	r2, r3
 80062c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80062cc:	801a      	strh	r2, [r3, #0]
 80062ce:	e024      	b.n	800631a <USB_EPStartXfer+0x40a>
 80062d0:	463b      	mov	r3, r7
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	785b      	ldrb	r3, [r3, #1]
 80062d6:	2b01      	cmp	r3, #1
 80062d8:	d11f      	bne.n	800631a <USB_EPStartXfer+0x40a>
 80062da:	1d3b      	adds	r3, r7, #4
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80062e2:	1d3b      	adds	r3, r7, #4
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062ea:	b29b      	uxth	r3, r3
 80062ec:	461a      	mov	r2, r3
 80062ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80062f2:	4413      	add	r3, r2
 80062f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80062f8:	463b      	mov	r3, r7
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	781b      	ldrb	r3, [r3, #0]
 80062fe:	011a      	lsls	r2, r3, #4
 8006300:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006304:	4413      	add	r3, r2
 8006306:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800630a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800630e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006312:	b29a      	uxth	r2, r3
 8006314:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006318:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800631a:	463b      	mov	r3, r7
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	891b      	ldrh	r3, [r3, #8]
 8006320:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006324:	463b      	mov	r3, r7
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	6959      	ldr	r1, [r3, #20]
 800632a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800632e:	b29b      	uxth	r3, r3
 8006330:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 8006334:	1d38      	adds	r0, r7, #4
 8006336:	6800      	ldr	r0, [r0, #0]
 8006338:	f001 fa2f 	bl	800779a <USB_WritePMA>
 800633c:	f000 bcfe 	b.w	8006d3c <USB_EPStartXfer+0xe2c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006340:	463b      	mov	r3, r7
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	785b      	ldrb	r3, [r3, #1]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d164      	bne.n	8006414 <USB_EPStartXfer+0x504>
 800634a:	1d3b      	adds	r3, r7, #4
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006350:	1d3b      	adds	r3, r7, #4
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006358:	b29b      	uxth	r3, r3
 800635a:	461a      	mov	r2, r3
 800635c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800635e:	4413      	add	r3, r2
 8006360:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006362:	463b      	mov	r3, r7
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	781b      	ldrb	r3, [r3, #0]
 8006368:	011a      	lsls	r2, r3, #4
 800636a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800636c:	4413      	add	r3, r2
 800636e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006372:	67bb      	str	r3, [r7, #120]	; 0x78
 8006374:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006378:	2b00      	cmp	r3, #0
 800637a:	d112      	bne.n	80063a2 <USB_EPStartXfer+0x492>
 800637c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800637e:	881b      	ldrh	r3, [r3, #0]
 8006380:	b29b      	uxth	r3, r3
 8006382:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006386:	b29a      	uxth	r2, r3
 8006388:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800638a:	801a      	strh	r2, [r3, #0]
 800638c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800638e:	881b      	ldrh	r3, [r3, #0]
 8006390:	b29b      	uxth	r3, r3
 8006392:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006396:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800639a:	b29a      	uxth	r2, r3
 800639c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800639e:	801a      	strh	r2, [r3, #0]
 80063a0:	e057      	b.n	8006452 <USB_EPStartXfer+0x542>
 80063a2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80063a6:	2b3e      	cmp	r3, #62	; 0x3e
 80063a8:	d817      	bhi.n	80063da <USB_EPStartXfer+0x4ca>
 80063aa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80063ae:	085b      	lsrs	r3, r3, #1
 80063b0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80063b4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80063b8:	f003 0301 	and.w	r3, r3, #1
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d004      	beq.n	80063ca <USB_EPStartXfer+0x4ba>
 80063c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80063c4:	3301      	adds	r3, #1
 80063c6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80063ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80063ce:	b29b      	uxth	r3, r3
 80063d0:	029b      	lsls	r3, r3, #10
 80063d2:	b29a      	uxth	r2, r3
 80063d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80063d6:	801a      	strh	r2, [r3, #0]
 80063d8:	e03b      	b.n	8006452 <USB_EPStartXfer+0x542>
 80063da:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80063de:	095b      	lsrs	r3, r3, #5
 80063e0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80063e4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80063e8:	f003 031f 	and.w	r3, r3, #31
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d104      	bne.n	80063fa <USB_EPStartXfer+0x4ea>
 80063f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80063f4:	3b01      	subs	r3, #1
 80063f6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80063fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80063fe:	b29b      	uxth	r3, r3
 8006400:	029b      	lsls	r3, r3, #10
 8006402:	b29b      	uxth	r3, r3
 8006404:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006408:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800640c:	b29a      	uxth	r2, r3
 800640e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006410:	801a      	strh	r2, [r3, #0]
 8006412:	e01e      	b.n	8006452 <USB_EPStartXfer+0x542>
 8006414:	463b      	mov	r3, r7
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	785b      	ldrb	r3, [r3, #1]
 800641a:	2b01      	cmp	r3, #1
 800641c:	d119      	bne.n	8006452 <USB_EPStartXfer+0x542>
 800641e:	1d3b      	adds	r3, r7, #4
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	677b      	str	r3, [r7, #116]	; 0x74
 8006424:	1d3b      	adds	r3, r7, #4
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800642c:	b29b      	uxth	r3, r3
 800642e:	461a      	mov	r2, r3
 8006430:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006432:	4413      	add	r3, r2
 8006434:	677b      	str	r3, [r7, #116]	; 0x74
 8006436:	463b      	mov	r3, r7
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	781b      	ldrb	r3, [r3, #0]
 800643c:	011a      	lsls	r2, r3, #4
 800643e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006440:	4413      	add	r3, r2
 8006442:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006446:	673b      	str	r3, [r7, #112]	; 0x70
 8006448:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800644c:	b29a      	uxth	r2, r3
 800644e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006450:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006452:	463b      	mov	r3, r7
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	891b      	ldrh	r3, [r3, #8]
 8006458:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800645c:	463b      	mov	r3, r7
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	6959      	ldr	r1, [r3, #20]
 8006462:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006466:	b29b      	uxth	r3, r3
 8006468:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 800646c:	1d38      	adds	r0, r7, #4
 800646e:	6800      	ldr	r0, [r0, #0]
 8006470:	f001 f993 	bl	800779a <USB_WritePMA>
            ep->xfer_buff += len;
 8006474:	463b      	mov	r3, r7
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	695a      	ldr	r2, [r3, #20]
 800647a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800647e:	441a      	add	r2, r3
 8006480:	463b      	mov	r3, r7
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006486:	463b      	mov	r3, r7
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	6a1a      	ldr	r2, [r3, #32]
 800648c:	463b      	mov	r3, r7
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	691b      	ldr	r3, [r3, #16]
 8006492:	429a      	cmp	r2, r3
 8006494:	d909      	bls.n	80064aa <USB_EPStartXfer+0x59a>
            {
              ep->xfer_len_db -= len;
 8006496:	463b      	mov	r3, r7
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	6a1a      	ldr	r2, [r3, #32]
 800649c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80064a0:	1ad2      	subs	r2, r2, r3
 80064a2:	463b      	mov	r3, r7
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	621a      	str	r2, [r3, #32]
 80064a8:	e008      	b.n	80064bc <USB_EPStartXfer+0x5ac>
            }
            else
            {
              len = ep->xfer_len_db;
 80064aa:	463b      	mov	r3, r7
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	6a1b      	ldr	r3, [r3, #32]
 80064b0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
              ep->xfer_len_db = 0U;
 80064b4:	463b      	mov	r3, r7
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	2200      	movs	r2, #0
 80064ba:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80064bc:	1d3b      	adds	r3, r7, #4
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80064c2:	463b      	mov	r3, r7
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	785b      	ldrb	r3, [r3, #1]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d164      	bne.n	8006596 <USB_EPStartXfer+0x686>
 80064cc:	1d3b      	adds	r3, r7, #4
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	66bb      	str	r3, [r7, #104]	; 0x68
 80064d2:	1d3b      	adds	r3, r7, #4
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064da:	b29b      	uxth	r3, r3
 80064dc:	461a      	mov	r2, r3
 80064de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80064e0:	4413      	add	r3, r2
 80064e2:	66bb      	str	r3, [r7, #104]	; 0x68
 80064e4:	463b      	mov	r3, r7
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	781b      	ldrb	r3, [r3, #0]
 80064ea:	011a      	lsls	r2, r3, #4
 80064ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80064ee:	4413      	add	r3, r2
 80064f0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80064f4:	667b      	str	r3, [r7, #100]	; 0x64
 80064f6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d112      	bne.n	8006524 <USB_EPStartXfer+0x614>
 80064fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006500:	881b      	ldrh	r3, [r3, #0]
 8006502:	b29b      	uxth	r3, r3
 8006504:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006508:	b29a      	uxth	r2, r3
 800650a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800650c:	801a      	strh	r2, [r3, #0]
 800650e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006510:	881b      	ldrh	r3, [r3, #0]
 8006512:	b29b      	uxth	r3, r3
 8006514:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006518:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800651c:	b29a      	uxth	r2, r3
 800651e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006520:	801a      	strh	r2, [r3, #0]
 8006522:	e054      	b.n	80065ce <USB_EPStartXfer+0x6be>
 8006524:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006528:	2b3e      	cmp	r3, #62	; 0x3e
 800652a:	d817      	bhi.n	800655c <USB_EPStartXfer+0x64c>
 800652c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006530:	085b      	lsrs	r3, r3, #1
 8006532:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006536:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800653a:	f003 0301 	and.w	r3, r3, #1
 800653e:	2b00      	cmp	r3, #0
 8006540:	d004      	beq.n	800654c <USB_EPStartXfer+0x63c>
 8006542:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006546:	3301      	adds	r3, #1
 8006548:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800654c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006550:	b29b      	uxth	r3, r3
 8006552:	029b      	lsls	r3, r3, #10
 8006554:	b29a      	uxth	r2, r3
 8006556:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006558:	801a      	strh	r2, [r3, #0]
 800655a:	e038      	b.n	80065ce <USB_EPStartXfer+0x6be>
 800655c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006560:	095b      	lsrs	r3, r3, #5
 8006562:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006566:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800656a:	f003 031f 	and.w	r3, r3, #31
 800656e:	2b00      	cmp	r3, #0
 8006570:	d104      	bne.n	800657c <USB_EPStartXfer+0x66c>
 8006572:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006576:	3b01      	subs	r3, #1
 8006578:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800657c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006580:	b29b      	uxth	r3, r3
 8006582:	029b      	lsls	r3, r3, #10
 8006584:	b29b      	uxth	r3, r3
 8006586:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800658a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800658e:	b29a      	uxth	r2, r3
 8006590:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006592:	801a      	strh	r2, [r3, #0]
 8006594:	e01b      	b.n	80065ce <USB_EPStartXfer+0x6be>
 8006596:	463b      	mov	r3, r7
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	785b      	ldrb	r3, [r3, #1]
 800659c:	2b01      	cmp	r3, #1
 800659e:	d116      	bne.n	80065ce <USB_EPStartXfer+0x6be>
 80065a0:	1d3b      	adds	r3, r7, #4
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065a8:	b29b      	uxth	r3, r3
 80065aa:	461a      	mov	r2, r3
 80065ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065ae:	4413      	add	r3, r2
 80065b0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80065b2:	463b      	mov	r3, r7
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	781b      	ldrb	r3, [r3, #0]
 80065b8:	011a      	lsls	r2, r3, #4
 80065ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065bc:	4413      	add	r3, r2
 80065be:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80065c2:	663b      	str	r3, [r7, #96]	; 0x60
 80065c4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80065c8:	b29a      	uxth	r2, r3
 80065ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80065cc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80065ce:	463b      	mov	r3, r7
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	895b      	ldrh	r3, [r3, #10]
 80065d4:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80065d8:	463b      	mov	r3, r7
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	6959      	ldr	r1, [r3, #20]
 80065de:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80065e2:	b29b      	uxth	r3, r3
 80065e4:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 80065e8:	1d38      	adds	r0, r7, #4
 80065ea:	6800      	ldr	r0, [r0, #0]
 80065ec:	f001 f8d5 	bl	800779a <USB_WritePMA>
 80065f0:	e3a4      	b.n	8006d3c <USB_EPStartXfer+0xe2c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80065f2:	463b      	mov	r3, r7
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	6a1b      	ldr	r3, [r3, #32]
 80065f8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80065fc:	1d3b      	adds	r3, r7, #4
 80065fe:	681a      	ldr	r2, [r3, #0]
 8006600:	463b      	mov	r3, r7
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	781b      	ldrb	r3, [r3, #0]
 8006606:	009b      	lsls	r3, r3, #2
 8006608:	4413      	add	r3, r2
 800660a:	881b      	ldrh	r3, [r3, #0]
 800660c:	b29b      	uxth	r3, r3
 800660e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006612:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006616:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800661a:	1d3b      	adds	r3, r7, #4
 800661c:	681a      	ldr	r2, [r3, #0]
 800661e:	463b      	mov	r3, r7
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	781b      	ldrb	r3, [r3, #0]
 8006624:	009b      	lsls	r3, r3, #2
 8006626:	441a      	add	r2, r3
 8006628:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800662c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006630:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006634:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006638:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800663c:	b29b      	uxth	r3, r3
 800663e:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006640:	1d3b      	adds	r3, r7, #4
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	65bb      	str	r3, [r7, #88]	; 0x58
 8006646:	1d3b      	adds	r3, r7, #4
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800664e:	b29b      	uxth	r3, r3
 8006650:	461a      	mov	r2, r3
 8006652:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006654:	4413      	add	r3, r2
 8006656:	65bb      	str	r3, [r7, #88]	; 0x58
 8006658:	463b      	mov	r3, r7
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	781b      	ldrb	r3, [r3, #0]
 800665e:	011a      	lsls	r2, r3, #4
 8006660:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006662:	4413      	add	r3, r2
 8006664:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006668:	657b      	str	r3, [r7, #84]	; 0x54
 800666a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800666e:	b29a      	uxth	r2, r3
 8006670:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006672:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006674:	463b      	mov	r3, r7
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	891b      	ldrh	r3, [r3, #8]
 800667a:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800667e:	463b      	mov	r3, r7
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	6959      	ldr	r1, [r3, #20]
 8006684:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006688:	b29b      	uxth	r3, r3
 800668a:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 800668e:	1d38      	adds	r0, r7, #4
 8006690:	6800      	ldr	r0, [r0, #0]
 8006692:	f001 f882 	bl	800779a <USB_WritePMA>
 8006696:	e351      	b.n	8006d3c <USB_EPStartXfer+0xe2c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8006698:	1d3b      	adds	r3, r7, #4
 800669a:	681a      	ldr	r2, [r3, #0]
 800669c:	463b      	mov	r3, r7
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	781b      	ldrb	r3, [r3, #0]
 80066a2:	009b      	lsls	r3, r3, #2
 80066a4:	4413      	add	r3, r2
 80066a6:	881b      	ldrh	r3, [r3, #0]
 80066a8:	b29b      	uxth	r3, r3
 80066aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066b2:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80066b6:	1d3b      	adds	r3, r7, #4
 80066b8:	681a      	ldr	r2, [r3, #0]
 80066ba:	463b      	mov	r3, r7
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	781b      	ldrb	r3, [r3, #0]
 80066c0:	009b      	lsls	r3, r3, #2
 80066c2:	441a      	add	r2, r3
 80066c4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80066c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066d0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80066d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066d8:	b29b      	uxth	r3, r3
 80066da:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80066dc:	463b      	mov	r3, r7
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	6a1a      	ldr	r2, [r3, #32]
 80066e2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80066e6:	1ad2      	subs	r2, r2, r3
 80066e8:	463b      	mov	r3, r7
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80066ee:	1d3b      	adds	r3, r7, #4
 80066f0:	681a      	ldr	r2, [r3, #0]
 80066f2:	463b      	mov	r3, r7
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	781b      	ldrb	r3, [r3, #0]
 80066f8:	009b      	lsls	r3, r3, #2
 80066fa:	4413      	add	r3, r2
 80066fc:	881b      	ldrh	r3, [r3, #0]
 80066fe:	b29b      	uxth	r3, r3
 8006700:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006704:	2b00      	cmp	r3, #0
 8006706:	f000 8178 	beq.w	80069fa <USB_EPStartXfer+0xaea>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800670a:	1d3b      	adds	r3, r7, #4
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006710:	463b      	mov	r3, r7
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	785b      	ldrb	r3, [r3, #1]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d164      	bne.n	80067e4 <USB_EPStartXfer+0x8d4>
 800671a:	1d3b      	adds	r3, r7, #4
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006720:	1d3b      	adds	r3, r7, #4
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006728:	b29b      	uxth	r3, r3
 800672a:	461a      	mov	r2, r3
 800672c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800672e:	4413      	add	r3, r2
 8006730:	64bb      	str	r3, [r7, #72]	; 0x48
 8006732:	463b      	mov	r3, r7
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	781b      	ldrb	r3, [r3, #0]
 8006738:	011a      	lsls	r2, r3, #4
 800673a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800673c:	4413      	add	r3, r2
 800673e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006742:	647b      	str	r3, [r7, #68]	; 0x44
 8006744:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006748:	2b00      	cmp	r3, #0
 800674a:	d112      	bne.n	8006772 <USB_EPStartXfer+0x862>
 800674c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800674e:	881b      	ldrh	r3, [r3, #0]
 8006750:	b29b      	uxth	r3, r3
 8006752:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006756:	b29a      	uxth	r2, r3
 8006758:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800675a:	801a      	strh	r2, [r3, #0]
 800675c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800675e:	881b      	ldrh	r3, [r3, #0]
 8006760:	b29b      	uxth	r3, r3
 8006762:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006766:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800676a:	b29a      	uxth	r2, r3
 800676c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800676e:	801a      	strh	r2, [r3, #0]
 8006770:	e054      	b.n	800681c <USB_EPStartXfer+0x90c>
 8006772:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006776:	2b3e      	cmp	r3, #62	; 0x3e
 8006778:	d817      	bhi.n	80067aa <USB_EPStartXfer+0x89a>
 800677a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800677e:	085b      	lsrs	r3, r3, #1
 8006780:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006784:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006788:	f003 0301 	and.w	r3, r3, #1
 800678c:	2b00      	cmp	r3, #0
 800678e:	d004      	beq.n	800679a <USB_EPStartXfer+0x88a>
 8006790:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006794:	3301      	adds	r3, #1
 8006796:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800679a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800679e:	b29b      	uxth	r3, r3
 80067a0:	029b      	lsls	r3, r3, #10
 80067a2:	b29a      	uxth	r2, r3
 80067a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067a6:	801a      	strh	r2, [r3, #0]
 80067a8:	e038      	b.n	800681c <USB_EPStartXfer+0x90c>
 80067aa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80067ae:	095b      	lsrs	r3, r3, #5
 80067b0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80067b4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80067b8:	f003 031f 	and.w	r3, r3, #31
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d104      	bne.n	80067ca <USB_EPStartXfer+0x8ba>
 80067c0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80067c4:	3b01      	subs	r3, #1
 80067c6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80067ca:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80067ce:	b29b      	uxth	r3, r3
 80067d0:	029b      	lsls	r3, r3, #10
 80067d2:	b29b      	uxth	r3, r3
 80067d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067dc:	b29a      	uxth	r2, r3
 80067de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067e0:	801a      	strh	r2, [r3, #0]
 80067e2:	e01b      	b.n	800681c <USB_EPStartXfer+0x90c>
 80067e4:	463b      	mov	r3, r7
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	785b      	ldrb	r3, [r3, #1]
 80067ea:	2b01      	cmp	r3, #1
 80067ec:	d116      	bne.n	800681c <USB_EPStartXfer+0x90c>
 80067ee:	1d3b      	adds	r3, r7, #4
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067f6:	b29b      	uxth	r3, r3
 80067f8:	461a      	mov	r2, r3
 80067fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067fc:	4413      	add	r3, r2
 80067fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006800:	463b      	mov	r3, r7
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	781b      	ldrb	r3, [r3, #0]
 8006806:	011a      	lsls	r2, r3, #4
 8006808:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800680a:	4413      	add	r3, r2
 800680c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006810:	643b      	str	r3, [r7, #64]	; 0x40
 8006812:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006816:	b29a      	uxth	r2, r3
 8006818:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800681a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800681c:	463b      	mov	r3, r7
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	895b      	ldrh	r3, [r3, #10]
 8006822:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006826:	463b      	mov	r3, r7
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	6959      	ldr	r1, [r3, #20]
 800682c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006830:	b29b      	uxth	r3, r3
 8006832:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 8006836:	1d38      	adds	r0, r7, #4
 8006838:	6800      	ldr	r0, [r0, #0]
 800683a:	f000 ffae 	bl	800779a <USB_WritePMA>
          ep->xfer_buff += len;
 800683e:	463b      	mov	r3, r7
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	695a      	ldr	r2, [r3, #20]
 8006844:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006848:	441a      	add	r2, r3
 800684a:	463b      	mov	r3, r7
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8006850:	463b      	mov	r3, r7
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	6a1a      	ldr	r2, [r3, #32]
 8006856:	463b      	mov	r3, r7
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	691b      	ldr	r3, [r3, #16]
 800685c:	429a      	cmp	r2, r3
 800685e:	d909      	bls.n	8006874 <USB_EPStartXfer+0x964>
          {
            ep->xfer_len_db -= len;
 8006860:	463b      	mov	r3, r7
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	6a1a      	ldr	r2, [r3, #32]
 8006866:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800686a:	1ad2      	subs	r2, r2, r3
 800686c:	463b      	mov	r3, r7
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	621a      	str	r2, [r3, #32]
 8006872:	e008      	b.n	8006886 <USB_EPStartXfer+0x976>
          }
          else
          {
            len = ep->xfer_len_db;
 8006874:	463b      	mov	r3, r7
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	6a1b      	ldr	r3, [r3, #32]
 800687a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
            ep->xfer_len_db = 0U;
 800687e:	463b      	mov	r3, r7
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	2200      	movs	r2, #0
 8006884:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8006886:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800688a:	2b00      	cmp	r3, #0
 800688c:	f000 8256 	beq.w	8006d3c <USB_EPStartXfer+0xe2c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006890:	463b      	mov	r3, r7
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	785b      	ldrb	r3, [r3, #1]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d172      	bne.n	8006980 <USB_EPStartXfer+0xa70>
 800689a:	1d3b      	adds	r3, r7, #4
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068a0:	1d3b      	adds	r3, r7, #4
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068a8:	b29b      	uxth	r3, r3
 80068aa:	461a      	mov	r2, r3
 80068ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068ae:	4413      	add	r3, r2
 80068b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068b2:	463b      	mov	r3, r7
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	781b      	ldrb	r3, [r3, #0]
 80068b8:	011a      	lsls	r2, r3, #4
 80068ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068bc:	4413      	add	r3, r2
 80068be:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80068c2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80068c6:	601a      	str	r2, [r3, #0]
 80068c8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d11a      	bne.n	8006906 <USB_EPStartXfer+0x9f6>
 80068d0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	881b      	ldrh	r3, [r3, #0]
 80068d8:	b29b      	uxth	r3, r3
 80068da:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80068de:	b29a      	uxth	r2, r3
 80068e0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	801a      	strh	r2, [r3, #0]
 80068e8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	881b      	ldrh	r3, [r3, #0]
 80068f0:	b29b      	uxth	r3, r3
 80068f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068fa:	b29a      	uxth	r2, r3
 80068fc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	801a      	strh	r2, [r3, #0]
 8006904:	e067      	b.n	80069d6 <USB_EPStartXfer+0xac6>
 8006906:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800690a:	2b3e      	cmp	r3, #62	; 0x3e
 800690c:	d819      	bhi.n	8006942 <USB_EPStartXfer+0xa32>
 800690e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006912:	085b      	lsrs	r3, r3, #1
 8006914:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006918:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800691c:	f003 0301 	and.w	r3, r3, #1
 8006920:	2b00      	cmp	r3, #0
 8006922:	d004      	beq.n	800692e <USB_EPStartXfer+0xa1e>
 8006924:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006928:	3301      	adds	r3, #1
 800692a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800692e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006932:	b29b      	uxth	r3, r3
 8006934:	029b      	lsls	r3, r3, #10
 8006936:	b29a      	uxth	r2, r3
 8006938:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	801a      	strh	r2, [r3, #0]
 8006940:	e049      	b.n	80069d6 <USB_EPStartXfer+0xac6>
 8006942:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006946:	095b      	lsrs	r3, r3, #5
 8006948:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800694c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006950:	f003 031f 	and.w	r3, r3, #31
 8006954:	2b00      	cmp	r3, #0
 8006956:	d104      	bne.n	8006962 <USB_EPStartXfer+0xa52>
 8006958:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800695c:	3b01      	subs	r3, #1
 800695e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006962:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006966:	b29b      	uxth	r3, r3
 8006968:	029b      	lsls	r3, r3, #10
 800696a:	b29b      	uxth	r3, r3
 800696c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006970:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006974:	b29a      	uxth	r2, r3
 8006976:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	801a      	strh	r2, [r3, #0]
 800697e:	e02a      	b.n	80069d6 <USB_EPStartXfer+0xac6>
 8006980:	463b      	mov	r3, r7
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	785b      	ldrb	r3, [r3, #1]
 8006986:	2b01      	cmp	r3, #1
 8006988:	d125      	bne.n	80069d6 <USB_EPStartXfer+0xac6>
 800698a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800698e:	1d3a      	adds	r2, r7, #4
 8006990:	6812      	ldr	r2, [r2, #0]
 8006992:	601a      	str	r2, [r3, #0]
 8006994:	1d3b      	adds	r3, r7, #4
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800699c:	b29b      	uxth	r3, r3
 800699e:	4619      	mov	r1, r3
 80069a0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80069a4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80069a8:	6812      	ldr	r2, [r2, #0]
 80069aa:	440a      	add	r2, r1
 80069ac:	601a      	str	r2, [r3, #0]
 80069ae:	463b      	mov	r3, r7
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	781b      	ldrb	r3, [r3, #0]
 80069b4:	011a      	lsls	r2, r3, #4
 80069b6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4413      	add	r3, r2
 80069be:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80069c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80069c6:	601a      	str	r2, [r3, #0]
 80069c8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80069cc:	b29a      	uxth	r2, r3
 80069ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80069d6:	463b      	mov	r3, r7
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	891b      	ldrh	r3, [r3, #8]
 80069dc:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80069e0:	463b      	mov	r3, r7
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	6959      	ldr	r1, [r3, #20]
 80069e6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80069ea:	b29b      	uxth	r3, r3
 80069ec:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 80069f0:	1d38      	adds	r0, r7, #4
 80069f2:	6800      	ldr	r0, [r0, #0]
 80069f4:	f000 fed1 	bl	800779a <USB_WritePMA>
 80069f8:	e1a0      	b.n	8006d3c <USB_EPStartXfer+0xe2c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80069fa:	463b      	mov	r3, r7
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	785b      	ldrb	r3, [r3, #1]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d17a      	bne.n	8006afa <USB_EPStartXfer+0xbea>
 8006a04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006a08:	1d3a      	adds	r2, r7, #4
 8006a0a:	6812      	ldr	r2, [r2, #0]
 8006a0c:	601a      	str	r2, [r3, #0]
 8006a0e:	1d3b      	adds	r3, r7, #4
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a16:	b29b      	uxth	r3, r3
 8006a18:	4619      	mov	r1, r3
 8006a1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006a1e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8006a22:	6812      	ldr	r2, [r2, #0]
 8006a24:	440a      	add	r2, r1
 8006a26:	601a      	str	r2, [r3, #0]
 8006a28:	463b      	mov	r3, r7
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	781b      	ldrb	r3, [r3, #0]
 8006a2e:	011a      	lsls	r2, r3, #4
 8006a30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4413      	add	r3, r2
 8006a38:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006a3c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006a40:	601a      	str	r2, [r3, #0]
 8006a42:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d11a      	bne.n	8006a80 <USB_EPStartXfer+0xb70>
 8006a4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	881b      	ldrh	r3, [r3, #0]
 8006a52:	b29b      	uxth	r3, r3
 8006a54:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006a58:	b29a      	uxth	r2, r3
 8006a5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	801a      	strh	r2, [r3, #0]
 8006a62:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	881b      	ldrh	r3, [r3, #0]
 8006a6a:	b29b      	uxth	r3, r3
 8006a6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a74:	b29a      	uxth	r2, r3
 8006a76:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	801a      	strh	r2, [r3, #0]
 8006a7e:	e067      	b.n	8006b50 <USB_EPStartXfer+0xc40>
 8006a80:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006a84:	2b3e      	cmp	r3, #62	; 0x3e
 8006a86:	d819      	bhi.n	8006abc <USB_EPStartXfer+0xbac>
 8006a88:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006a8c:	085b      	lsrs	r3, r3, #1
 8006a8e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006a92:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006a96:	f003 0301 	and.w	r3, r3, #1
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d004      	beq.n	8006aa8 <USB_EPStartXfer+0xb98>
 8006a9e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006aa2:	3301      	adds	r3, #1
 8006aa4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006aa8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006aac:	b29b      	uxth	r3, r3
 8006aae:	029b      	lsls	r3, r3, #10
 8006ab0:	b29a      	uxth	r2, r3
 8006ab2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	801a      	strh	r2, [r3, #0]
 8006aba:	e049      	b.n	8006b50 <USB_EPStartXfer+0xc40>
 8006abc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006ac0:	095b      	lsrs	r3, r3, #5
 8006ac2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006ac6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006aca:	f003 031f 	and.w	r3, r3, #31
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d104      	bne.n	8006adc <USB_EPStartXfer+0xbcc>
 8006ad2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006ad6:	3b01      	subs	r3, #1
 8006ad8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006adc:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006ae0:	b29b      	uxth	r3, r3
 8006ae2:	029b      	lsls	r3, r3, #10
 8006ae4:	b29b      	uxth	r3, r3
 8006ae6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006aea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006aee:	b29a      	uxth	r2, r3
 8006af0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	801a      	strh	r2, [r3, #0]
 8006af8:	e02a      	b.n	8006b50 <USB_EPStartXfer+0xc40>
 8006afa:	463b      	mov	r3, r7
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	785b      	ldrb	r3, [r3, #1]
 8006b00:	2b01      	cmp	r3, #1
 8006b02:	d125      	bne.n	8006b50 <USB_EPStartXfer+0xc40>
 8006b04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b08:	1d3a      	adds	r2, r7, #4
 8006b0a:	6812      	ldr	r2, [r2, #0]
 8006b0c:	601a      	str	r2, [r3, #0]
 8006b0e:	1d3b      	adds	r3, r7, #4
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b16:	b29b      	uxth	r3, r3
 8006b18:	4619      	mov	r1, r3
 8006b1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b1e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8006b22:	6812      	ldr	r2, [r2, #0]
 8006b24:	440a      	add	r2, r1
 8006b26:	601a      	str	r2, [r3, #0]
 8006b28:	463b      	mov	r3, r7
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	781b      	ldrb	r3, [r3, #0]
 8006b2e:	011a      	lsls	r2, r3, #4
 8006b30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4413      	add	r3, r2
 8006b38:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006b3c:	f107 0320 	add.w	r3, r7, #32
 8006b40:	601a      	str	r2, [r3, #0]
 8006b42:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006b46:	b29a      	uxth	r2, r3
 8006b48:	f107 0320 	add.w	r3, r7, #32
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006b50:	463b      	mov	r3, r7
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	891b      	ldrh	r3, [r3, #8]
 8006b56:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006b5a:	463b      	mov	r3, r7
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	6959      	ldr	r1, [r3, #20]
 8006b60:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006b64:	b29b      	uxth	r3, r3
 8006b66:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 8006b6a:	1d38      	adds	r0, r7, #4
 8006b6c:	6800      	ldr	r0, [r0, #0]
 8006b6e:	f000 fe14 	bl	800779a <USB_WritePMA>
          ep->xfer_buff += len;
 8006b72:	463b      	mov	r3, r7
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	695a      	ldr	r2, [r3, #20]
 8006b78:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006b7c:	441a      	add	r2, r3
 8006b7e:	463b      	mov	r3, r7
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8006b84:	463b      	mov	r3, r7
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	6a1a      	ldr	r2, [r3, #32]
 8006b8a:	463b      	mov	r3, r7
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	691b      	ldr	r3, [r3, #16]
 8006b90:	429a      	cmp	r2, r3
 8006b92:	d909      	bls.n	8006ba8 <USB_EPStartXfer+0xc98>
          {
            ep->xfer_len_db -= len;
 8006b94:	463b      	mov	r3, r7
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	6a1a      	ldr	r2, [r3, #32]
 8006b9a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006b9e:	1ad2      	subs	r2, r2, r3
 8006ba0:	463b      	mov	r3, r7
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	621a      	str	r2, [r3, #32]
 8006ba6:	e008      	b.n	8006bba <USB_EPStartXfer+0xcaa>
          }
          else
          {
            len = ep->xfer_len_db;
 8006ba8:	463b      	mov	r3, r7
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	6a1b      	ldr	r3, [r3, #32]
 8006bae:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
            ep->xfer_len_db = 0U;
 8006bb2:	463b      	mov	r3, r7
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8006bba:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	f000 80bc 	beq.w	8006d3c <USB_EPStartXfer+0xe2c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006bc4:	f107 031c 	add.w	r3, r7, #28
 8006bc8:	1d3a      	adds	r2, r7, #4
 8006bca:	6812      	ldr	r2, [r2, #0]
 8006bcc:	601a      	str	r2, [r3, #0]
 8006bce:	463b      	mov	r3, r7
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	785b      	ldrb	r3, [r3, #1]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d17a      	bne.n	8006cce <USB_EPStartXfer+0xdbe>
 8006bd8:	f107 0318 	add.w	r3, r7, #24
 8006bdc:	1d3a      	adds	r2, r7, #4
 8006bde:	6812      	ldr	r2, [r2, #0]
 8006be0:	601a      	str	r2, [r3, #0]
 8006be2:	1d3b      	adds	r3, r7, #4
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bea:	b29b      	uxth	r3, r3
 8006bec:	4619      	mov	r1, r3
 8006bee:	f107 0318 	add.w	r3, r7, #24
 8006bf2:	f107 0218 	add.w	r2, r7, #24
 8006bf6:	6812      	ldr	r2, [r2, #0]
 8006bf8:	440a      	add	r2, r1
 8006bfa:	601a      	str	r2, [r3, #0]
 8006bfc:	463b      	mov	r3, r7
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	781b      	ldrb	r3, [r3, #0]
 8006c02:	011a      	lsls	r2, r3, #4
 8006c04:	f107 0318 	add.w	r3, r7, #24
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4413      	add	r3, r2
 8006c0c:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8006c10:	f107 0314 	add.w	r3, r7, #20
 8006c14:	601a      	str	r2, [r3, #0]
 8006c16:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d11a      	bne.n	8006c54 <USB_EPStartXfer+0xd44>
 8006c1e:	f107 0314 	add.w	r3, r7, #20
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	881b      	ldrh	r3, [r3, #0]
 8006c26:	b29b      	uxth	r3, r3
 8006c28:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006c2c:	b29a      	uxth	r2, r3
 8006c2e:	f107 0314 	add.w	r3, r7, #20
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	801a      	strh	r2, [r3, #0]
 8006c36:	f107 0314 	add.w	r3, r7, #20
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	881b      	ldrh	r3, [r3, #0]
 8006c3e:	b29b      	uxth	r3, r3
 8006c40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c48:	b29a      	uxth	r2, r3
 8006c4a:	f107 0314 	add.w	r3, r7, #20
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	801a      	strh	r2, [r3, #0]
 8006c52:	e062      	b.n	8006d1a <USB_EPStartXfer+0xe0a>
 8006c54:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006c58:	2b3e      	cmp	r3, #62	; 0x3e
 8006c5a:	d819      	bhi.n	8006c90 <USB_EPStartXfer+0xd80>
 8006c5c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006c60:	085b      	lsrs	r3, r3, #1
 8006c62:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006c66:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006c6a:	f003 0301 	and.w	r3, r3, #1
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d004      	beq.n	8006c7c <USB_EPStartXfer+0xd6c>
 8006c72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c76:	3301      	adds	r3, #1
 8006c78:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006c7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c80:	b29b      	uxth	r3, r3
 8006c82:	029b      	lsls	r3, r3, #10
 8006c84:	b29a      	uxth	r2, r3
 8006c86:	f107 0314 	add.w	r3, r7, #20
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	801a      	strh	r2, [r3, #0]
 8006c8e:	e044      	b.n	8006d1a <USB_EPStartXfer+0xe0a>
 8006c90:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006c94:	095b      	lsrs	r3, r3, #5
 8006c96:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006c9a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006c9e:	f003 031f 	and.w	r3, r3, #31
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d104      	bne.n	8006cb0 <USB_EPStartXfer+0xda0>
 8006ca6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006caa:	3b01      	subs	r3, #1
 8006cac:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006cb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006cb4:	b29b      	uxth	r3, r3
 8006cb6:	029b      	lsls	r3, r3, #10
 8006cb8:	b29b      	uxth	r3, r3
 8006cba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cc2:	b29a      	uxth	r2, r3
 8006cc4:	f107 0314 	add.w	r3, r7, #20
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	801a      	strh	r2, [r3, #0]
 8006ccc:	e025      	b.n	8006d1a <USB_EPStartXfer+0xe0a>
 8006cce:	463b      	mov	r3, r7
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	785b      	ldrb	r3, [r3, #1]
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	d120      	bne.n	8006d1a <USB_EPStartXfer+0xe0a>
 8006cd8:	1d3b      	adds	r3, r7, #4
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ce0:	b29b      	uxth	r3, r3
 8006ce2:	4619      	mov	r1, r3
 8006ce4:	f107 031c 	add.w	r3, r7, #28
 8006ce8:	f107 021c 	add.w	r2, r7, #28
 8006cec:	6812      	ldr	r2, [r2, #0]
 8006cee:	440a      	add	r2, r1
 8006cf0:	601a      	str	r2, [r3, #0]
 8006cf2:	463b      	mov	r3, r7
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	781b      	ldrb	r3, [r3, #0]
 8006cf8:	011a      	lsls	r2, r3, #4
 8006cfa:	f107 031c 	add.w	r3, r7, #28
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4413      	add	r3, r2
 8006d02:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8006d06:	f107 0310 	add.w	r3, r7, #16
 8006d0a:	601a      	str	r2, [r3, #0]
 8006d0c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006d10:	b29a      	uxth	r2, r3
 8006d12:	f107 0310 	add.w	r3, r7, #16
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006d1a:	463b      	mov	r3, r7
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	895b      	ldrh	r3, [r3, #10]
 8006d20:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006d24:	463b      	mov	r3, r7
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	6959      	ldr	r1, [r3, #20]
 8006d2a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006d2e:	b29b      	uxth	r3, r3
 8006d30:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 8006d34:	1d38      	adds	r0, r7, #4
 8006d36:	6800      	ldr	r0, [r0, #0]
 8006d38:	f000 fd2f 	bl	800779a <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006d3c:	1d3b      	adds	r3, r7, #4
 8006d3e:	681a      	ldr	r2, [r3, #0]
 8006d40:	463b      	mov	r3, r7
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	781b      	ldrb	r3, [r3, #0]
 8006d46:	009b      	lsls	r3, r3, #2
 8006d48:	4413      	add	r3, r2
 8006d4a:	881b      	ldrh	r3, [r3, #0]
 8006d4c:	b29b      	uxth	r3, r3
 8006d4e:	f107 020e 	add.w	r2, r7, #14
 8006d52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d5a:	8013      	strh	r3, [r2, #0]
 8006d5c:	f107 030e 	add.w	r3, r7, #14
 8006d60:	f107 020e 	add.w	r2, r7, #14
 8006d64:	8812      	ldrh	r2, [r2, #0]
 8006d66:	f082 0210 	eor.w	r2, r2, #16
 8006d6a:	801a      	strh	r2, [r3, #0]
 8006d6c:	f107 030e 	add.w	r3, r7, #14
 8006d70:	f107 020e 	add.w	r2, r7, #14
 8006d74:	8812      	ldrh	r2, [r2, #0]
 8006d76:	f082 0220 	eor.w	r2, r2, #32
 8006d7a:	801a      	strh	r2, [r3, #0]
 8006d7c:	1d3b      	adds	r3, r7, #4
 8006d7e:	681a      	ldr	r2, [r3, #0]
 8006d80:	463b      	mov	r3, r7
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	781b      	ldrb	r3, [r3, #0]
 8006d86:	009b      	lsls	r3, r3, #2
 8006d88:	441a      	add	r2, r3
 8006d8a:	f107 030e 	add.w	r3, r7, #14
 8006d8e:	881b      	ldrh	r3, [r3, #0]
 8006d90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006da0:	b29b      	uxth	r3, r3
 8006da2:	8013      	strh	r3, [r2, #0]
 8006da4:	e3b5      	b.n	8007512 <USB_EPStartXfer+0x1602>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006da6:	463b      	mov	r3, r7
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	7b1b      	ldrb	r3, [r3, #12]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	f040 8090 	bne.w	8006ed2 <USB_EPStartXfer+0xfc2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006db2:	463b      	mov	r3, r7
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	699a      	ldr	r2, [r3, #24]
 8006db8:	463b      	mov	r3, r7
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	691b      	ldr	r3, [r3, #16]
 8006dbe:	429a      	cmp	r2, r3
 8006dc0:	d90e      	bls.n	8006de0 <USB_EPStartXfer+0xed0>
      {
        len = ep->maxpacket;
 8006dc2:	463b      	mov	r3, r7
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	691b      	ldr	r3, [r3, #16]
 8006dc8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
        ep->xfer_len -= len;
 8006dcc:	463b      	mov	r3, r7
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	699a      	ldr	r2, [r3, #24]
 8006dd2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006dd6:	1ad2      	subs	r2, r2, r3
 8006dd8:	463b      	mov	r3, r7
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	619a      	str	r2, [r3, #24]
 8006dde:	e008      	b.n	8006df2 <USB_EPStartXfer+0xee2>
      }
      else
      {
        len = ep->xfer_len;
 8006de0:	463b      	mov	r3, r7
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	699b      	ldr	r3, [r3, #24]
 8006de6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
        ep->xfer_len = 0U;
 8006dea:	463b      	mov	r3, r7
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	2200      	movs	r2, #0
 8006df0:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006df2:	1d3b      	adds	r3, r7, #4
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006dfa:	1d3b      	adds	r3, r7, #4
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e02:	b29b      	uxth	r3, r3
 8006e04:	461a      	mov	r2, r3
 8006e06:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006e0a:	4413      	add	r3, r2
 8006e0c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006e10:	463b      	mov	r3, r7
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	781b      	ldrb	r3, [r3, #0]
 8006e16:	011a      	lsls	r2, r3, #4
 8006e18:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006e1c:	4413      	add	r3, r2
 8006e1e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006e22:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006e26:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d116      	bne.n	8006e5c <USB_EPStartXfer+0xf4c>
 8006e2e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006e32:	881b      	ldrh	r3, [r3, #0]
 8006e34:	b29b      	uxth	r3, r3
 8006e36:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006e3a:	b29a      	uxth	r2, r3
 8006e3c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006e40:	801a      	strh	r2, [r3, #0]
 8006e42:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006e46:	881b      	ldrh	r3, [r3, #0]
 8006e48:	b29b      	uxth	r3, r3
 8006e4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e52:	b29a      	uxth	r2, r3
 8006e54:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006e58:	801a      	strh	r2, [r3, #0]
 8006e5a:	e32c      	b.n	80074b6 <USB_EPStartXfer+0x15a6>
 8006e5c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006e60:	2b3e      	cmp	r3, #62	; 0x3e
 8006e62:	d818      	bhi.n	8006e96 <USB_EPStartXfer+0xf86>
 8006e64:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006e68:	085b      	lsrs	r3, r3, #1
 8006e6a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006e6e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006e72:	f003 0301 	and.w	r3, r3, #1
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d004      	beq.n	8006e84 <USB_EPStartXfer+0xf74>
 8006e7a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006e7e:	3301      	adds	r3, #1
 8006e80:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006e84:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006e88:	b29b      	uxth	r3, r3
 8006e8a:	029b      	lsls	r3, r3, #10
 8006e8c:	b29a      	uxth	r2, r3
 8006e8e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006e92:	801a      	strh	r2, [r3, #0]
 8006e94:	e30f      	b.n	80074b6 <USB_EPStartXfer+0x15a6>
 8006e96:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006e9a:	095b      	lsrs	r3, r3, #5
 8006e9c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006ea0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006ea4:	f003 031f 	and.w	r3, r3, #31
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d104      	bne.n	8006eb6 <USB_EPStartXfer+0xfa6>
 8006eac:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006eb0:	3b01      	subs	r3, #1
 8006eb2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006eb6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006eba:	b29b      	uxth	r3, r3
 8006ebc:	029b      	lsls	r3, r3, #10
 8006ebe:	b29b      	uxth	r3, r3
 8006ec0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ec4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ec8:	b29a      	uxth	r2, r3
 8006eca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006ece:	801a      	strh	r2, [r3, #0]
 8006ed0:	e2f1      	b.n	80074b6 <USB_EPStartXfer+0x15a6>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006ed2:	463b      	mov	r3, r7
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	78db      	ldrb	r3, [r3, #3]
 8006ed8:	2b02      	cmp	r3, #2
 8006eda:	f040 818f 	bne.w	80071fc <USB_EPStartXfer+0x12ec>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006ede:	463b      	mov	r3, r7
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	785b      	ldrb	r3, [r3, #1]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d175      	bne.n	8006fd4 <USB_EPStartXfer+0x10c4>
 8006ee8:	1d3b      	adds	r3, r7, #4
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006ef0:	1d3b      	adds	r3, r7, #4
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ef8:	b29b      	uxth	r3, r3
 8006efa:	461a      	mov	r2, r3
 8006efc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f00:	4413      	add	r3, r2
 8006f02:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006f06:	463b      	mov	r3, r7
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	781b      	ldrb	r3, [r3, #0]
 8006f0c:	011a      	lsls	r2, r3, #4
 8006f0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f12:	4413      	add	r3, r2
 8006f14:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006f18:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006f1c:	463b      	mov	r3, r7
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	691b      	ldr	r3, [r3, #16]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d116      	bne.n	8006f54 <USB_EPStartXfer+0x1044>
 8006f26:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006f2a:	881b      	ldrh	r3, [r3, #0]
 8006f2c:	b29b      	uxth	r3, r3
 8006f2e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006f32:	b29a      	uxth	r2, r3
 8006f34:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006f38:	801a      	strh	r2, [r3, #0]
 8006f3a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006f3e:	881b      	ldrh	r3, [r3, #0]
 8006f40:	b29b      	uxth	r3, r3
 8006f42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f4a:	b29a      	uxth	r2, r3
 8006f4c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006f50:	801a      	strh	r2, [r3, #0]
 8006f52:	e065      	b.n	8007020 <USB_EPStartXfer+0x1110>
 8006f54:	463b      	mov	r3, r7
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	691b      	ldr	r3, [r3, #16]
 8006f5a:	2b3e      	cmp	r3, #62	; 0x3e
 8006f5c:	d81a      	bhi.n	8006f94 <USB_EPStartXfer+0x1084>
 8006f5e:	463b      	mov	r3, r7
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	691b      	ldr	r3, [r3, #16]
 8006f64:	085b      	lsrs	r3, r3, #1
 8006f66:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006f6a:	463b      	mov	r3, r7
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	691b      	ldr	r3, [r3, #16]
 8006f70:	f003 0301 	and.w	r3, r3, #1
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d004      	beq.n	8006f82 <USB_EPStartXfer+0x1072>
 8006f78:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f7c:	3301      	adds	r3, #1
 8006f7e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006f82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f86:	b29b      	uxth	r3, r3
 8006f88:	029b      	lsls	r3, r3, #10
 8006f8a:	b29a      	uxth	r2, r3
 8006f8c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006f90:	801a      	strh	r2, [r3, #0]
 8006f92:	e045      	b.n	8007020 <USB_EPStartXfer+0x1110>
 8006f94:	463b      	mov	r3, r7
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	691b      	ldr	r3, [r3, #16]
 8006f9a:	095b      	lsrs	r3, r3, #5
 8006f9c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006fa0:	463b      	mov	r3, r7
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	691b      	ldr	r3, [r3, #16]
 8006fa6:	f003 031f 	and.w	r3, r3, #31
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d104      	bne.n	8006fb8 <USB_EPStartXfer+0x10a8>
 8006fae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006fb2:	3b01      	subs	r3, #1
 8006fb4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006fb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006fbc:	b29b      	uxth	r3, r3
 8006fbe:	029b      	lsls	r3, r3, #10
 8006fc0:	b29b      	uxth	r3, r3
 8006fc2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fc6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fca:	b29a      	uxth	r2, r3
 8006fcc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006fd0:	801a      	strh	r2, [r3, #0]
 8006fd2:	e025      	b.n	8007020 <USB_EPStartXfer+0x1110>
 8006fd4:	463b      	mov	r3, r7
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	785b      	ldrb	r3, [r3, #1]
 8006fda:	2b01      	cmp	r3, #1
 8006fdc:	d120      	bne.n	8007020 <USB_EPStartXfer+0x1110>
 8006fde:	1d3b      	adds	r3, r7, #4
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006fe6:	1d3b      	adds	r3, r7, #4
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006fee:	b29b      	uxth	r3, r3
 8006ff0:	461a      	mov	r2, r3
 8006ff2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006ff6:	4413      	add	r3, r2
 8006ff8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006ffc:	463b      	mov	r3, r7
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	781b      	ldrb	r3, [r3, #0]
 8007002:	011a      	lsls	r2, r3, #4
 8007004:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007008:	4413      	add	r3, r2
 800700a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800700e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007012:	463b      	mov	r3, r7
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	691b      	ldr	r3, [r3, #16]
 8007018:	b29a      	uxth	r2, r3
 800701a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800701e:	801a      	strh	r2, [r3, #0]
 8007020:	1d3b      	adds	r3, r7, #4
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007028:	463b      	mov	r3, r7
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	785b      	ldrb	r3, [r3, #1]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d175      	bne.n	800711e <USB_EPStartXfer+0x120e>
 8007032:	1d3b      	adds	r3, r7, #4
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800703a:	1d3b      	adds	r3, r7, #4
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007042:	b29b      	uxth	r3, r3
 8007044:	461a      	mov	r2, r3
 8007046:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800704a:	4413      	add	r3, r2
 800704c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007050:	463b      	mov	r3, r7
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	781b      	ldrb	r3, [r3, #0]
 8007056:	011a      	lsls	r2, r3, #4
 8007058:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800705c:	4413      	add	r3, r2
 800705e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007062:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007066:	463b      	mov	r3, r7
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	691b      	ldr	r3, [r3, #16]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d116      	bne.n	800709e <USB_EPStartXfer+0x118e>
 8007070:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007074:	881b      	ldrh	r3, [r3, #0]
 8007076:	b29b      	uxth	r3, r3
 8007078:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800707c:	b29a      	uxth	r2, r3
 800707e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007082:	801a      	strh	r2, [r3, #0]
 8007084:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007088:	881b      	ldrh	r3, [r3, #0]
 800708a:	b29b      	uxth	r3, r3
 800708c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007090:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007094:	b29a      	uxth	r2, r3
 8007096:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800709a:	801a      	strh	r2, [r3, #0]
 800709c:	e061      	b.n	8007162 <USB_EPStartXfer+0x1252>
 800709e:	463b      	mov	r3, r7
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	691b      	ldr	r3, [r3, #16]
 80070a4:	2b3e      	cmp	r3, #62	; 0x3e
 80070a6:	d81a      	bhi.n	80070de <USB_EPStartXfer+0x11ce>
 80070a8:	463b      	mov	r3, r7
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	691b      	ldr	r3, [r3, #16]
 80070ae:	085b      	lsrs	r3, r3, #1
 80070b0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80070b4:	463b      	mov	r3, r7
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	691b      	ldr	r3, [r3, #16]
 80070ba:	f003 0301 	and.w	r3, r3, #1
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d004      	beq.n	80070cc <USB_EPStartXfer+0x11bc>
 80070c2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80070c6:	3301      	adds	r3, #1
 80070c8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80070cc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80070d0:	b29b      	uxth	r3, r3
 80070d2:	029b      	lsls	r3, r3, #10
 80070d4:	b29a      	uxth	r2, r3
 80070d6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80070da:	801a      	strh	r2, [r3, #0]
 80070dc:	e041      	b.n	8007162 <USB_EPStartXfer+0x1252>
 80070de:	463b      	mov	r3, r7
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	691b      	ldr	r3, [r3, #16]
 80070e4:	095b      	lsrs	r3, r3, #5
 80070e6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80070ea:	463b      	mov	r3, r7
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	691b      	ldr	r3, [r3, #16]
 80070f0:	f003 031f 	and.w	r3, r3, #31
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d104      	bne.n	8007102 <USB_EPStartXfer+0x11f2>
 80070f8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80070fc:	3b01      	subs	r3, #1
 80070fe:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007102:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007106:	b29b      	uxth	r3, r3
 8007108:	029b      	lsls	r3, r3, #10
 800710a:	b29b      	uxth	r3, r3
 800710c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007110:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007114:	b29a      	uxth	r2, r3
 8007116:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800711a:	801a      	strh	r2, [r3, #0]
 800711c:	e021      	b.n	8007162 <USB_EPStartXfer+0x1252>
 800711e:	463b      	mov	r3, r7
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	785b      	ldrb	r3, [r3, #1]
 8007124:	2b01      	cmp	r3, #1
 8007126:	d11c      	bne.n	8007162 <USB_EPStartXfer+0x1252>
 8007128:	1d3b      	adds	r3, r7, #4
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007130:	b29b      	uxth	r3, r3
 8007132:	461a      	mov	r2, r3
 8007134:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007138:	4413      	add	r3, r2
 800713a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800713e:	463b      	mov	r3, r7
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	781b      	ldrb	r3, [r3, #0]
 8007144:	011a      	lsls	r2, r3, #4
 8007146:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800714a:	4413      	add	r3, r2
 800714c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007150:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007154:	463b      	mov	r3, r7
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	691b      	ldr	r3, [r3, #16]
 800715a:	b29a      	uxth	r2, r3
 800715c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007160:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007162:	463b      	mov	r3, r7
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	69db      	ldr	r3, [r3, #28]
 8007168:	2b00      	cmp	r3, #0
 800716a:	f000 81a4 	beq.w	80074b6 <USB_EPStartXfer+0x15a6>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800716e:	1d3b      	adds	r3, r7, #4
 8007170:	681a      	ldr	r2, [r3, #0]
 8007172:	463b      	mov	r3, r7
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	781b      	ldrb	r3, [r3, #0]
 8007178:	009b      	lsls	r3, r3, #2
 800717a:	4413      	add	r3, r2
 800717c:	881b      	ldrh	r3, [r3, #0]
 800717e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007182:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007186:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800718a:	2b00      	cmp	r3, #0
 800718c:	d005      	beq.n	800719a <USB_EPStartXfer+0x128a>
 800718e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007192:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007196:	2b00      	cmp	r3, #0
 8007198:	d10d      	bne.n	80071b6 <USB_EPStartXfer+0x12a6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800719a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800719e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	f040 8187 	bne.w	80074b6 <USB_EPStartXfer+0x15a6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80071a8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80071ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	f040 8180 	bne.w	80074b6 <USB_EPStartXfer+0x15a6>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80071b6:	1d3b      	adds	r3, r7, #4
 80071b8:	681a      	ldr	r2, [r3, #0]
 80071ba:	463b      	mov	r3, r7
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	781b      	ldrb	r3, [r3, #0]
 80071c0:	009b      	lsls	r3, r3, #2
 80071c2:	4413      	add	r3, r2
 80071c4:	881b      	ldrh	r3, [r3, #0]
 80071c6:	b29b      	uxth	r3, r3
 80071c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071d0:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
 80071d4:	1d3b      	adds	r3, r7, #4
 80071d6:	681a      	ldr	r2, [r3, #0]
 80071d8:	463b      	mov	r3, r7
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	781b      	ldrb	r3, [r3, #0]
 80071de:	009b      	lsls	r3, r3, #2
 80071e0:	441a      	add	r2, r3
 80071e2:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 80071e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071f2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80071f6:	b29b      	uxth	r3, r3
 80071f8:	8013      	strh	r3, [r2, #0]
 80071fa:	e15c      	b.n	80074b6 <USB_EPStartXfer+0x15a6>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80071fc:	463b      	mov	r3, r7
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	78db      	ldrb	r3, [r3, #3]
 8007202:	2b01      	cmp	r3, #1
 8007204:	f040 8155 	bne.w	80074b2 <USB_EPStartXfer+0x15a2>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007208:	463b      	mov	r3, r7
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	699a      	ldr	r2, [r3, #24]
 800720e:	463b      	mov	r3, r7
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	691b      	ldr	r3, [r3, #16]
 8007214:	429a      	cmp	r2, r3
 8007216:	d90e      	bls.n	8007236 <USB_EPStartXfer+0x1326>
        {
          len = ep->maxpacket;
 8007218:	463b      	mov	r3, r7
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	691b      	ldr	r3, [r3, #16]
 800721e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
          ep->xfer_len -= len;
 8007222:	463b      	mov	r3, r7
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	699a      	ldr	r2, [r3, #24]
 8007228:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800722c:	1ad2      	subs	r2, r2, r3
 800722e:	463b      	mov	r3, r7
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	619a      	str	r2, [r3, #24]
 8007234:	e008      	b.n	8007248 <USB_EPStartXfer+0x1338>
        }
        else
        {
          len = ep->xfer_len;
 8007236:	463b      	mov	r3, r7
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	699b      	ldr	r3, [r3, #24]
 800723c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
          ep->xfer_len = 0U;
 8007240:	463b      	mov	r3, r7
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	2200      	movs	r2, #0
 8007246:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007248:	463b      	mov	r3, r7
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	785b      	ldrb	r3, [r3, #1]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d16f      	bne.n	8007332 <USB_EPStartXfer+0x1422>
 8007252:	1d3b      	adds	r3, r7, #4
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800725a:	1d3b      	adds	r3, r7, #4
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007262:	b29b      	uxth	r3, r3
 8007264:	461a      	mov	r2, r3
 8007266:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800726a:	4413      	add	r3, r2
 800726c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007270:	463b      	mov	r3, r7
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	781b      	ldrb	r3, [r3, #0]
 8007276:	011a      	lsls	r2, r3, #4
 8007278:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800727c:	4413      	add	r3, r2
 800727e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007282:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007286:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800728a:	2b00      	cmp	r3, #0
 800728c:	d116      	bne.n	80072bc <USB_EPStartXfer+0x13ac>
 800728e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007292:	881b      	ldrh	r3, [r3, #0]
 8007294:	b29b      	uxth	r3, r3
 8007296:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800729a:	b29a      	uxth	r2, r3
 800729c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80072a0:	801a      	strh	r2, [r3, #0]
 80072a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80072a6:	881b      	ldrh	r3, [r3, #0]
 80072a8:	b29b      	uxth	r3, r3
 80072aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072b2:	b29a      	uxth	r2, r3
 80072b4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80072b8:	801a      	strh	r2, [r3, #0]
 80072ba:	e05f      	b.n	800737c <USB_EPStartXfer+0x146c>
 80072bc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80072c0:	2b3e      	cmp	r3, #62	; 0x3e
 80072c2:	d818      	bhi.n	80072f6 <USB_EPStartXfer+0x13e6>
 80072c4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80072c8:	085b      	lsrs	r3, r3, #1
 80072ca:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80072ce:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80072d2:	f003 0301 	and.w	r3, r3, #1
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d004      	beq.n	80072e4 <USB_EPStartXfer+0x13d4>
 80072da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072de:	3301      	adds	r3, #1
 80072e0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80072e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072e8:	b29b      	uxth	r3, r3
 80072ea:	029b      	lsls	r3, r3, #10
 80072ec:	b29a      	uxth	r2, r3
 80072ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80072f2:	801a      	strh	r2, [r3, #0]
 80072f4:	e042      	b.n	800737c <USB_EPStartXfer+0x146c>
 80072f6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80072fa:	095b      	lsrs	r3, r3, #5
 80072fc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007300:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007304:	f003 031f 	and.w	r3, r3, #31
 8007308:	2b00      	cmp	r3, #0
 800730a:	d104      	bne.n	8007316 <USB_EPStartXfer+0x1406>
 800730c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007310:	3b01      	subs	r3, #1
 8007312:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007316:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800731a:	b29b      	uxth	r3, r3
 800731c:	029b      	lsls	r3, r3, #10
 800731e:	b29b      	uxth	r3, r3
 8007320:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007324:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007328:	b29a      	uxth	r2, r3
 800732a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800732e:	801a      	strh	r2, [r3, #0]
 8007330:	e024      	b.n	800737c <USB_EPStartXfer+0x146c>
 8007332:	463b      	mov	r3, r7
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	785b      	ldrb	r3, [r3, #1]
 8007338:	2b01      	cmp	r3, #1
 800733a:	d11f      	bne.n	800737c <USB_EPStartXfer+0x146c>
 800733c:	1d3b      	adds	r3, r7, #4
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007344:	1d3b      	adds	r3, r7, #4
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800734c:	b29b      	uxth	r3, r3
 800734e:	461a      	mov	r2, r3
 8007350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007354:	4413      	add	r3, r2
 8007356:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800735a:	463b      	mov	r3, r7
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	781b      	ldrb	r3, [r3, #0]
 8007360:	011a      	lsls	r2, r3, #4
 8007362:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007366:	4413      	add	r3, r2
 8007368:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800736c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007370:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007374:	b29a      	uxth	r2, r3
 8007376:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800737a:	801a      	strh	r2, [r3, #0]
 800737c:	1d3b      	adds	r3, r7, #4
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007384:	463b      	mov	r3, r7
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	785b      	ldrb	r3, [r3, #1]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d16f      	bne.n	800746e <USB_EPStartXfer+0x155e>
 800738e:	1d3b      	adds	r3, r7, #4
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007396:	1d3b      	adds	r3, r7, #4
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800739e:	b29b      	uxth	r3, r3
 80073a0:	461a      	mov	r2, r3
 80073a2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80073a6:	4413      	add	r3, r2
 80073a8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80073ac:	463b      	mov	r3, r7
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	781b      	ldrb	r3, [r3, #0]
 80073b2:	011a      	lsls	r2, r3, #4
 80073b4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80073b8:	4413      	add	r3, r2
 80073ba:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80073be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80073c2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d116      	bne.n	80073f8 <USB_EPStartXfer+0x14e8>
 80073ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073ce:	881b      	ldrh	r3, [r3, #0]
 80073d0:	b29b      	uxth	r3, r3
 80073d2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80073d6:	b29a      	uxth	r2, r3
 80073d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073dc:	801a      	strh	r2, [r3, #0]
 80073de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073e2:	881b      	ldrh	r3, [r3, #0]
 80073e4:	b29b      	uxth	r3, r3
 80073e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073ee:	b29a      	uxth	r2, r3
 80073f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073f4:	801a      	strh	r2, [r3, #0]
 80073f6:	e05e      	b.n	80074b6 <USB_EPStartXfer+0x15a6>
 80073f8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80073fc:	2b3e      	cmp	r3, #62	; 0x3e
 80073fe:	d818      	bhi.n	8007432 <USB_EPStartXfer+0x1522>
 8007400:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007404:	085b      	lsrs	r3, r3, #1
 8007406:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800740a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800740e:	f003 0301 	and.w	r3, r3, #1
 8007412:	2b00      	cmp	r3, #0
 8007414:	d004      	beq.n	8007420 <USB_EPStartXfer+0x1510>
 8007416:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800741a:	3301      	adds	r3, #1
 800741c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007420:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007424:	b29b      	uxth	r3, r3
 8007426:	029b      	lsls	r3, r3, #10
 8007428:	b29a      	uxth	r2, r3
 800742a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800742e:	801a      	strh	r2, [r3, #0]
 8007430:	e041      	b.n	80074b6 <USB_EPStartXfer+0x15a6>
 8007432:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007436:	095b      	lsrs	r3, r3, #5
 8007438:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800743c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007440:	f003 031f 	and.w	r3, r3, #31
 8007444:	2b00      	cmp	r3, #0
 8007446:	d104      	bne.n	8007452 <USB_EPStartXfer+0x1542>
 8007448:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800744c:	3b01      	subs	r3, #1
 800744e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007452:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007456:	b29b      	uxth	r3, r3
 8007458:	029b      	lsls	r3, r3, #10
 800745a:	b29b      	uxth	r3, r3
 800745c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007460:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007464:	b29a      	uxth	r2, r3
 8007466:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800746a:	801a      	strh	r2, [r3, #0]
 800746c:	e023      	b.n	80074b6 <USB_EPStartXfer+0x15a6>
 800746e:	463b      	mov	r3, r7
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	785b      	ldrb	r3, [r3, #1]
 8007474:	2b01      	cmp	r3, #1
 8007476:	d11e      	bne.n	80074b6 <USB_EPStartXfer+0x15a6>
 8007478:	1d3b      	adds	r3, r7, #4
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007480:	b29b      	uxth	r3, r3
 8007482:	461a      	mov	r2, r3
 8007484:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007488:	4413      	add	r3, r2
 800748a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800748e:	463b      	mov	r3, r7
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	781b      	ldrb	r3, [r3, #0]
 8007494:	011a      	lsls	r2, r3, #4
 8007496:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800749a:	4413      	add	r3, r2
 800749c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80074a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80074a4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80074a8:	b29a      	uxth	r2, r3
 80074aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074ae:	801a      	strh	r2, [r3, #0]
 80074b0:	e001      	b.n	80074b6 <USB_EPStartXfer+0x15a6>
      }
      else
      {
        return HAL_ERROR;
 80074b2:	2301      	movs	r3, #1
 80074b4:	e02e      	b.n	8007514 <USB_EPStartXfer+0x1604>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80074b6:	1d3b      	adds	r3, r7, #4
 80074b8:	681a      	ldr	r2, [r3, #0]
 80074ba:	463b      	mov	r3, r7
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	781b      	ldrb	r3, [r3, #0]
 80074c0:	009b      	lsls	r3, r3, #2
 80074c2:	4413      	add	r3, r2
 80074c4:	881b      	ldrh	r3, [r3, #0]
 80074c6:	b29b      	uxth	r3, r3
 80074c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80074cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074d0:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 80074d4:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80074d8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80074dc:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 80074e0:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80074e4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80074e8:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 80074ec:	1d3b      	adds	r3, r7, #4
 80074ee:	681a      	ldr	r2, [r3, #0]
 80074f0:	463b      	mov	r3, r7
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	781b      	ldrb	r3, [r3, #0]
 80074f6:	009b      	lsls	r3, r3, #2
 80074f8:	441a      	add	r2, r3
 80074fa:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80074fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007502:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007506:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800750a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800750e:	b29b      	uxth	r3, r3
 8007510:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007512:	2300      	movs	r3, #0
}
 8007514:	4618      	mov	r0, r3
 8007516:	f507 779c 	add.w	r7, r7, #312	; 0x138
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}

0800751e <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800751e:	b480      	push	{r7}
 8007520:	b085      	sub	sp, #20
 8007522:	af00      	add	r7, sp, #0
 8007524:	6078      	str	r0, [r7, #4]
 8007526:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	785b      	ldrb	r3, [r3, #1]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d020      	beq.n	8007572 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007530:	687a      	ldr	r2, [r7, #4]
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	781b      	ldrb	r3, [r3, #0]
 8007536:	009b      	lsls	r3, r3, #2
 8007538:	4413      	add	r3, r2
 800753a:	881b      	ldrh	r3, [r3, #0]
 800753c:	b29b      	uxth	r3, r3
 800753e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007542:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007546:	81fb      	strh	r3, [r7, #14]
 8007548:	89fb      	ldrh	r3, [r7, #14]
 800754a:	f083 0310 	eor.w	r3, r3, #16
 800754e:	81fb      	strh	r3, [r7, #14]
 8007550:	687a      	ldr	r2, [r7, #4]
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	781b      	ldrb	r3, [r3, #0]
 8007556:	009b      	lsls	r3, r3, #2
 8007558:	441a      	add	r2, r3
 800755a:	89fb      	ldrh	r3, [r7, #14]
 800755c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007560:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007564:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007568:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800756c:	b29b      	uxth	r3, r3
 800756e:	8013      	strh	r3, [r2, #0]
 8007570:	e01f      	b.n	80075b2 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007572:	687a      	ldr	r2, [r7, #4]
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	781b      	ldrb	r3, [r3, #0]
 8007578:	009b      	lsls	r3, r3, #2
 800757a:	4413      	add	r3, r2
 800757c:	881b      	ldrh	r3, [r3, #0]
 800757e:	b29b      	uxth	r3, r3
 8007580:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007584:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007588:	81bb      	strh	r3, [r7, #12]
 800758a:	89bb      	ldrh	r3, [r7, #12]
 800758c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007590:	81bb      	strh	r3, [r7, #12]
 8007592:	687a      	ldr	r2, [r7, #4]
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	781b      	ldrb	r3, [r3, #0]
 8007598:	009b      	lsls	r3, r3, #2
 800759a:	441a      	add	r2, r3
 800759c:	89bb      	ldrh	r3, [r7, #12]
 800759e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075ae:	b29b      	uxth	r3, r3
 80075b0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80075b2:	2300      	movs	r3, #0
}
 80075b4:	4618      	mov	r0, r3
 80075b6:	3714      	adds	r7, #20
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bc80      	pop	{r7}
 80075bc:	4770      	bx	lr

080075be <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80075be:	b480      	push	{r7}
 80075c0:	b087      	sub	sp, #28
 80075c2:	af00      	add	r7, sp, #0
 80075c4:	6078      	str	r0, [r7, #4]
 80075c6:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	7b1b      	ldrb	r3, [r3, #12]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	f040 809d 	bne.w	800770c <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	785b      	ldrb	r3, [r3, #1]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d04c      	beq.n	8007674 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80075da:	687a      	ldr	r2, [r7, #4]
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	781b      	ldrb	r3, [r3, #0]
 80075e0:	009b      	lsls	r3, r3, #2
 80075e2:	4413      	add	r3, r2
 80075e4:	881b      	ldrh	r3, [r3, #0]
 80075e6:	82fb      	strh	r3, [r7, #22]
 80075e8:	8afb      	ldrh	r3, [r7, #22]
 80075ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d01b      	beq.n	800762a <USB_EPClearStall+0x6c>
 80075f2:	687a      	ldr	r2, [r7, #4]
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	781b      	ldrb	r3, [r3, #0]
 80075f8:	009b      	lsls	r3, r3, #2
 80075fa:	4413      	add	r3, r2
 80075fc:	881b      	ldrh	r3, [r3, #0]
 80075fe:	b29b      	uxth	r3, r3
 8007600:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007604:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007608:	82bb      	strh	r3, [r7, #20]
 800760a:	687a      	ldr	r2, [r7, #4]
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	781b      	ldrb	r3, [r3, #0]
 8007610:	009b      	lsls	r3, r3, #2
 8007612:	441a      	add	r2, r3
 8007614:	8abb      	ldrh	r3, [r7, #20]
 8007616:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800761a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800761e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007622:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007626:	b29b      	uxth	r3, r3
 8007628:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	78db      	ldrb	r3, [r3, #3]
 800762e:	2b01      	cmp	r3, #1
 8007630:	d06c      	beq.n	800770c <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007632:	687a      	ldr	r2, [r7, #4]
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	781b      	ldrb	r3, [r3, #0]
 8007638:	009b      	lsls	r3, r3, #2
 800763a:	4413      	add	r3, r2
 800763c:	881b      	ldrh	r3, [r3, #0]
 800763e:	b29b      	uxth	r3, r3
 8007640:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007644:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007648:	827b      	strh	r3, [r7, #18]
 800764a:	8a7b      	ldrh	r3, [r7, #18]
 800764c:	f083 0320 	eor.w	r3, r3, #32
 8007650:	827b      	strh	r3, [r7, #18]
 8007652:	687a      	ldr	r2, [r7, #4]
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	781b      	ldrb	r3, [r3, #0]
 8007658:	009b      	lsls	r3, r3, #2
 800765a:	441a      	add	r2, r3
 800765c:	8a7b      	ldrh	r3, [r7, #18]
 800765e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007662:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007666:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800766a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800766e:	b29b      	uxth	r3, r3
 8007670:	8013      	strh	r3, [r2, #0]
 8007672:	e04b      	b.n	800770c <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007674:	687a      	ldr	r2, [r7, #4]
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	781b      	ldrb	r3, [r3, #0]
 800767a:	009b      	lsls	r3, r3, #2
 800767c:	4413      	add	r3, r2
 800767e:	881b      	ldrh	r3, [r3, #0]
 8007680:	823b      	strh	r3, [r7, #16]
 8007682:	8a3b      	ldrh	r3, [r7, #16]
 8007684:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007688:	2b00      	cmp	r3, #0
 800768a:	d01b      	beq.n	80076c4 <USB_EPClearStall+0x106>
 800768c:	687a      	ldr	r2, [r7, #4]
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	781b      	ldrb	r3, [r3, #0]
 8007692:	009b      	lsls	r3, r3, #2
 8007694:	4413      	add	r3, r2
 8007696:	881b      	ldrh	r3, [r3, #0]
 8007698:	b29b      	uxth	r3, r3
 800769a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800769e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076a2:	81fb      	strh	r3, [r7, #14]
 80076a4:	687a      	ldr	r2, [r7, #4]
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	781b      	ldrb	r3, [r3, #0]
 80076aa:	009b      	lsls	r3, r3, #2
 80076ac:	441a      	add	r2, r3
 80076ae:	89fb      	ldrh	r3, [r7, #14]
 80076b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80076bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076c0:	b29b      	uxth	r3, r3
 80076c2:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80076c4:	687a      	ldr	r2, [r7, #4]
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	781b      	ldrb	r3, [r3, #0]
 80076ca:	009b      	lsls	r3, r3, #2
 80076cc:	4413      	add	r3, r2
 80076ce:	881b      	ldrh	r3, [r3, #0]
 80076d0:	b29b      	uxth	r3, r3
 80076d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80076d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076da:	81bb      	strh	r3, [r7, #12]
 80076dc:	89bb      	ldrh	r3, [r7, #12]
 80076de:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80076e2:	81bb      	strh	r3, [r7, #12]
 80076e4:	89bb      	ldrh	r3, [r7, #12]
 80076e6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80076ea:	81bb      	strh	r3, [r7, #12]
 80076ec:	687a      	ldr	r2, [r7, #4]
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	781b      	ldrb	r3, [r3, #0]
 80076f2:	009b      	lsls	r3, r3, #2
 80076f4:	441a      	add	r2, r3
 80076f6:	89bb      	ldrh	r3, [r7, #12]
 80076f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007700:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007704:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007708:	b29b      	uxth	r3, r3
 800770a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800770c:	2300      	movs	r3, #0
}
 800770e:	4618      	mov	r0, r3
 8007710:	371c      	adds	r7, #28
 8007712:	46bd      	mov	sp, r7
 8007714:	bc80      	pop	{r7}
 8007716:	4770      	bx	lr

08007718 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007718:	b480      	push	{r7}
 800771a:	b083      	sub	sp, #12
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
 8007720:	460b      	mov	r3, r1
 8007722:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007724:	78fb      	ldrb	r3, [r7, #3]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d103      	bne.n	8007732 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2280      	movs	r2, #128	; 0x80
 800772e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007732:	2300      	movs	r3, #0
}
 8007734:	4618      	mov	r0, r3
 8007736:	370c      	adds	r7, #12
 8007738:	46bd      	mov	sp, r7
 800773a:	bc80      	pop	{r7}
 800773c:	4770      	bx	lr

0800773e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800773e:	b480      	push	{r7}
 8007740:	b083      	sub	sp, #12
 8007742:	af00      	add	r7, sp, #0
 8007744:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007746:	2300      	movs	r3, #0
}
 8007748:	4618      	mov	r0, r3
 800774a:	370c      	adds	r7, #12
 800774c:	46bd      	mov	sp, r7
 800774e:	bc80      	pop	{r7}
 8007750:	4770      	bx	lr

08007752 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8007752:	b480      	push	{r7}
 8007754:	b083      	sub	sp, #12
 8007756:	af00      	add	r7, sp, #0
 8007758:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800775a:	2300      	movs	r3, #0
}
 800775c:	4618      	mov	r0, r3
 800775e:	370c      	adds	r7, #12
 8007760:	46bd      	mov	sp, r7
 8007762:	bc80      	pop	{r7}
 8007764:	4770      	bx	lr

08007766 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8007766:	b480      	push	{r7}
 8007768:	b085      	sub	sp, #20
 800776a:	af00      	add	r7, sp, #0
 800776c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007774:	b29b      	uxth	r3, r3
 8007776:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007778:	68fb      	ldr	r3, [r7, #12]
}
 800777a:	4618      	mov	r0, r3
 800777c:	3714      	adds	r7, #20
 800777e:	46bd      	mov	sp, r7
 8007780:	bc80      	pop	{r7}
 8007782:	4770      	bx	lr

08007784 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8007784:	b480      	push	{r7}
 8007786:	b083      	sub	sp, #12
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
 800778c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800778e:	2300      	movs	r3, #0
}
 8007790:	4618      	mov	r0, r3
 8007792:	370c      	adds	r7, #12
 8007794:	46bd      	mov	sp, r7
 8007796:	bc80      	pop	{r7}
 8007798:	4770      	bx	lr

0800779a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800779a:	b480      	push	{r7}
 800779c:	b08d      	sub	sp, #52	; 0x34
 800779e:	af00      	add	r7, sp, #0
 80077a0:	60f8      	str	r0, [r7, #12]
 80077a2:	60b9      	str	r1, [r7, #8]
 80077a4:	4611      	mov	r1, r2
 80077a6:	461a      	mov	r2, r3
 80077a8:	460b      	mov	r3, r1
 80077aa:	80fb      	strh	r3, [r7, #6]
 80077ac:	4613      	mov	r3, r2
 80077ae:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80077b0:	88bb      	ldrh	r3, [r7, #4]
 80077b2:	3301      	adds	r3, #1
 80077b4:	085b      	lsrs	r3, r3, #1
 80077b6:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80077c0:	88fb      	ldrh	r3, [r7, #6]
 80077c2:	005a      	lsls	r2, r3, #1
 80077c4:	69fb      	ldr	r3, [r7, #28]
 80077c6:	4413      	add	r3, r2
 80077c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80077cc:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80077ce:	6a3b      	ldr	r3, [r7, #32]
 80077d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80077d2:	e01e      	b.n	8007812 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80077d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077d6:	781b      	ldrb	r3, [r3, #0]
 80077d8:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80077da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077dc:	3301      	adds	r3, #1
 80077de:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80077e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e2:	781b      	ldrb	r3, [r3, #0]
 80077e4:	b29b      	uxth	r3, r3
 80077e6:	021b      	lsls	r3, r3, #8
 80077e8:	b29b      	uxth	r3, r3
 80077ea:	461a      	mov	r2, r3
 80077ec:	69bb      	ldr	r3, [r7, #24]
 80077ee:	4313      	orrs	r3, r2
 80077f0:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80077f2:	697b      	ldr	r3, [r7, #20]
 80077f4:	b29a      	uxth	r2, r3
 80077f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077f8:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80077fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077fc:	3302      	adds	r3, #2
 80077fe:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8007800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007802:	3302      	adds	r3, #2
 8007804:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8007806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007808:	3301      	adds	r3, #1
 800780a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800780c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800780e:	3b01      	subs	r3, #1
 8007810:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007814:	2b00      	cmp	r3, #0
 8007816:	d1dd      	bne.n	80077d4 <USB_WritePMA+0x3a>
  }
}
 8007818:	bf00      	nop
 800781a:	3734      	adds	r7, #52	; 0x34
 800781c:	46bd      	mov	sp, r7
 800781e:	bc80      	pop	{r7}
 8007820:	4770      	bx	lr

08007822 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007822:	b480      	push	{r7}
 8007824:	b08b      	sub	sp, #44	; 0x2c
 8007826:	af00      	add	r7, sp, #0
 8007828:	60f8      	str	r0, [r7, #12]
 800782a:	60b9      	str	r1, [r7, #8]
 800782c:	4611      	mov	r1, r2
 800782e:	461a      	mov	r2, r3
 8007830:	460b      	mov	r3, r1
 8007832:	80fb      	strh	r3, [r7, #6]
 8007834:	4613      	mov	r3, r2
 8007836:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007838:	88bb      	ldrh	r3, [r7, #4]
 800783a:	085b      	lsrs	r3, r3, #1
 800783c:	b29b      	uxth	r3, r3
 800783e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007848:	88fb      	ldrh	r3, [r7, #6]
 800784a:	005a      	lsls	r2, r3, #1
 800784c:	697b      	ldr	r3, [r7, #20]
 800784e:	4413      	add	r3, r2
 8007850:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007854:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8007856:	69bb      	ldr	r3, [r7, #24]
 8007858:	627b      	str	r3, [r7, #36]	; 0x24
 800785a:	e01b      	b.n	8007894 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800785c:	6a3b      	ldr	r3, [r7, #32]
 800785e:	881b      	ldrh	r3, [r3, #0]
 8007860:	b29b      	uxth	r3, r3
 8007862:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007864:	6a3b      	ldr	r3, [r7, #32]
 8007866:	3302      	adds	r3, #2
 8007868:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800786a:	693b      	ldr	r3, [r7, #16]
 800786c:	b2da      	uxtb	r2, r3
 800786e:	69fb      	ldr	r3, [r7, #28]
 8007870:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007872:	69fb      	ldr	r3, [r7, #28]
 8007874:	3301      	adds	r3, #1
 8007876:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8007878:	693b      	ldr	r3, [r7, #16]
 800787a:	0a1b      	lsrs	r3, r3, #8
 800787c:	b2da      	uxtb	r2, r3
 800787e:	69fb      	ldr	r3, [r7, #28]
 8007880:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007882:	69fb      	ldr	r3, [r7, #28]
 8007884:	3301      	adds	r3, #1
 8007886:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007888:	6a3b      	ldr	r3, [r7, #32]
 800788a:	3302      	adds	r3, #2
 800788c:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800788e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007890:	3b01      	subs	r3, #1
 8007892:	627b      	str	r3, [r7, #36]	; 0x24
 8007894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007896:	2b00      	cmp	r3, #0
 8007898:	d1e0      	bne.n	800785c <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800789a:	88bb      	ldrh	r3, [r7, #4]
 800789c:	f003 0301 	and.w	r3, r3, #1
 80078a0:	b29b      	uxth	r3, r3
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d007      	beq.n	80078b6 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80078a6:	6a3b      	ldr	r3, [r7, #32]
 80078a8:	881b      	ldrh	r3, [r3, #0]
 80078aa:	b29b      	uxth	r3, r3
 80078ac:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80078ae:	693b      	ldr	r3, [r7, #16]
 80078b0:	b2da      	uxtb	r2, r3
 80078b2:	69fb      	ldr	r3, [r7, #28]
 80078b4:	701a      	strb	r2, [r3, #0]
  }
}
 80078b6:	bf00      	nop
 80078b8:	372c      	adds	r7, #44	; 0x2c
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bc80      	pop	{r7}
 80078be:	4770      	bx	lr

080078c0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b084      	sub	sp, #16
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
 80078c8:	460b      	mov	r3, r1
 80078ca:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80078cc:	2300      	movs	r3, #0
 80078ce:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	7c1b      	ldrb	r3, [r3, #16]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d115      	bne.n	8007904 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80078d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80078dc:	2202      	movs	r2, #2
 80078de:	2181      	movs	r1, #129	; 0x81
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f003 f85e 	bl	800a9a2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2201      	movs	r2, #1
 80078ea:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80078ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80078f0:	2202      	movs	r2, #2
 80078f2:	2101      	movs	r1, #1
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f003 f854 	bl	800a9a2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2201      	movs	r2, #1
 80078fe:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8007902:	e012      	b.n	800792a <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007904:	2340      	movs	r3, #64	; 0x40
 8007906:	2202      	movs	r2, #2
 8007908:	2181      	movs	r1, #129	; 0x81
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f003 f849 	bl	800a9a2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2201      	movs	r2, #1
 8007914:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007916:	2340      	movs	r3, #64	; 0x40
 8007918:	2202      	movs	r2, #2
 800791a:	2101      	movs	r1, #1
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f003 f840 	bl	800a9a2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2201      	movs	r2, #1
 8007926:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800792a:	2308      	movs	r3, #8
 800792c:	2203      	movs	r2, #3
 800792e:	2182      	movs	r1, #130	; 0x82
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	f003 f836 	bl	800a9a2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2201      	movs	r2, #1
 800793a:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800793c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007940:	f003 f956 	bl	800abf0 <USBD_static_malloc>
 8007944:	4602      	mov	r2, r0
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007952:	2b00      	cmp	r3, #0
 8007954:	d102      	bne.n	800795c <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8007956:	2301      	movs	r3, #1
 8007958:	73fb      	strb	r3, [r7, #15]
 800795a:	e026      	b.n	80079aa <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007962:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800796e:	68bb      	ldr	r3, [r7, #8]
 8007970:	2200      	movs	r2, #0
 8007972:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	2200      	movs	r2, #0
 800797a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	7c1b      	ldrb	r3, [r3, #16]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d109      	bne.n	800799a <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800798c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007990:	2101      	movs	r1, #1
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	f003 f8f6 	bl	800ab84 <USBD_LL_PrepareReceive>
 8007998:	e007      	b.n	80079aa <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800799a:	68bb      	ldr	r3, [r7, #8]
 800799c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80079a0:	2340      	movs	r3, #64	; 0x40
 80079a2:	2101      	movs	r1, #1
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	f003 f8ed 	bl	800ab84 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80079aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80079ac:	4618      	mov	r0, r3
 80079ae:	3710      	adds	r7, #16
 80079b0:	46bd      	mov	sp, r7
 80079b2:	bd80      	pop	{r7, pc}

080079b4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b084      	sub	sp, #16
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
 80079bc:	460b      	mov	r3, r1
 80079be:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80079c0:	2300      	movs	r3, #0
 80079c2:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80079c4:	2181      	movs	r1, #129	; 0x81
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	f003 f811 	bl	800a9ee <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2200      	movs	r2, #0
 80079d0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80079d2:	2101      	movs	r1, #1
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f003 f80a 	bl	800a9ee <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2200      	movs	r2, #0
 80079de:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80079e2:	2182      	movs	r1, #130	; 0x82
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	f003 f802 	bl	800a9ee <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2200      	movs	r2, #0
 80079ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d00e      	beq.n	8007a18 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a00:	685b      	ldr	r3, [r3, #4]
 8007a02:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	f003 f8fc 	bl	800ac08 <USBD_static_free>
    pdev->pClassData = NULL;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2200      	movs	r2, #0
 8007a14:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8007a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	3710      	adds	r7, #16
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	bd80      	pop	{r7, pc}

08007a22 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007a22:	b580      	push	{r7, lr}
 8007a24:	b086      	sub	sp, #24
 8007a26:	af00      	add	r7, sp, #0
 8007a28:	6078      	str	r0, [r7, #4]
 8007a2a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a32:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007a34:	2300      	movs	r3, #0
 8007a36:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007a38:	2300      	movs	r3, #0
 8007a3a:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	781b      	ldrb	r3, [r3, #0]
 8007a44:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d039      	beq.n	8007ac0 <USBD_CDC_Setup+0x9e>
 8007a4c:	2b20      	cmp	r3, #32
 8007a4e:	d17c      	bne.n	8007b4a <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	88db      	ldrh	r3, [r3, #6]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d029      	beq.n	8007aac <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	781b      	ldrb	r3, [r3, #0]
 8007a5c:	b25b      	sxtb	r3, r3
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	da11      	bge.n	8007a86 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a68:	689b      	ldr	r3, [r3, #8]
 8007a6a:	683a      	ldr	r2, [r7, #0]
 8007a6c:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8007a6e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007a70:	683a      	ldr	r2, [r7, #0]
 8007a72:	88d2      	ldrh	r2, [r2, #6]
 8007a74:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007a76:	6939      	ldr	r1, [r7, #16]
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	88db      	ldrh	r3, [r3, #6]
 8007a7c:	461a      	mov	r2, r3
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f001 f9fa 	bl	8008e78 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8007a84:	e068      	b.n	8007b58 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	785a      	ldrb	r2, [r3, #1]
 8007a8a:	693b      	ldr	r3, [r7, #16]
 8007a8c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	88db      	ldrh	r3, [r3, #6]
 8007a94:	b2da      	uxtb	r2, r3
 8007a96:	693b      	ldr	r3, [r7, #16]
 8007a98:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007a9c:	6939      	ldr	r1, [r7, #16]
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	88db      	ldrh	r3, [r3, #6]
 8007aa2:	461a      	mov	r2, r3
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	f001 fa15 	bl	8008ed4 <USBD_CtlPrepareRx>
      break;
 8007aaa:	e055      	b.n	8007b58 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ab2:	689b      	ldr	r3, [r3, #8]
 8007ab4:	683a      	ldr	r2, [r7, #0]
 8007ab6:	7850      	ldrb	r0, [r2, #1]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	6839      	ldr	r1, [r7, #0]
 8007abc:	4798      	blx	r3
      break;
 8007abe:	e04b      	b.n	8007b58 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	785b      	ldrb	r3, [r3, #1]
 8007ac4:	2b0a      	cmp	r3, #10
 8007ac6:	d017      	beq.n	8007af8 <USBD_CDC_Setup+0xd6>
 8007ac8:	2b0b      	cmp	r3, #11
 8007aca:	d029      	beq.n	8007b20 <USBD_CDC_Setup+0xfe>
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d133      	bne.n	8007b38 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ad6:	2b03      	cmp	r3, #3
 8007ad8:	d107      	bne.n	8007aea <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007ada:	f107 030c 	add.w	r3, r7, #12
 8007ade:	2202      	movs	r2, #2
 8007ae0:	4619      	mov	r1, r3
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f001 f9c8 	bl	8008e78 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007ae8:	e02e      	b.n	8007b48 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8007aea:	6839      	ldr	r1, [r7, #0]
 8007aec:	6878      	ldr	r0, [r7, #4]
 8007aee:	f001 f959 	bl	8008da4 <USBD_CtlError>
            ret = USBD_FAIL;
 8007af2:	2302      	movs	r3, #2
 8007af4:	75fb      	strb	r3, [r7, #23]
          break;
 8007af6:	e027      	b.n	8007b48 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007afe:	2b03      	cmp	r3, #3
 8007b00:	d107      	bne.n	8007b12 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8007b02:	f107 030f 	add.w	r3, r7, #15
 8007b06:	2201      	movs	r2, #1
 8007b08:	4619      	mov	r1, r3
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f001 f9b4 	bl	8008e78 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007b10:	e01a      	b.n	8007b48 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8007b12:	6839      	ldr	r1, [r7, #0]
 8007b14:	6878      	ldr	r0, [r7, #4]
 8007b16:	f001 f945 	bl	8008da4 <USBD_CtlError>
            ret = USBD_FAIL;
 8007b1a:	2302      	movs	r3, #2
 8007b1c:	75fb      	strb	r3, [r7, #23]
          break;
 8007b1e:	e013      	b.n	8007b48 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b26:	2b03      	cmp	r3, #3
 8007b28:	d00d      	beq.n	8007b46 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8007b2a:	6839      	ldr	r1, [r7, #0]
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f001 f939 	bl	8008da4 <USBD_CtlError>
            ret = USBD_FAIL;
 8007b32:	2302      	movs	r3, #2
 8007b34:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007b36:	e006      	b.n	8007b46 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8007b38:	6839      	ldr	r1, [r7, #0]
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f001 f932 	bl	8008da4 <USBD_CtlError>
          ret = USBD_FAIL;
 8007b40:	2302      	movs	r3, #2
 8007b42:	75fb      	strb	r3, [r7, #23]
          break;
 8007b44:	e000      	b.n	8007b48 <USBD_CDC_Setup+0x126>
          break;
 8007b46:	bf00      	nop
      }
      break;
 8007b48:	e006      	b.n	8007b58 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8007b4a:	6839      	ldr	r1, [r7, #0]
 8007b4c:	6878      	ldr	r0, [r7, #4]
 8007b4e:	f001 f929 	bl	8008da4 <USBD_CtlError>
      ret = USBD_FAIL;
 8007b52:	2302      	movs	r3, #2
 8007b54:	75fb      	strb	r3, [r7, #23]
      break;
 8007b56:	bf00      	nop
  }

  return ret;
 8007b58:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	3718      	adds	r7, #24
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd80      	pop	{r7, pc}

08007b62 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007b62:	b580      	push	{r7, lr}
 8007b64:	b084      	sub	sp, #16
 8007b66:	af00      	add	r7, sp, #0
 8007b68:	6078      	str	r0, [r7, #4]
 8007b6a:	460b      	mov	r3, r1
 8007b6c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b74:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007b7c:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d03a      	beq.n	8007bfe <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007b88:	78fa      	ldrb	r2, [r7, #3]
 8007b8a:	6879      	ldr	r1, [r7, #4]
 8007b8c:	4613      	mov	r3, r2
 8007b8e:	009b      	lsls	r3, r3, #2
 8007b90:	4413      	add	r3, r2
 8007b92:	009b      	lsls	r3, r3, #2
 8007b94:	440b      	add	r3, r1
 8007b96:	331c      	adds	r3, #28
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d029      	beq.n	8007bf2 <USBD_CDC_DataIn+0x90>
 8007b9e:	78fa      	ldrb	r2, [r7, #3]
 8007ba0:	6879      	ldr	r1, [r7, #4]
 8007ba2:	4613      	mov	r3, r2
 8007ba4:	009b      	lsls	r3, r3, #2
 8007ba6:	4413      	add	r3, r2
 8007ba8:	009b      	lsls	r3, r3, #2
 8007baa:	440b      	add	r3, r1
 8007bac:	331c      	adds	r3, #28
 8007bae:	681a      	ldr	r2, [r3, #0]
 8007bb0:	78f9      	ldrb	r1, [r7, #3]
 8007bb2:	68b8      	ldr	r0, [r7, #8]
 8007bb4:	460b      	mov	r3, r1
 8007bb6:	009b      	lsls	r3, r3, #2
 8007bb8:	440b      	add	r3, r1
 8007bba:	00db      	lsls	r3, r3, #3
 8007bbc:	4403      	add	r3, r0
 8007bbe:	3338      	adds	r3, #56	; 0x38
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	fbb2 f1f3 	udiv	r1, r2, r3
 8007bc6:	fb03 f301 	mul.w	r3, r3, r1
 8007bca:	1ad3      	subs	r3, r2, r3
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d110      	bne.n	8007bf2 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8007bd0:	78fa      	ldrb	r2, [r7, #3]
 8007bd2:	6879      	ldr	r1, [r7, #4]
 8007bd4:	4613      	mov	r3, r2
 8007bd6:	009b      	lsls	r3, r3, #2
 8007bd8:	4413      	add	r3, r2
 8007bda:	009b      	lsls	r3, r3, #2
 8007bdc:	440b      	add	r3, r1
 8007bde:	331c      	adds	r3, #28
 8007be0:	2200      	movs	r2, #0
 8007be2:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007be4:	78f9      	ldrb	r1, [r7, #3]
 8007be6:	2300      	movs	r3, #0
 8007be8:	2200      	movs	r2, #0
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f002 ffa7 	bl	800ab3e <USBD_LL_Transmit>
 8007bf0:	e003      	b.n	8007bfa <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	e000      	b.n	8007c00 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8007bfe:	2302      	movs	r3, #2
  }
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	3710      	adds	r7, #16
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bd80      	pop	{r7, pc}

08007c08 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b084      	sub	sp, #16
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
 8007c10:	460b      	mov	r3, r1
 8007c12:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c1a:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007c1c:	78fb      	ldrb	r3, [r7, #3]
 8007c1e:	4619      	mov	r1, r3
 8007c20:	6878      	ldr	r0, [r7, #4]
 8007c22:	f002 ffd2 	bl	800abca <USBD_LL_GetRxDataSize>
 8007c26:	4602      	mov	r2, r0
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d00d      	beq.n	8007c54 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c3e:	68db      	ldr	r3, [r3, #12]
 8007c40:	68fa      	ldr	r2, [r7, #12]
 8007c42:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007c46:	68fa      	ldr	r2, [r7, #12]
 8007c48:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007c4c:	4611      	mov	r1, r2
 8007c4e:	4798      	blx	r3

    return USBD_OK;
 8007c50:	2300      	movs	r3, #0
 8007c52:	e000      	b.n	8007c56 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8007c54:	2302      	movs	r3, #2
  }
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	3710      	adds	r7, #16
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bd80      	pop	{r7, pc}

08007c5e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007c5e:	b580      	push	{r7, lr}
 8007c60:	b084      	sub	sp, #16
 8007c62:	af00      	add	r7, sp, #0
 8007c64:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c6c:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d015      	beq.n	8007ca4 <USBD_CDC_EP0_RxReady+0x46>
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007c7e:	2bff      	cmp	r3, #255	; 0xff
 8007c80:	d010      	beq.n	8007ca4 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c88:	689b      	ldr	r3, [r3, #8]
 8007c8a:	68fa      	ldr	r2, [r7, #12]
 8007c8c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8007c90:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007c92:	68fa      	ldr	r2, [r7, #12]
 8007c94:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007c98:	b292      	uxth	r2, r2
 8007c9a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	22ff      	movs	r2, #255	; 0xff
 8007ca0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8007ca4:	2300      	movs	r3, #0
}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	3710      	adds	r7, #16
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bd80      	pop	{r7, pc}
	...

08007cb0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007cb0:	b480      	push	{r7}
 8007cb2:	b083      	sub	sp, #12
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2243      	movs	r2, #67	; 0x43
 8007cbc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8007cbe:	4b03      	ldr	r3, [pc, #12]	; (8007ccc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	370c      	adds	r7, #12
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bc80      	pop	{r7}
 8007cc8:	4770      	bx	lr
 8007cca:	bf00      	nop
 8007ccc:	20000094 	.word	0x20000094

08007cd0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b083      	sub	sp, #12
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2243      	movs	r2, #67	; 0x43
 8007cdc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8007cde:	4b03      	ldr	r3, [pc, #12]	; (8007cec <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	370c      	adds	r7, #12
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bc80      	pop	{r7}
 8007ce8:	4770      	bx	lr
 8007cea:	bf00      	nop
 8007cec:	20000050 	.word	0x20000050

08007cf0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007cf0:	b480      	push	{r7}
 8007cf2:	b083      	sub	sp, #12
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2243      	movs	r2, #67	; 0x43
 8007cfc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8007cfe:	4b03      	ldr	r3, [pc, #12]	; (8007d0c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007d00:	4618      	mov	r0, r3
 8007d02:	370c      	adds	r7, #12
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bc80      	pop	{r7}
 8007d08:	4770      	bx	lr
 8007d0a:	bf00      	nop
 8007d0c:	200000d8 	.word	0x200000d8

08007d10 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007d10:	b480      	push	{r7}
 8007d12:	b083      	sub	sp, #12
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	220a      	movs	r2, #10
 8007d1c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8007d1e:	4b03      	ldr	r3, [pc, #12]	; (8007d2c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007d20:	4618      	mov	r0, r3
 8007d22:	370c      	adds	r7, #12
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bc80      	pop	{r7}
 8007d28:	4770      	bx	lr
 8007d2a:	bf00      	nop
 8007d2c:	2000000c 	.word	0x2000000c

08007d30 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8007d30:	b480      	push	{r7}
 8007d32:	b085      	sub	sp, #20
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
 8007d38:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007d3a:	2302      	movs	r3, #2
 8007d3c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d005      	beq.n	8007d50 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	683a      	ldr	r2, [r7, #0]
 8007d48:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007d50:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d52:	4618      	mov	r0, r3
 8007d54:	3714      	adds	r7, #20
 8007d56:	46bd      	mov	sp, r7
 8007d58:	bc80      	pop	{r7}
 8007d5a:	4770      	bx	lr

08007d5c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b087      	sub	sp, #28
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	60f8      	str	r0, [r7, #12]
 8007d64:	60b9      	str	r1, [r7, #8]
 8007d66:	4613      	mov	r3, r2
 8007d68:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d70:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007d72:	697b      	ldr	r3, [r7, #20]
 8007d74:	68ba      	ldr	r2, [r7, #8]
 8007d76:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007d7a:	88fa      	ldrh	r2, [r7, #6]
 8007d7c:	697b      	ldr	r3, [r7, #20]
 8007d7e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8007d82:	2300      	movs	r3, #0
}
 8007d84:	4618      	mov	r0, r3
 8007d86:	371c      	adds	r7, #28
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	bc80      	pop	{r7}
 8007d8c:	4770      	bx	lr

08007d8e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8007d8e:	b480      	push	{r7}
 8007d90:	b085      	sub	sp, #20
 8007d92:	af00      	add	r7, sp, #0
 8007d94:	6078      	str	r0, [r7, #4]
 8007d96:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d9e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	683a      	ldr	r2, [r7, #0]
 8007da4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8007da8:	2300      	movs	r3, #0
}
 8007daa:	4618      	mov	r0, r3
 8007dac:	3714      	adds	r7, #20
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bc80      	pop	{r7}
 8007db2:	4770      	bx	lr

08007db4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b084      	sub	sp, #16
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dc2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d01c      	beq.n	8007e08 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d115      	bne.n	8007e04 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	2201      	movs	r2, #1
 8007ddc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007df6:	b29b      	uxth	r3, r3
 8007df8:	2181      	movs	r1, #129	; 0x81
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	f002 fe9f 	bl	800ab3e <USBD_LL_Transmit>

      return USBD_OK;
 8007e00:	2300      	movs	r3, #0
 8007e02:	e002      	b.n	8007e0a <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8007e04:	2301      	movs	r3, #1
 8007e06:	e000      	b.n	8007e0a <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8007e08:	2302      	movs	r3, #2
  }
}
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	3710      	adds	r7, #16
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd80      	pop	{r7, pc}

08007e12 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007e12:	b580      	push	{r7, lr}
 8007e14:	b084      	sub	sp, #16
 8007e16:	af00      	add	r7, sp, #0
 8007e18:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e20:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d017      	beq.n	8007e5c <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	7c1b      	ldrb	r3, [r3, #16]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d109      	bne.n	8007e48 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007e3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007e3e:	2101      	movs	r1, #1
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	f002 fe9f 	bl	800ab84 <USBD_LL_PrepareReceive>
 8007e46:	e007      	b.n	8007e58 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007e4e:	2340      	movs	r3, #64	; 0x40
 8007e50:	2101      	movs	r1, #1
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	f002 fe96 	bl	800ab84 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007e58:	2300      	movs	r3, #0
 8007e5a:	e000      	b.n	8007e5e <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8007e5c:	2302      	movs	r3, #2
  }
}
 8007e5e:	4618      	mov	r0, r3
 8007e60:	3710      	adds	r7, #16
 8007e62:	46bd      	mov	sp, r7
 8007e64:	bd80      	pop	{r7, pc}

08007e66 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007e66:	b580      	push	{r7, lr}
 8007e68:	b084      	sub	sp, #16
 8007e6a:	af00      	add	r7, sp, #0
 8007e6c:	60f8      	str	r0, [r7, #12]
 8007e6e:	60b9      	str	r1, [r7, #8]
 8007e70:	4613      	mov	r3, r2
 8007e72:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d101      	bne.n	8007e7e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007e7a:	2302      	movs	r3, #2
 8007e7c:	e01a      	b.n	8007eb4 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d003      	beq.n	8007e90 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007e90:	68bb      	ldr	r3, [r7, #8]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d003      	beq.n	8007e9e <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	68ba      	ldr	r2, [r7, #8]
 8007e9a:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	2201      	movs	r2, #1
 8007ea2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	79fa      	ldrb	r2, [r7, #7]
 8007eaa:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007eac:	68f8      	ldr	r0, [r7, #12]
 8007eae:	f002 fd03 	bl	800a8b8 <USBD_LL_Init>

  return USBD_OK;
 8007eb2:	2300      	movs	r3, #0
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	3710      	adds	r7, #16
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bd80      	pop	{r7, pc}

08007ebc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	b085      	sub	sp, #20
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
 8007ec4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d006      	beq.n	8007ede <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	683a      	ldr	r2, [r7, #0]
 8007ed4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8007ed8:	2300      	movs	r3, #0
 8007eda:	73fb      	strb	r3, [r7, #15]
 8007edc:	e001      	b.n	8007ee2 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007ede:	2302      	movs	r3, #2
 8007ee0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007ee2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	3714      	adds	r7, #20
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bc80      	pop	{r7}
 8007eec:	4770      	bx	lr

08007eee <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007eee:	b580      	push	{r7, lr}
 8007ef0:	b082      	sub	sp, #8
 8007ef2:	af00      	add	r7, sp, #0
 8007ef4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	f002 fd38 	bl	800a96c <USBD_LL_Start>

  return USBD_OK;
 8007efc:	2300      	movs	r3, #0
}
 8007efe:	4618      	mov	r0, r3
 8007f00:	3708      	adds	r7, #8
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bd80      	pop	{r7, pc}

08007f06 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007f06:	b480      	push	{r7}
 8007f08:	b083      	sub	sp, #12
 8007f0a:	af00      	add	r7, sp, #0
 8007f0c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007f0e:	2300      	movs	r3, #0
}
 8007f10:	4618      	mov	r0, r3
 8007f12:	370c      	adds	r7, #12
 8007f14:	46bd      	mov	sp, r7
 8007f16:	bc80      	pop	{r7}
 8007f18:	4770      	bx	lr

08007f1a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007f1a:	b580      	push	{r7, lr}
 8007f1c:	b084      	sub	sp, #16
 8007f1e:	af00      	add	r7, sp, #0
 8007f20:	6078      	str	r0, [r7, #4]
 8007f22:	460b      	mov	r3, r1
 8007f24:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007f26:	2302      	movs	r3, #2
 8007f28:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d00c      	beq.n	8007f4e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	78fa      	ldrb	r2, [r7, #3]
 8007f3e:	4611      	mov	r1, r2
 8007f40:	6878      	ldr	r0, [r7, #4]
 8007f42:	4798      	blx	r3
 8007f44:	4603      	mov	r3, r0
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d101      	bne.n	8007f4e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007f4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f50:	4618      	mov	r0, r3
 8007f52:	3710      	adds	r7, #16
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bd80      	pop	{r7, pc}

08007f58 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b082      	sub	sp, #8
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
 8007f60:	460b      	mov	r3, r1
 8007f62:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f6a:	685b      	ldr	r3, [r3, #4]
 8007f6c:	78fa      	ldrb	r2, [r7, #3]
 8007f6e:	4611      	mov	r1, r2
 8007f70:	6878      	ldr	r0, [r7, #4]
 8007f72:	4798      	blx	r3

  return USBD_OK;
 8007f74:	2300      	movs	r3, #0
}
 8007f76:	4618      	mov	r0, r3
 8007f78:	3708      	adds	r7, #8
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	bd80      	pop	{r7, pc}

08007f7e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007f7e:	b580      	push	{r7, lr}
 8007f80:	b082      	sub	sp, #8
 8007f82:	af00      	add	r7, sp, #0
 8007f84:	6078      	str	r0, [r7, #4]
 8007f86:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007f8e:	6839      	ldr	r1, [r7, #0]
 8007f90:	4618      	mov	r0, r3
 8007f92:	f000 fecb 	bl	8008d2c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2201      	movs	r2, #1
 8007f9a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007fa4:	461a      	mov	r2, r3
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007fb2:	f003 031f 	and.w	r3, r3, #31
 8007fb6:	2b01      	cmp	r3, #1
 8007fb8:	d00c      	beq.n	8007fd4 <USBD_LL_SetupStage+0x56>
 8007fba:	2b01      	cmp	r3, #1
 8007fbc:	d302      	bcc.n	8007fc4 <USBD_LL_SetupStage+0x46>
 8007fbe:	2b02      	cmp	r3, #2
 8007fc0:	d010      	beq.n	8007fe4 <USBD_LL_SetupStage+0x66>
 8007fc2:	e017      	b.n	8007ff4 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007fca:	4619      	mov	r1, r3
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f000 f9cb 	bl	8008368 <USBD_StdDevReq>
      break;
 8007fd2:	e01a      	b.n	800800a <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007fda:	4619      	mov	r1, r3
 8007fdc:	6878      	ldr	r0, [r7, #4]
 8007fde:	f000 fa2d 	bl	800843c <USBD_StdItfReq>
      break;
 8007fe2:	e012      	b.n	800800a <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007fea:	4619      	mov	r1, r3
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	f000 fa6b 	bl	80084c8 <USBD_StdEPReq>
      break;
 8007ff2:	e00a      	b.n	800800a <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007ffa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007ffe:	b2db      	uxtb	r3, r3
 8008000:	4619      	mov	r1, r3
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	f002 fd12 	bl	800aa2c <USBD_LL_StallEP>
      break;
 8008008:	bf00      	nop
  }

  return USBD_OK;
 800800a:	2300      	movs	r3, #0
}
 800800c:	4618      	mov	r0, r3
 800800e:	3708      	adds	r7, #8
 8008010:	46bd      	mov	sp, r7
 8008012:	bd80      	pop	{r7, pc}

08008014 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b086      	sub	sp, #24
 8008018:	af00      	add	r7, sp, #0
 800801a:	60f8      	str	r0, [r7, #12]
 800801c:	460b      	mov	r3, r1
 800801e:	607a      	str	r2, [r7, #4]
 8008020:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008022:	7afb      	ldrb	r3, [r7, #11]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d14b      	bne.n	80080c0 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800802e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008036:	2b03      	cmp	r3, #3
 8008038:	d134      	bne.n	80080a4 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800803a:	697b      	ldr	r3, [r7, #20]
 800803c:	68da      	ldr	r2, [r3, #12]
 800803e:	697b      	ldr	r3, [r7, #20]
 8008040:	691b      	ldr	r3, [r3, #16]
 8008042:	429a      	cmp	r2, r3
 8008044:	d919      	bls.n	800807a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8008046:	697b      	ldr	r3, [r7, #20]
 8008048:	68da      	ldr	r2, [r3, #12]
 800804a:	697b      	ldr	r3, [r7, #20]
 800804c:	691b      	ldr	r3, [r3, #16]
 800804e:	1ad2      	subs	r2, r2, r3
 8008050:	697b      	ldr	r3, [r7, #20]
 8008052:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008054:	697b      	ldr	r3, [r7, #20]
 8008056:	68da      	ldr	r2, [r3, #12]
 8008058:	697b      	ldr	r3, [r7, #20]
 800805a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800805c:	429a      	cmp	r2, r3
 800805e:	d203      	bcs.n	8008068 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008060:	697b      	ldr	r3, [r7, #20]
 8008062:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8008064:	b29b      	uxth	r3, r3
 8008066:	e002      	b.n	800806e <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008068:	697b      	ldr	r3, [r7, #20]
 800806a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800806c:	b29b      	uxth	r3, r3
 800806e:	461a      	mov	r2, r3
 8008070:	6879      	ldr	r1, [r7, #4]
 8008072:	68f8      	ldr	r0, [r7, #12]
 8008074:	f000 ff4c 	bl	8008f10 <USBD_CtlContinueRx>
 8008078:	e038      	b.n	80080ec <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008080:	691b      	ldr	r3, [r3, #16]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d00a      	beq.n	800809c <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800808c:	2b03      	cmp	r3, #3
 800808e:	d105      	bne.n	800809c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008096:	691b      	ldr	r3, [r3, #16]
 8008098:	68f8      	ldr	r0, [r7, #12]
 800809a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800809c:	68f8      	ldr	r0, [r7, #12]
 800809e:	f000 ff49 	bl	8008f34 <USBD_CtlSendStatus>
 80080a2:	e023      	b.n	80080ec <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80080aa:	2b05      	cmp	r3, #5
 80080ac:	d11e      	bne.n	80080ec <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	2200      	movs	r2, #0
 80080b2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80080b6:	2100      	movs	r1, #0
 80080b8:	68f8      	ldr	r0, [r7, #12]
 80080ba:	f002 fcb7 	bl	800aa2c <USBD_LL_StallEP>
 80080be:	e015      	b.n	80080ec <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080c6:	699b      	ldr	r3, [r3, #24]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d00d      	beq.n	80080e8 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80080d2:	2b03      	cmp	r3, #3
 80080d4:	d108      	bne.n	80080e8 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080dc:	699b      	ldr	r3, [r3, #24]
 80080de:	7afa      	ldrb	r2, [r7, #11]
 80080e0:	4611      	mov	r1, r2
 80080e2:	68f8      	ldr	r0, [r7, #12]
 80080e4:	4798      	blx	r3
 80080e6:	e001      	b.n	80080ec <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80080e8:	2302      	movs	r3, #2
 80080ea:	e000      	b.n	80080ee <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80080ec:	2300      	movs	r3, #0
}
 80080ee:	4618      	mov	r0, r3
 80080f0:	3718      	adds	r7, #24
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bd80      	pop	{r7, pc}

080080f6 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80080f6:	b580      	push	{r7, lr}
 80080f8:	b086      	sub	sp, #24
 80080fa:	af00      	add	r7, sp, #0
 80080fc:	60f8      	str	r0, [r7, #12]
 80080fe:	460b      	mov	r3, r1
 8008100:	607a      	str	r2, [r7, #4]
 8008102:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008104:	7afb      	ldrb	r3, [r7, #11]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d17f      	bne.n	800820a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	3314      	adds	r3, #20
 800810e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008116:	2b02      	cmp	r3, #2
 8008118:	d15c      	bne.n	80081d4 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800811a:	697b      	ldr	r3, [r7, #20]
 800811c:	68da      	ldr	r2, [r3, #12]
 800811e:	697b      	ldr	r3, [r7, #20]
 8008120:	691b      	ldr	r3, [r3, #16]
 8008122:	429a      	cmp	r2, r3
 8008124:	d915      	bls.n	8008152 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8008126:	697b      	ldr	r3, [r7, #20]
 8008128:	68da      	ldr	r2, [r3, #12]
 800812a:	697b      	ldr	r3, [r7, #20]
 800812c:	691b      	ldr	r3, [r3, #16]
 800812e:	1ad2      	subs	r2, r2, r3
 8008130:	697b      	ldr	r3, [r7, #20]
 8008132:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8008134:	697b      	ldr	r3, [r7, #20]
 8008136:	68db      	ldr	r3, [r3, #12]
 8008138:	b29b      	uxth	r3, r3
 800813a:	461a      	mov	r2, r3
 800813c:	6879      	ldr	r1, [r7, #4]
 800813e:	68f8      	ldr	r0, [r7, #12]
 8008140:	f000 feb6 	bl	8008eb0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008144:	2300      	movs	r3, #0
 8008146:	2200      	movs	r2, #0
 8008148:	2100      	movs	r1, #0
 800814a:	68f8      	ldr	r0, [r7, #12]
 800814c:	f002 fd1a 	bl	800ab84 <USBD_LL_PrepareReceive>
 8008150:	e04e      	b.n	80081f0 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008152:	697b      	ldr	r3, [r7, #20]
 8008154:	689b      	ldr	r3, [r3, #8]
 8008156:	697a      	ldr	r2, [r7, #20]
 8008158:	6912      	ldr	r2, [r2, #16]
 800815a:	fbb3 f1f2 	udiv	r1, r3, r2
 800815e:	fb02 f201 	mul.w	r2, r2, r1
 8008162:	1a9b      	subs	r3, r3, r2
 8008164:	2b00      	cmp	r3, #0
 8008166:	d11c      	bne.n	80081a2 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8008168:	697b      	ldr	r3, [r7, #20]
 800816a:	689a      	ldr	r2, [r3, #8]
 800816c:	697b      	ldr	r3, [r7, #20]
 800816e:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008170:	429a      	cmp	r2, r3
 8008172:	d316      	bcc.n	80081a2 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8008174:	697b      	ldr	r3, [r7, #20]
 8008176:	689a      	ldr	r2, [r3, #8]
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800817e:	429a      	cmp	r2, r3
 8008180:	d20f      	bcs.n	80081a2 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008182:	2200      	movs	r2, #0
 8008184:	2100      	movs	r1, #0
 8008186:	68f8      	ldr	r0, [r7, #12]
 8008188:	f000 fe92 	bl	8008eb0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	2200      	movs	r2, #0
 8008190:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008194:	2300      	movs	r3, #0
 8008196:	2200      	movs	r2, #0
 8008198:	2100      	movs	r1, #0
 800819a:	68f8      	ldr	r0, [r7, #12]
 800819c:	f002 fcf2 	bl	800ab84 <USBD_LL_PrepareReceive>
 80081a0:	e026      	b.n	80081f0 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081a8:	68db      	ldr	r3, [r3, #12]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d00a      	beq.n	80081c4 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80081b4:	2b03      	cmp	r3, #3
 80081b6:	d105      	bne.n	80081c4 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081be:	68db      	ldr	r3, [r3, #12]
 80081c0:	68f8      	ldr	r0, [r7, #12]
 80081c2:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80081c4:	2180      	movs	r1, #128	; 0x80
 80081c6:	68f8      	ldr	r0, [r7, #12]
 80081c8:	f002 fc30 	bl	800aa2c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80081cc:	68f8      	ldr	r0, [r7, #12]
 80081ce:	f000 fec4 	bl	8008f5a <USBD_CtlReceiveStatus>
 80081d2:	e00d      	b.n	80081f0 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80081da:	2b04      	cmp	r3, #4
 80081dc:	d004      	beq.n	80081e8 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d103      	bne.n	80081f0 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80081e8:	2180      	movs	r1, #128	; 0x80
 80081ea:	68f8      	ldr	r0, [r7, #12]
 80081ec:	f002 fc1e 	bl	800aa2c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80081f6:	2b01      	cmp	r3, #1
 80081f8:	d11d      	bne.n	8008236 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80081fa:	68f8      	ldr	r0, [r7, #12]
 80081fc:	f7ff fe83 	bl	8007f06 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	2200      	movs	r2, #0
 8008204:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008208:	e015      	b.n	8008236 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008210:	695b      	ldr	r3, [r3, #20]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d00d      	beq.n	8008232 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800821c:	2b03      	cmp	r3, #3
 800821e:	d108      	bne.n	8008232 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008226:	695b      	ldr	r3, [r3, #20]
 8008228:	7afa      	ldrb	r2, [r7, #11]
 800822a:	4611      	mov	r1, r2
 800822c:	68f8      	ldr	r0, [r7, #12]
 800822e:	4798      	blx	r3
 8008230:	e001      	b.n	8008236 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008232:	2302      	movs	r3, #2
 8008234:	e000      	b.n	8008238 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8008236:	2300      	movs	r3, #0
}
 8008238:	4618      	mov	r0, r3
 800823a:	3718      	adds	r7, #24
 800823c:	46bd      	mov	sp, r7
 800823e:	bd80      	pop	{r7, pc}

08008240 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b082      	sub	sp, #8
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008248:	2340      	movs	r3, #64	; 0x40
 800824a:	2200      	movs	r2, #0
 800824c:	2100      	movs	r1, #0
 800824e:	6878      	ldr	r0, [r7, #4]
 8008250:	f002 fba7 	bl	800a9a2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2201      	movs	r2, #1
 8008258:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2240      	movs	r2, #64	; 0x40
 8008260:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008264:	2340      	movs	r3, #64	; 0x40
 8008266:	2200      	movs	r2, #0
 8008268:	2180      	movs	r1, #128	; 0x80
 800826a:	6878      	ldr	r0, [r7, #4]
 800826c:	f002 fb99 	bl	800a9a2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2201      	movs	r2, #1
 8008274:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2240      	movs	r2, #64	; 0x40
 800827a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2201      	movs	r2, #1
 8008280:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2200      	movs	r2, #0
 8008288:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2200      	movs	r2, #0
 8008290:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2200      	movs	r2, #0
 8008296:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d009      	beq.n	80082b8 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082aa:	685b      	ldr	r3, [r3, #4]
 80082ac:	687a      	ldr	r2, [r7, #4]
 80082ae:	6852      	ldr	r2, [r2, #4]
 80082b0:	b2d2      	uxtb	r2, r2
 80082b2:	4611      	mov	r1, r2
 80082b4:	6878      	ldr	r0, [r7, #4]
 80082b6:	4798      	blx	r3
  }

  return USBD_OK;
 80082b8:	2300      	movs	r3, #0
}
 80082ba:	4618      	mov	r0, r3
 80082bc:	3708      	adds	r7, #8
 80082be:	46bd      	mov	sp, r7
 80082c0:	bd80      	pop	{r7, pc}

080082c2 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80082c2:	b480      	push	{r7}
 80082c4:	b083      	sub	sp, #12
 80082c6:	af00      	add	r7, sp, #0
 80082c8:	6078      	str	r0, [r7, #4]
 80082ca:	460b      	mov	r3, r1
 80082cc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	78fa      	ldrb	r2, [r7, #3]
 80082d2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80082d4:	2300      	movs	r3, #0
}
 80082d6:	4618      	mov	r0, r3
 80082d8:	370c      	adds	r7, #12
 80082da:	46bd      	mov	sp, r7
 80082dc:	bc80      	pop	{r7}
 80082de:	4770      	bx	lr

080082e0 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80082e0:	b480      	push	{r7}
 80082e2:	b083      	sub	sp, #12
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2204      	movs	r2, #4
 80082f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80082fc:	2300      	movs	r3, #0
}
 80082fe:	4618      	mov	r0, r3
 8008300:	370c      	adds	r7, #12
 8008302:	46bd      	mov	sp, r7
 8008304:	bc80      	pop	{r7}
 8008306:	4770      	bx	lr

08008308 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008308:	b480      	push	{r7}
 800830a:	b083      	sub	sp, #12
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008316:	2b04      	cmp	r3, #4
 8008318:	d105      	bne.n	8008326 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008326:	2300      	movs	r3, #0
}
 8008328:	4618      	mov	r0, r3
 800832a:	370c      	adds	r7, #12
 800832c:	46bd      	mov	sp, r7
 800832e:	bc80      	pop	{r7}
 8008330:	4770      	bx	lr

08008332 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008332:	b580      	push	{r7, lr}
 8008334:	b082      	sub	sp, #8
 8008336:	af00      	add	r7, sp, #0
 8008338:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008340:	2b03      	cmp	r3, #3
 8008342:	d10b      	bne.n	800835c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800834a:	69db      	ldr	r3, [r3, #28]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d005      	beq.n	800835c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008356:	69db      	ldr	r3, [r3, #28]
 8008358:	6878      	ldr	r0, [r7, #4]
 800835a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800835c:	2300      	movs	r3, #0
}
 800835e:	4618      	mov	r0, r3
 8008360:	3708      	adds	r7, #8
 8008362:	46bd      	mov	sp, r7
 8008364:	bd80      	pop	{r7, pc}
	...

08008368 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b084      	sub	sp, #16
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
 8008370:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008372:	2300      	movs	r3, #0
 8008374:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	781b      	ldrb	r3, [r3, #0]
 800837a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800837e:	2b20      	cmp	r3, #32
 8008380:	d004      	beq.n	800838c <USBD_StdDevReq+0x24>
 8008382:	2b40      	cmp	r3, #64	; 0x40
 8008384:	d002      	beq.n	800838c <USBD_StdDevReq+0x24>
 8008386:	2b00      	cmp	r3, #0
 8008388:	d008      	beq.n	800839c <USBD_StdDevReq+0x34>
 800838a:	e04c      	b.n	8008426 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008392:	689b      	ldr	r3, [r3, #8]
 8008394:	6839      	ldr	r1, [r7, #0]
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	4798      	blx	r3
      break;
 800839a:	e049      	b.n	8008430 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	785b      	ldrb	r3, [r3, #1]
 80083a0:	2b09      	cmp	r3, #9
 80083a2:	d83a      	bhi.n	800841a <USBD_StdDevReq+0xb2>
 80083a4:	a201      	add	r2, pc, #4	; (adr r2, 80083ac <USBD_StdDevReq+0x44>)
 80083a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083aa:	bf00      	nop
 80083ac:	080083fd 	.word	0x080083fd
 80083b0:	08008411 	.word	0x08008411
 80083b4:	0800841b 	.word	0x0800841b
 80083b8:	08008407 	.word	0x08008407
 80083bc:	0800841b 	.word	0x0800841b
 80083c0:	080083df 	.word	0x080083df
 80083c4:	080083d5 	.word	0x080083d5
 80083c8:	0800841b 	.word	0x0800841b
 80083cc:	080083f3 	.word	0x080083f3
 80083d0:	080083e9 	.word	0x080083e9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80083d4:	6839      	ldr	r1, [r7, #0]
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	f000 f9d4 	bl	8008784 <USBD_GetDescriptor>
          break;
 80083dc:	e022      	b.n	8008424 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80083de:	6839      	ldr	r1, [r7, #0]
 80083e0:	6878      	ldr	r0, [r7, #4]
 80083e2:	f000 fb37 	bl	8008a54 <USBD_SetAddress>
          break;
 80083e6:	e01d      	b.n	8008424 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80083e8:	6839      	ldr	r1, [r7, #0]
 80083ea:	6878      	ldr	r0, [r7, #4]
 80083ec:	f000 fb74 	bl	8008ad8 <USBD_SetConfig>
          break;
 80083f0:	e018      	b.n	8008424 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80083f2:	6839      	ldr	r1, [r7, #0]
 80083f4:	6878      	ldr	r0, [r7, #4]
 80083f6:	f000 fbfd 	bl	8008bf4 <USBD_GetConfig>
          break;
 80083fa:	e013      	b.n	8008424 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80083fc:	6839      	ldr	r1, [r7, #0]
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	f000 fc2c 	bl	8008c5c <USBD_GetStatus>
          break;
 8008404:	e00e      	b.n	8008424 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008406:	6839      	ldr	r1, [r7, #0]
 8008408:	6878      	ldr	r0, [r7, #4]
 800840a:	f000 fc5a 	bl	8008cc2 <USBD_SetFeature>
          break;
 800840e:	e009      	b.n	8008424 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008410:	6839      	ldr	r1, [r7, #0]
 8008412:	6878      	ldr	r0, [r7, #4]
 8008414:	f000 fc69 	bl	8008cea <USBD_ClrFeature>
          break;
 8008418:	e004      	b.n	8008424 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800841a:	6839      	ldr	r1, [r7, #0]
 800841c:	6878      	ldr	r0, [r7, #4]
 800841e:	f000 fcc1 	bl	8008da4 <USBD_CtlError>
          break;
 8008422:	bf00      	nop
      }
      break;
 8008424:	e004      	b.n	8008430 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8008426:	6839      	ldr	r1, [r7, #0]
 8008428:	6878      	ldr	r0, [r7, #4]
 800842a:	f000 fcbb 	bl	8008da4 <USBD_CtlError>
      break;
 800842e:	bf00      	nop
  }

  return ret;
 8008430:	7bfb      	ldrb	r3, [r7, #15]
}
 8008432:	4618      	mov	r0, r3
 8008434:	3710      	adds	r7, #16
 8008436:	46bd      	mov	sp, r7
 8008438:	bd80      	pop	{r7, pc}
 800843a:	bf00      	nop

0800843c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b084      	sub	sp, #16
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
 8008444:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008446:	2300      	movs	r3, #0
 8008448:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	781b      	ldrb	r3, [r3, #0]
 800844e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008452:	2b20      	cmp	r3, #32
 8008454:	d003      	beq.n	800845e <USBD_StdItfReq+0x22>
 8008456:	2b40      	cmp	r3, #64	; 0x40
 8008458:	d001      	beq.n	800845e <USBD_StdItfReq+0x22>
 800845a:	2b00      	cmp	r3, #0
 800845c:	d12a      	bne.n	80084b4 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008464:	3b01      	subs	r3, #1
 8008466:	2b02      	cmp	r3, #2
 8008468:	d81d      	bhi.n	80084a6 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	889b      	ldrh	r3, [r3, #4]
 800846e:	b2db      	uxtb	r3, r3
 8008470:	2b01      	cmp	r3, #1
 8008472:	d813      	bhi.n	800849c <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800847a:	689b      	ldr	r3, [r3, #8]
 800847c:	6839      	ldr	r1, [r7, #0]
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	4798      	blx	r3
 8008482:	4603      	mov	r3, r0
 8008484:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	88db      	ldrh	r3, [r3, #6]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d110      	bne.n	80084b0 <USBD_StdItfReq+0x74>
 800848e:	7bfb      	ldrb	r3, [r7, #15]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d10d      	bne.n	80084b0 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8008494:	6878      	ldr	r0, [r7, #4]
 8008496:	f000 fd4d 	bl	8008f34 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800849a:	e009      	b.n	80084b0 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 800849c:	6839      	ldr	r1, [r7, #0]
 800849e:	6878      	ldr	r0, [r7, #4]
 80084a0:	f000 fc80 	bl	8008da4 <USBD_CtlError>
          break;
 80084a4:	e004      	b.n	80084b0 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 80084a6:	6839      	ldr	r1, [r7, #0]
 80084a8:	6878      	ldr	r0, [r7, #4]
 80084aa:	f000 fc7b 	bl	8008da4 <USBD_CtlError>
          break;
 80084ae:	e000      	b.n	80084b2 <USBD_StdItfReq+0x76>
          break;
 80084b0:	bf00      	nop
      }
      break;
 80084b2:	e004      	b.n	80084be <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 80084b4:	6839      	ldr	r1, [r7, #0]
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f000 fc74 	bl	8008da4 <USBD_CtlError>
      break;
 80084bc:	bf00      	nop
  }

  return USBD_OK;
 80084be:	2300      	movs	r3, #0
}
 80084c0:	4618      	mov	r0, r3
 80084c2:	3710      	adds	r7, #16
 80084c4:	46bd      	mov	sp, r7
 80084c6:	bd80      	pop	{r7, pc}

080084c8 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b084      	sub	sp, #16
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
 80084d0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80084d2:	2300      	movs	r3, #0
 80084d4:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	889b      	ldrh	r3, [r3, #4]
 80084da:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	781b      	ldrb	r3, [r3, #0]
 80084e0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80084e4:	2b20      	cmp	r3, #32
 80084e6:	d004      	beq.n	80084f2 <USBD_StdEPReq+0x2a>
 80084e8:	2b40      	cmp	r3, #64	; 0x40
 80084ea:	d002      	beq.n	80084f2 <USBD_StdEPReq+0x2a>
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d008      	beq.n	8008502 <USBD_StdEPReq+0x3a>
 80084f0:	e13d      	b.n	800876e <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084f8:	689b      	ldr	r3, [r3, #8]
 80084fa:	6839      	ldr	r1, [r7, #0]
 80084fc:	6878      	ldr	r0, [r7, #4]
 80084fe:	4798      	blx	r3
      break;
 8008500:	e13a      	b.n	8008778 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	781b      	ldrb	r3, [r3, #0]
 8008506:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800850a:	2b20      	cmp	r3, #32
 800850c:	d10a      	bne.n	8008524 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008514:	689b      	ldr	r3, [r3, #8]
 8008516:	6839      	ldr	r1, [r7, #0]
 8008518:	6878      	ldr	r0, [r7, #4]
 800851a:	4798      	blx	r3
 800851c:	4603      	mov	r3, r0
 800851e:	73fb      	strb	r3, [r7, #15]

        return ret;
 8008520:	7bfb      	ldrb	r3, [r7, #15]
 8008522:	e12a      	b.n	800877a <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	785b      	ldrb	r3, [r3, #1]
 8008528:	2b01      	cmp	r3, #1
 800852a:	d03e      	beq.n	80085aa <USBD_StdEPReq+0xe2>
 800852c:	2b03      	cmp	r3, #3
 800852e:	d002      	beq.n	8008536 <USBD_StdEPReq+0x6e>
 8008530:	2b00      	cmp	r3, #0
 8008532:	d070      	beq.n	8008616 <USBD_StdEPReq+0x14e>
 8008534:	e115      	b.n	8008762 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800853c:	2b02      	cmp	r3, #2
 800853e:	d002      	beq.n	8008546 <USBD_StdEPReq+0x7e>
 8008540:	2b03      	cmp	r3, #3
 8008542:	d015      	beq.n	8008570 <USBD_StdEPReq+0xa8>
 8008544:	e02b      	b.n	800859e <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008546:	7bbb      	ldrb	r3, [r7, #14]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d00c      	beq.n	8008566 <USBD_StdEPReq+0x9e>
 800854c:	7bbb      	ldrb	r3, [r7, #14]
 800854e:	2b80      	cmp	r3, #128	; 0x80
 8008550:	d009      	beq.n	8008566 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008552:	7bbb      	ldrb	r3, [r7, #14]
 8008554:	4619      	mov	r1, r3
 8008556:	6878      	ldr	r0, [r7, #4]
 8008558:	f002 fa68 	bl	800aa2c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800855c:	2180      	movs	r1, #128	; 0x80
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	f002 fa64 	bl	800aa2c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008564:	e020      	b.n	80085a8 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8008566:	6839      	ldr	r1, [r7, #0]
 8008568:	6878      	ldr	r0, [r7, #4]
 800856a:	f000 fc1b 	bl	8008da4 <USBD_CtlError>
              break;
 800856e:	e01b      	b.n	80085a8 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	885b      	ldrh	r3, [r3, #2]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d10e      	bne.n	8008596 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8008578:	7bbb      	ldrb	r3, [r7, #14]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d00b      	beq.n	8008596 <USBD_StdEPReq+0xce>
 800857e:	7bbb      	ldrb	r3, [r7, #14]
 8008580:	2b80      	cmp	r3, #128	; 0x80
 8008582:	d008      	beq.n	8008596 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	88db      	ldrh	r3, [r3, #6]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d104      	bne.n	8008596 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800858c:	7bbb      	ldrb	r3, [r7, #14]
 800858e:	4619      	mov	r1, r3
 8008590:	6878      	ldr	r0, [r7, #4]
 8008592:	f002 fa4b 	bl	800aa2c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	f000 fccc 	bl	8008f34 <USBD_CtlSendStatus>

              break;
 800859c:	e004      	b.n	80085a8 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 800859e:	6839      	ldr	r1, [r7, #0]
 80085a0:	6878      	ldr	r0, [r7, #4]
 80085a2:	f000 fbff 	bl	8008da4 <USBD_CtlError>
              break;
 80085a6:	bf00      	nop
          }
          break;
 80085a8:	e0e0      	b.n	800876c <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085b0:	2b02      	cmp	r3, #2
 80085b2:	d002      	beq.n	80085ba <USBD_StdEPReq+0xf2>
 80085b4:	2b03      	cmp	r3, #3
 80085b6:	d015      	beq.n	80085e4 <USBD_StdEPReq+0x11c>
 80085b8:	e026      	b.n	8008608 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80085ba:	7bbb      	ldrb	r3, [r7, #14]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d00c      	beq.n	80085da <USBD_StdEPReq+0x112>
 80085c0:	7bbb      	ldrb	r3, [r7, #14]
 80085c2:	2b80      	cmp	r3, #128	; 0x80
 80085c4:	d009      	beq.n	80085da <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80085c6:	7bbb      	ldrb	r3, [r7, #14]
 80085c8:	4619      	mov	r1, r3
 80085ca:	6878      	ldr	r0, [r7, #4]
 80085cc:	f002 fa2e 	bl	800aa2c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80085d0:	2180      	movs	r1, #128	; 0x80
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	f002 fa2a 	bl	800aa2c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80085d8:	e01c      	b.n	8008614 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 80085da:	6839      	ldr	r1, [r7, #0]
 80085dc:	6878      	ldr	r0, [r7, #4]
 80085de:	f000 fbe1 	bl	8008da4 <USBD_CtlError>
              break;
 80085e2:	e017      	b.n	8008614 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	885b      	ldrh	r3, [r3, #2]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d112      	bne.n	8008612 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80085ec:	7bbb      	ldrb	r3, [r7, #14]
 80085ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d004      	beq.n	8008600 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80085f6:	7bbb      	ldrb	r3, [r7, #14]
 80085f8:	4619      	mov	r1, r3
 80085fa:	6878      	ldr	r0, [r7, #4]
 80085fc:	f002 fa35 	bl	800aa6a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008600:	6878      	ldr	r0, [r7, #4]
 8008602:	f000 fc97 	bl	8008f34 <USBD_CtlSendStatus>
              }
              break;
 8008606:	e004      	b.n	8008612 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8008608:	6839      	ldr	r1, [r7, #0]
 800860a:	6878      	ldr	r0, [r7, #4]
 800860c:	f000 fbca 	bl	8008da4 <USBD_CtlError>
              break;
 8008610:	e000      	b.n	8008614 <USBD_StdEPReq+0x14c>
              break;
 8008612:	bf00      	nop
          }
          break;
 8008614:	e0aa      	b.n	800876c <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800861c:	2b02      	cmp	r3, #2
 800861e:	d002      	beq.n	8008626 <USBD_StdEPReq+0x15e>
 8008620:	2b03      	cmp	r3, #3
 8008622:	d032      	beq.n	800868a <USBD_StdEPReq+0x1c2>
 8008624:	e097      	b.n	8008756 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008626:	7bbb      	ldrb	r3, [r7, #14]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d007      	beq.n	800863c <USBD_StdEPReq+0x174>
 800862c:	7bbb      	ldrb	r3, [r7, #14]
 800862e:	2b80      	cmp	r3, #128	; 0x80
 8008630:	d004      	beq.n	800863c <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8008632:	6839      	ldr	r1, [r7, #0]
 8008634:	6878      	ldr	r0, [r7, #4]
 8008636:	f000 fbb5 	bl	8008da4 <USBD_CtlError>
                break;
 800863a:	e091      	b.n	8008760 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800863c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008640:	2b00      	cmp	r3, #0
 8008642:	da0b      	bge.n	800865c <USBD_StdEPReq+0x194>
 8008644:	7bbb      	ldrb	r3, [r7, #14]
 8008646:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800864a:	4613      	mov	r3, r2
 800864c:	009b      	lsls	r3, r3, #2
 800864e:	4413      	add	r3, r2
 8008650:	009b      	lsls	r3, r3, #2
 8008652:	3310      	adds	r3, #16
 8008654:	687a      	ldr	r2, [r7, #4]
 8008656:	4413      	add	r3, r2
 8008658:	3304      	adds	r3, #4
 800865a:	e00b      	b.n	8008674 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800865c:	7bbb      	ldrb	r3, [r7, #14]
 800865e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008662:	4613      	mov	r3, r2
 8008664:	009b      	lsls	r3, r3, #2
 8008666:	4413      	add	r3, r2
 8008668:	009b      	lsls	r3, r3, #2
 800866a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800866e:	687a      	ldr	r2, [r7, #4]
 8008670:	4413      	add	r3, r2
 8008672:	3304      	adds	r3, #4
 8008674:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008676:	68bb      	ldr	r3, [r7, #8]
 8008678:	2200      	movs	r2, #0
 800867a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	2202      	movs	r2, #2
 8008680:	4619      	mov	r1, r3
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f000 fbf8 	bl	8008e78 <USBD_CtlSendData>
              break;
 8008688:	e06a      	b.n	8008760 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800868a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800868e:	2b00      	cmp	r3, #0
 8008690:	da11      	bge.n	80086b6 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008692:	7bbb      	ldrb	r3, [r7, #14]
 8008694:	f003 020f 	and.w	r2, r3, #15
 8008698:	6879      	ldr	r1, [r7, #4]
 800869a:	4613      	mov	r3, r2
 800869c:	009b      	lsls	r3, r3, #2
 800869e:	4413      	add	r3, r2
 80086a0:	009b      	lsls	r3, r3, #2
 80086a2:	440b      	add	r3, r1
 80086a4:	3318      	adds	r3, #24
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d117      	bne.n	80086dc <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 80086ac:	6839      	ldr	r1, [r7, #0]
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f000 fb78 	bl	8008da4 <USBD_CtlError>
                  break;
 80086b4:	e054      	b.n	8008760 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80086b6:	7bbb      	ldrb	r3, [r7, #14]
 80086b8:	f003 020f 	and.w	r2, r3, #15
 80086bc:	6879      	ldr	r1, [r7, #4]
 80086be:	4613      	mov	r3, r2
 80086c0:	009b      	lsls	r3, r3, #2
 80086c2:	4413      	add	r3, r2
 80086c4:	009b      	lsls	r3, r3, #2
 80086c6:	440b      	add	r3, r1
 80086c8:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d104      	bne.n	80086dc <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 80086d2:	6839      	ldr	r1, [r7, #0]
 80086d4:	6878      	ldr	r0, [r7, #4]
 80086d6:	f000 fb65 	bl	8008da4 <USBD_CtlError>
                  break;
 80086da:	e041      	b.n	8008760 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80086dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	da0b      	bge.n	80086fc <USBD_StdEPReq+0x234>
 80086e4:	7bbb      	ldrb	r3, [r7, #14]
 80086e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80086ea:	4613      	mov	r3, r2
 80086ec:	009b      	lsls	r3, r3, #2
 80086ee:	4413      	add	r3, r2
 80086f0:	009b      	lsls	r3, r3, #2
 80086f2:	3310      	adds	r3, #16
 80086f4:	687a      	ldr	r2, [r7, #4]
 80086f6:	4413      	add	r3, r2
 80086f8:	3304      	adds	r3, #4
 80086fa:	e00b      	b.n	8008714 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80086fc:	7bbb      	ldrb	r3, [r7, #14]
 80086fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008702:	4613      	mov	r3, r2
 8008704:	009b      	lsls	r3, r3, #2
 8008706:	4413      	add	r3, r2
 8008708:	009b      	lsls	r3, r3, #2
 800870a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800870e:	687a      	ldr	r2, [r7, #4]
 8008710:	4413      	add	r3, r2
 8008712:	3304      	adds	r3, #4
 8008714:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008716:	7bbb      	ldrb	r3, [r7, #14]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d002      	beq.n	8008722 <USBD_StdEPReq+0x25a>
 800871c:	7bbb      	ldrb	r3, [r7, #14]
 800871e:	2b80      	cmp	r3, #128	; 0x80
 8008720:	d103      	bne.n	800872a <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8008722:	68bb      	ldr	r3, [r7, #8]
 8008724:	2200      	movs	r2, #0
 8008726:	601a      	str	r2, [r3, #0]
 8008728:	e00e      	b.n	8008748 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800872a:	7bbb      	ldrb	r3, [r7, #14]
 800872c:	4619      	mov	r1, r3
 800872e:	6878      	ldr	r0, [r7, #4]
 8008730:	f002 f9ba 	bl	800aaa8 <USBD_LL_IsStallEP>
 8008734:	4603      	mov	r3, r0
 8008736:	2b00      	cmp	r3, #0
 8008738:	d003      	beq.n	8008742 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 800873a:	68bb      	ldr	r3, [r7, #8]
 800873c:	2201      	movs	r2, #1
 800873e:	601a      	str	r2, [r3, #0]
 8008740:	e002      	b.n	8008748 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8008742:	68bb      	ldr	r3, [r7, #8]
 8008744:	2200      	movs	r2, #0
 8008746:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008748:	68bb      	ldr	r3, [r7, #8]
 800874a:	2202      	movs	r2, #2
 800874c:	4619      	mov	r1, r3
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	f000 fb92 	bl	8008e78 <USBD_CtlSendData>
              break;
 8008754:	e004      	b.n	8008760 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8008756:	6839      	ldr	r1, [r7, #0]
 8008758:	6878      	ldr	r0, [r7, #4]
 800875a:	f000 fb23 	bl	8008da4 <USBD_CtlError>
              break;
 800875e:	bf00      	nop
          }
          break;
 8008760:	e004      	b.n	800876c <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8008762:	6839      	ldr	r1, [r7, #0]
 8008764:	6878      	ldr	r0, [r7, #4]
 8008766:	f000 fb1d 	bl	8008da4 <USBD_CtlError>
          break;
 800876a:	bf00      	nop
      }
      break;
 800876c:	e004      	b.n	8008778 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 800876e:	6839      	ldr	r1, [r7, #0]
 8008770:	6878      	ldr	r0, [r7, #4]
 8008772:	f000 fb17 	bl	8008da4 <USBD_CtlError>
      break;
 8008776:	bf00      	nop
  }

  return ret;
 8008778:	7bfb      	ldrb	r3, [r7, #15]
}
 800877a:	4618      	mov	r0, r3
 800877c:	3710      	adds	r7, #16
 800877e:	46bd      	mov	sp, r7
 8008780:	bd80      	pop	{r7, pc}
	...

08008784 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b084      	sub	sp, #16
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
 800878c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800878e:	2300      	movs	r3, #0
 8008790:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008792:	2300      	movs	r3, #0
 8008794:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008796:	2300      	movs	r3, #0
 8008798:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	885b      	ldrh	r3, [r3, #2]
 800879e:	0a1b      	lsrs	r3, r3, #8
 80087a0:	b29b      	uxth	r3, r3
 80087a2:	3b01      	subs	r3, #1
 80087a4:	2b06      	cmp	r3, #6
 80087a6:	f200 8128 	bhi.w	80089fa <USBD_GetDescriptor+0x276>
 80087aa:	a201      	add	r2, pc, #4	; (adr r2, 80087b0 <USBD_GetDescriptor+0x2c>)
 80087ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087b0:	080087cd 	.word	0x080087cd
 80087b4:	080087e5 	.word	0x080087e5
 80087b8:	08008825 	.word	0x08008825
 80087bc:	080089fb 	.word	0x080089fb
 80087c0:	080089fb 	.word	0x080089fb
 80087c4:	0800899b 	.word	0x0800899b
 80087c8:	080089c7 	.word	0x080089c7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	687a      	ldr	r2, [r7, #4]
 80087d6:	7c12      	ldrb	r2, [r2, #16]
 80087d8:	f107 0108 	add.w	r1, r7, #8
 80087dc:	4610      	mov	r0, r2
 80087de:	4798      	blx	r3
 80087e0:	60f8      	str	r0, [r7, #12]
      break;
 80087e2:	e112      	b.n	8008a0a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	7c1b      	ldrb	r3, [r3, #16]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d10d      	bne.n	8008808 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087f4:	f107 0208 	add.w	r2, r7, #8
 80087f8:	4610      	mov	r0, r2
 80087fa:	4798      	blx	r3
 80087fc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	3301      	adds	r3, #1
 8008802:	2202      	movs	r2, #2
 8008804:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008806:	e100      	b.n	8008a0a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800880e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008810:	f107 0208 	add.w	r2, r7, #8
 8008814:	4610      	mov	r0, r2
 8008816:	4798      	blx	r3
 8008818:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	3301      	adds	r3, #1
 800881e:	2202      	movs	r2, #2
 8008820:	701a      	strb	r2, [r3, #0]
      break;
 8008822:	e0f2      	b.n	8008a0a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	885b      	ldrh	r3, [r3, #2]
 8008828:	b2db      	uxtb	r3, r3
 800882a:	2b05      	cmp	r3, #5
 800882c:	f200 80ac 	bhi.w	8008988 <USBD_GetDescriptor+0x204>
 8008830:	a201      	add	r2, pc, #4	; (adr r2, 8008838 <USBD_GetDescriptor+0xb4>)
 8008832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008836:	bf00      	nop
 8008838:	08008851 	.word	0x08008851
 800883c:	08008885 	.word	0x08008885
 8008840:	080088b9 	.word	0x080088b9
 8008844:	080088ed 	.word	0x080088ed
 8008848:	08008921 	.word	0x08008921
 800884c:	08008955 	.word	0x08008955
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008856:	685b      	ldr	r3, [r3, #4]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d00b      	beq.n	8008874 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008862:	685b      	ldr	r3, [r3, #4]
 8008864:	687a      	ldr	r2, [r7, #4]
 8008866:	7c12      	ldrb	r2, [r2, #16]
 8008868:	f107 0108 	add.w	r1, r7, #8
 800886c:	4610      	mov	r0, r2
 800886e:	4798      	blx	r3
 8008870:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008872:	e091      	b.n	8008998 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008874:	6839      	ldr	r1, [r7, #0]
 8008876:	6878      	ldr	r0, [r7, #4]
 8008878:	f000 fa94 	bl	8008da4 <USBD_CtlError>
            err++;
 800887c:	7afb      	ldrb	r3, [r7, #11]
 800887e:	3301      	adds	r3, #1
 8008880:	72fb      	strb	r3, [r7, #11]
          break;
 8008882:	e089      	b.n	8008998 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800888a:	689b      	ldr	r3, [r3, #8]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d00b      	beq.n	80088a8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008896:	689b      	ldr	r3, [r3, #8]
 8008898:	687a      	ldr	r2, [r7, #4]
 800889a:	7c12      	ldrb	r2, [r2, #16]
 800889c:	f107 0108 	add.w	r1, r7, #8
 80088a0:	4610      	mov	r0, r2
 80088a2:	4798      	blx	r3
 80088a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80088a6:	e077      	b.n	8008998 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80088a8:	6839      	ldr	r1, [r7, #0]
 80088aa:	6878      	ldr	r0, [r7, #4]
 80088ac:	f000 fa7a 	bl	8008da4 <USBD_CtlError>
            err++;
 80088b0:	7afb      	ldrb	r3, [r7, #11]
 80088b2:	3301      	adds	r3, #1
 80088b4:	72fb      	strb	r3, [r7, #11]
          break;
 80088b6:	e06f      	b.n	8008998 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80088be:	68db      	ldr	r3, [r3, #12]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d00b      	beq.n	80088dc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80088ca:	68db      	ldr	r3, [r3, #12]
 80088cc:	687a      	ldr	r2, [r7, #4]
 80088ce:	7c12      	ldrb	r2, [r2, #16]
 80088d0:	f107 0108 	add.w	r1, r7, #8
 80088d4:	4610      	mov	r0, r2
 80088d6:	4798      	blx	r3
 80088d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80088da:	e05d      	b.n	8008998 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80088dc:	6839      	ldr	r1, [r7, #0]
 80088de:	6878      	ldr	r0, [r7, #4]
 80088e0:	f000 fa60 	bl	8008da4 <USBD_CtlError>
            err++;
 80088e4:	7afb      	ldrb	r3, [r7, #11]
 80088e6:	3301      	adds	r3, #1
 80088e8:	72fb      	strb	r3, [r7, #11]
          break;
 80088ea:	e055      	b.n	8008998 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80088f2:	691b      	ldr	r3, [r3, #16]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d00b      	beq.n	8008910 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80088fe:	691b      	ldr	r3, [r3, #16]
 8008900:	687a      	ldr	r2, [r7, #4]
 8008902:	7c12      	ldrb	r2, [r2, #16]
 8008904:	f107 0108 	add.w	r1, r7, #8
 8008908:	4610      	mov	r0, r2
 800890a:	4798      	blx	r3
 800890c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800890e:	e043      	b.n	8008998 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008910:	6839      	ldr	r1, [r7, #0]
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	f000 fa46 	bl	8008da4 <USBD_CtlError>
            err++;
 8008918:	7afb      	ldrb	r3, [r7, #11]
 800891a:	3301      	adds	r3, #1
 800891c:	72fb      	strb	r3, [r7, #11]
          break;
 800891e:	e03b      	b.n	8008998 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008926:	695b      	ldr	r3, [r3, #20]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d00b      	beq.n	8008944 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008932:	695b      	ldr	r3, [r3, #20]
 8008934:	687a      	ldr	r2, [r7, #4]
 8008936:	7c12      	ldrb	r2, [r2, #16]
 8008938:	f107 0108 	add.w	r1, r7, #8
 800893c:	4610      	mov	r0, r2
 800893e:	4798      	blx	r3
 8008940:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008942:	e029      	b.n	8008998 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008944:	6839      	ldr	r1, [r7, #0]
 8008946:	6878      	ldr	r0, [r7, #4]
 8008948:	f000 fa2c 	bl	8008da4 <USBD_CtlError>
            err++;
 800894c:	7afb      	ldrb	r3, [r7, #11]
 800894e:	3301      	adds	r3, #1
 8008950:	72fb      	strb	r3, [r7, #11]
          break;
 8008952:	e021      	b.n	8008998 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800895a:	699b      	ldr	r3, [r3, #24]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d00b      	beq.n	8008978 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008966:	699b      	ldr	r3, [r3, #24]
 8008968:	687a      	ldr	r2, [r7, #4]
 800896a:	7c12      	ldrb	r2, [r2, #16]
 800896c:	f107 0108 	add.w	r1, r7, #8
 8008970:	4610      	mov	r0, r2
 8008972:	4798      	blx	r3
 8008974:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008976:	e00f      	b.n	8008998 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008978:	6839      	ldr	r1, [r7, #0]
 800897a:	6878      	ldr	r0, [r7, #4]
 800897c:	f000 fa12 	bl	8008da4 <USBD_CtlError>
            err++;
 8008980:	7afb      	ldrb	r3, [r7, #11]
 8008982:	3301      	adds	r3, #1
 8008984:	72fb      	strb	r3, [r7, #11]
          break;
 8008986:	e007      	b.n	8008998 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008988:	6839      	ldr	r1, [r7, #0]
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	f000 fa0a 	bl	8008da4 <USBD_CtlError>
          err++;
 8008990:	7afb      	ldrb	r3, [r7, #11]
 8008992:	3301      	adds	r3, #1
 8008994:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8008996:	e038      	b.n	8008a0a <USBD_GetDescriptor+0x286>
 8008998:	e037      	b.n	8008a0a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	7c1b      	ldrb	r3, [r3, #16]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d109      	bne.n	80089b6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089aa:	f107 0208 	add.w	r2, r7, #8
 80089ae:	4610      	mov	r0, r2
 80089b0:	4798      	blx	r3
 80089b2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80089b4:	e029      	b.n	8008a0a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80089b6:	6839      	ldr	r1, [r7, #0]
 80089b8:	6878      	ldr	r0, [r7, #4]
 80089ba:	f000 f9f3 	bl	8008da4 <USBD_CtlError>
        err++;
 80089be:	7afb      	ldrb	r3, [r7, #11]
 80089c0:	3301      	adds	r3, #1
 80089c2:	72fb      	strb	r3, [r7, #11]
      break;
 80089c4:	e021      	b.n	8008a0a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	7c1b      	ldrb	r3, [r3, #16]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d10d      	bne.n	80089ea <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089d6:	f107 0208 	add.w	r2, r7, #8
 80089da:	4610      	mov	r0, r2
 80089dc:	4798      	blx	r3
 80089de:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	3301      	adds	r3, #1
 80089e4:	2207      	movs	r2, #7
 80089e6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80089e8:	e00f      	b.n	8008a0a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80089ea:	6839      	ldr	r1, [r7, #0]
 80089ec:	6878      	ldr	r0, [r7, #4]
 80089ee:	f000 f9d9 	bl	8008da4 <USBD_CtlError>
        err++;
 80089f2:	7afb      	ldrb	r3, [r7, #11]
 80089f4:	3301      	adds	r3, #1
 80089f6:	72fb      	strb	r3, [r7, #11]
      break;
 80089f8:	e007      	b.n	8008a0a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80089fa:	6839      	ldr	r1, [r7, #0]
 80089fc:	6878      	ldr	r0, [r7, #4]
 80089fe:	f000 f9d1 	bl	8008da4 <USBD_CtlError>
      err++;
 8008a02:	7afb      	ldrb	r3, [r7, #11]
 8008a04:	3301      	adds	r3, #1
 8008a06:	72fb      	strb	r3, [r7, #11]
      break;
 8008a08:	bf00      	nop
  }

  if (err != 0U)
 8008a0a:	7afb      	ldrb	r3, [r7, #11]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d11c      	bne.n	8008a4a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008a10:	893b      	ldrh	r3, [r7, #8]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d011      	beq.n	8008a3a <USBD_GetDescriptor+0x2b6>
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	88db      	ldrh	r3, [r3, #6]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d00d      	beq.n	8008a3a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	88da      	ldrh	r2, [r3, #6]
 8008a22:	893b      	ldrh	r3, [r7, #8]
 8008a24:	4293      	cmp	r3, r2
 8008a26:	bf28      	it	cs
 8008a28:	4613      	movcs	r3, r2
 8008a2a:	b29b      	uxth	r3, r3
 8008a2c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008a2e:	893b      	ldrh	r3, [r7, #8]
 8008a30:	461a      	mov	r2, r3
 8008a32:	68f9      	ldr	r1, [r7, #12]
 8008a34:	6878      	ldr	r0, [r7, #4]
 8008a36:	f000 fa1f 	bl	8008e78 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	88db      	ldrh	r3, [r3, #6]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d104      	bne.n	8008a4c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8008a42:	6878      	ldr	r0, [r7, #4]
 8008a44:	f000 fa76 	bl	8008f34 <USBD_CtlSendStatus>
 8008a48:	e000      	b.n	8008a4c <USBD_GetDescriptor+0x2c8>
    return;
 8008a4a:	bf00      	nop
    }
  }
}
 8008a4c:	3710      	adds	r7, #16
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	bd80      	pop	{r7, pc}
 8008a52:	bf00      	nop

08008a54 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b084      	sub	sp, #16
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
 8008a5c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	889b      	ldrh	r3, [r3, #4]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d130      	bne.n	8008ac8 <USBD_SetAddress+0x74>
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	88db      	ldrh	r3, [r3, #6]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d12c      	bne.n	8008ac8 <USBD_SetAddress+0x74>
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	885b      	ldrh	r3, [r3, #2]
 8008a72:	2b7f      	cmp	r3, #127	; 0x7f
 8008a74:	d828      	bhi.n	8008ac8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	885b      	ldrh	r3, [r3, #2]
 8008a7a:	b2db      	uxtb	r3, r3
 8008a7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a80:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a88:	2b03      	cmp	r3, #3
 8008a8a:	d104      	bne.n	8008a96 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008a8c:	6839      	ldr	r1, [r7, #0]
 8008a8e:	6878      	ldr	r0, [r7, #4]
 8008a90:	f000 f988 	bl	8008da4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a94:	e01c      	b.n	8008ad0 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	7bfa      	ldrb	r2, [r7, #15]
 8008a9a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008a9e:	7bfb      	ldrb	r3, [r7, #15]
 8008aa0:	4619      	mov	r1, r3
 8008aa2:	6878      	ldr	r0, [r7, #4]
 8008aa4:	f002 f82c 	bl	800ab00 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008aa8:	6878      	ldr	r0, [r7, #4]
 8008aaa:	f000 fa43 	bl	8008f34 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008aae:	7bfb      	ldrb	r3, [r7, #15]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d004      	beq.n	8008abe <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2202      	movs	r2, #2
 8008ab8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008abc:	e008      	b.n	8008ad0 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2201      	movs	r2, #1
 8008ac2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ac6:	e003      	b.n	8008ad0 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008ac8:	6839      	ldr	r1, [r7, #0]
 8008aca:	6878      	ldr	r0, [r7, #4]
 8008acc:	f000 f96a 	bl	8008da4 <USBD_CtlError>
  }
}
 8008ad0:	bf00      	nop
 8008ad2:	3710      	adds	r7, #16
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	bd80      	pop	{r7, pc}

08008ad8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b082      	sub	sp, #8
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
 8008ae0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	885b      	ldrh	r3, [r3, #2]
 8008ae6:	b2da      	uxtb	r2, r3
 8008ae8:	4b41      	ldr	r3, [pc, #260]	; (8008bf0 <USBD_SetConfig+0x118>)
 8008aea:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008aec:	4b40      	ldr	r3, [pc, #256]	; (8008bf0 <USBD_SetConfig+0x118>)
 8008aee:	781b      	ldrb	r3, [r3, #0]
 8008af0:	2b01      	cmp	r3, #1
 8008af2:	d904      	bls.n	8008afe <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008af4:	6839      	ldr	r1, [r7, #0]
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	f000 f954 	bl	8008da4 <USBD_CtlError>
 8008afc:	e075      	b.n	8008bea <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b04:	2b02      	cmp	r3, #2
 8008b06:	d002      	beq.n	8008b0e <USBD_SetConfig+0x36>
 8008b08:	2b03      	cmp	r3, #3
 8008b0a:	d023      	beq.n	8008b54 <USBD_SetConfig+0x7c>
 8008b0c:	e062      	b.n	8008bd4 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008b0e:	4b38      	ldr	r3, [pc, #224]	; (8008bf0 <USBD_SetConfig+0x118>)
 8008b10:	781b      	ldrb	r3, [r3, #0]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d01a      	beq.n	8008b4c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8008b16:	4b36      	ldr	r3, [pc, #216]	; (8008bf0 <USBD_SetConfig+0x118>)
 8008b18:	781b      	ldrb	r3, [r3, #0]
 8008b1a:	461a      	mov	r2, r3
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2203      	movs	r2, #3
 8008b24:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008b28:	4b31      	ldr	r3, [pc, #196]	; (8008bf0 <USBD_SetConfig+0x118>)
 8008b2a:	781b      	ldrb	r3, [r3, #0]
 8008b2c:	4619      	mov	r1, r3
 8008b2e:	6878      	ldr	r0, [r7, #4]
 8008b30:	f7ff f9f3 	bl	8007f1a <USBD_SetClassConfig>
 8008b34:	4603      	mov	r3, r0
 8008b36:	2b02      	cmp	r3, #2
 8008b38:	d104      	bne.n	8008b44 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8008b3a:	6839      	ldr	r1, [r7, #0]
 8008b3c:	6878      	ldr	r0, [r7, #4]
 8008b3e:	f000 f931 	bl	8008da4 <USBD_CtlError>
            return;
 8008b42:	e052      	b.n	8008bea <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008b44:	6878      	ldr	r0, [r7, #4]
 8008b46:	f000 f9f5 	bl	8008f34 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008b4a:	e04e      	b.n	8008bea <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008b4c:	6878      	ldr	r0, [r7, #4]
 8008b4e:	f000 f9f1 	bl	8008f34 <USBD_CtlSendStatus>
        break;
 8008b52:	e04a      	b.n	8008bea <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008b54:	4b26      	ldr	r3, [pc, #152]	; (8008bf0 <USBD_SetConfig+0x118>)
 8008b56:	781b      	ldrb	r3, [r3, #0]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d112      	bne.n	8008b82 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2202      	movs	r2, #2
 8008b60:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8008b64:	4b22      	ldr	r3, [pc, #136]	; (8008bf0 <USBD_SetConfig+0x118>)
 8008b66:	781b      	ldrb	r3, [r3, #0]
 8008b68:	461a      	mov	r2, r3
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8008b6e:	4b20      	ldr	r3, [pc, #128]	; (8008bf0 <USBD_SetConfig+0x118>)
 8008b70:	781b      	ldrb	r3, [r3, #0]
 8008b72:	4619      	mov	r1, r3
 8008b74:	6878      	ldr	r0, [r7, #4]
 8008b76:	f7ff f9ef 	bl	8007f58 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008b7a:	6878      	ldr	r0, [r7, #4]
 8008b7c:	f000 f9da 	bl	8008f34 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008b80:	e033      	b.n	8008bea <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8008b82:	4b1b      	ldr	r3, [pc, #108]	; (8008bf0 <USBD_SetConfig+0x118>)
 8008b84:	781b      	ldrb	r3, [r3, #0]
 8008b86:	461a      	mov	r2, r3
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	685b      	ldr	r3, [r3, #4]
 8008b8c:	429a      	cmp	r2, r3
 8008b8e:	d01d      	beq.n	8008bcc <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	685b      	ldr	r3, [r3, #4]
 8008b94:	b2db      	uxtb	r3, r3
 8008b96:	4619      	mov	r1, r3
 8008b98:	6878      	ldr	r0, [r7, #4]
 8008b9a:	f7ff f9dd 	bl	8007f58 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008b9e:	4b14      	ldr	r3, [pc, #80]	; (8008bf0 <USBD_SetConfig+0x118>)
 8008ba0:	781b      	ldrb	r3, [r3, #0]
 8008ba2:	461a      	mov	r2, r3
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008ba8:	4b11      	ldr	r3, [pc, #68]	; (8008bf0 <USBD_SetConfig+0x118>)
 8008baa:	781b      	ldrb	r3, [r3, #0]
 8008bac:	4619      	mov	r1, r3
 8008bae:	6878      	ldr	r0, [r7, #4]
 8008bb0:	f7ff f9b3 	bl	8007f1a <USBD_SetClassConfig>
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	2b02      	cmp	r3, #2
 8008bb8:	d104      	bne.n	8008bc4 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8008bba:	6839      	ldr	r1, [r7, #0]
 8008bbc:	6878      	ldr	r0, [r7, #4]
 8008bbe:	f000 f8f1 	bl	8008da4 <USBD_CtlError>
            return;
 8008bc2:	e012      	b.n	8008bea <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008bc4:	6878      	ldr	r0, [r7, #4]
 8008bc6:	f000 f9b5 	bl	8008f34 <USBD_CtlSendStatus>
        break;
 8008bca:	e00e      	b.n	8008bea <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008bcc:	6878      	ldr	r0, [r7, #4]
 8008bce:	f000 f9b1 	bl	8008f34 <USBD_CtlSendStatus>
        break;
 8008bd2:	e00a      	b.n	8008bea <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008bd4:	6839      	ldr	r1, [r7, #0]
 8008bd6:	6878      	ldr	r0, [r7, #4]
 8008bd8:	f000 f8e4 	bl	8008da4 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008bdc:	4b04      	ldr	r3, [pc, #16]	; (8008bf0 <USBD_SetConfig+0x118>)
 8008bde:	781b      	ldrb	r3, [r3, #0]
 8008be0:	4619      	mov	r1, r3
 8008be2:	6878      	ldr	r0, [r7, #4]
 8008be4:	f7ff f9b8 	bl	8007f58 <USBD_ClrClassConfig>
        break;
 8008be8:	bf00      	nop
    }
  }
}
 8008bea:	3708      	adds	r7, #8
 8008bec:	46bd      	mov	sp, r7
 8008bee:	bd80      	pop	{r7, pc}
 8008bf0:	200003f0 	.word	0x200003f0

08008bf4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b082      	sub	sp, #8
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
 8008bfc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	88db      	ldrh	r3, [r3, #6]
 8008c02:	2b01      	cmp	r3, #1
 8008c04:	d004      	beq.n	8008c10 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008c06:	6839      	ldr	r1, [r7, #0]
 8008c08:	6878      	ldr	r0, [r7, #4]
 8008c0a:	f000 f8cb 	bl	8008da4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008c0e:	e021      	b.n	8008c54 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c16:	2b01      	cmp	r3, #1
 8008c18:	db17      	blt.n	8008c4a <USBD_GetConfig+0x56>
 8008c1a:	2b02      	cmp	r3, #2
 8008c1c:	dd02      	ble.n	8008c24 <USBD_GetConfig+0x30>
 8008c1e:	2b03      	cmp	r3, #3
 8008c20:	d00b      	beq.n	8008c3a <USBD_GetConfig+0x46>
 8008c22:	e012      	b.n	8008c4a <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2200      	movs	r2, #0
 8008c28:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	3308      	adds	r3, #8
 8008c2e:	2201      	movs	r2, #1
 8008c30:	4619      	mov	r1, r3
 8008c32:	6878      	ldr	r0, [r7, #4]
 8008c34:	f000 f920 	bl	8008e78 <USBD_CtlSendData>
        break;
 8008c38:	e00c      	b.n	8008c54 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	3304      	adds	r3, #4
 8008c3e:	2201      	movs	r2, #1
 8008c40:	4619      	mov	r1, r3
 8008c42:	6878      	ldr	r0, [r7, #4]
 8008c44:	f000 f918 	bl	8008e78 <USBD_CtlSendData>
        break;
 8008c48:	e004      	b.n	8008c54 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8008c4a:	6839      	ldr	r1, [r7, #0]
 8008c4c:	6878      	ldr	r0, [r7, #4]
 8008c4e:	f000 f8a9 	bl	8008da4 <USBD_CtlError>
        break;
 8008c52:	bf00      	nop
}
 8008c54:	bf00      	nop
 8008c56:	3708      	adds	r7, #8
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	bd80      	pop	{r7, pc}

08008c5c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b082      	sub	sp, #8
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
 8008c64:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c6c:	3b01      	subs	r3, #1
 8008c6e:	2b02      	cmp	r3, #2
 8008c70:	d81e      	bhi.n	8008cb0 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	88db      	ldrh	r3, [r3, #6]
 8008c76:	2b02      	cmp	r3, #2
 8008c78:	d004      	beq.n	8008c84 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008c7a:	6839      	ldr	r1, [r7, #0]
 8008c7c:	6878      	ldr	r0, [r7, #4]
 8008c7e:	f000 f891 	bl	8008da4 <USBD_CtlError>
        break;
 8008c82:	e01a      	b.n	8008cba <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2201      	movs	r2, #1
 8008c88:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d005      	beq.n	8008ca0 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	68db      	ldr	r3, [r3, #12]
 8008c98:	f043 0202 	orr.w	r2, r3, #2
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	330c      	adds	r3, #12
 8008ca4:	2202      	movs	r2, #2
 8008ca6:	4619      	mov	r1, r3
 8008ca8:	6878      	ldr	r0, [r7, #4]
 8008caa:	f000 f8e5 	bl	8008e78 <USBD_CtlSendData>
      break;
 8008cae:	e004      	b.n	8008cba <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8008cb0:	6839      	ldr	r1, [r7, #0]
 8008cb2:	6878      	ldr	r0, [r7, #4]
 8008cb4:	f000 f876 	bl	8008da4 <USBD_CtlError>
      break;
 8008cb8:	bf00      	nop
  }
}
 8008cba:	bf00      	nop
 8008cbc:	3708      	adds	r7, #8
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	bd80      	pop	{r7, pc}

08008cc2 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008cc2:	b580      	push	{r7, lr}
 8008cc4:	b082      	sub	sp, #8
 8008cc6:	af00      	add	r7, sp, #0
 8008cc8:	6078      	str	r0, [r7, #4]
 8008cca:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	885b      	ldrh	r3, [r3, #2]
 8008cd0:	2b01      	cmp	r3, #1
 8008cd2:	d106      	bne.n	8008ce2 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2201      	movs	r2, #1
 8008cd8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8008cdc:	6878      	ldr	r0, [r7, #4]
 8008cde:	f000 f929 	bl	8008f34 <USBD_CtlSendStatus>
  }
}
 8008ce2:	bf00      	nop
 8008ce4:	3708      	adds	r7, #8
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	bd80      	pop	{r7, pc}

08008cea <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008cea:	b580      	push	{r7, lr}
 8008cec:	b082      	sub	sp, #8
 8008cee:	af00      	add	r7, sp, #0
 8008cf0:	6078      	str	r0, [r7, #4]
 8008cf2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cfa:	3b01      	subs	r3, #1
 8008cfc:	2b02      	cmp	r3, #2
 8008cfe:	d80b      	bhi.n	8008d18 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	885b      	ldrh	r3, [r3, #2]
 8008d04:	2b01      	cmp	r3, #1
 8008d06:	d10c      	bne.n	8008d22 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8008d10:	6878      	ldr	r0, [r7, #4]
 8008d12:	f000 f90f 	bl	8008f34 <USBD_CtlSendStatus>
      }
      break;
 8008d16:	e004      	b.n	8008d22 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008d18:	6839      	ldr	r1, [r7, #0]
 8008d1a:	6878      	ldr	r0, [r7, #4]
 8008d1c:	f000 f842 	bl	8008da4 <USBD_CtlError>
      break;
 8008d20:	e000      	b.n	8008d24 <USBD_ClrFeature+0x3a>
      break;
 8008d22:	bf00      	nop
  }
}
 8008d24:	bf00      	nop
 8008d26:	3708      	adds	r7, #8
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	bd80      	pop	{r7, pc}

08008d2c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008d2c:	b480      	push	{r7}
 8008d2e:	b083      	sub	sp, #12
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
 8008d34:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	781a      	ldrb	r2, [r3, #0]
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008d3e:	683b      	ldr	r3, [r7, #0]
 8008d40:	785a      	ldrb	r2, [r3, #1]
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	3302      	adds	r3, #2
 8008d4a:	781b      	ldrb	r3, [r3, #0]
 8008d4c:	b29a      	uxth	r2, r3
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	3303      	adds	r3, #3
 8008d52:	781b      	ldrb	r3, [r3, #0]
 8008d54:	b29b      	uxth	r3, r3
 8008d56:	021b      	lsls	r3, r3, #8
 8008d58:	b29b      	uxth	r3, r3
 8008d5a:	4413      	add	r3, r2
 8008d5c:	b29a      	uxth	r2, r3
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	3304      	adds	r3, #4
 8008d66:	781b      	ldrb	r3, [r3, #0]
 8008d68:	b29a      	uxth	r2, r3
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	3305      	adds	r3, #5
 8008d6e:	781b      	ldrb	r3, [r3, #0]
 8008d70:	b29b      	uxth	r3, r3
 8008d72:	021b      	lsls	r3, r3, #8
 8008d74:	b29b      	uxth	r3, r3
 8008d76:	4413      	add	r3, r2
 8008d78:	b29a      	uxth	r2, r3
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	3306      	adds	r3, #6
 8008d82:	781b      	ldrb	r3, [r3, #0]
 8008d84:	b29a      	uxth	r2, r3
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	3307      	adds	r3, #7
 8008d8a:	781b      	ldrb	r3, [r3, #0]
 8008d8c:	b29b      	uxth	r3, r3
 8008d8e:	021b      	lsls	r3, r3, #8
 8008d90:	b29b      	uxth	r3, r3
 8008d92:	4413      	add	r3, r2
 8008d94:	b29a      	uxth	r2, r3
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	80da      	strh	r2, [r3, #6]

}
 8008d9a:	bf00      	nop
 8008d9c:	370c      	adds	r7, #12
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	bc80      	pop	{r7}
 8008da2:	4770      	bx	lr

08008da4 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b082      	sub	sp, #8
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
 8008dac:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008dae:	2180      	movs	r1, #128	; 0x80
 8008db0:	6878      	ldr	r0, [r7, #4]
 8008db2:	f001 fe3b 	bl	800aa2c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008db6:	2100      	movs	r1, #0
 8008db8:	6878      	ldr	r0, [r7, #4]
 8008dba:	f001 fe37 	bl	800aa2c <USBD_LL_StallEP>
}
 8008dbe:	bf00      	nop
 8008dc0:	3708      	adds	r7, #8
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	bd80      	pop	{r7, pc}

08008dc6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008dc6:	b580      	push	{r7, lr}
 8008dc8:	b086      	sub	sp, #24
 8008dca:	af00      	add	r7, sp, #0
 8008dcc:	60f8      	str	r0, [r7, #12]
 8008dce:	60b9      	str	r1, [r7, #8]
 8008dd0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d032      	beq.n	8008e42 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008ddc:	68f8      	ldr	r0, [r7, #12]
 8008dde:	f000 f834 	bl	8008e4a <USBD_GetLen>
 8008de2:	4603      	mov	r3, r0
 8008de4:	3301      	adds	r3, #1
 8008de6:	b29b      	uxth	r3, r3
 8008de8:	005b      	lsls	r3, r3, #1
 8008dea:	b29a      	uxth	r2, r3
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008df0:	7dfb      	ldrb	r3, [r7, #23]
 8008df2:	1c5a      	adds	r2, r3, #1
 8008df4:	75fa      	strb	r2, [r7, #23]
 8008df6:	461a      	mov	r2, r3
 8008df8:	68bb      	ldr	r3, [r7, #8]
 8008dfa:	4413      	add	r3, r2
 8008dfc:	687a      	ldr	r2, [r7, #4]
 8008dfe:	7812      	ldrb	r2, [r2, #0]
 8008e00:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008e02:	7dfb      	ldrb	r3, [r7, #23]
 8008e04:	1c5a      	adds	r2, r3, #1
 8008e06:	75fa      	strb	r2, [r7, #23]
 8008e08:	461a      	mov	r2, r3
 8008e0a:	68bb      	ldr	r3, [r7, #8]
 8008e0c:	4413      	add	r3, r2
 8008e0e:	2203      	movs	r2, #3
 8008e10:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008e12:	e012      	b.n	8008e3a <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008e14:	7dfb      	ldrb	r3, [r7, #23]
 8008e16:	1c5a      	adds	r2, r3, #1
 8008e18:	75fa      	strb	r2, [r7, #23]
 8008e1a:	461a      	mov	r2, r3
 8008e1c:	68bb      	ldr	r3, [r7, #8]
 8008e1e:	441a      	add	r2, r3
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	1c59      	adds	r1, r3, #1
 8008e24:	60f9      	str	r1, [r7, #12]
 8008e26:	781b      	ldrb	r3, [r3, #0]
 8008e28:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008e2a:	7dfb      	ldrb	r3, [r7, #23]
 8008e2c:	1c5a      	adds	r2, r3, #1
 8008e2e:	75fa      	strb	r2, [r7, #23]
 8008e30:	461a      	mov	r2, r3
 8008e32:	68bb      	ldr	r3, [r7, #8]
 8008e34:	4413      	add	r3, r2
 8008e36:	2200      	movs	r2, #0
 8008e38:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	781b      	ldrb	r3, [r3, #0]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d1e8      	bne.n	8008e14 <USBD_GetString+0x4e>
    }
  }
}
 8008e42:	bf00      	nop
 8008e44:	3718      	adds	r7, #24
 8008e46:	46bd      	mov	sp, r7
 8008e48:	bd80      	pop	{r7, pc}

08008e4a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008e4a:	b480      	push	{r7}
 8008e4c:	b085      	sub	sp, #20
 8008e4e:	af00      	add	r7, sp, #0
 8008e50:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008e52:	2300      	movs	r3, #0
 8008e54:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008e56:	e005      	b.n	8008e64 <USBD_GetLen+0x1a>
  {
    len++;
 8008e58:	7bfb      	ldrb	r3, [r7, #15]
 8008e5a:	3301      	adds	r3, #1
 8008e5c:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	3301      	adds	r3, #1
 8008e62:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	781b      	ldrb	r3, [r3, #0]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d1f5      	bne.n	8008e58 <USBD_GetLen+0xe>
  }

  return len;
 8008e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e6e:	4618      	mov	r0, r3
 8008e70:	3714      	adds	r7, #20
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bc80      	pop	{r7}
 8008e76:	4770      	bx	lr

08008e78 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b084      	sub	sp, #16
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	60f8      	str	r0, [r7, #12]
 8008e80:	60b9      	str	r1, [r7, #8]
 8008e82:	4613      	mov	r3, r2
 8008e84:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	2202      	movs	r2, #2
 8008e8a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008e8e:	88fa      	ldrh	r2, [r7, #6]
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008e94:	88fa      	ldrh	r2, [r7, #6]
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008e9a:	88fb      	ldrh	r3, [r7, #6]
 8008e9c:	68ba      	ldr	r2, [r7, #8]
 8008e9e:	2100      	movs	r1, #0
 8008ea0:	68f8      	ldr	r0, [r7, #12]
 8008ea2:	f001 fe4c 	bl	800ab3e <USBD_LL_Transmit>

  return USBD_OK;
 8008ea6:	2300      	movs	r3, #0
}
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	3710      	adds	r7, #16
 8008eac:	46bd      	mov	sp, r7
 8008eae:	bd80      	pop	{r7, pc}

08008eb0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b084      	sub	sp, #16
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	60f8      	str	r0, [r7, #12]
 8008eb8:	60b9      	str	r1, [r7, #8]
 8008eba:	4613      	mov	r3, r2
 8008ebc:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008ebe:	88fb      	ldrh	r3, [r7, #6]
 8008ec0:	68ba      	ldr	r2, [r7, #8]
 8008ec2:	2100      	movs	r1, #0
 8008ec4:	68f8      	ldr	r0, [r7, #12]
 8008ec6:	f001 fe3a 	bl	800ab3e <USBD_LL_Transmit>

  return USBD_OK;
 8008eca:	2300      	movs	r3, #0
}
 8008ecc:	4618      	mov	r0, r3
 8008ece:	3710      	adds	r7, #16
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	bd80      	pop	{r7, pc}

08008ed4 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b084      	sub	sp, #16
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	60f8      	str	r0, [r7, #12]
 8008edc:	60b9      	str	r1, [r7, #8]
 8008ede:	4613      	mov	r3, r2
 8008ee0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	2203      	movs	r2, #3
 8008ee6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008eea:	88fa      	ldrh	r2, [r7, #6]
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8008ef2:	88fa      	ldrh	r2, [r7, #6]
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008efa:	88fb      	ldrh	r3, [r7, #6]
 8008efc:	68ba      	ldr	r2, [r7, #8]
 8008efe:	2100      	movs	r1, #0
 8008f00:	68f8      	ldr	r0, [r7, #12]
 8008f02:	f001 fe3f 	bl	800ab84 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008f06:	2300      	movs	r3, #0
}
 8008f08:	4618      	mov	r0, r3
 8008f0a:	3710      	adds	r7, #16
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	bd80      	pop	{r7, pc}

08008f10 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b084      	sub	sp, #16
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	60f8      	str	r0, [r7, #12]
 8008f18:	60b9      	str	r1, [r7, #8]
 8008f1a:	4613      	mov	r3, r2
 8008f1c:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008f1e:	88fb      	ldrh	r3, [r7, #6]
 8008f20:	68ba      	ldr	r2, [r7, #8]
 8008f22:	2100      	movs	r1, #0
 8008f24:	68f8      	ldr	r0, [r7, #12]
 8008f26:	f001 fe2d 	bl	800ab84 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008f2a:	2300      	movs	r3, #0
}
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	3710      	adds	r7, #16
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bd80      	pop	{r7, pc}

08008f34 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b082      	sub	sp, #8
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2204      	movs	r2, #4
 8008f40:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008f44:	2300      	movs	r3, #0
 8008f46:	2200      	movs	r2, #0
 8008f48:	2100      	movs	r1, #0
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f001 fdf7 	bl	800ab3e <USBD_LL_Transmit>

  return USBD_OK;
 8008f50:	2300      	movs	r3, #0
}
 8008f52:	4618      	mov	r0, r3
 8008f54:	3708      	adds	r7, #8
 8008f56:	46bd      	mov	sp, r7
 8008f58:	bd80      	pop	{r7, pc}

08008f5a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008f5a:	b580      	push	{r7, lr}
 8008f5c:	b082      	sub	sp, #8
 8008f5e:	af00      	add	r7, sp, #0
 8008f60:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	2205      	movs	r2, #5
 8008f66:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	2100      	movs	r1, #0
 8008f70:	6878      	ldr	r0, [r7, #4]
 8008f72:	f001 fe07 	bl	800ab84 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008f76:	2300      	movs	r3, #0
}
 8008f78:	4618      	mov	r0, r3
 8008f7a:	3708      	adds	r7, #8
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	bd80      	pop	{r7, pc}

08008f80 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8008f80:	b480      	push	{r7}
 8008f82:	b085      	sub	sp, #20
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	4603      	mov	r3, r0
 8008f88:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8008f8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008f92:	2b84      	cmp	r3, #132	; 0x84
 8008f94:	d005      	beq.n	8008fa2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8008f96:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	4413      	add	r3, r2
 8008f9e:	3303      	adds	r3, #3
 8008fa0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
}
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	3714      	adds	r7, #20
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bc80      	pop	{r7}
 8008fac:	4770      	bx	lr

08008fae <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008fae:	b580      	push	{r7, lr}
 8008fb0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8008fb2:	f000 fe49 	bl	8009c48 <vTaskStartScheduler>
  
  return osOK;
 8008fb6:	2300      	movs	r3, #0
}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	bd80      	pop	{r7, pc}

08008fbc <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008fbe:	b089      	sub	sp, #36	; 0x24
 8008fc0:	af04      	add	r7, sp, #16
 8008fc2:	6078      	str	r0, [r7, #4]
 8008fc4:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	695b      	ldr	r3, [r3, #20]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d020      	beq.n	8009010 <osThreadCreate+0x54>
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	699b      	ldr	r3, [r3, #24]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d01c      	beq.n	8009010 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	685c      	ldr	r4, [r3, #4]
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681d      	ldr	r5, [r3, #0]
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	691e      	ldr	r6, [r3, #16]
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008fe8:	4618      	mov	r0, r3
 8008fea:	f7ff ffc9 	bl	8008f80 <makeFreeRtosPriority>
 8008fee:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	695b      	ldr	r3, [r3, #20]
 8008ff4:	687a      	ldr	r2, [r7, #4]
 8008ff6:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008ff8:	9202      	str	r2, [sp, #8]
 8008ffa:	9301      	str	r3, [sp, #4]
 8008ffc:	9100      	str	r1, [sp, #0]
 8008ffe:	683b      	ldr	r3, [r7, #0]
 8009000:	4632      	mov	r2, r6
 8009002:	4629      	mov	r1, r5
 8009004:	4620      	mov	r0, r4
 8009006:	f000 fc65 	bl	80098d4 <xTaskCreateStatic>
 800900a:	4603      	mov	r3, r0
 800900c:	60fb      	str	r3, [r7, #12]
 800900e:	e01c      	b.n	800904a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	685c      	ldr	r4, [r3, #4]
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800901c:	b29e      	uxth	r6, r3
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009024:	4618      	mov	r0, r3
 8009026:	f7ff ffab 	bl	8008f80 <makeFreeRtosPriority>
 800902a:	4602      	mov	r2, r0
 800902c:	f107 030c 	add.w	r3, r7, #12
 8009030:	9301      	str	r3, [sp, #4]
 8009032:	9200      	str	r2, [sp, #0]
 8009034:	683b      	ldr	r3, [r7, #0]
 8009036:	4632      	mov	r2, r6
 8009038:	4629      	mov	r1, r5
 800903a:	4620      	mov	r0, r4
 800903c:	f000 fca3 	bl	8009986 <xTaskCreate>
 8009040:	4603      	mov	r3, r0
 8009042:	2b01      	cmp	r3, #1
 8009044:	d001      	beq.n	800904a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8009046:	2300      	movs	r3, #0
 8009048:	e000      	b.n	800904c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800904a:	68fb      	ldr	r3, [r7, #12]
}
 800904c:	4618      	mov	r0, r3
 800904e:	3714      	adds	r7, #20
 8009050:	46bd      	mov	sp, r7
 8009052:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009054 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b084      	sub	sp, #16
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d001      	beq.n	800906a <osDelay+0x16>
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	e000      	b.n	800906c <osDelay+0x18>
 800906a:	2301      	movs	r3, #1
 800906c:	4618      	mov	r0, r3
 800906e:	f000 fdb7 	bl	8009be0 <vTaskDelay>
  
  return osOK;
 8009072:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8009074:	4618      	mov	r0, r3
 8009076:	3710      	adds	r7, #16
 8009078:	46bd      	mov	sp, r7
 800907a:	bd80      	pop	{r7, pc}

0800907c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800907c:	b480      	push	{r7}
 800907e:	b083      	sub	sp, #12
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	f103 0208 	add.w	r2, r3, #8
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	f04f 32ff 	mov.w	r2, #4294967295
 8009094:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	f103 0208 	add.w	r2, r3, #8
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	f103 0208 	add.w	r2, r3, #8
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2200      	movs	r2, #0
 80090ae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80090b0:	bf00      	nop
 80090b2:	370c      	adds	r7, #12
 80090b4:	46bd      	mov	sp, r7
 80090b6:	bc80      	pop	{r7}
 80090b8:	4770      	bx	lr

080090ba <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80090ba:	b480      	push	{r7}
 80090bc:	b083      	sub	sp, #12
 80090be:	af00      	add	r7, sp, #0
 80090c0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2200      	movs	r2, #0
 80090c6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80090c8:	bf00      	nop
 80090ca:	370c      	adds	r7, #12
 80090cc:	46bd      	mov	sp, r7
 80090ce:	bc80      	pop	{r7}
 80090d0:	4770      	bx	lr

080090d2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80090d2:	b480      	push	{r7}
 80090d4:	b085      	sub	sp, #20
 80090d6:	af00      	add	r7, sp, #0
 80090d8:	6078      	str	r0, [r7, #4]
 80090da:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	685b      	ldr	r3, [r3, #4]
 80090e0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	68fa      	ldr	r2, [r7, #12]
 80090e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	689a      	ldr	r2, [r3, #8]
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	689b      	ldr	r3, [r3, #8]
 80090f4:	683a      	ldr	r2, [r7, #0]
 80090f6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	683a      	ldr	r2, [r7, #0]
 80090fc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80090fe:	683b      	ldr	r3, [r7, #0]
 8009100:	687a      	ldr	r2, [r7, #4]
 8009102:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	1c5a      	adds	r2, r3, #1
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	601a      	str	r2, [r3, #0]
}
 800910e:	bf00      	nop
 8009110:	3714      	adds	r7, #20
 8009112:	46bd      	mov	sp, r7
 8009114:	bc80      	pop	{r7}
 8009116:	4770      	bx	lr

08009118 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009118:	b480      	push	{r7}
 800911a:	b085      	sub	sp, #20
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
 8009120:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009128:	68bb      	ldr	r3, [r7, #8]
 800912a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800912e:	d103      	bne.n	8009138 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	691b      	ldr	r3, [r3, #16]
 8009134:	60fb      	str	r3, [r7, #12]
 8009136:	e00c      	b.n	8009152 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	3308      	adds	r3, #8
 800913c:	60fb      	str	r3, [r7, #12]
 800913e:	e002      	b.n	8009146 <vListInsert+0x2e>
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	685b      	ldr	r3, [r3, #4]
 8009144:	60fb      	str	r3, [r7, #12]
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	685b      	ldr	r3, [r3, #4]
 800914a:	681a      	ldr	r2, [r3, #0]
 800914c:	68bb      	ldr	r3, [r7, #8]
 800914e:	429a      	cmp	r2, r3
 8009150:	d9f6      	bls.n	8009140 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	685a      	ldr	r2, [r3, #4]
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800915a:	683b      	ldr	r3, [r7, #0]
 800915c:	685b      	ldr	r3, [r3, #4]
 800915e:	683a      	ldr	r2, [r7, #0]
 8009160:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	68fa      	ldr	r2, [r7, #12]
 8009166:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	683a      	ldr	r2, [r7, #0]
 800916c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800916e:	683b      	ldr	r3, [r7, #0]
 8009170:	687a      	ldr	r2, [r7, #4]
 8009172:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	1c5a      	adds	r2, r3, #1
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	601a      	str	r2, [r3, #0]
}
 800917e:	bf00      	nop
 8009180:	3714      	adds	r7, #20
 8009182:	46bd      	mov	sp, r7
 8009184:	bc80      	pop	{r7}
 8009186:	4770      	bx	lr

08009188 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009188:	b480      	push	{r7}
 800918a:	b085      	sub	sp, #20
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	691b      	ldr	r3, [r3, #16]
 8009194:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	685b      	ldr	r3, [r3, #4]
 800919a:	687a      	ldr	r2, [r7, #4]
 800919c:	6892      	ldr	r2, [r2, #8]
 800919e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	689b      	ldr	r3, [r3, #8]
 80091a4:	687a      	ldr	r2, [r7, #4]
 80091a6:	6852      	ldr	r2, [r2, #4]
 80091a8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	685a      	ldr	r2, [r3, #4]
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	429a      	cmp	r2, r3
 80091b2:	d103      	bne.n	80091bc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	689a      	ldr	r2, [r3, #8]
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2200      	movs	r2, #0
 80091c0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	1e5a      	subs	r2, r3, #1
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	681b      	ldr	r3, [r3, #0]
}
 80091d0:	4618      	mov	r0, r3
 80091d2:	3714      	adds	r7, #20
 80091d4:	46bd      	mov	sp, r7
 80091d6:	bc80      	pop	{r7}
 80091d8:	4770      	bx	lr
	...

080091dc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80091dc:	b480      	push	{r7}
 80091de:	b085      	sub	sp, #20
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	60f8      	str	r0, [r7, #12]
 80091e4:	60b9      	str	r1, [r7, #8]
 80091e6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	3b04      	subs	r3, #4
 80091ec:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80091f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	3b04      	subs	r3, #4
 80091fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80091fc:	68bb      	ldr	r3, [r7, #8]
 80091fe:	f023 0201 	bic.w	r2, r3, #1
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	3b04      	subs	r3, #4
 800920a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800920c:	4a08      	ldr	r2, [pc, #32]	; (8009230 <pxPortInitialiseStack+0x54>)
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	3b14      	subs	r3, #20
 8009216:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009218:	687a      	ldr	r2, [r7, #4]
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	3b20      	subs	r3, #32
 8009222:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009224:	68fb      	ldr	r3, [r7, #12]
}
 8009226:	4618      	mov	r0, r3
 8009228:	3714      	adds	r7, #20
 800922a:	46bd      	mov	sp, r7
 800922c:	bc80      	pop	{r7}
 800922e:	4770      	bx	lr
 8009230:	08009235 	.word	0x08009235

08009234 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009234:	b480      	push	{r7}
 8009236:	b085      	sub	sp, #20
 8009238:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800923a:	2300      	movs	r3, #0
 800923c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800923e:	4b10      	ldr	r3, [pc, #64]	; (8009280 <prvTaskExitError+0x4c>)
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009246:	d009      	beq.n	800925c <prvTaskExitError+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800924c:	f383 8811 	msr	BASEPRI, r3
 8009250:	f3bf 8f6f 	isb	sy
 8009254:	f3bf 8f4f 	dsb	sy
 8009258:	60fb      	str	r3, [r7, #12]
 800925a:	e7fe      	b.n	800925a <prvTaskExitError+0x26>
 800925c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009260:	f383 8811 	msr	BASEPRI, r3
 8009264:	f3bf 8f6f 	isb	sy
 8009268:	f3bf 8f4f 	dsb	sy
 800926c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800926e:	bf00      	nop
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d0fc      	beq.n	8009270 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009276:	bf00      	nop
 8009278:	3714      	adds	r7, #20
 800927a:	46bd      	mov	sp, r7
 800927c:	bc80      	pop	{r7}
 800927e:	4770      	bx	lr
 8009280:	2000011c 	.word	0x2000011c
	...

08009290 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009290:	4b07      	ldr	r3, [pc, #28]	; (80092b0 <pxCurrentTCBConst2>)
 8009292:	6819      	ldr	r1, [r3, #0]
 8009294:	6808      	ldr	r0, [r1, #0]
 8009296:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800929a:	f380 8809 	msr	PSP, r0
 800929e:	f3bf 8f6f 	isb	sy
 80092a2:	f04f 0000 	mov.w	r0, #0
 80092a6:	f380 8811 	msr	BASEPRI, r0
 80092aa:	f04e 0e0d 	orr.w	lr, lr, #13
 80092ae:	4770      	bx	lr

080092b0 <pxCurrentTCBConst2>:
 80092b0:	20001010 	.word	0x20001010
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80092b4:	bf00      	nop
 80092b6:	bf00      	nop

080092b8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80092b8:	4806      	ldr	r0, [pc, #24]	; (80092d4 <prvPortStartFirstTask+0x1c>)
 80092ba:	6800      	ldr	r0, [r0, #0]
 80092bc:	6800      	ldr	r0, [r0, #0]
 80092be:	f380 8808 	msr	MSP, r0
 80092c2:	b662      	cpsie	i
 80092c4:	b661      	cpsie	f
 80092c6:	f3bf 8f4f 	dsb	sy
 80092ca:	f3bf 8f6f 	isb	sy
 80092ce:	df00      	svc	0
 80092d0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80092d2:	bf00      	nop
 80092d4:	e000ed08 	.word	0xe000ed08

080092d8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b084      	sub	sp, #16
 80092dc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80092de:	4b31      	ldr	r3, [pc, #196]	; (80093a4 <xPortStartScheduler+0xcc>)
 80092e0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	781b      	ldrb	r3, [r3, #0]
 80092e6:	b2db      	uxtb	r3, r3
 80092e8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	22ff      	movs	r2, #255	; 0xff
 80092ee:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	781b      	ldrb	r3, [r3, #0]
 80092f4:	b2db      	uxtb	r3, r3
 80092f6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80092f8:	78fb      	ldrb	r3, [r7, #3]
 80092fa:	b2db      	uxtb	r3, r3
 80092fc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009300:	b2da      	uxtb	r2, r3
 8009302:	4b29      	ldr	r3, [pc, #164]	; (80093a8 <xPortStartScheduler+0xd0>)
 8009304:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009306:	4b29      	ldr	r3, [pc, #164]	; (80093ac <xPortStartScheduler+0xd4>)
 8009308:	2207      	movs	r2, #7
 800930a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800930c:	e009      	b.n	8009322 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800930e:	4b27      	ldr	r3, [pc, #156]	; (80093ac <xPortStartScheduler+0xd4>)
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	3b01      	subs	r3, #1
 8009314:	4a25      	ldr	r2, [pc, #148]	; (80093ac <xPortStartScheduler+0xd4>)
 8009316:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009318:	78fb      	ldrb	r3, [r7, #3]
 800931a:	b2db      	uxtb	r3, r3
 800931c:	005b      	lsls	r3, r3, #1
 800931e:	b2db      	uxtb	r3, r3
 8009320:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009322:	78fb      	ldrb	r3, [r7, #3]
 8009324:	b2db      	uxtb	r3, r3
 8009326:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800932a:	2b80      	cmp	r3, #128	; 0x80
 800932c:	d0ef      	beq.n	800930e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800932e:	4b1f      	ldr	r3, [pc, #124]	; (80093ac <xPortStartScheduler+0xd4>)
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	f1c3 0307 	rsb	r3, r3, #7
 8009336:	2b04      	cmp	r3, #4
 8009338:	d009      	beq.n	800934e <xPortStartScheduler+0x76>
 800933a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800933e:	f383 8811 	msr	BASEPRI, r3
 8009342:	f3bf 8f6f 	isb	sy
 8009346:	f3bf 8f4f 	dsb	sy
 800934a:	60bb      	str	r3, [r7, #8]
 800934c:	e7fe      	b.n	800934c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800934e:	4b17      	ldr	r3, [pc, #92]	; (80093ac <xPortStartScheduler+0xd4>)
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	021b      	lsls	r3, r3, #8
 8009354:	4a15      	ldr	r2, [pc, #84]	; (80093ac <xPortStartScheduler+0xd4>)
 8009356:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009358:	4b14      	ldr	r3, [pc, #80]	; (80093ac <xPortStartScheduler+0xd4>)
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009360:	4a12      	ldr	r2, [pc, #72]	; (80093ac <xPortStartScheduler+0xd4>)
 8009362:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	b2da      	uxtb	r2, r3
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800936c:	4a10      	ldr	r2, [pc, #64]	; (80093b0 <xPortStartScheduler+0xd8>)
 800936e:	4b10      	ldr	r3, [pc, #64]	; (80093b0 <xPortStartScheduler+0xd8>)
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009376:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009378:	4a0d      	ldr	r2, [pc, #52]	; (80093b0 <xPortStartScheduler+0xd8>)
 800937a:	4b0d      	ldr	r3, [pc, #52]	; (80093b0 <xPortStartScheduler+0xd8>)
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009382:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009384:	f000 f8b0 	bl	80094e8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009388:	4b0a      	ldr	r3, [pc, #40]	; (80093b4 <xPortStartScheduler+0xdc>)
 800938a:	2200      	movs	r2, #0
 800938c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800938e:	f7ff ff93 	bl	80092b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009392:	f000 fe1d 	bl	8009fd0 <vTaskSwitchContext>
	prvTaskExitError();
 8009396:	f7ff ff4d 	bl	8009234 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800939a:	2300      	movs	r3, #0
}
 800939c:	4618      	mov	r0, r3
 800939e:	3710      	adds	r7, #16
 80093a0:	46bd      	mov	sp, r7
 80093a2:	bd80      	pop	{r7, pc}
 80093a4:	e000e400 	.word	0xe000e400
 80093a8:	200003f1 	.word	0x200003f1
 80093ac:	200003f4 	.word	0x200003f4
 80093b0:	e000ed20 	.word	0xe000ed20
 80093b4:	2000011c 	.word	0x2000011c

080093b8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80093b8:	b480      	push	{r7}
 80093ba:	b083      	sub	sp, #12
 80093bc:	af00      	add	r7, sp, #0
 80093be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093c2:	f383 8811 	msr	BASEPRI, r3
 80093c6:	f3bf 8f6f 	isb	sy
 80093ca:	f3bf 8f4f 	dsb	sy
 80093ce:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80093d0:	4b0e      	ldr	r3, [pc, #56]	; (800940c <vPortEnterCritical+0x54>)
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	3301      	adds	r3, #1
 80093d6:	4a0d      	ldr	r2, [pc, #52]	; (800940c <vPortEnterCritical+0x54>)
 80093d8:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80093da:	4b0c      	ldr	r3, [pc, #48]	; (800940c <vPortEnterCritical+0x54>)
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	2b01      	cmp	r3, #1
 80093e0:	d10e      	bne.n	8009400 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80093e2:	4b0b      	ldr	r3, [pc, #44]	; (8009410 <vPortEnterCritical+0x58>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	b2db      	uxtb	r3, r3
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d009      	beq.n	8009400 <vPortEnterCritical+0x48>
 80093ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093f0:	f383 8811 	msr	BASEPRI, r3
 80093f4:	f3bf 8f6f 	isb	sy
 80093f8:	f3bf 8f4f 	dsb	sy
 80093fc:	603b      	str	r3, [r7, #0]
 80093fe:	e7fe      	b.n	80093fe <vPortEnterCritical+0x46>
	}
}
 8009400:	bf00      	nop
 8009402:	370c      	adds	r7, #12
 8009404:	46bd      	mov	sp, r7
 8009406:	bc80      	pop	{r7}
 8009408:	4770      	bx	lr
 800940a:	bf00      	nop
 800940c:	2000011c 	.word	0x2000011c
 8009410:	e000ed04 	.word	0xe000ed04

08009414 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009414:	b480      	push	{r7}
 8009416:	b083      	sub	sp, #12
 8009418:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800941a:	4b10      	ldr	r3, [pc, #64]	; (800945c <vPortExitCritical+0x48>)
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d109      	bne.n	8009436 <vPortExitCritical+0x22>
 8009422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009426:	f383 8811 	msr	BASEPRI, r3
 800942a:	f3bf 8f6f 	isb	sy
 800942e:	f3bf 8f4f 	dsb	sy
 8009432:	607b      	str	r3, [r7, #4]
 8009434:	e7fe      	b.n	8009434 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8009436:	4b09      	ldr	r3, [pc, #36]	; (800945c <vPortExitCritical+0x48>)
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	3b01      	subs	r3, #1
 800943c:	4a07      	ldr	r2, [pc, #28]	; (800945c <vPortExitCritical+0x48>)
 800943e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009440:	4b06      	ldr	r3, [pc, #24]	; (800945c <vPortExitCritical+0x48>)
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d104      	bne.n	8009452 <vPortExitCritical+0x3e>
 8009448:	2300      	movs	r3, #0
 800944a:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8009452:	bf00      	nop
 8009454:	370c      	adds	r7, #12
 8009456:	46bd      	mov	sp, r7
 8009458:	bc80      	pop	{r7}
 800945a:	4770      	bx	lr
 800945c:	2000011c 	.word	0x2000011c

08009460 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009460:	f3ef 8009 	mrs	r0, PSP
 8009464:	f3bf 8f6f 	isb	sy
 8009468:	4b0d      	ldr	r3, [pc, #52]	; (80094a0 <pxCurrentTCBConst>)
 800946a:	681a      	ldr	r2, [r3, #0]
 800946c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009470:	6010      	str	r0, [r2, #0]
 8009472:	e92d 4008 	stmdb	sp!, {r3, lr}
 8009476:	f04f 0050 	mov.w	r0, #80	; 0x50
 800947a:	f380 8811 	msr	BASEPRI, r0
 800947e:	f000 fda7 	bl	8009fd0 <vTaskSwitchContext>
 8009482:	f04f 0000 	mov.w	r0, #0
 8009486:	f380 8811 	msr	BASEPRI, r0
 800948a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800948e:	6819      	ldr	r1, [r3, #0]
 8009490:	6808      	ldr	r0, [r1, #0]
 8009492:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009496:	f380 8809 	msr	PSP, r0
 800949a:	f3bf 8f6f 	isb	sy
 800949e:	4770      	bx	lr

080094a0 <pxCurrentTCBConst>:
 80094a0:	20001010 	.word	0x20001010
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80094a4:	bf00      	nop
 80094a6:	bf00      	nop

080094a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b082      	sub	sp, #8
 80094ac:	af00      	add	r7, sp, #0
	__asm volatile
 80094ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094b2:	f383 8811 	msr	BASEPRI, r3
 80094b6:	f3bf 8f6f 	isb	sy
 80094ba:	f3bf 8f4f 	dsb	sy
 80094be:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80094c0:	f000 fcca 	bl	8009e58 <xTaskIncrementTick>
 80094c4:	4603      	mov	r3, r0
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d003      	beq.n	80094d2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80094ca:	4b06      	ldr	r3, [pc, #24]	; (80094e4 <SysTick_Handler+0x3c>)
 80094cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094d0:	601a      	str	r2, [r3, #0]
 80094d2:	2300      	movs	r3, #0
 80094d4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80094d6:	683b      	ldr	r3, [r7, #0]
 80094d8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80094dc:	bf00      	nop
 80094de:	3708      	adds	r7, #8
 80094e0:	46bd      	mov	sp, r7
 80094e2:	bd80      	pop	{r7, pc}
 80094e4:	e000ed04 	.word	0xe000ed04

080094e8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80094e8:	b480      	push	{r7}
 80094ea:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80094ec:	4b0a      	ldr	r3, [pc, #40]	; (8009518 <vPortSetupTimerInterrupt+0x30>)
 80094ee:	2200      	movs	r2, #0
 80094f0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80094f2:	4b0a      	ldr	r3, [pc, #40]	; (800951c <vPortSetupTimerInterrupt+0x34>)
 80094f4:	2200      	movs	r2, #0
 80094f6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80094f8:	4a09      	ldr	r2, [pc, #36]	; (8009520 <vPortSetupTimerInterrupt+0x38>)
 80094fa:	4b0a      	ldr	r3, [pc, #40]	; (8009524 <vPortSetupTimerInterrupt+0x3c>)
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	490a      	ldr	r1, [pc, #40]	; (8009528 <vPortSetupTimerInterrupt+0x40>)
 8009500:	fba1 1303 	umull	r1, r3, r1, r3
 8009504:	099b      	lsrs	r3, r3, #6
 8009506:	3b01      	subs	r3, #1
 8009508:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800950a:	4b03      	ldr	r3, [pc, #12]	; (8009518 <vPortSetupTimerInterrupt+0x30>)
 800950c:	2207      	movs	r2, #7
 800950e:	601a      	str	r2, [r3, #0]
}
 8009510:	bf00      	nop
 8009512:	46bd      	mov	sp, r7
 8009514:	bc80      	pop	{r7}
 8009516:	4770      	bx	lr
 8009518:	e000e010 	.word	0xe000e010
 800951c:	e000e018 	.word	0xe000e018
 8009520:	e000e014 	.word	0xe000e014
 8009524:	20000000 	.word	0x20000000
 8009528:	10624dd3 	.word	0x10624dd3

0800952c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b08a      	sub	sp, #40	; 0x28
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009534:	2300      	movs	r3, #0
 8009536:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009538:	f000 fbe4 	bl	8009d04 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800953c:	4b57      	ldr	r3, [pc, #348]	; (800969c <pvPortMalloc+0x170>)
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d101      	bne.n	8009548 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009544:	f000 f90c 	bl	8009760 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009548:	4b55      	ldr	r3, [pc, #340]	; (80096a0 <pvPortMalloc+0x174>)
 800954a:	681a      	ldr	r2, [r3, #0]
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	4013      	ands	r3, r2
 8009550:	2b00      	cmp	r3, #0
 8009552:	f040 808c 	bne.w	800966e <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	2b00      	cmp	r3, #0
 800955a:	d01c      	beq.n	8009596 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800955c:	2208      	movs	r2, #8
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	4413      	add	r3, r2
 8009562:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	f003 0307 	and.w	r3, r3, #7
 800956a:	2b00      	cmp	r3, #0
 800956c:	d013      	beq.n	8009596 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	f023 0307 	bic.w	r3, r3, #7
 8009574:	3308      	adds	r3, #8
 8009576:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	f003 0307 	and.w	r3, r3, #7
 800957e:	2b00      	cmp	r3, #0
 8009580:	d009      	beq.n	8009596 <pvPortMalloc+0x6a>
	__asm volatile
 8009582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009586:	f383 8811 	msr	BASEPRI, r3
 800958a:	f3bf 8f6f 	isb	sy
 800958e:	f3bf 8f4f 	dsb	sy
 8009592:	617b      	str	r3, [r7, #20]
 8009594:	e7fe      	b.n	8009594 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d068      	beq.n	800966e <pvPortMalloc+0x142>
 800959c:	4b41      	ldr	r3, [pc, #260]	; (80096a4 <pvPortMalloc+0x178>)
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	687a      	ldr	r2, [r7, #4]
 80095a2:	429a      	cmp	r2, r3
 80095a4:	d863      	bhi.n	800966e <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80095a6:	4b40      	ldr	r3, [pc, #256]	; (80096a8 <pvPortMalloc+0x17c>)
 80095a8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80095aa:	4b3f      	ldr	r3, [pc, #252]	; (80096a8 <pvPortMalloc+0x17c>)
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80095b0:	e004      	b.n	80095bc <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80095b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095b4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80095b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80095bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095be:	685a      	ldr	r2, [r3, #4]
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	429a      	cmp	r2, r3
 80095c4:	d203      	bcs.n	80095ce <pvPortMalloc+0xa2>
 80095c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d1f1      	bne.n	80095b2 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80095ce:	4b33      	ldr	r3, [pc, #204]	; (800969c <pvPortMalloc+0x170>)
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095d4:	429a      	cmp	r2, r3
 80095d6:	d04a      	beq.n	800966e <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80095d8:	6a3b      	ldr	r3, [r7, #32]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	2208      	movs	r2, #8
 80095de:	4413      	add	r3, r2
 80095e0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80095e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095e4:	681a      	ldr	r2, [r3, #0]
 80095e6:	6a3b      	ldr	r3, [r7, #32]
 80095e8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80095ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ec:	685a      	ldr	r2, [r3, #4]
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	1ad2      	subs	r2, r2, r3
 80095f2:	2308      	movs	r3, #8
 80095f4:	005b      	lsls	r3, r3, #1
 80095f6:	429a      	cmp	r2, r3
 80095f8:	d91e      	bls.n	8009638 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80095fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	4413      	add	r3, r2
 8009600:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009602:	69bb      	ldr	r3, [r7, #24]
 8009604:	f003 0307 	and.w	r3, r3, #7
 8009608:	2b00      	cmp	r3, #0
 800960a:	d009      	beq.n	8009620 <pvPortMalloc+0xf4>
 800960c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009610:	f383 8811 	msr	BASEPRI, r3
 8009614:	f3bf 8f6f 	isb	sy
 8009618:	f3bf 8f4f 	dsb	sy
 800961c:	613b      	str	r3, [r7, #16]
 800961e:	e7fe      	b.n	800961e <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009622:	685a      	ldr	r2, [r3, #4]
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	1ad2      	subs	r2, r2, r3
 8009628:	69bb      	ldr	r3, [r7, #24]
 800962a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800962c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800962e:	687a      	ldr	r2, [r7, #4]
 8009630:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009632:	69b8      	ldr	r0, [r7, #24]
 8009634:	f000 f8f6 	bl	8009824 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009638:	4b1a      	ldr	r3, [pc, #104]	; (80096a4 <pvPortMalloc+0x178>)
 800963a:	681a      	ldr	r2, [r3, #0]
 800963c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800963e:	685b      	ldr	r3, [r3, #4]
 8009640:	1ad3      	subs	r3, r2, r3
 8009642:	4a18      	ldr	r2, [pc, #96]	; (80096a4 <pvPortMalloc+0x178>)
 8009644:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009646:	4b17      	ldr	r3, [pc, #92]	; (80096a4 <pvPortMalloc+0x178>)
 8009648:	681a      	ldr	r2, [r3, #0]
 800964a:	4b18      	ldr	r3, [pc, #96]	; (80096ac <pvPortMalloc+0x180>)
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	429a      	cmp	r2, r3
 8009650:	d203      	bcs.n	800965a <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009652:	4b14      	ldr	r3, [pc, #80]	; (80096a4 <pvPortMalloc+0x178>)
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	4a15      	ldr	r2, [pc, #84]	; (80096ac <pvPortMalloc+0x180>)
 8009658:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800965a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800965c:	685a      	ldr	r2, [r3, #4]
 800965e:	4b10      	ldr	r3, [pc, #64]	; (80096a0 <pvPortMalloc+0x174>)
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	431a      	orrs	r2, r3
 8009664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009666:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800966a:	2200      	movs	r2, #0
 800966c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800966e:	f000 fb57 	bl	8009d20 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009672:	69fb      	ldr	r3, [r7, #28]
 8009674:	f003 0307 	and.w	r3, r3, #7
 8009678:	2b00      	cmp	r3, #0
 800967a:	d009      	beq.n	8009690 <pvPortMalloc+0x164>
 800967c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009680:	f383 8811 	msr	BASEPRI, r3
 8009684:	f3bf 8f6f 	isb	sy
 8009688:	f3bf 8f4f 	dsb	sy
 800968c:	60fb      	str	r3, [r7, #12]
 800968e:	e7fe      	b.n	800968e <pvPortMalloc+0x162>
	return pvReturn;
 8009690:	69fb      	ldr	r3, [r7, #28]
}
 8009692:	4618      	mov	r0, r3
 8009694:	3728      	adds	r7, #40	; 0x28
 8009696:	46bd      	mov	sp, r7
 8009698:	bd80      	pop	{r7, pc}
 800969a:	bf00      	nop
 800969c:	20001000 	.word	0x20001000
 80096a0:	2000100c 	.word	0x2000100c
 80096a4:	20001004 	.word	0x20001004
 80096a8:	20000ff8 	.word	0x20000ff8
 80096ac:	20001008 	.word	0x20001008

080096b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b086      	sub	sp, #24
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d046      	beq.n	8009750 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80096c2:	2308      	movs	r3, #8
 80096c4:	425b      	negs	r3, r3
 80096c6:	697a      	ldr	r2, [r7, #20]
 80096c8:	4413      	add	r3, r2
 80096ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80096cc:	697b      	ldr	r3, [r7, #20]
 80096ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80096d0:	693b      	ldr	r3, [r7, #16]
 80096d2:	685a      	ldr	r2, [r3, #4]
 80096d4:	4b20      	ldr	r3, [pc, #128]	; (8009758 <vPortFree+0xa8>)
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	4013      	ands	r3, r2
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d109      	bne.n	80096f2 <vPortFree+0x42>
 80096de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096e2:	f383 8811 	msr	BASEPRI, r3
 80096e6:	f3bf 8f6f 	isb	sy
 80096ea:	f3bf 8f4f 	dsb	sy
 80096ee:	60fb      	str	r3, [r7, #12]
 80096f0:	e7fe      	b.n	80096f0 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80096f2:	693b      	ldr	r3, [r7, #16]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d009      	beq.n	800970e <vPortFree+0x5e>
 80096fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096fe:	f383 8811 	msr	BASEPRI, r3
 8009702:	f3bf 8f6f 	isb	sy
 8009706:	f3bf 8f4f 	dsb	sy
 800970a:	60bb      	str	r3, [r7, #8]
 800970c:	e7fe      	b.n	800970c <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800970e:	693b      	ldr	r3, [r7, #16]
 8009710:	685a      	ldr	r2, [r3, #4]
 8009712:	4b11      	ldr	r3, [pc, #68]	; (8009758 <vPortFree+0xa8>)
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	4013      	ands	r3, r2
 8009718:	2b00      	cmp	r3, #0
 800971a:	d019      	beq.n	8009750 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800971c:	693b      	ldr	r3, [r7, #16]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d115      	bne.n	8009750 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009724:	693b      	ldr	r3, [r7, #16]
 8009726:	685a      	ldr	r2, [r3, #4]
 8009728:	4b0b      	ldr	r3, [pc, #44]	; (8009758 <vPortFree+0xa8>)
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	43db      	mvns	r3, r3
 800972e:	401a      	ands	r2, r3
 8009730:	693b      	ldr	r3, [r7, #16]
 8009732:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009734:	f000 fae6 	bl	8009d04 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009738:	693b      	ldr	r3, [r7, #16]
 800973a:	685a      	ldr	r2, [r3, #4]
 800973c:	4b07      	ldr	r3, [pc, #28]	; (800975c <vPortFree+0xac>)
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	4413      	add	r3, r2
 8009742:	4a06      	ldr	r2, [pc, #24]	; (800975c <vPortFree+0xac>)
 8009744:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009746:	6938      	ldr	r0, [r7, #16]
 8009748:	f000 f86c 	bl	8009824 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800974c:	f000 fae8 	bl	8009d20 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009750:	bf00      	nop
 8009752:	3718      	adds	r7, #24
 8009754:	46bd      	mov	sp, r7
 8009756:	bd80      	pop	{r7, pc}
 8009758:	2000100c 	.word	0x2000100c
 800975c:	20001004 	.word	0x20001004

08009760 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009760:	b480      	push	{r7}
 8009762:	b085      	sub	sp, #20
 8009764:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009766:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800976a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800976c:	4b27      	ldr	r3, [pc, #156]	; (800980c <prvHeapInit+0xac>)
 800976e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	f003 0307 	and.w	r3, r3, #7
 8009776:	2b00      	cmp	r3, #0
 8009778:	d00c      	beq.n	8009794 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	3307      	adds	r3, #7
 800977e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	f023 0307 	bic.w	r3, r3, #7
 8009786:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009788:	68ba      	ldr	r2, [r7, #8]
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	1ad3      	subs	r3, r2, r3
 800978e:	4a1f      	ldr	r2, [pc, #124]	; (800980c <prvHeapInit+0xac>)
 8009790:	4413      	add	r3, r2
 8009792:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009798:	4a1d      	ldr	r2, [pc, #116]	; (8009810 <prvHeapInit+0xb0>)
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800979e:	4b1c      	ldr	r3, [pc, #112]	; (8009810 <prvHeapInit+0xb0>)
 80097a0:	2200      	movs	r2, #0
 80097a2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80097a4:	687a      	ldr	r2, [r7, #4]
 80097a6:	68bb      	ldr	r3, [r7, #8]
 80097a8:	4413      	add	r3, r2
 80097aa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80097ac:	2208      	movs	r2, #8
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	1a9b      	subs	r3, r3, r2
 80097b2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	f023 0307 	bic.w	r3, r3, #7
 80097ba:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	4a15      	ldr	r2, [pc, #84]	; (8009814 <prvHeapInit+0xb4>)
 80097c0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80097c2:	4b14      	ldr	r3, [pc, #80]	; (8009814 <prvHeapInit+0xb4>)
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	2200      	movs	r2, #0
 80097c8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80097ca:	4b12      	ldr	r3, [pc, #72]	; (8009814 <prvHeapInit+0xb4>)
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	2200      	movs	r2, #0
 80097d0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80097d6:	683b      	ldr	r3, [r7, #0]
 80097d8:	68fa      	ldr	r2, [r7, #12]
 80097da:	1ad2      	subs	r2, r2, r3
 80097dc:	683b      	ldr	r3, [r7, #0]
 80097de:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80097e0:	4b0c      	ldr	r3, [pc, #48]	; (8009814 <prvHeapInit+0xb4>)
 80097e2:	681a      	ldr	r2, [r3, #0]
 80097e4:	683b      	ldr	r3, [r7, #0]
 80097e6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	685b      	ldr	r3, [r3, #4]
 80097ec:	4a0a      	ldr	r2, [pc, #40]	; (8009818 <prvHeapInit+0xb8>)
 80097ee:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80097f0:	683b      	ldr	r3, [r7, #0]
 80097f2:	685b      	ldr	r3, [r3, #4]
 80097f4:	4a09      	ldr	r2, [pc, #36]	; (800981c <prvHeapInit+0xbc>)
 80097f6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80097f8:	4b09      	ldr	r3, [pc, #36]	; (8009820 <prvHeapInit+0xc0>)
 80097fa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80097fe:	601a      	str	r2, [r3, #0]
}
 8009800:	bf00      	nop
 8009802:	3714      	adds	r7, #20
 8009804:	46bd      	mov	sp, r7
 8009806:	bc80      	pop	{r7}
 8009808:	4770      	bx	lr
 800980a:	bf00      	nop
 800980c:	200003f8 	.word	0x200003f8
 8009810:	20000ff8 	.word	0x20000ff8
 8009814:	20001000 	.word	0x20001000
 8009818:	20001008 	.word	0x20001008
 800981c:	20001004 	.word	0x20001004
 8009820:	2000100c 	.word	0x2000100c

08009824 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009824:	b480      	push	{r7}
 8009826:	b085      	sub	sp, #20
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800982c:	4b27      	ldr	r3, [pc, #156]	; (80098cc <prvInsertBlockIntoFreeList+0xa8>)
 800982e:	60fb      	str	r3, [r7, #12]
 8009830:	e002      	b.n	8009838 <prvInsertBlockIntoFreeList+0x14>
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	60fb      	str	r3, [r7, #12]
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	681a      	ldr	r2, [r3, #0]
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	429a      	cmp	r2, r3
 8009840:	d3f7      	bcc.n	8009832 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	685b      	ldr	r3, [r3, #4]
 800984a:	68ba      	ldr	r2, [r7, #8]
 800984c:	441a      	add	r2, r3
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	429a      	cmp	r2, r3
 8009852:	d108      	bne.n	8009866 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	685a      	ldr	r2, [r3, #4]
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	685b      	ldr	r3, [r3, #4]
 800985c:	441a      	add	r2, r3
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	685b      	ldr	r3, [r3, #4]
 800986e:	68ba      	ldr	r2, [r7, #8]
 8009870:	441a      	add	r2, r3
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	429a      	cmp	r2, r3
 8009878:	d118      	bne.n	80098ac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	681a      	ldr	r2, [r3, #0]
 800987e:	4b14      	ldr	r3, [pc, #80]	; (80098d0 <prvInsertBlockIntoFreeList+0xac>)
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	429a      	cmp	r2, r3
 8009884:	d00d      	beq.n	80098a2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	685a      	ldr	r2, [r3, #4]
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	685b      	ldr	r3, [r3, #4]
 8009890:	441a      	add	r2, r3
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	681a      	ldr	r2, [r3, #0]
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	601a      	str	r2, [r3, #0]
 80098a0:	e008      	b.n	80098b4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80098a2:	4b0b      	ldr	r3, [pc, #44]	; (80098d0 <prvInsertBlockIntoFreeList+0xac>)
 80098a4:	681a      	ldr	r2, [r3, #0]
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	601a      	str	r2, [r3, #0]
 80098aa:	e003      	b.n	80098b4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	681a      	ldr	r2, [r3, #0]
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80098b4:	68fa      	ldr	r2, [r7, #12]
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	429a      	cmp	r2, r3
 80098ba:	d002      	beq.n	80098c2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	687a      	ldr	r2, [r7, #4]
 80098c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80098c2:	bf00      	nop
 80098c4:	3714      	adds	r7, #20
 80098c6:	46bd      	mov	sp, r7
 80098c8:	bc80      	pop	{r7}
 80098ca:	4770      	bx	lr
 80098cc:	20000ff8 	.word	0x20000ff8
 80098d0:	20001000 	.word	0x20001000

080098d4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b08e      	sub	sp, #56	; 0x38
 80098d8:	af04      	add	r7, sp, #16
 80098da:	60f8      	str	r0, [r7, #12]
 80098dc:	60b9      	str	r1, [r7, #8]
 80098de:	607a      	str	r2, [r7, #4]
 80098e0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80098e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d109      	bne.n	80098fc <xTaskCreateStatic+0x28>
 80098e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098ec:	f383 8811 	msr	BASEPRI, r3
 80098f0:	f3bf 8f6f 	isb	sy
 80098f4:	f3bf 8f4f 	dsb	sy
 80098f8:	623b      	str	r3, [r7, #32]
 80098fa:	e7fe      	b.n	80098fa <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80098fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d109      	bne.n	8009916 <xTaskCreateStatic+0x42>
 8009902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009906:	f383 8811 	msr	BASEPRI, r3
 800990a:	f3bf 8f6f 	isb	sy
 800990e:	f3bf 8f4f 	dsb	sy
 8009912:	61fb      	str	r3, [r7, #28]
 8009914:	e7fe      	b.n	8009914 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009916:	2354      	movs	r3, #84	; 0x54
 8009918:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800991a:	693b      	ldr	r3, [r7, #16]
 800991c:	2b54      	cmp	r3, #84	; 0x54
 800991e:	d009      	beq.n	8009934 <xTaskCreateStatic+0x60>
 8009920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009924:	f383 8811 	msr	BASEPRI, r3
 8009928:	f3bf 8f6f 	isb	sy
 800992c:	f3bf 8f4f 	dsb	sy
 8009930:	61bb      	str	r3, [r7, #24]
 8009932:	e7fe      	b.n	8009932 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009936:	2b00      	cmp	r3, #0
 8009938:	d01e      	beq.n	8009978 <xTaskCreateStatic+0xa4>
 800993a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800993c:	2b00      	cmp	r3, #0
 800993e:	d01b      	beq.n	8009978 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009942:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009946:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009948:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800994a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800994c:	2202      	movs	r2, #2
 800994e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009952:	2300      	movs	r3, #0
 8009954:	9303      	str	r3, [sp, #12]
 8009956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009958:	9302      	str	r3, [sp, #8]
 800995a:	f107 0314 	add.w	r3, r7, #20
 800995e:	9301      	str	r3, [sp, #4]
 8009960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009962:	9300      	str	r3, [sp, #0]
 8009964:	683b      	ldr	r3, [r7, #0]
 8009966:	687a      	ldr	r2, [r7, #4]
 8009968:	68b9      	ldr	r1, [r7, #8]
 800996a:	68f8      	ldr	r0, [r7, #12]
 800996c:	f000 f850 	bl	8009a10 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009970:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009972:	f000 f8cb 	bl	8009b0c <prvAddNewTaskToReadyList>
 8009976:	e001      	b.n	800997c <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8009978:	2300      	movs	r3, #0
 800997a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800997c:	697b      	ldr	r3, [r7, #20]
	}
 800997e:	4618      	mov	r0, r3
 8009980:	3728      	adds	r7, #40	; 0x28
 8009982:	46bd      	mov	sp, r7
 8009984:	bd80      	pop	{r7, pc}

08009986 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009986:	b580      	push	{r7, lr}
 8009988:	b08c      	sub	sp, #48	; 0x30
 800998a:	af04      	add	r7, sp, #16
 800998c:	60f8      	str	r0, [r7, #12]
 800998e:	60b9      	str	r1, [r7, #8]
 8009990:	603b      	str	r3, [r7, #0]
 8009992:	4613      	mov	r3, r2
 8009994:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009996:	88fb      	ldrh	r3, [r7, #6]
 8009998:	009b      	lsls	r3, r3, #2
 800999a:	4618      	mov	r0, r3
 800999c:	f7ff fdc6 	bl	800952c <pvPortMalloc>
 80099a0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80099a2:	697b      	ldr	r3, [r7, #20]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d00e      	beq.n	80099c6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80099a8:	2054      	movs	r0, #84	; 0x54
 80099aa:	f7ff fdbf 	bl	800952c <pvPortMalloc>
 80099ae:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80099b0:	69fb      	ldr	r3, [r7, #28]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d003      	beq.n	80099be <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80099b6:	69fb      	ldr	r3, [r7, #28]
 80099b8:	697a      	ldr	r2, [r7, #20]
 80099ba:	631a      	str	r2, [r3, #48]	; 0x30
 80099bc:	e005      	b.n	80099ca <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80099be:	6978      	ldr	r0, [r7, #20]
 80099c0:	f7ff fe76 	bl	80096b0 <vPortFree>
 80099c4:	e001      	b.n	80099ca <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80099c6:	2300      	movs	r3, #0
 80099c8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80099ca:	69fb      	ldr	r3, [r7, #28]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d017      	beq.n	8009a00 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80099d0:	69fb      	ldr	r3, [r7, #28]
 80099d2:	2200      	movs	r2, #0
 80099d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80099d8:	88fa      	ldrh	r2, [r7, #6]
 80099da:	2300      	movs	r3, #0
 80099dc:	9303      	str	r3, [sp, #12]
 80099de:	69fb      	ldr	r3, [r7, #28]
 80099e0:	9302      	str	r3, [sp, #8]
 80099e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099e4:	9301      	str	r3, [sp, #4]
 80099e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099e8:	9300      	str	r3, [sp, #0]
 80099ea:	683b      	ldr	r3, [r7, #0]
 80099ec:	68b9      	ldr	r1, [r7, #8]
 80099ee:	68f8      	ldr	r0, [r7, #12]
 80099f0:	f000 f80e 	bl	8009a10 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80099f4:	69f8      	ldr	r0, [r7, #28]
 80099f6:	f000 f889 	bl	8009b0c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80099fa:	2301      	movs	r3, #1
 80099fc:	61bb      	str	r3, [r7, #24]
 80099fe:	e002      	b.n	8009a06 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009a00:	f04f 33ff 	mov.w	r3, #4294967295
 8009a04:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009a06:	69bb      	ldr	r3, [r7, #24]
	}
 8009a08:	4618      	mov	r0, r3
 8009a0a:	3720      	adds	r7, #32
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	bd80      	pop	{r7, pc}

08009a10 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b088      	sub	sp, #32
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	60f8      	str	r0, [r7, #12]
 8009a18:	60b9      	str	r1, [r7, #8]
 8009a1a:	607a      	str	r2, [r7, #4]
 8009a1c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8009a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009a28:	3b01      	subs	r3, #1
 8009a2a:	009b      	lsls	r3, r3, #2
 8009a2c:	4413      	add	r3, r2
 8009a2e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8009a30:	69bb      	ldr	r3, [r7, #24]
 8009a32:	f023 0307 	bic.w	r3, r3, #7
 8009a36:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009a38:	69bb      	ldr	r3, [r7, #24]
 8009a3a:	f003 0307 	and.w	r3, r3, #7
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d009      	beq.n	8009a56 <prvInitialiseNewTask+0x46>
 8009a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a46:	f383 8811 	msr	BASEPRI, r3
 8009a4a:	f3bf 8f6f 	isb	sy
 8009a4e:	f3bf 8f4f 	dsb	sy
 8009a52:	617b      	str	r3, [r7, #20]
 8009a54:	e7fe      	b.n	8009a54 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009a56:	2300      	movs	r3, #0
 8009a58:	61fb      	str	r3, [r7, #28]
 8009a5a:	e012      	b.n	8009a82 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009a5c:	68ba      	ldr	r2, [r7, #8]
 8009a5e:	69fb      	ldr	r3, [r7, #28]
 8009a60:	4413      	add	r3, r2
 8009a62:	7819      	ldrb	r1, [r3, #0]
 8009a64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a66:	69fb      	ldr	r3, [r7, #28]
 8009a68:	4413      	add	r3, r2
 8009a6a:	3334      	adds	r3, #52	; 0x34
 8009a6c:	460a      	mov	r2, r1
 8009a6e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8009a70:	68ba      	ldr	r2, [r7, #8]
 8009a72:	69fb      	ldr	r3, [r7, #28]
 8009a74:	4413      	add	r3, r2
 8009a76:	781b      	ldrb	r3, [r3, #0]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d006      	beq.n	8009a8a <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009a7c:	69fb      	ldr	r3, [r7, #28]
 8009a7e:	3301      	adds	r3, #1
 8009a80:	61fb      	str	r3, [r7, #28]
 8009a82:	69fb      	ldr	r3, [r7, #28]
 8009a84:	2b0f      	cmp	r3, #15
 8009a86:	d9e9      	bls.n	8009a5c <prvInitialiseNewTask+0x4c>
 8009a88:	e000      	b.n	8009a8c <prvInitialiseNewTask+0x7c>
		{
			break;
 8009a8a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a8e:	2200      	movs	r2, #0
 8009a90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a96:	2b06      	cmp	r3, #6
 8009a98:	d901      	bls.n	8009a9e <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009a9a:	2306      	movs	r3, #6
 8009a9c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aa0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009aa2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aa6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009aa8:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8009aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aac:	2200      	movs	r2, #0
 8009aae:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ab2:	3304      	adds	r3, #4
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	f7ff fb00 	bl	80090ba <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009abc:	3318      	adds	r3, #24
 8009abe:	4618      	mov	r0, r3
 8009ac0:	f7ff fafb 	bl	80090ba <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ac6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ac8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009acc:	f1c3 0207 	rsb	r2, r3, #7
 8009ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ad2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ad6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ad8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009adc:	2200      	movs	r2, #0
 8009ade:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009ae8:	683a      	ldr	r2, [r7, #0]
 8009aea:	68f9      	ldr	r1, [r7, #12]
 8009aec:	69b8      	ldr	r0, [r7, #24]
 8009aee:	f7ff fb75 	bl	80091dc <pxPortInitialiseStack>
 8009af2:	4602      	mov	r2, r0
 8009af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009af6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8009af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d002      	beq.n	8009b04 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b02:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009b04:	bf00      	nop
 8009b06:	3720      	adds	r7, #32
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	bd80      	pop	{r7, pc}

08009b0c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b082      	sub	sp, #8
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009b14:	f7ff fc50 	bl	80093b8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009b18:	4b2a      	ldr	r3, [pc, #168]	; (8009bc4 <prvAddNewTaskToReadyList+0xb8>)
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	3301      	adds	r3, #1
 8009b1e:	4a29      	ldr	r2, [pc, #164]	; (8009bc4 <prvAddNewTaskToReadyList+0xb8>)
 8009b20:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009b22:	4b29      	ldr	r3, [pc, #164]	; (8009bc8 <prvAddNewTaskToReadyList+0xbc>)
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d109      	bne.n	8009b3e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009b2a:	4a27      	ldr	r2, [pc, #156]	; (8009bc8 <prvAddNewTaskToReadyList+0xbc>)
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009b30:	4b24      	ldr	r3, [pc, #144]	; (8009bc4 <prvAddNewTaskToReadyList+0xb8>)
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	2b01      	cmp	r3, #1
 8009b36:	d110      	bne.n	8009b5a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009b38:	f000 fabc 	bl	800a0b4 <prvInitialiseTaskLists>
 8009b3c:	e00d      	b.n	8009b5a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009b3e:	4b23      	ldr	r3, [pc, #140]	; (8009bcc <prvAddNewTaskToReadyList+0xc0>)
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d109      	bne.n	8009b5a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009b46:	4b20      	ldr	r3, [pc, #128]	; (8009bc8 <prvAddNewTaskToReadyList+0xbc>)
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b50:	429a      	cmp	r2, r3
 8009b52:	d802      	bhi.n	8009b5a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009b54:	4a1c      	ldr	r2, [pc, #112]	; (8009bc8 <prvAddNewTaskToReadyList+0xbc>)
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009b5a:	4b1d      	ldr	r3, [pc, #116]	; (8009bd0 <prvAddNewTaskToReadyList+0xc4>)
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	3301      	adds	r3, #1
 8009b60:	4a1b      	ldr	r2, [pc, #108]	; (8009bd0 <prvAddNewTaskToReadyList+0xc4>)
 8009b62:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b68:	2201      	movs	r2, #1
 8009b6a:	409a      	lsls	r2, r3
 8009b6c:	4b19      	ldr	r3, [pc, #100]	; (8009bd4 <prvAddNewTaskToReadyList+0xc8>)
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	4313      	orrs	r3, r2
 8009b72:	4a18      	ldr	r2, [pc, #96]	; (8009bd4 <prvAddNewTaskToReadyList+0xc8>)
 8009b74:	6013      	str	r3, [r2, #0]
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b7a:	4613      	mov	r3, r2
 8009b7c:	009b      	lsls	r3, r3, #2
 8009b7e:	4413      	add	r3, r2
 8009b80:	009b      	lsls	r3, r3, #2
 8009b82:	4a15      	ldr	r2, [pc, #84]	; (8009bd8 <prvAddNewTaskToReadyList+0xcc>)
 8009b84:	441a      	add	r2, r3
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	3304      	adds	r3, #4
 8009b8a:	4619      	mov	r1, r3
 8009b8c:	4610      	mov	r0, r2
 8009b8e:	f7ff faa0 	bl	80090d2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009b92:	f7ff fc3f 	bl	8009414 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009b96:	4b0d      	ldr	r3, [pc, #52]	; (8009bcc <prvAddNewTaskToReadyList+0xc0>)
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d00e      	beq.n	8009bbc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009b9e:	4b0a      	ldr	r3, [pc, #40]	; (8009bc8 <prvAddNewTaskToReadyList+0xbc>)
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ba8:	429a      	cmp	r2, r3
 8009baa:	d207      	bcs.n	8009bbc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009bac:	4b0b      	ldr	r3, [pc, #44]	; (8009bdc <prvAddNewTaskToReadyList+0xd0>)
 8009bae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009bb2:	601a      	str	r2, [r3, #0]
 8009bb4:	f3bf 8f4f 	dsb	sy
 8009bb8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009bbc:	bf00      	nop
 8009bbe:	3708      	adds	r7, #8
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	bd80      	pop	{r7, pc}
 8009bc4:	20001110 	.word	0x20001110
 8009bc8:	20001010 	.word	0x20001010
 8009bcc:	2000111c 	.word	0x2000111c
 8009bd0:	2000112c 	.word	0x2000112c
 8009bd4:	20001118 	.word	0x20001118
 8009bd8:	20001014 	.word	0x20001014
 8009bdc:	e000ed04 	.word	0xe000ed04

08009be0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b084      	sub	sp, #16
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009be8:	2300      	movs	r3, #0
 8009bea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d016      	beq.n	8009c20 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009bf2:	4b13      	ldr	r3, [pc, #76]	; (8009c40 <vTaskDelay+0x60>)
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d009      	beq.n	8009c0e <vTaskDelay+0x2e>
 8009bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bfe:	f383 8811 	msr	BASEPRI, r3
 8009c02:	f3bf 8f6f 	isb	sy
 8009c06:	f3bf 8f4f 	dsb	sy
 8009c0a:	60bb      	str	r3, [r7, #8]
 8009c0c:	e7fe      	b.n	8009c0c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8009c0e:	f000 f879 	bl	8009d04 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009c12:	2100      	movs	r1, #0
 8009c14:	6878      	ldr	r0, [r7, #4]
 8009c16:	f000 fb0b 	bl	800a230 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009c1a:	f000 f881 	bl	8009d20 <xTaskResumeAll>
 8009c1e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d107      	bne.n	8009c36 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8009c26:	4b07      	ldr	r3, [pc, #28]	; (8009c44 <vTaskDelay+0x64>)
 8009c28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c2c:	601a      	str	r2, [r3, #0]
 8009c2e:	f3bf 8f4f 	dsb	sy
 8009c32:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009c36:	bf00      	nop
 8009c38:	3710      	adds	r7, #16
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	bd80      	pop	{r7, pc}
 8009c3e:	bf00      	nop
 8009c40:	20001138 	.word	0x20001138
 8009c44:	e000ed04 	.word	0xe000ed04

08009c48 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b08a      	sub	sp, #40	; 0x28
 8009c4c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009c4e:	2300      	movs	r3, #0
 8009c50:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009c52:	2300      	movs	r3, #0
 8009c54:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009c56:	463a      	mov	r2, r7
 8009c58:	1d39      	adds	r1, r7, #4
 8009c5a:	f107 0308 	add.w	r3, r7, #8
 8009c5e:	4618      	mov	r0, r3
 8009c60:	f7f6 faac 	bl	80001bc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009c64:	6839      	ldr	r1, [r7, #0]
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	68ba      	ldr	r2, [r7, #8]
 8009c6a:	9202      	str	r2, [sp, #8]
 8009c6c:	9301      	str	r3, [sp, #4]
 8009c6e:	2300      	movs	r3, #0
 8009c70:	9300      	str	r3, [sp, #0]
 8009c72:	2300      	movs	r3, #0
 8009c74:	460a      	mov	r2, r1
 8009c76:	491d      	ldr	r1, [pc, #116]	; (8009cec <vTaskStartScheduler+0xa4>)
 8009c78:	481d      	ldr	r0, [pc, #116]	; (8009cf0 <vTaskStartScheduler+0xa8>)
 8009c7a:	f7ff fe2b 	bl	80098d4 <xTaskCreateStatic>
 8009c7e:	4602      	mov	r2, r0
 8009c80:	4b1c      	ldr	r3, [pc, #112]	; (8009cf4 <vTaskStartScheduler+0xac>)
 8009c82:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009c84:	4b1b      	ldr	r3, [pc, #108]	; (8009cf4 <vTaskStartScheduler+0xac>)
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d002      	beq.n	8009c92 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009c8c:	2301      	movs	r3, #1
 8009c8e:	617b      	str	r3, [r7, #20]
 8009c90:	e001      	b.n	8009c96 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009c92:	2300      	movs	r3, #0
 8009c94:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009c96:	697b      	ldr	r3, [r7, #20]
 8009c98:	2b01      	cmp	r3, #1
 8009c9a:	d115      	bne.n	8009cc8 <vTaskStartScheduler+0x80>
 8009c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ca0:	f383 8811 	msr	BASEPRI, r3
 8009ca4:	f3bf 8f6f 	isb	sy
 8009ca8:	f3bf 8f4f 	dsb	sy
 8009cac:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009cae:	4b12      	ldr	r3, [pc, #72]	; (8009cf8 <vTaskStartScheduler+0xb0>)
 8009cb0:	f04f 32ff 	mov.w	r2, #4294967295
 8009cb4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009cb6:	4b11      	ldr	r3, [pc, #68]	; (8009cfc <vTaskStartScheduler+0xb4>)
 8009cb8:	2201      	movs	r2, #1
 8009cba:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8009cbc:	4b10      	ldr	r3, [pc, #64]	; (8009d00 <vTaskStartScheduler+0xb8>)
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009cc2:	f7ff fb09 	bl	80092d8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009cc6:	e00d      	b.n	8009ce4 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009cc8:	697b      	ldr	r3, [r7, #20]
 8009cca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cce:	d109      	bne.n	8009ce4 <vTaskStartScheduler+0x9c>
 8009cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cd4:	f383 8811 	msr	BASEPRI, r3
 8009cd8:	f3bf 8f6f 	isb	sy
 8009cdc:	f3bf 8f4f 	dsb	sy
 8009ce0:	60fb      	str	r3, [r7, #12]
 8009ce2:	e7fe      	b.n	8009ce2 <vTaskStartScheduler+0x9a>
}
 8009ce4:	bf00      	nop
 8009ce6:	3718      	adds	r7, #24
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	bd80      	pop	{r7, pc}
 8009cec:	0800b0ac 	.word	0x0800b0ac
 8009cf0:	0800a085 	.word	0x0800a085
 8009cf4:	20001134 	.word	0x20001134
 8009cf8:	20001130 	.word	0x20001130
 8009cfc:	2000111c 	.word	0x2000111c
 8009d00:	20001114 	.word	0x20001114

08009d04 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009d04:	b480      	push	{r7}
 8009d06:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009d08:	4b04      	ldr	r3, [pc, #16]	; (8009d1c <vTaskSuspendAll+0x18>)
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	3301      	adds	r3, #1
 8009d0e:	4a03      	ldr	r2, [pc, #12]	; (8009d1c <vTaskSuspendAll+0x18>)
 8009d10:	6013      	str	r3, [r2, #0]
}
 8009d12:	bf00      	nop
 8009d14:	46bd      	mov	sp, r7
 8009d16:	bc80      	pop	{r7}
 8009d18:	4770      	bx	lr
 8009d1a:	bf00      	nop
 8009d1c:	20001138 	.word	0x20001138

08009d20 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b084      	sub	sp, #16
 8009d24:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009d26:	2300      	movs	r3, #0
 8009d28:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009d2e:	4b41      	ldr	r3, [pc, #260]	; (8009e34 <xTaskResumeAll+0x114>)
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d109      	bne.n	8009d4a <xTaskResumeAll+0x2a>
 8009d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d3a:	f383 8811 	msr	BASEPRI, r3
 8009d3e:	f3bf 8f6f 	isb	sy
 8009d42:	f3bf 8f4f 	dsb	sy
 8009d46:	603b      	str	r3, [r7, #0]
 8009d48:	e7fe      	b.n	8009d48 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009d4a:	f7ff fb35 	bl	80093b8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009d4e:	4b39      	ldr	r3, [pc, #228]	; (8009e34 <xTaskResumeAll+0x114>)
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	3b01      	subs	r3, #1
 8009d54:	4a37      	ldr	r2, [pc, #220]	; (8009e34 <xTaskResumeAll+0x114>)
 8009d56:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009d58:	4b36      	ldr	r3, [pc, #216]	; (8009e34 <xTaskResumeAll+0x114>)
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d161      	bne.n	8009e24 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009d60:	4b35      	ldr	r3, [pc, #212]	; (8009e38 <xTaskResumeAll+0x118>)
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d05d      	beq.n	8009e24 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009d68:	e02e      	b.n	8009dc8 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8009d6a:	4b34      	ldr	r3, [pc, #208]	; (8009e3c <xTaskResumeAll+0x11c>)
 8009d6c:	68db      	ldr	r3, [r3, #12]
 8009d6e:	68db      	ldr	r3, [r3, #12]
 8009d70:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	3318      	adds	r3, #24
 8009d76:	4618      	mov	r0, r3
 8009d78:	f7ff fa06 	bl	8009188 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	3304      	adds	r3, #4
 8009d80:	4618      	mov	r0, r3
 8009d82:	f7ff fa01 	bl	8009188 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d8a:	2201      	movs	r2, #1
 8009d8c:	409a      	lsls	r2, r3
 8009d8e:	4b2c      	ldr	r3, [pc, #176]	; (8009e40 <xTaskResumeAll+0x120>)
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	4313      	orrs	r3, r2
 8009d94:	4a2a      	ldr	r2, [pc, #168]	; (8009e40 <xTaskResumeAll+0x120>)
 8009d96:	6013      	str	r3, [r2, #0]
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d9c:	4613      	mov	r3, r2
 8009d9e:	009b      	lsls	r3, r3, #2
 8009da0:	4413      	add	r3, r2
 8009da2:	009b      	lsls	r3, r3, #2
 8009da4:	4a27      	ldr	r2, [pc, #156]	; (8009e44 <xTaskResumeAll+0x124>)
 8009da6:	441a      	add	r2, r3
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	3304      	adds	r3, #4
 8009dac:	4619      	mov	r1, r3
 8009dae:	4610      	mov	r0, r2
 8009db0:	f7ff f98f 	bl	80090d2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009db8:	4b23      	ldr	r3, [pc, #140]	; (8009e48 <xTaskResumeAll+0x128>)
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dbe:	429a      	cmp	r2, r3
 8009dc0:	d302      	bcc.n	8009dc8 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8009dc2:	4b22      	ldr	r3, [pc, #136]	; (8009e4c <xTaskResumeAll+0x12c>)
 8009dc4:	2201      	movs	r2, #1
 8009dc6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009dc8:	4b1c      	ldr	r3, [pc, #112]	; (8009e3c <xTaskResumeAll+0x11c>)
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d1cc      	bne.n	8009d6a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d001      	beq.n	8009dda <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009dd6:	f000 fa07 	bl	800a1e8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009dda:	4b1d      	ldr	r3, [pc, #116]	; (8009e50 <xTaskResumeAll+0x130>)
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d010      	beq.n	8009e08 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009de6:	f000 f837 	bl	8009e58 <xTaskIncrementTick>
 8009dea:	4603      	mov	r3, r0
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d002      	beq.n	8009df6 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8009df0:	4b16      	ldr	r3, [pc, #88]	; (8009e4c <xTaskResumeAll+0x12c>)
 8009df2:	2201      	movs	r2, #1
 8009df4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	3b01      	subs	r3, #1
 8009dfa:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d1f1      	bne.n	8009de6 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8009e02:	4b13      	ldr	r3, [pc, #76]	; (8009e50 <xTaskResumeAll+0x130>)
 8009e04:	2200      	movs	r2, #0
 8009e06:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009e08:	4b10      	ldr	r3, [pc, #64]	; (8009e4c <xTaskResumeAll+0x12c>)
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d009      	beq.n	8009e24 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009e10:	2301      	movs	r3, #1
 8009e12:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009e14:	4b0f      	ldr	r3, [pc, #60]	; (8009e54 <xTaskResumeAll+0x134>)
 8009e16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e1a:	601a      	str	r2, [r3, #0]
 8009e1c:	f3bf 8f4f 	dsb	sy
 8009e20:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009e24:	f7ff faf6 	bl	8009414 <vPortExitCritical>

	return xAlreadyYielded;
 8009e28:	68bb      	ldr	r3, [r7, #8]
}
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	3710      	adds	r7, #16
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	bd80      	pop	{r7, pc}
 8009e32:	bf00      	nop
 8009e34:	20001138 	.word	0x20001138
 8009e38:	20001110 	.word	0x20001110
 8009e3c:	200010d0 	.word	0x200010d0
 8009e40:	20001118 	.word	0x20001118
 8009e44:	20001014 	.word	0x20001014
 8009e48:	20001010 	.word	0x20001010
 8009e4c:	20001124 	.word	0x20001124
 8009e50:	20001120 	.word	0x20001120
 8009e54:	e000ed04 	.word	0xe000ed04

08009e58 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b086      	sub	sp, #24
 8009e5c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009e5e:	2300      	movs	r3, #0
 8009e60:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009e62:	4b50      	ldr	r3, [pc, #320]	; (8009fa4 <xTaskIncrementTick+0x14c>)
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	f040 808c 	bne.w	8009f84 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009e6c:	4b4e      	ldr	r3, [pc, #312]	; (8009fa8 <xTaskIncrementTick+0x150>)
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	3301      	adds	r3, #1
 8009e72:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009e74:	4a4c      	ldr	r2, [pc, #304]	; (8009fa8 <xTaskIncrementTick+0x150>)
 8009e76:	693b      	ldr	r3, [r7, #16]
 8009e78:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009e7a:	693b      	ldr	r3, [r7, #16]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d11f      	bne.n	8009ec0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8009e80:	4b4a      	ldr	r3, [pc, #296]	; (8009fac <xTaskIncrementTick+0x154>)
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d009      	beq.n	8009e9e <xTaskIncrementTick+0x46>
 8009e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e8e:	f383 8811 	msr	BASEPRI, r3
 8009e92:	f3bf 8f6f 	isb	sy
 8009e96:	f3bf 8f4f 	dsb	sy
 8009e9a:	603b      	str	r3, [r7, #0]
 8009e9c:	e7fe      	b.n	8009e9c <xTaskIncrementTick+0x44>
 8009e9e:	4b43      	ldr	r3, [pc, #268]	; (8009fac <xTaskIncrementTick+0x154>)
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	60fb      	str	r3, [r7, #12]
 8009ea4:	4b42      	ldr	r3, [pc, #264]	; (8009fb0 <xTaskIncrementTick+0x158>)
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	4a40      	ldr	r2, [pc, #256]	; (8009fac <xTaskIncrementTick+0x154>)
 8009eaa:	6013      	str	r3, [r2, #0]
 8009eac:	4a40      	ldr	r2, [pc, #256]	; (8009fb0 <xTaskIncrementTick+0x158>)
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	6013      	str	r3, [r2, #0]
 8009eb2:	4b40      	ldr	r3, [pc, #256]	; (8009fb4 <xTaskIncrementTick+0x15c>)
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	3301      	adds	r3, #1
 8009eb8:	4a3e      	ldr	r2, [pc, #248]	; (8009fb4 <xTaskIncrementTick+0x15c>)
 8009eba:	6013      	str	r3, [r2, #0]
 8009ebc:	f000 f994 	bl	800a1e8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009ec0:	4b3d      	ldr	r3, [pc, #244]	; (8009fb8 <xTaskIncrementTick+0x160>)
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	693a      	ldr	r2, [r7, #16]
 8009ec6:	429a      	cmp	r2, r3
 8009ec8:	d34d      	bcc.n	8009f66 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009eca:	4b38      	ldr	r3, [pc, #224]	; (8009fac <xTaskIncrementTick+0x154>)
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d101      	bne.n	8009ed8 <xTaskIncrementTick+0x80>
 8009ed4:	2301      	movs	r3, #1
 8009ed6:	e000      	b.n	8009eda <xTaskIncrementTick+0x82>
 8009ed8:	2300      	movs	r3, #0
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d004      	beq.n	8009ee8 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ede:	4b36      	ldr	r3, [pc, #216]	; (8009fb8 <xTaskIncrementTick+0x160>)
 8009ee0:	f04f 32ff 	mov.w	r2, #4294967295
 8009ee4:	601a      	str	r2, [r3, #0]
					break;
 8009ee6:	e03e      	b.n	8009f66 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009ee8:	4b30      	ldr	r3, [pc, #192]	; (8009fac <xTaskIncrementTick+0x154>)
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	68db      	ldr	r3, [r3, #12]
 8009eee:	68db      	ldr	r3, [r3, #12]
 8009ef0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009ef2:	68bb      	ldr	r3, [r7, #8]
 8009ef4:	685b      	ldr	r3, [r3, #4]
 8009ef6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009ef8:	693a      	ldr	r2, [r7, #16]
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	429a      	cmp	r2, r3
 8009efe:	d203      	bcs.n	8009f08 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009f00:	4a2d      	ldr	r2, [pc, #180]	; (8009fb8 <xTaskIncrementTick+0x160>)
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	6013      	str	r3, [r2, #0]
						break;
 8009f06:	e02e      	b.n	8009f66 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009f08:	68bb      	ldr	r3, [r7, #8]
 8009f0a:	3304      	adds	r3, #4
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	f7ff f93b 	bl	8009188 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009f12:	68bb      	ldr	r3, [r7, #8]
 8009f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d004      	beq.n	8009f24 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009f1a:	68bb      	ldr	r3, [r7, #8]
 8009f1c:	3318      	adds	r3, #24
 8009f1e:	4618      	mov	r0, r3
 8009f20:	f7ff f932 	bl	8009188 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009f24:	68bb      	ldr	r3, [r7, #8]
 8009f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f28:	2201      	movs	r2, #1
 8009f2a:	409a      	lsls	r2, r3
 8009f2c:	4b23      	ldr	r3, [pc, #140]	; (8009fbc <xTaskIncrementTick+0x164>)
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	4313      	orrs	r3, r2
 8009f32:	4a22      	ldr	r2, [pc, #136]	; (8009fbc <xTaskIncrementTick+0x164>)
 8009f34:	6013      	str	r3, [r2, #0]
 8009f36:	68bb      	ldr	r3, [r7, #8]
 8009f38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f3a:	4613      	mov	r3, r2
 8009f3c:	009b      	lsls	r3, r3, #2
 8009f3e:	4413      	add	r3, r2
 8009f40:	009b      	lsls	r3, r3, #2
 8009f42:	4a1f      	ldr	r2, [pc, #124]	; (8009fc0 <xTaskIncrementTick+0x168>)
 8009f44:	441a      	add	r2, r3
 8009f46:	68bb      	ldr	r3, [r7, #8]
 8009f48:	3304      	adds	r3, #4
 8009f4a:	4619      	mov	r1, r3
 8009f4c:	4610      	mov	r0, r2
 8009f4e:	f7ff f8c0 	bl	80090d2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009f52:	68bb      	ldr	r3, [r7, #8]
 8009f54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f56:	4b1b      	ldr	r3, [pc, #108]	; (8009fc4 <xTaskIncrementTick+0x16c>)
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f5c:	429a      	cmp	r2, r3
 8009f5e:	d3b4      	bcc.n	8009eca <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8009f60:	2301      	movs	r3, #1
 8009f62:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009f64:	e7b1      	b.n	8009eca <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009f66:	4b17      	ldr	r3, [pc, #92]	; (8009fc4 <xTaskIncrementTick+0x16c>)
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f6c:	4914      	ldr	r1, [pc, #80]	; (8009fc0 <xTaskIncrementTick+0x168>)
 8009f6e:	4613      	mov	r3, r2
 8009f70:	009b      	lsls	r3, r3, #2
 8009f72:	4413      	add	r3, r2
 8009f74:	009b      	lsls	r3, r3, #2
 8009f76:	440b      	add	r3, r1
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	2b01      	cmp	r3, #1
 8009f7c:	d907      	bls.n	8009f8e <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8009f7e:	2301      	movs	r3, #1
 8009f80:	617b      	str	r3, [r7, #20]
 8009f82:	e004      	b.n	8009f8e <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009f84:	4b10      	ldr	r3, [pc, #64]	; (8009fc8 <xTaskIncrementTick+0x170>)
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	3301      	adds	r3, #1
 8009f8a:	4a0f      	ldr	r2, [pc, #60]	; (8009fc8 <xTaskIncrementTick+0x170>)
 8009f8c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009f8e:	4b0f      	ldr	r3, [pc, #60]	; (8009fcc <xTaskIncrementTick+0x174>)
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d001      	beq.n	8009f9a <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8009f96:	2301      	movs	r3, #1
 8009f98:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009f9a:	697b      	ldr	r3, [r7, #20]
}
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	3718      	adds	r7, #24
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	bd80      	pop	{r7, pc}
 8009fa4:	20001138 	.word	0x20001138
 8009fa8:	20001114 	.word	0x20001114
 8009fac:	200010c8 	.word	0x200010c8
 8009fb0:	200010cc 	.word	0x200010cc
 8009fb4:	20001128 	.word	0x20001128
 8009fb8:	20001130 	.word	0x20001130
 8009fbc:	20001118 	.word	0x20001118
 8009fc0:	20001014 	.word	0x20001014
 8009fc4:	20001010 	.word	0x20001010
 8009fc8:	20001120 	.word	0x20001120
 8009fcc:	20001124 	.word	0x20001124

08009fd0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009fd0:	b480      	push	{r7}
 8009fd2:	b087      	sub	sp, #28
 8009fd4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009fd6:	4b26      	ldr	r3, [pc, #152]	; (800a070 <vTaskSwitchContext+0xa0>)
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d003      	beq.n	8009fe6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009fde:	4b25      	ldr	r3, [pc, #148]	; (800a074 <vTaskSwitchContext+0xa4>)
 8009fe0:	2201      	movs	r2, #1
 8009fe2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009fe4:	e03e      	b.n	800a064 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8009fe6:	4b23      	ldr	r3, [pc, #140]	; (800a074 <vTaskSwitchContext+0xa4>)
 8009fe8:	2200      	movs	r2, #0
 8009fea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8009fec:	4b22      	ldr	r3, [pc, #136]	; (800a078 <vTaskSwitchContext+0xa8>)
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	fab3 f383 	clz	r3, r3
 8009ff8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8009ffa:	7afb      	ldrb	r3, [r7, #11]
 8009ffc:	f1c3 031f 	rsb	r3, r3, #31
 800a000:	617b      	str	r3, [r7, #20]
 800a002:	491e      	ldr	r1, [pc, #120]	; (800a07c <vTaskSwitchContext+0xac>)
 800a004:	697a      	ldr	r2, [r7, #20]
 800a006:	4613      	mov	r3, r2
 800a008:	009b      	lsls	r3, r3, #2
 800a00a:	4413      	add	r3, r2
 800a00c:	009b      	lsls	r3, r3, #2
 800a00e:	440b      	add	r3, r1
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d109      	bne.n	800a02a <vTaskSwitchContext+0x5a>
	__asm volatile
 800a016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a01a:	f383 8811 	msr	BASEPRI, r3
 800a01e:	f3bf 8f6f 	isb	sy
 800a022:	f3bf 8f4f 	dsb	sy
 800a026:	607b      	str	r3, [r7, #4]
 800a028:	e7fe      	b.n	800a028 <vTaskSwitchContext+0x58>
 800a02a:	697a      	ldr	r2, [r7, #20]
 800a02c:	4613      	mov	r3, r2
 800a02e:	009b      	lsls	r3, r3, #2
 800a030:	4413      	add	r3, r2
 800a032:	009b      	lsls	r3, r3, #2
 800a034:	4a11      	ldr	r2, [pc, #68]	; (800a07c <vTaskSwitchContext+0xac>)
 800a036:	4413      	add	r3, r2
 800a038:	613b      	str	r3, [r7, #16]
 800a03a:	693b      	ldr	r3, [r7, #16]
 800a03c:	685b      	ldr	r3, [r3, #4]
 800a03e:	685a      	ldr	r2, [r3, #4]
 800a040:	693b      	ldr	r3, [r7, #16]
 800a042:	605a      	str	r2, [r3, #4]
 800a044:	693b      	ldr	r3, [r7, #16]
 800a046:	685a      	ldr	r2, [r3, #4]
 800a048:	693b      	ldr	r3, [r7, #16]
 800a04a:	3308      	adds	r3, #8
 800a04c:	429a      	cmp	r2, r3
 800a04e:	d104      	bne.n	800a05a <vTaskSwitchContext+0x8a>
 800a050:	693b      	ldr	r3, [r7, #16]
 800a052:	685b      	ldr	r3, [r3, #4]
 800a054:	685a      	ldr	r2, [r3, #4]
 800a056:	693b      	ldr	r3, [r7, #16]
 800a058:	605a      	str	r2, [r3, #4]
 800a05a:	693b      	ldr	r3, [r7, #16]
 800a05c:	685b      	ldr	r3, [r3, #4]
 800a05e:	68db      	ldr	r3, [r3, #12]
 800a060:	4a07      	ldr	r2, [pc, #28]	; (800a080 <vTaskSwitchContext+0xb0>)
 800a062:	6013      	str	r3, [r2, #0]
}
 800a064:	bf00      	nop
 800a066:	371c      	adds	r7, #28
 800a068:	46bd      	mov	sp, r7
 800a06a:	bc80      	pop	{r7}
 800a06c:	4770      	bx	lr
 800a06e:	bf00      	nop
 800a070:	20001138 	.word	0x20001138
 800a074:	20001124 	.word	0x20001124
 800a078:	20001118 	.word	0x20001118
 800a07c:	20001014 	.word	0x20001014
 800a080:	20001010 	.word	0x20001010

0800a084 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a084:	b580      	push	{r7, lr}
 800a086:	b082      	sub	sp, #8
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a08c:	f000 f852 	bl	800a134 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a090:	4b06      	ldr	r3, [pc, #24]	; (800a0ac <prvIdleTask+0x28>)
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	2b01      	cmp	r3, #1
 800a096:	d9f9      	bls.n	800a08c <prvIdleTask+0x8>
			{
				taskYIELD();
 800a098:	4b05      	ldr	r3, [pc, #20]	; (800a0b0 <prvIdleTask+0x2c>)
 800a09a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a09e:	601a      	str	r2, [r3, #0]
 800a0a0:	f3bf 8f4f 	dsb	sy
 800a0a4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a0a8:	e7f0      	b.n	800a08c <prvIdleTask+0x8>
 800a0aa:	bf00      	nop
 800a0ac:	20001014 	.word	0x20001014
 800a0b0:	e000ed04 	.word	0xe000ed04

0800a0b4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b082      	sub	sp, #8
 800a0b8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	607b      	str	r3, [r7, #4]
 800a0be:	e00c      	b.n	800a0da <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a0c0:	687a      	ldr	r2, [r7, #4]
 800a0c2:	4613      	mov	r3, r2
 800a0c4:	009b      	lsls	r3, r3, #2
 800a0c6:	4413      	add	r3, r2
 800a0c8:	009b      	lsls	r3, r3, #2
 800a0ca:	4a12      	ldr	r2, [pc, #72]	; (800a114 <prvInitialiseTaskLists+0x60>)
 800a0cc:	4413      	add	r3, r2
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	f7fe ffd4 	bl	800907c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	3301      	adds	r3, #1
 800a0d8:	607b      	str	r3, [r7, #4]
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	2b06      	cmp	r3, #6
 800a0de:	d9ef      	bls.n	800a0c0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a0e0:	480d      	ldr	r0, [pc, #52]	; (800a118 <prvInitialiseTaskLists+0x64>)
 800a0e2:	f7fe ffcb 	bl	800907c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a0e6:	480d      	ldr	r0, [pc, #52]	; (800a11c <prvInitialiseTaskLists+0x68>)
 800a0e8:	f7fe ffc8 	bl	800907c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a0ec:	480c      	ldr	r0, [pc, #48]	; (800a120 <prvInitialiseTaskLists+0x6c>)
 800a0ee:	f7fe ffc5 	bl	800907c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a0f2:	480c      	ldr	r0, [pc, #48]	; (800a124 <prvInitialiseTaskLists+0x70>)
 800a0f4:	f7fe ffc2 	bl	800907c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a0f8:	480b      	ldr	r0, [pc, #44]	; (800a128 <prvInitialiseTaskLists+0x74>)
 800a0fa:	f7fe ffbf 	bl	800907c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a0fe:	4b0b      	ldr	r3, [pc, #44]	; (800a12c <prvInitialiseTaskLists+0x78>)
 800a100:	4a05      	ldr	r2, [pc, #20]	; (800a118 <prvInitialiseTaskLists+0x64>)
 800a102:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a104:	4b0a      	ldr	r3, [pc, #40]	; (800a130 <prvInitialiseTaskLists+0x7c>)
 800a106:	4a05      	ldr	r2, [pc, #20]	; (800a11c <prvInitialiseTaskLists+0x68>)
 800a108:	601a      	str	r2, [r3, #0]
}
 800a10a:	bf00      	nop
 800a10c:	3708      	adds	r7, #8
 800a10e:	46bd      	mov	sp, r7
 800a110:	bd80      	pop	{r7, pc}
 800a112:	bf00      	nop
 800a114:	20001014 	.word	0x20001014
 800a118:	200010a0 	.word	0x200010a0
 800a11c:	200010b4 	.word	0x200010b4
 800a120:	200010d0 	.word	0x200010d0
 800a124:	200010e4 	.word	0x200010e4
 800a128:	200010fc 	.word	0x200010fc
 800a12c:	200010c8 	.word	0x200010c8
 800a130:	200010cc 	.word	0x200010cc

0800a134 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a134:	b580      	push	{r7, lr}
 800a136:	b082      	sub	sp, #8
 800a138:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a13a:	e019      	b.n	800a170 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a13c:	f7ff f93c 	bl	80093b8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800a140:	4b0f      	ldr	r3, [pc, #60]	; (800a180 <prvCheckTasksWaitingTermination+0x4c>)
 800a142:	68db      	ldr	r3, [r3, #12]
 800a144:	68db      	ldr	r3, [r3, #12]
 800a146:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	3304      	adds	r3, #4
 800a14c:	4618      	mov	r0, r3
 800a14e:	f7ff f81b 	bl	8009188 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a152:	4b0c      	ldr	r3, [pc, #48]	; (800a184 <prvCheckTasksWaitingTermination+0x50>)
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	3b01      	subs	r3, #1
 800a158:	4a0a      	ldr	r2, [pc, #40]	; (800a184 <prvCheckTasksWaitingTermination+0x50>)
 800a15a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a15c:	4b0a      	ldr	r3, [pc, #40]	; (800a188 <prvCheckTasksWaitingTermination+0x54>)
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	3b01      	subs	r3, #1
 800a162:	4a09      	ldr	r2, [pc, #36]	; (800a188 <prvCheckTasksWaitingTermination+0x54>)
 800a164:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a166:	f7ff f955 	bl	8009414 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a16a:	6878      	ldr	r0, [r7, #4]
 800a16c:	f000 f80e 	bl	800a18c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a170:	4b05      	ldr	r3, [pc, #20]	; (800a188 <prvCheckTasksWaitingTermination+0x54>)
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d1e1      	bne.n	800a13c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a178:	bf00      	nop
 800a17a:	3708      	adds	r7, #8
 800a17c:	46bd      	mov	sp, r7
 800a17e:	bd80      	pop	{r7, pc}
 800a180:	200010e4 	.word	0x200010e4
 800a184:	20001110 	.word	0x20001110
 800a188:	200010f8 	.word	0x200010f8

0800a18c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b084      	sub	sp, #16
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d108      	bne.n	800a1b0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	f7ff fa84 	bl	80096b0 <vPortFree>
				vPortFree( pxTCB );
 800a1a8:	6878      	ldr	r0, [r7, #4]
 800a1aa:	f7ff fa81 	bl	80096b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a1ae:	e017      	b.n	800a1e0 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a1b6:	2b01      	cmp	r3, #1
 800a1b8:	d103      	bne.n	800a1c2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a1ba:	6878      	ldr	r0, [r7, #4]
 800a1bc:	f7ff fa78 	bl	80096b0 <vPortFree>
	}
 800a1c0:	e00e      	b.n	800a1e0 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a1c8:	2b02      	cmp	r3, #2
 800a1ca:	d009      	beq.n	800a1e0 <prvDeleteTCB+0x54>
 800a1cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1d0:	f383 8811 	msr	BASEPRI, r3
 800a1d4:	f3bf 8f6f 	isb	sy
 800a1d8:	f3bf 8f4f 	dsb	sy
 800a1dc:	60fb      	str	r3, [r7, #12]
 800a1de:	e7fe      	b.n	800a1de <prvDeleteTCB+0x52>
	}
 800a1e0:	bf00      	nop
 800a1e2:	3710      	adds	r7, #16
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	bd80      	pop	{r7, pc}

0800a1e8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a1e8:	b480      	push	{r7}
 800a1ea:	b083      	sub	sp, #12
 800a1ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a1ee:	4b0e      	ldr	r3, [pc, #56]	; (800a228 <prvResetNextTaskUnblockTime+0x40>)
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d101      	bne.n	800a1fc <prvResetNextTaskUnblockTime+0x14>
 800a1f8:	2301      	movs	r3, #1
 800a1fa:	e000      	b.n	800a1fe <prvResetNextTaskUnblockTime+0x16>
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d004      	beq.n	800a20c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a202:	4b0a      	ldr	r3, [pc, #40]	; (800a22c <prvResetNextTaskUnblockTime+0x44>)
 800a204:	f04f 32ff 	mov.w	r2, #4294967295
 800a208:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a20a:	e008      	b.n	800a21e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800a20c:	4b06      	ldr	r3, [pc, #24]	; (800a228 <prvResetNextTaskUnblockTime+0x40>)
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	68db      	ldr	r3, [r3, #12]
 800a212:	68db      	ldr	r3, [r3, #12]
 800a214:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	685b      	ldr	r3, [r3, #4]
 800a21a:	4a04      	ldr	r2, [pc, #16]	; (800a22c <prvResetNextTaskUnblockTime+0x44>)
 800a21c:	6013      	str	r3, [r2, #0]
}
 800a21e:	bf00      	nop
 800a220:	370c      	adds	r7, #12
 800a222:	46bd      	mov	sp, r7
 800a224:	bc80      	pop	{r7}
 800a226:	4770      	bx	lr
 800a228:	200010c8 	.word	0x200010c8
 800a22c:	20001130 	.word	0x20001130

0800a230 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a230:	b580      	push	{r7, lr}
 800a232:	b084      	sub	sp, #16
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
 800a238:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a23a:	4b29      	ldr	r3, [pc, #164]	; (800a2e0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a240:	4b28      	ldr	r3, [pc, #160]	; (800a2e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	3304      	adds	r3, #4
 800a246:	4618      	mov	r0, r3
 800a248:	f7fe ff9e 	bl	8009188 <uxListRemove>
 800a24c:	4603      	mov	r3, r0
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d10b      	bne.n	800a26a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800a252:	4b24      	ldr	r3, [pc, #144]	; (800a2e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a258:	2201      	movs	r2, #1
 800a25a:	fa02 f303 	lsl.w	r3, r2, r3
 800a25e:	43da      	mvns	r2, r3
 800a260:	4b21      	ldr	r3, [pc, #132]	; (800a2e8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	4013      	ands	r3, r2
 800a266:	4a20      	ldr	r2, [pc, #128]	; (800a2e8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a268:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a270:	d10a      	bne.n	800a288 <prvAddCurrentTaskToDelayedList+0x58>
 800a272:	683b      	ldr	r3, [r7, #0]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d007      	beq.n	800a288 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a278:	4b1a      	ldr	r3, [pc, #104]	; (800a2e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	3304      	adds	r3, #4
 800a27e:	4619      	mov	r1, r3
 800a280:	481a      	ldr	r0, [pc, #104]	; (800a2ec <prvAddCurrentTaskToDelayedList+0xbc>)
 800a282:	f7fe ff26 	bl	80090d2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a286:	e026      	b.n	800a2d6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a288:	68fa      	ldr	r2, [r7, #12]
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	4413      	add	r3, r2
 800a28e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a290:	4b14      	ldr	r3, [pc, #80]	; (800a2e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	68ba      	ldr	r2, [r7, #8]
 800a296:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a298:	68ba      	ldr	r2, [r7, #8]
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	429a      	cmp	r2, r3
 800a29e:	d209      	bcs.n	800a2b4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a2a0:	4b13      	ldr	r3, [pc, #76]	; (800a2f0 <prvAddCurrentTaskToDelayedList+0xc0>)
 800a2a2:	681a      	ldr	r2, [r3, #0]
 800a2a4:	4b0f      	ldr	r3, [pc, #60]	; (800a2e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	3304      	adds	r3, #4
 800a2aa:	4619      	mov	r1, r3
 800a2ac:	4610      	mov	r0, r2
 800a2ae:	f7fe ff33 	bl	8009118 <vListInsert>
}
 800a2b2:	e010      	b.n	800a2d6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a2b4:	4b0f      	ldr	r3, [pc, #60]	; (800a2f4 <prvAddCurrentTaskToDelayedList+0xc4>)
 800a2b6:	681a      	ldr	r2, [r3, #0]
 800a2b8:	4b0a      	ldr	r3, [pc, #40]	; (800a2e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	3304      	adds	r3, #4
 800a2be:	4619      	mov	r1, r3
 800a2c0:	4610      	mov	r0, r2
 800a2c2:	f7fe ff29 	bl	8009118 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a2c6:	4b0c      	ldr	r3, [pc, #48]	; (800a2f8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	68ba      	ldr	r2, [r7, #8]
 800a2cc:	429a      	cmp	r2, r3
 800a2ce:	d202      	bcs.n	800a2d6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800a2d0:	4a09      	ldr	r2, [pc, #36]	; (800a2f8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a2d2:	68bb      	ldr	r3, [r7, #8]
 800a2d4:	6013      	str	r3, [r2, #0]
}
 800a2d6:	bf00      	nop
 800a2d8:	3710      	adds	r7, #16
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	bd80      	pop	{r7, pc}
 800a2de:	bf00      	nop
 800a2e0:	20001114 	.word	0x20001114
 800a2e4:	20001010 	.word	0x20001010
 800a2e8:	20001118 	.word	0x20001118
 800a2ec:	200010fc 	.word	0x200010fc
 800a2f0:	200010cc 	.word	0x200010cc
 800a2f4:	200010c8 	.word	0x200010c8
 800a2f8:	20001130 	.word	0x20001130

0800a2fc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a2fc:	b580      	push	{r7, lr}
 800a2fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a300:	2200      	movs	r2, #0
 800a302:	4912      	ldr	r1, [pc, #72]	; (800a34c <MX_USB_DEVICE_Init+0x50>)
 800a304:	4812      	ldr	r0, [pc, #72]	; (800a350 <MX_USB_DEVICE_Init+0x54>)
 800a306:	f7fd fdae 	bl	8007e66 <USBD_Init>
 800a30a:	4603      	mov	r3, r0
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d001      	beq.n	800a314 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a310:	f7f6 f92c 	bl	800056c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a314:	490f      	ldr	r1, [pc, #60]	; (800a354 <MX_USB_DEVICE_Init+0x58>)
 800a316:	480e      	ldr	r0, [pc, #56]	; (800a350 <MX_USB_DEVICE_Init+0x54>)
 800a318:	f7fd fdd0 	bl	8007ebc <USBD_RegisterClass>
 800a31c:	4603      	mov	r3, r0
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d001      	beq.n	800a326 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a322:	f7f6 f923 	bl	800056c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a326:	490c      	ldr	r1, [pc, #48]	; (800a358 <MX_USB_DEVICE_Init+0x5c>)
 800a328:	4809      	ldr	r0, [pc, #36]	; (800a350 <MX_USB_DEVICE_Init+0x54>)
 800a32a:	f7fd fd01 	bl	8007d30 <USBD_CDC_RegisterInterface>
 800a32e:	4603      	mov	r3, r0
 800a330:	2b00      	cmp	r3, #0
 800a332:	d001      	beq.n	800a338 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a334:	f7f6 f91a 	bl	800056c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a338:	4805      	ldr	r0, [pc, #20]	; (800a350 <MX_USB_DEVICE_Init+0x54>)
 800a33a:	f7fd fdd8 	bl	8007eee <USBD_Start>
 800a33e:	4603      	mov	r3, r0
 800a340:	2b00      	cmp	r3, #0
 800a342:	d001      	beq.n	800a348 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a344:	f7f6 f912 	bl	800056c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a348:	bf00      	nop
 800a34a:	bd80      	pop	{r7, pc}
 800a34c:	20000130 	.word	0x20000130
 800a350:	200017ac 	.word	0x200017ac
 800a354:	20000018 	.word	0x20000018
 800a358:	20000120 	.word	0x20000120

0800a35c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a35c:	b580      	push	{r7, lr}
 800a35e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a360:	2200      	movs	r2, #0
 800a362:	4905      	ldr	r1, [pc, #20]	; (800a378 <CDC_Init_FS+0x1c>)
 800a364:	4805      	ldr	r0, [pc, #20]	; (800a37c <CDC_Init_FS+0x20>)
 800a366:	f7fd fcf9 	bl	8007d5c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a36a:	4905      	ldr	r1, [pc, #20]	; (800a380 <CDC_Init_FS+0x24>)
 800a36c:	4803      	ldr	r0, [pc, #12]	; (800a37c <CDC_Init_FS+0x20>)
 800a36e:	f7fd fd0e 	bl	8007d8e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a372:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a374:	4618      	mov	r0, r3
 800a376:	bd80      	pop	{r7, pc}
 800a378:	20001ad4 	.word	0x20001ad4
 800a37c:	200017ac 	.word	0x200017ac
 800a380:	20001a70 	.word	0x20001a70

0800a384 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a384:	b480      	push	{r7}
 800a386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a388:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a38a:	4618      	mov	r0, r3
 800a38c:	46bd      	mov	sp, r7
 800a38e:	bc80      	pop	{r7}
 800a390:	4770      	bx	lr
	...

0800a394 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a394:	b480      	push	{r7}
 800a396:	b083      	sub	sp, #12
 800a398:	af00      	add	r7, sp, #0
 800a39a:	4603      	mov	r3, r0
 800a39c:	6039      	str	r1, [r7, #0]
 800a39e:	71fb      	strb	r3, [r7, #7]
 800a3a0:	4613      	mov	r3, r2
 800a3a2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a3a4:	79fb      	ldrb	r3, [r7, #7]
 800a3a6:	2b23      	cmp	r3, #35	; 0x23
 800a3a8:	d84a      	bhi.n	800a440 <CDC_Control_FS+0xac>
 800a3aa:	a201      	add	r2, pc, #4	; (adr r2, 800a3b0 <CDC_Control_FS+0x1c>)
 800a3ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3b0:	0800a441 	.word	0x0800a441
 800a3b4:	0800a441 	.word	0x0800a441
 800a3b8:	0800a441 	.word	0x0800a441
 800a3bc:	0800a441 	.word	0x0800a441
 800a3c0:	0800a441 	.word	0x0800a441
 800a3c4:	0800a441 	.word	0x0800a441
 800a3c8:	0800a441 	.word	0x0800a441
 800a3cc:	0800a441 	.word	0x0800a441
 800a3d0:	0800a441 	.word	0x0800a441
 800a3d4:	0800a441 	.word	0x0800a441
 800a3d8:	0800a441 	.word	0x0800a441
 800a3dc:	0800a441 	.word	0x0800a441
 800a3e0:	0800a441 	.word	0x0800a441
 800a3e4:	0800a441 	.word	0x0800a441
 800a3e8:	0800a441 	.word	0x0800a441
 800a3ec:	0800a441 	.word	0x0800a441
 800a3f0:	0800a441 	.word	0x0800a441
 800a3f4:	0800a441 	.word	0x0800a441
 800a3f8:	0800a441 	.word	0x0800a441
 800a3fc:	0800a441 	.word	0x0800a441
 800a400:	0800a441 	.word	0x0800a441
 800a404:	0800a441 	.word	0x0800a441
 800a408:	0800a441 	.word	0x0800a441
 800a40c:	0800a441 	.word	0x0800a441
 800a410:	0800a441 	.word	0x0800a441
 800a414:	0800a441 	.word	0x0800a441
 800a418:	0800a441 	.word	0x0800a441
 800a41c:	0800a441 	.word	0x0800a441
 800a420:	0800a441 	.word	0x0800a441
 800a424:	0800a441 	.word	0x0800a441
 800a428:	0800a441 	.word	0x0800a441
 800a42c:	0800a441 	.word	0x0800a441
 800a430:	0800a441 	.word	0x0800a441
 800a434:	0800a441 	.word	0x0800a441
 800a438:	0800a441 	.word	0x0800a441
 800a43c:	0800a441 	.word	0x0800a441
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a440:	bf00      	nop
  }

  return (USBD_OK);
 800a442:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a444:	4618      	mov	r0, r3
 800a446:	370c      	adds	r7, #12
 800a448:	46bd      	mov	sp, r7
 800a44a:	bc80      	pop	{r7}
 800a44c:	4770      	bx	lr
 800a44e:	bf00      	nop

0800a450 <CDC_Receive_FS>:
int idx=0;
void ReadComand(char * Bufer,int Leng);


static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a450:	b580      	push	{r7, lr}
 800a452:	b082      	sub	sp, #8
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
 800a458:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a45a:	6879      	ldr	r1, [r7, #4]
 800a45c:	4818      	ldr	r0, [pc, #96]	; (800a4c0 <CDC_Receive_FS+0x70>)
 800a45e:	f7fd fc96 	bl	8007d8e <USBD_CDC_SetRxBuffer>



  if(Buf[0]=='\r'){
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	781b      	ldrb	r3, [r3, #0]
 800a466:	2b0d      	cmp	r3, #13
 800a468:	d112      	bne.n	800a490 <CDC_Receive_FS+0x40>
     BuferUsb[idx++]=Buf[0];
 800a46a:	4b16      	ldr	r3, [pc, #88]	; (800a4c4 <CDC_Receive_FS+0x74>)
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	1c5a      	adds	r2, r3, #1
 800a470:	4914      	ldr	r1, [pc, #80]	; (800a4c4 <CDC_Receive_FS+0x74>)
 800a472:	600a      	str	r2, [r1, #0]
 800a474:	687a      	ldr	r2, [r7, #4]
 800a476:	7811      	ldrb	r1, [r2, #0]
 800a478:	4a13      	ldr	r2, [pc, #76]	; (800a4c8 <CDC_Receive_FS+0x78>)
 800a47a:	54d1      	strb	r1, [r2, r3]
    ReadComand(BuferUsb,idx);
 800a47c:	4b11      	ldr	r3, [pc, #68]	; (800a4c4 <CDC_Receive_FS+0x74>)
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	4619      	mov	r1, r3
 800a482:	4811      	ldr	r0, [pc, #68]	; (800a4c8 <CDC_Receive_FS+0x78>)
 800a484:	f000 fc00 	bl	800ac88 <ReadComand>
     idx=0;
 800a488:	4b0e      	ldr	r3, [pc, #56]	; (800a4c4 <CDC_Receive_FS+0x74>)
 800a48a:	2200      	movs	r2, #0
 800a48c:	601a      	str	r2, [r3, #0]
 800a48e:	e00f      	b.n	800a4b0 <CDC_Receive_FS+0x60>

  }else{
      if(idx>=100){idx=0;}
 800a490:	4b0c      	ldr	r3, [pc, #48]	; (800a4c4 <CDC_Receive_FS+0x74>)
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	2b63      	cmp	r3, #99	; 0x63
 800a496:	dd02      	ble.n	800a49e <CDC_Receive_FS+0x4e>
 800a498:	4b0a      	ldr	r3, [pc, #40]	; (800a4c4 <CDC_Receive_FS+0x74>)
 800a49a:	2200      	movs	r2, #0
 800a49c:	601a      	str	r2, [r3, #0]
      BuferUsb[idx++]=Buf[0];
 800a49e:	4b09      	ldr	r3, [pc, #36]	; (800a4c4 <CDC_Receive_FS+0x74>)
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	1c5a      	adds	r2, r3, #1
 800a4a4:	4907      	ldr	r1, [pc, #28]	; (800a4c4 <CDC_Receive_FS+0x74>)
 800a4a6:	600a      	str	r2, [r1, #0]
 800a4a8:	687a      	ldr	r2, [r7, #4]
 800a4aa:	7811      	ldrb	r1, [r2, #0]
 800a4ac:	4a06      	ldr	r2, [pc, #24]	; (800a4c8 <CDC_Receive_FS+0x78>)
 800a4ae:	54d1      	strb	r1, [r2, r3]

  }



  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a4b0:	4803      	ldr	r0, [pc, #12]	; (800a4c0 <CDC_Receive_FS+0x70>)
 800a4b2:	f7fd fcae 	bl	8007e12 <USBD_CDC_ReceivePacket>


  return (USBD_OK);
 800a4b6:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	3708      	adds	r7, #8
 800a4bc:	46bd      	mov	sp, r7
 800a4be:	bd80      	pop	{r7, pc}
 800a4c0:	200017ac 	.word	0x200017ac
 800a4c4:	200011a0 	.word	0x200011a0
 800a4c8:	2000113c 	.word	0x2000113c

0800a4cc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	b084      	sub	sp, #16
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	6078      	str	r0, [r7, #4]
 800a4d4:	460b      	mov	r3, r1
 800a4d6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a4d8:	2300      	movs	r3, #0
 800a4da:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a4dc:	4b0d      	ldr	r3, [pc, #52]	; (800a514 <CDC_Transmit_FS+0x48>)
 800a4de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4e2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a4e4:	68bb      	ldr	r3, [r7, #8]
 800a4e6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d001      	beq.n	800a4f2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a4ee:	2301      	movs	r3, #1
 800a4f0:	e00b      	b.n	800a50a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a4f2:	887b      	ldrh	r3, [r7, #2]
 800a4f4:	461a      	mov	r2, r3
 800a4f6:	6879      	ldr	r1, [r7, #4]
 800a4f8:	4806      	ldr	r0, [pc, #24]	; (800a514 <CDC_Transmit_FS+0x48>)
 800a4fa:	f7fd fc2f 	bl	8007d5c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a4fe:	4805      	ldr	r0, [pc, #20]	; (800a514 <CDC_Transmit_FS+0x48>)
 800a500:	f7fd fc58 	bl	8007db4 <USBD_CDC_TransmitPacket>
 800a504:	4603      	mov	r3, r0
 800a506:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a508:	7bfb      	ldrb	r3, [r7, #15]
}
 800a50a:	4618      	mov	r0, r3
 800a50c:	3710      	adds	r7, #16
 800a50e:	46bd      	mov	sp, r7
 800a510:	bd80      	pop	{r7, pc}
 800a512:	bf00      	nop
 800a514:	200017ac 	.word	0x200017ac

0800a518 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a518:	b480      	push	{r7}
 800a51a:	b083      	sub	sp, #12
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	4603      	mov	r3, r0
 800a520:	6039      	str	r1, [r7, #0]
 800a522:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a524:	683b      	ldr	r3, [r7, #0]
 800a526:	2212      	movs	r2, #18
 800a528:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a52a:	4b03      	ldr	r3, [pc, #12]	; (800a538 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a52c:	4618      	mov	r0, r3
 800a52e:	370c      	adds	r7, #12
 800a530:	46bd      	mov	sp, r7
 800a532:	bc80      	pop	{r7}
 800a534:	4770      	bx	lr
 800a536:	bf00      	nop
 800a538:	2000014c 	.word	0x2000014c

0800a53c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a53c:	b480      	push	{r7}
 800a53e:	b083      	sub	sp, #12
 800a540:	af00      	add	r7, sp, #0
 800a542:	4603      	mov	r3, r0
 800a544:	6039      	str	r1, [r7, #0]
 800a546:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a548:	683b      	ldr	r3, [r7, #0]
 800a54a:	2204      	movs	r2, #4
 800a54c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a54e:	4b03      	ldr	r3, [pc, #12]	; (800a55c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a550:	4618      	mov	r0, r3
 800a552:	370c      	adds	r7, #12
 800a554:	46bd      	mov	sp, r7
 800a556:	bc80      	pop	{r7}
 800a558:	4770      	bx	lr
 800a55a:	bf00      	nop
 800a55c:	20000160 	.word	0x20000160

0800a560 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a560:	b580      	push	{r7, lr}
 800a562:	b082      	sub	sp, #8
 800a564:	af00      	add	r7, sp, #0
 800a566:	4603      	mov	r3, r0
 800a568:	6039      	str	r1, [r7, #0]
 800a56a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a56c:	79fb      	ldrb	r3, [r7, #7]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d105      	bne.n	800a57e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a572:	683a      	ldr	r2, [r7, #0]
 800a574:	4907      	ldr	r1, [pc, #28]	; (800a594 <USBD_FS_ProductStrDescriptor+0x34>)
 800a576:	4808      	ldr	r0, [pc, #32]	; (800a598 <USBD_FS_ProductStrDescriptor+0x38>)
 800a578:	f7fe fc25 	bl	8008dc6 <USBD_GetString>
 800a57c:	e004      	b.n	800a588 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a57e:	683a      	ldr	r2, [r7, #0]
 800a580:	4904      	ldr	r1, [pc, #16]	; (800a594 <USBD_FS_ProductStrDescriptor+0x34>)
 800a582:	4805      	ldr	r0, [pc, #20]	; (800a598 <USBD_FS_ProductStrDescriptor+0x38>)
 800a584:	f7fe fc1f 	bl	8008dc6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a588:	4b02      	ldr	r3, [pc, #8]	; (800a594 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a58a:	4618      	mov	r0, r3
 800a58c:	3708      	adds	r7, #8
 800a58e:	46bd      	mov	sp, r7
 800a590:	bd80      	pop	{r7, pc}
 800a592:	bf00      	nop
 800a594:	20001b38 	.word	0x20001b38
 800a598:	0800b0b4 	.word	0x0800b0b4

0800a59c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b082      	sub	sp, #8
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	4603      	mov	r3, r0
 800a5a4:	6039      	str	r1, [r7, #0]
 800a5a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a5a8:	683a      	ldr	r2, [r7, #0]
 800a5aa:	4904      	ldr	r1, [pc, #16]	; (800a5bc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a5ac:	4804      	ldr	r0, [pc, #16]	; (800a5c0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a5ae:	f7fe fc0a 	bl	8008dc6 <USBD_GetString>
  return USBD_StrDesc;
 800a5b2:	4b02      	ldr	r3, [pc, #8]	; (800a5bc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	3708      	adds	r7, #8
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	bd80      	pop	{r7, pc}
 800a5bc:	20001b38 	.word	0x20001b38
 800a5c0:	0800b0bc 	.word	0x0800b0bc

0800a5c4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a5c4:	b580      	push	{r7, lr}
 800a5c6:	b082      	sub	sp, #8
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	4603      	mov	r3, r0
 800a5cc:	6039      	str	r1, [r7, #0]
 800a5ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a5d0:	683b      	ldr	r3, [r7, #0]
 800a5d2:	221a      	movs	r2, #26
 800a5d4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a5d6:	f000 f843 	bl	800a660 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a5da:	4b02      	ldr	r3, [pc, #8]	; (800a5e4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a5dc:	4618      	mov	r0, r3
 800a5de:	3708      	adds	r7, #8
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	bd80      	pop	{r7, pc}
 800a5e4:	20000164 	.word	0x20000164

0800a5e8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	b082      	sub	sp, #8
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	4603      	mov	r3, r0
 800a5f0:	6039      	str	r1, [r7, #0]
 800a5f2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a5f4:	79fb      	ldrb	r3, [r7, #7]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d105      	bne.n	800a606 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a5fa:	683a      	ldr	r2, [r7, #0]
 800a5fc:	4907      	ldr	r1, [pc, #28]	; (800a61c <USBD_FS_ConfigStrDescriptor+0x34>)
 800a5fe:	4808      	ldr	r0, [pc, #32]	; (800a620 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a600:	f7fe fbe1 	bl	8008dc6 <USBD_GetString>
 800a604:	e004      	b.n	800a610 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a606:	683a      	ldr	r2, [r7, #0]
 800a608:	4904      	ldr	r1, [pc, #16]	; (800a61c <USBD_FS_ConfigStrDescriptor+0x34>)
 800a60a:	4805      	ldr	r0, [pc, #20]	; (800a620 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a60c:	f7fe fbdb 	bl	8008dc6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a610:	4b02      	ldr	r3, [pc, #8]	; (800a61c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a612:	4618      	mov	r0, r3
 800a614:	3708      	adds	r7, #8
 800a616:	46bd      	mov	sp, r7
 800a618:	bd80      	pop	{r7, pc}
 800a61a:	bf00      	nop
 800a61c:	20001b38 	.word	0x20001b38
 800a620:	0800b0d0 	.word	0x0800b0d0

0800a624 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a624:	b580      	push	{r7, lr}
 800a626:	b082      	sub	sp, #8
 800a628:	af00      	add	r7, sp, #0
 800a62a:	4603      	mov	r3, r0
 800a62c:	6039      	str	r1, [r7, #0]
 800a62e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a630:	79fb      	ldrb	r3, [r7, #7]
 800a632:	2b00      	cmp	r3, #0
 800a634:	d105      	bne.n	800a642 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a636:	683a      	ldr	r2, [r7, #0]
 800a638:	4907      	ldr	r1, [pc, #28]	; (800a658 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a63a:	4808      	ldr	r0, [pc, #32]	; (800a65c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a63c:	f7fe fbc3 	bl	8008dc6 <USBD_GetString>
 800a640:	e004      	b.n	800a64c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a642:	683a      	ldr	r2, [r7, #0]
 800a644:	4904      	ldr	r1, [pc, #16]	; (800a658 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a646:	4805      	ldr	r0, [pc, #20]	; (800a65c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a648:	f7fe fbbd 	bl	8008dc6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a64c:	4b02      	ldr	r3, [pc, #8]	; (800a658 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a64e:	4618      	mov	r0, r3
 800a650:	3708      	adds	r7, #8
 800a652:	46bd      	mov	sp, r7
 800a654:	bd80      	pop	{r7, pc}
 800a656:	bf00      	nop
 800a658:	20001b38 	.word	0x20001b38
 800a65c:	0800b0dc 	.word	0x0800b0dc

0800a660 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a660:	b580      	push	{r7, lr}
 800a662:	b084      	sub	sp, #16
 800a664:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a666:	4b0f      	ldr	r3, [pc, #60]	; (800a6a4 <Get_SerialNum+0x44>)
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a66c:	4b0e      	ldr	r3, [pc, #56]	; (800a6a8 <Get_SerialNum+0x48>)
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a672:	4b0e      	ldr	r3, [pc, #56]	; (800a6ac <Get_SerialNum+0x4c>)
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a678:	68fa      	ldr	r2, [r7, #12]
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	4413      	add	r3, r2
 800a67e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d009      	beq.n	800a69a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a686:	2208      	movs	r2, #8
 800a688:	4909      	ldr	r1, [pc, #36]	; (800a6b0 <Get_SerialNum+0x50>)
 800a68a:	68f8      	ldr	r0, [r7, #12]
 800a68c:	f000 f814 	bl	800a6b8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a690:	2204      	movs	r2, #4
 800a692:	4908      	ldr	r1, [pc, #32]	; (800a6b4 <Get_SerialNum+0x54>)
 800a694:	68b8      	ldr	r0, [r7, #8]
 800a696:	f000 f80f 	bl	800a6b8 <IntToUnicode>
  }
}
 800a69a:	bf00      	nop
 800a69c:	3710      	adds	r7, #16
 800a69e:	46bd      	mov	sp, r7
 800a6a0:	bd80      	pop	{r7, pc}
 800a6a2:	bf00      	nop
 800a6a4:	1ffff7e8 	.word	0x1ffff7e8
 800a6a8:	1ffff7ec 	.word	0x1ffff7ec
 800a6ac:	1ffff7f0 	.word	0x1ffff7f0
 800a6b0:	20000166 	.word	0x20000166
 800a6b4:	20000176 	.word	0x20000176

0800a6b8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a6b8:	b480      	push	{r7}
 800a6ba:	b087      	sub	sp, #28
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	60f8      	str	r0, [r7, #12]
 800a6c0:	60b9      	str	r1, [r7, #8]
 800a6c2:	4613      	mov	r3, r2
 800a6c4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	75fb      	strb	r3, [r7, #23]
 800a6ce:	e027      	b.n	800a720 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	0f1b      	lsrs	r3, r3, #28
 800a6d4:	2b09      	cmp	r3, #9
 800a6d6:	d80b      	bhi.n	800a6f0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a6d8:	7dfb      	ldrb	r3, [r7, #23]
 800a6da:	005b      	lsls	r3, r3, #1
 800a6dc:	461a      	mov	r2, r3
 800a6de:	68bb      	ldr	r3, [r7, #8]
 800a6e0:	4413      	add	r3, r2
 800a6e2:	68fa      	ldr	r2, [r7, #12]
 800a6e4:	0f12      	lsrs	r2, r2, #28
 800a6e6:	b2d2      	uxtb	r2, r2
 800a6e8:	3230      	adds	r2, #48	; 0x30
 800a6ea:	b2d2      	uxtb	r2, r2
 800a6ec:	701a      	strb	r2, [r3, #0]
 800a6ee:	e00a      	b.n	800a706 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a6f0:	7dfb      	ldrb	r3, [r7, #23]
 800a6f2:	005b      	lsls	r3, r3, #1
 800a6f4:	461a      	mov	r2, r3
 800a6f6:	68bb      	ldr	r3, [r7, #8]
 800a6f8:	4413      	add	r3, r2
 800a6fa:	68fa      	ldr	r2, [r7, #12]
 800a6fc:	0f12      	lsrs	r2, r2, #28
 800a6fe:	b2d2      	uxtb	r2, r2
 800a700:	3237      	adds	r2, #55	; 0x37
 800a702:	b2d2      	uxtb	r2, r2
 800a704:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	011b      	lsls	r3, r3, #4
 800a70a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a70c:	7dfb      	ldrb	r3, [r7, #23]
 800a70e:	005b      	lsls	r3, r3, #1
 800a710:	3301      	adds	r3, #1
 800a712:	68ba      	ldr	r2, [r7, #8]
 800a714:	4413      	add	r3, r2
 800a716:	2200      	movs	r2, #0
 800a718:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a71a:	7dfb      	ldrb	r3, [r7, #23]
 800a71c:	3301      	adds	r3, #1
 800a71e:	75fb      	strb	r3, [r7, #23]
 800a720:	7dfa      	ldrb	r2, [r7, #23]
 800a722:	79fb      	ldrb	r3, [r7, #7]
 800a724:	429a      	cmp	r2, r3
 800a726:	d3d3      	bcc.n	800a6d0 <IntToUnicode+0x18>
  }
}
 800a728:	bf00      	nop
 800a72a:	371c      	adds	r7, #28
 800a72c:	46bd      	mov	sp, r7
 800a72e:	bc80      	pop	{r7}
 800a730:	4770      	bx	lr
	...

0800a734 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a734:	b580      	push	{r7, lr}
 800a736:	b084      	sub	sp, #16
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	4a0d      	ldr	r2, [pc, #52]	; (800a778 <HAL_PCD_MspInit+0x44>)
 800a742:	4293      	cmp	r3, r2
 800a744:	d113      	bne.n	800a76e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a746:	4a0d      	ldr	r2, [pc, #52]	; (800a77c <HAL_PCD_MspInit+0x48>)
 800a748:	4b0c      	ldr	r3, [pc, #48]	; (800a77c <HAL_PCD_MspInit+0x48>)
 800a74a:	69db      	ldr	r3, [r3, #28]
 800a74c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a750:	61d3      	str	r3, [r2, #28]
 800a752:	4b0a      	ldr	r3, [pc, #40]	; (800a77c <HAL_PCD_MspInit+0x48>)
 800a754:	69db      	ldr	r3, [r3, #28]
 800a756:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a75a:	60fb      	str	r3, [r7, #12]
 800a75c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 800a75e:	2200      	movs	r2, #0
 800a760:	2105      	movs	r1, #5
 800a762:	2014      	movs	r0, #20
 800a764:	f7f6 fa9c 	bl	8000ca0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800a768:	2014      	movs	r0, #20
 800a76a:	f7f6 fac5 	bl	8000cf8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a76e:	bf00      	nop
 800a770:	3710      	adds	r7, #16
 800a772:	46bd      	mov	sp, r7
 800a774:	bd80      	pop	{r7, pc}
 800a776:	bf00      	nop
 800a778:	40005c00 	.word	0x40005c00
 800a77c:	40021000 	.word	0x40021000

0800a780 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a780:	b580      	push	{r7, lr}
 800a782:	b082      	sub	sp, #8
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800a794:	4619      	mov	r1, r3
 800a796:	4610      	mov	r0, r2
 800a798:	f7fd fbf1 	bl	8007f7e <USBD_LL_SetupStage>
}
 800a79c:	bf00      	nop
 800a79e:	3708      	adds	r7, #8
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	bd80      	pop	{r7, pc}

0800a7a4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7a4:	b580      	push	{r7, lr}
 800a7a6:	b082      	sub	sp, #8
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	6078      	str	r0, [r7, #4]
 800a7ac:	460b      	mov	r3, r1
 800a7ae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800a7b6:	78fa      	ldrb	r2, [r7, #3]
 800a7b8:	6879      	ldr	r1, [r7, #4]
 800a7ba:	4613      	mov	r3, r2
 800a7bc:	009b      	lsls	r3, r3, #2
 800a7be:	4413      	add	r3, r2
 800a7c0:	00db      	lsls	r3, r3, #3
 800a7c2:	440b      	add	r3, r1
 800a7c4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800a7c8:	681a      	ldr	r2, [r3, #0]
 800a7ca:	78fb      	ldrb	r3, [r7, #3]
 800a7cc:	4619      	mov	r1, r3
 800a7ce:	f7fd fc21 	bl	8008014 <USBD_LL_DataOutStage>
}
 800a7d2:	bf00      	nop
 800a7d4:	3708      	adds	r7, #8
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	bd80      	pop	{r7, pc}

0800a7da <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7da:	b580      	push	{r7, lr}
 800a7dc:	b082      	sub	sp, #8
 800a7de:	af00      	add	r7, sp, #0
 800a7e0:	6078      	str	r0, [r7, #4]
 800a7e2:	460b      	mov	r3, r1
 800a7e4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800a7ec:	78fa      	ldrb	r2, [r7, #3]
 800a7ee:	6879      	ldr	r1, [r7, #4]
 800a7f0:	4613      	mov	r3, r2
 800a7f2:	009b      	lsls	r3, r3, #2
 800a7f4:	4413      	add	r3, r2
 800a7f6:	00db      	lsls	r3, r3, #3
 800a7f8:	440b      	add	r3, r1
 800a7fa:	333c      	adds	r3, #60	; 0x3c
 800a7fc:	681a      	ldr	r2, [r3, #0]
 800a7fe:	78fb      	ldrb	r3, [r7, #3]
 800a800:	4619      	mov	r1, r3
 800a802:	f7fd fc78 	bl	80080f6 <USBD_LL_DataInStage>
}
 800a806:	bf00      	nop
 800a808:	3708      	adds	r7, #8
 800a80a:	46bd      	mov	sp, r7
 800a80c:	bd80      	pop	{r7, pc}

0800a80e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a80e:	b580      	push	{r7, lr}
 800a810:	b082      	sub	sp, #8
 800a812:	af00      	add	r7, sp, #0
 800a814:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a81c:	4618      	mov	r0, r3
 800a81e:	f7fd fd88 	bl	8008332 <USBD_LL_SOF>
}
 800a822:	bf00      	nop
 800a824:	3708      	adds	r7, #8
 800a826:	46bd      	mov	sp, r7
 800a828:	bd80      	pop	{r7, pc}

0800a82a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a82a:	b580      	push	{r7, lr}
 800a82c:	b084      	sub	sp, #16
 800a82e:	af00      	add	r7, sp, #0
 800a830:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a832:	2301      	movs	r3, #1
 800a834:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	689b      	ldr	r3, [r3, #8]
 800a83a:	2b02      	cmp	r3, #2
 800a83c:	d001      	beq.n	800a842 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a83e:	f7f5 fe95 	bl	800056c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a848:	7bfa      	ldrb	r2, [r7, #15]
 800a84a:	4611      	mov	r1, r2
 800a84c:	4618      	mov	r0, r3
 800a84e:	f7fd fd38 	bl	80082c2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a858:	4618      	mov	r0, r3
 800a85a:	f7fd fcf1 	bl	8008240 <USBD_LL_Reset>
}
 800a85e:	bf00      	nop
 800a860:	3710      	adds	r7, #16
 800a862:	46bd      	mov	sp, r7
 800a864:	bd80      	pop	{r7, pc}
	...

0800a868 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a868:	b580      	push	{r7, lr}
 800a86a:	b082      	sub	sp, #8
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a876:	4618      	mov	r0, r3
 800a878:	f7fd fd32 	bl	80082e0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	699b      	ldr	r3, [r3, #24]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d005      	beq.n	800a890 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a884:	4a04      	ldr	r2, [pc, #16]	; (800a898 <HAL_PCD_SuspendCallback+0x30>)
 800a886:	4b04      	ldr	r3, [pc, #16]	; (800a898 <HAL_PCD_SuspendCallback+0x30>)
 800a888:	691b      	ldr	r3, [r3, #16]
 800a88a:	f043 0306 	orr.w	r3, r3, #6
 800a88e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a890:	bf00      	nop
 800a892:	3708      	adds	r7, #8
 800a894:	46bd      	mov	sp, r7
 800a896:	bd80      	pop	{r7, pc}
 800a898:	e000ed00 	.word	0xe000ed00

0800a89c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a89c:	b580      	push	{r7, lr}
 800a89e:	b082      	sub	sp, #8
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	f7fd fd2c 	bl	8008308 <USBD_LL_Resume>
}
 800a8b0:	bf00      	nop
 800a8b2:	3708      	adds	r7, #8
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	bd80      	pop	{r7, pc}

0800a8b8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b082      	sub	sp, #8
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800a8c0:	4a28      	ldr	r2, [pc, #160]	; (800a964 <USBD_LL_Init+0xac>)
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	4a26      	ldr	r2, [pc, #152]	; (800a964 <USBD_LL_Init+0xac>)
 800a8cc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800a8d0:	4b24      	ldr	r3, [pc, #144]	; (800a964 <USBD_LL_Init+0xac>)
 800a8d2:	4a25      	ldr	r2, [pc, #148]	; (800a968 <USBD_LL_Init+0xb0>)
 800a8d4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a8d6:	4b23      	ldr	r3, [pc, #140]	; (800a964 <USBD_LL_Init+0xac>)
 800a8d8:	2208      	movs	r2, #8
 800a8da:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a8dc:	4b21      	ldr	r3, [pc, #132]	; (800a964 <USBD_LL_Init+0xac>)
 800a8de:	2202      	movs	r2, #2
 800a8e0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a8e2:	4b20      	ldr	r3, [pc, #128]	; (800a964 <USBD_LL_Init+0xac>)
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a8e8:	4b1e      	ldr	r3, [pc, #120]	; (800a964 <USBD_LL_Init+0xac>)
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a8ee:	4b1d      	ldr	r3, [pc, #116]	; (800a964 <USBD_LL_Init+0xac>)
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a8f4:	481b      	ldr	r0, [pc, #108]	; (800a964 <USBD_LL_Init+0xac>)
 800a8f6:	f7f6 ffe7 	bl	80018c8 <HAL_PCD_Init>
 800a8fa:	4603      	mov	r3, r0
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d001      	beq.n	800a904 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800a900:	f7f5 fe34 	bl	800056c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a90a:	2318      	movs	r3, #24
 800a90c:	2200      	movs	r2, #0
 800a90e:	2100      	movs	r1, #0
 800a910:	f7f8 fc87 	bl	8003222 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a91a:	2358      	movs	r3, #88	; 0x58
 800a91c:	2200      	movs	r2, #0
 800a91e:	2180      	movs	r1, #128	; 0x80
 800a920:	f7f8 fc7f 	bl	8003222 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a92a:	23c0      	movs	r3, #192	; 0xc0
 800a92c:	2200      	movs	r2, #0
 800a92e:	2181      	movs	r1, #129	; 0x81
 800a930:	f7f8 fc77 	bl	8003222 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a93a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800a93e:	2200      	movs	r2, #0
 800a940:	2101      	movs	r1, #1
 800a942:	f7f8 fc6e 	bl	8003222 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a94c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a950:	2200      	movs	r2, #0
 800a952:	2182      	movs	r1, #130	; 0x82
 800a954:	f7f8 fc65 	bl	8003222 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800a958:	2300      	movs	r3, #0
}
 800a95a:	4618      	mov	r0, r3
 800a95c:	3708      	adds	r7, #8
 800a95e:	46bd      	mov	sp, r7
 800a960:	bd80      	pop	{r7, pc}
 800a962:	bf00      	nop
 800a964:	20001d38 	.word	0x20001d38
 800a968:	40005c00 	.word	0x40005c00

0800a96c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a96c:	b580      	push	{r7, lr}
 800a96e:	b084      	sub	sp, #16
 800a970:	af00      	add	r7, sp, #0
 800a972:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a974:	2300      	movs	r3, #0
 800a976:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a978:	2300      	movs	r3, #0
 800a97a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a982:	4618      	mov	r0, r3
 800a984:	f7f7 f8b8 	bl	8001af8 <HAL_PCD_Start>
 800a988:	4603      	mov	r3, r0
 800a98a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a98c:	7bfb      	ldrb	r3, [r7, #15]
 800a98e:	4618      	mov	r0, r3
 800a990:	f000 f94e 	bl	800ac30 <USBD_Get_USB_Status>
 800a994:	4603      	mov	r3, r0
 800a996:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a998:	7bbb      	ldrb	r3, [r7, #14]
}
 800a99a:	4618      	mov	r0, r3
 800a99c:	3710      	adds	r7, #16
 800a99e:	46bd      	mov	sp, r7
 800a9a0:	bd80      	pop	{r7, pc}

0800a9a2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a9a2:	b580      	push	{r7, lr}
 800a9a4:	b084      	sub	sp, #16
 800a9a6:	af00      	add	r7, sp, #0
 800a9a8:	6078      	str	r0, [r7, #4]
 800a9aa:	4608      	mov	r0, r1
 800a9ac:	4611      	mov	r1, r2
 800a9ae:	461a      	mov	r2, r3
 800a9b0:	4603      	mov	r3, r0
 800a9b2:	70fb      	strb	r3, [r7, #3]
 800a9b4:	460b      	mov	r3, r1
 800a9b6:	70bb      	strb	r3, [r7, #2]
 800a9b8:	4613      	mov	r3, r2
 800a9ba:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9bc:	2300      	movs	r3, #0
 800a9be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a9ca:	78bb      	ldrb	r3, [r7, #2]
 800a9cc:	883a      	ldrh	r2, [r7, #0]
 800a9ce:	78f9      	ldrb	r1, [r7, #3]
 800a9d0:	f7f7 fa32 	bl	8001e38 <HAL_PCD_EP_Open>
 800a9d4:	4603      	mov	r3, r0
 800a9d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a9d8:	7bfb      	ldrb	r3, [r7, #15]
 800a9da:	4618      	mov	r0, r3
 800a9dc:	f000 f928 	bl	800ac30 <USBD_Get_USB_Status>
 800a9e0:	4603      	mov	r3, r0
 800a9e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a9e4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	3710      	adds	r7, #16
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	bd80      	pop	{r7, pc}

0800a9ee <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a9ee:	b580      	push	{r7, lr}
 800a9f0:	b084      	sub	sp, #16
 800a9f2:	af00      	add	r7, sp, #0
 800a9f4:	6078      	str	r0, [r7, #4]
 800a9f6:	460b      	mov	r3, r1
 800a9f8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9fa:	2300      	movs	r3, #0
 800a9fc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9fe:	2300      	movs	r3, #0
 800aa00:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aa08:	78fa      	ldrb	r2, [r7, #3]
 800aa0a:	4611      	mov	r1, r2
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	f7f7 fa79 	bl	8001f04 <HAL_PCD_EP_Close>
 800aa12:	4603      	mov	r3, r0
 800aa14:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa16:	7bfb      	ldrb	r3, [r7, #15]
 800aa18:	4618      	mov	r0, r3
 800aa1a:	f000 f909 	bl	800ac30 <USBD_Get_USB_Status>
 800aa1e:	4603      	mov	r3, r0
 800aa20:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa22:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa24:	4618      	mov	r0, r3
 800aa26:	3710      	adds	r7, #16
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	bd80      	pop	{r7, pc}

0800aa2c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aa2c:	b580      	push	{r7, lr}
 800aa2e:	b084      	sub	sp, #16
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	6078      	str	r0, [r7, #4]
 800aa34:	460b      	mov	r3, r1
 800aa36:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa38:	2300      	movs	r3, #0
 800aa3a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aa46:	78fa      	ldrb	r2, [r7, #3]
 800aa48:	4611      	mov	r1, r2
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	f7f7 fb39 	bl	80020c2 <HAL_PCD_EP_SetStall>
 800aa50:	4603      	mov	r3, r0
 800aa52:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa54:	7bfb      	ldrb	r3, [r7, #15]
 800aa56:	4618      	mov	r0, r3
 800aa58:	f000 f8ea 	bl	800ac30 <USBD_Get_USB_Status>
 800aa5c:	4603      	mov	r3, r0
 800aa5e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa60:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa62:	4618      	mov	r0, r3
 800aa64:	3710      	adds	r7, #16
 800aa66:	46bd      	mov	sp, r7
 800aa68:	bd80      	pop	{r7, pc}

0800aa6a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aa6a:	b580      	push	{r7, lr}
 800aa6c:	b084      	sub	sp, #16
 800aa6e:	af00      	add	r7, sp, #0
 800aa70:	6078      	str	r0, [r7, #4]
 800aa72:	460b      	mov	r3, r1
 800aa74:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa76:	2300      	movs	r3, #0
 800aa78:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aa84:	78fa      	ldrb	r2, [r7, #3]
 800aa86:	4611      	mov	r1, r2
 800aa88:	4618      	mov	r0, r3
 800aa8a:	f7f7 fb7a 	bl	8002182 <HAL_PCD_EP_ClrStall>
 800aa8e:	4603      	mov	r3, r0
 800aa90:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa92:	7bfb      	ldrb	r3, [r7, #15]
 800aa94:	4618      	mov	r0, r3
 800aa96:	f000 f8cb 	bl	800ac30 <USBD_Get_USB_Status>
 800aa9a:	4603      	mov	r3, r0
 800aa9c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa9e:	7bbb      	ldrb	r3, [r7, #14]
}
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	3710      	adds	r7, #16
 800aaa4:	46bd      	mov	sp, r7
 800aaa6:	bd80      	pop	{r7, pc}

0800aaa8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aaa8:	b480      	push	{r7}
 800aaaa:	b085      	sub	sp, #20
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	6078      	str	r0, [r7, #4]
 800aab0:	460b      	mov	r3, r1
 800aab2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aaba:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800aabc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	da0c      	bge.n	800aade <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800aac4:	78fb      	ldrb	r3, [r7, #3]
 800aac6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aaca:	68f9      	ldr	r1, [r7, #12]
 800aacc:	1c5a      	adds	r2, r3, #1
 800aace:	4613      	mov	r3, r2
 800aad0:	009b      	lsls	r3, r3, #2
 800aad2:	4413      	add	r3, r2
 800aad4:	00db      	lsls	r3, r3, #3
 800aad6:	440b      	add	r3, r1
 800aad8:	3302      	adds	r3, #2
 800aada:	781b      	ldrb	r3, [r3, #0]
 800aadc:	e00b      	b.n	800aaf6 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800aade:	78fb      	ldrb	r3, [r7, #3]
 800aae0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aae4:	68f9      	ldr	r1, [r7, #12]
 800aae6:	4613      	mov	r3, r2
 800aae8:	009b      	lsls	r3, r3, #2
 800aaea:	4413      	add	r3, r2
 800aaec:	00db      	lsls	r3, r3, #3
 800aaee:	440b      	add	r3, r1
 800aaf0:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800aaf4:	781b      	ldrb	r3, [r3, #0]
  }
}
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	3714      	adds	r7, #20
 800aafa:	46bd      	mov	sp, r7
 800aafc:	bc80      	pop	{r7}
 800aafe:	4770      	bx	lr

0800ab00 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ab00:	b580      	push	{r7, lr}
 800ab02:	b084      	sub	sp, #16
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	6078      	str	r0, [r7, #4]
 800ab08:	460b      	mov	r3, r1
 800ab0a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab10:	2300      	movs	r3, #0
 800ab12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ab1a:	78fa      	ldrb	r2, [r7, #3]
 800ab1c:	4611      	mov	r1, r2
 800ab1e:	4618      	mov	r0, r3
 800ab20:	f7f7 f965 	bl	8001dee <HAL_PCD_SetAddress>
 800ab24:	4603      	mov	r3, r0
 800ab26:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab28:	7bfb      	ldrb	r3, [r7, #15]
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	f000 f880 	bl	800ac30 <USBD_Get_USB_Status>
 800ab30:	4603      	mov	r3, r0
 800ab32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ab34:	7bbb      	ldrb	r3, [r7, #14]
}
 800ab36:	4618      	mov	r0, r3
 800ab38:	3710      	adds	r7, #16
 800ab3a:	46bd      	mov	sp, r7
 800ab3c:	bd80      	pop	{r7, pc}

0800ab3e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ab3e:	b580      	push	{r7, lr}
 800ab40:	b086      	sub	sp, #24
 800ab42:	af00      	add	r7, sp, #0
 800ab44:	60f8      	str	r0, [r7, #12]
 800ab46:	607a      	str	r2, [r7, #4]
 800ab48:	461a      	mov	r2, r3
 800ab4a:	460b      	mov	r3, r1
 800ab4c:	72fb      	strb	r3, [r7, #11]
 800ab4e:	4613      	mov	r3, r2
 800ab50:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab52:	2300      	movs	r3, #0
 800ab54:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab56:	2300      	movs	r3, #0
 800ab58:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ab60:	893b      	ldrh	r3, [r7, #8]
 800ab62:	7af9      	ldrb	r1, [r7, #11]
 800ab64:	687a      	ldr	r2, [r7, #4]
 800ab66:	f7f7 fa69 	bl	800203c <HAL_PCD_EP_Transmit>
 800ab6a:	4603      	mov	r3, r0
 800ab6c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab6e:	7dfb      	ldrb	r3, [r7, #23]
 800ab70:	4618      	mov	r0, r3
 800ab72:	f000 f85d 	bl	800ac30 <USBD_Get_USB_Status>
 800ab76:	4603      	mov	r3, r0
 800ab78:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ab7a:	7dbb      	ldrb	r3, [r7, #22]
}
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	3718      	adds	r7, #24
 800ab80:	46bd      	mov	sp, r7
 800ab82:	bd80      	pop	{r7, pc}

0800ab84 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ab84:	b580      	push	{r7, lr}
 800ab86:	b086      	sub	sp, #24
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	60f8      	str	r0, [r7, #12]
 800ab8c:	607a      	str	r2, [r7, #4]
 800ab8e:	461a      	mov	r2, r3
 800ab90:	460b      	mov	r3, r1
 800ab92:	72fb      	strb	r3, [r7, #11]
 800ab94:	4613      	mov	r3, r2
 800ab96:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab98:	2300      	movs	r3, #0
 800ab9a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab9c:	2300      	movs	r3, #0
 800ab9e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800aba6:	893b      	ldrh	r3, [r7, #8]
 800aba8:	7af9      	ldrb	r1, [r7, #11]
 800abaa:	687a      	ldr	r2, [r7, #4]
 800abac:	f7f7 f9f2 	bl	8001f94 <HAL_PCD_EP_Receive>
 800abb0:	4603      	mov	r3, r0
 800abb2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800abb4:	7dfb      	ldrb	r3, [r7, #23]
 800abb6:	4618      	mov	r0, r3
 800abb8:	f000 f83a 	bl	800ac30 <USBD_Get_USB_Status>
 800abbc:	4603      	mov	r3, r0
 800abbe:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800abc0:	7dbb      	ldrb	r3, [r7, #22]
}
 800abc2:	4618      	mov	r0, r3
 800abc4:	3718      	adds	r7, #24
 800abc6:	46bd      	mov	sp, r7
 800abc8:	bd80      	pop	{r7, pc}

0800abca <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800abca:	b580      	push	{r7, lr}
 800abcc:	b082      	sub	sp, #8
 800abce:	af00      	add	r7, sp, #0
 800abd0:	6078      	str	r0, [r7, #4]
 800abd2:	460b      	mov	r3, r1
 800abd4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800abdc:	78fa      	ldrb	r2, [r7, #3]
 800abde:	4611      	mov	r1, r2
 800abe0:	4618      	mov	r0, r3
 800abe2:	f7f7 fa14 	bl	800200e <HAL_PCD_EP_GetRxCount>
 800abe6:	4603      	mov	r3, r0
}
 800abe8:	4618      	mov	r0, r3
 800abea:	3708      	adds	r7, #8
 800abec:	46bd      	mov	sp, r7
 800abee:	bd80      	pop	{r7, pc}

0800abf0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800abf0:	b480      	push	{r7}
 800abf2:	b083      	sub	sp, #12
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800abf8:	4b02      	ldr	r3, [pc, #8]	; (800ac04 <USBD_static_malloc+0x14>)
}
 800abfa:	4618      	mov	r0, r3
 800abfc:	370c      	adds	r7, #12
 800abfe:	46bd      	mov	sp, r7
 800ac00:	bc80      	pop	{r7}
 800ac02:	4770      	bx	lr
 800ac04:	200011a4 	.word	0x200011a4

0800ac08 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ac08:	b480      	push	{r7}
 800ac0a:	b083      	sub	sp, #12
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	6078      	str	r0, [r7, #4]

}
 800ac10:	bf00      	nop
 800ac12:	370c      	adds	r7, #12
 800ac14:	46bd      	mov	sp, r7
 800ac16:	bc80      	pop	{r7}
 800ac18:	4770      	bx	lr

0800ac1a <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac1a:	b480      	push	{r7}
 800ac1c:	b083      	sub	sp, #12
 800ac1e:	af00      	add	r7, sp, #0
 800ac20:	6078      	str	r0, [r7, #4]
 800ac22:	460b      	mov	r3, r1
 800ac24:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800ac26:	bf00      	nop
 800ac28:	370c      	adds	r7, #12
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	bc80      	pop	{r7}
 800ac2e:	4770      	bx	lr

0800ac30 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ac30:	b480      	push	{r7}
 800ac32:	b085      	sub	sp, #20
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	4603      	mov	r3, r0
 800ac38:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ac3e:	79fb      	ldrb	r3, [r7, #7]
 800ac40:	2b03      	cmp	r3, #3
 800ac42:	d817      	bhi.n	800ac74 <USBD_Get_USB_Status+0x44>
 800ac44:	a201      	add	r2, pc, #4	; (adr r2, 800ac4c <USBD_Get_USB_Status+0x1c>)
 800ac46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac4a:	bf00      	nop
 800ac4c:	0800ac5d 	.word	0x0800ac5d
 800ac50:	0800ac63 	.word	0x0800ac63
 800ac54:	0800ac69 	.word	0x0800ac69
 800ac58:	0800ac6f 	.word	0x0800ac6f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ac5c:	2300      	movs	r3, #0
 800ac5e:	73fb      	strb	r3, [r7, #15]
    break;
 800ac60:	e00b      	b.n	800ac7a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ac62:	2302      	movs	r3, #2
 800ac64:	73fb      	strb	r3, [r7, #15]
    break;
 800ac66:	e008      	b.n	800ac7a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ac68:	2301      	movs	r3, #1
 800ac6a:	73fb      	strb	r3, [r7, #15]
    break;
 800ac6c:	e005      	b.n	800ac7a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ac6e:	2302      	movs	r3, #2
 800ac70:	73fb      	strb	r3, [r7, #15]
    break;
 800ac72:	e002      	b.n	800ac7a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ac74:	2302      	movs	r3, #2
 800ac76:	73fb      	strb	r3, [r7, #15]
    break;
 800ac78:	bf00      	nop
  }
  return usb_status;
 800ac7a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	3714      	adds	r7, #20
 800ac80:	46bd      	mov	sp, r7
 800ac82:	bc80      	pop	{r7}
 800ac84:	4770      	bx	lr
 800ac86:	bf00      	nop

0800ac88 <ReadComand>:





void ReadComand(char * Bufer,int Leng){
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b082      	sub	sp, #8
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
 800ac90:	6039      	str	r1, [r7, #0]


  HAL_UARTEx_ReceiveToIdle_DMA(&huart1 ,RxData,1);
 800ac92:	2201      	movs	r2, #1
 800ac94:	4907      	ldr	r1, [pc, #28]	; (800acb4 <ReadComand+0x2c>)
 800ac96:	4808      	ldr	r0, [pc, #32]	; (800acb8 <ReadComand+0x30>)
 800ac98:	f7f9 fdd8 	bl	800484c <HAL_UARTEx_ReceiveToIdle_DMA>

  HAL_UART_Transmit_DMA (&huart1  ,Bufer,Leng);
 800ac9c:	683b      	ldr	r3, [r7, #0]
 800ac9e:	b29b      	uxth	r3, r3
 800aca0:	461a      	mov	r2, r3
 800aca2:	6879      	ldr	r1, [r7, #4]
 800aca4:	4804      	ldr	r0, [pc, #16]	; (800acb8 <ReadComand+0x30>)
 800aca6:	f7f9 fd65 	bl	8004774 <HAL_UART_Transmit_DMA>

  //CDC_Transmit_FS(Bufer, Leng);



}
 800acaa:	bf00      	nop
 800acac:	3708      	adds	r7, #8
 800acae:	46bd      	mov	sp, r7
 800acb0:	bd80      	pop	{r7, pc}
 800acb2:	bf00      	nop
 800acb4:	200013c4 	.word	0x200013c4
 800acb8:	20001720 	.word	0x20001720

0800acbc <HAL_UARTEx_RxEventCallback>:
//--------------  UART -------




 void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 800acbc:	b580      	push	{r7, lr}
 800acbe:	b084      	sub	sp, #16
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	6078      	str	r0, [r7, #4]
 800acc4:	460b      	mov	r3, r1
 800acc6:	807b      	strh	r3, [r7, #2]
      HAL_StatusTypeDef  error;

            error =  HAL_UARTEx_ReceiveToIdle_DMA(&huart1 ,RxData,Size);
 800acc8:	887b      	ldrh	r3, [r7, #2]
 800acca:	461a      	mov	r2, r3
 800accc:	491d      	ldr	r1, [pc, #116]	; (800ad44 <HAL_UARTEx_RxEventCallback+0x88>)
 800acce:	481e      	ldr	r0, [pc, #120]	; (800ad48 <HAL_UARTEx_RxEventCallback+0x8c>)
 800acd0:	f7f9 fdbc 	bl	800484c <HAL_UARTEx_ReceiveToIdle_DMA>
 800acd4:	4603      	mov	r3, r0
 800acd6:	73fb      	strb	r3, [r7, #15]

                                 if( error == HAL_OK){
 800acd8:	7bfb      	ldrb	r3, [r7, #15]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d116      	bne.n	800ad0c <HAL_UARTEx_RxEventCallback+0x50>

                                    CDC_Transmit_FS(RxData,ReceivSize);
 800acde:	2364      	movs	r3, #100	; 0x64
 800ace0:	b29b      	uxth	r3, r3
 800ace2:	4619      	mov	r1, r3
 800ace4:	4817      	ldr	r0, [pc, #92]	; (800ad44 <HAL_UARTEx_RxEventCallback+0x88>)
 800ace6:	f7ff fbf1 	bl	800a4cc <CDC_Transmit_FS>
                                 MX_USART1_UART_Init();
                                 error =  HAL_UARTEx_ReceiveToIdle_DMA(&huart1 ,RxData,ReceivSize);
                                 CDC_Transmit_FS(RxData,Size);}}


}
 800acea:	e026      	b.n	800ad3a <HAL_UARTEx_RxEventCallback+0x7e>
                                 MX_USART1_UART_Init();
 800acec:	f7f5 fd4c 	bl	8000788 <MX_USART1_UART_Init>
                                 error = HAL_UARTEx_ReceiveToIdle_DMA(&huart1 ,RxData,ReceivSize);
 800acf0:	2364      	movs	r3, #100	; 0x64
 800acf2:	b29b      	uxth	r3, r3
 800acf4:	461a      	mov	r2, r3
 800acf6:	4913      	ldr	r1, [pc, #76]	; (800ad44 <HAL_UARTEx_RxEventCallback+0x88>)
 800acf8:	4813      	ldr	r0, [pc, #76]	; (800ad48 <HAL_UARTEx_RxEventCallback+0x8c>)
 800acfa:	f7f9 fda7 	bl	800484c <HAL_UARTEx_ReceiveToIdle_DMA>
 800acfe:	4603      	mov	r3, r0
 800ad00:	73fb      	strb	r3, [r7, #15]
                                            CDC_Transmit_FS(RxData,Size);
 800ad02:	887b      	ldrh	r3, [r7, #2]
 800ad04:	4619      	mov	r1, r3
 800ad06:	480f      	ldr	r0, [pc, #60]	; (800ad44 <HAL_UARTEx_RxEventCallback+0x88>)
 800ad08:	f7ff fbe0 	bl	800a4cc <CDC_Transmit_FS>
                                 while( error !=HAL_OK){
 800ad0c:	7bfb      	ldrb	r3, [r7, #15]
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d1ec      	bne.n	800acec <HAL_UARTEx_RxEventCallback+0x30>
                                while( error !=HAL_OK){
 800ad12:	e00f      	b.n	800ad34 <HAL_UARTEx_RxEventCallback+0x78>
                                 MX_USART1_UART_Init();
 800ad14:	f7f5 fd38 	bl	8000788 <MX_USART1_UART_Init>
                                 error =  HAL_UARTEx_ReceiveToIdle_DMA(&huart1 ,RxData,ReceivSize);
 800ad18:	2364      	movs	r3, #100	; 0x64
 800ad1a:	b29b      	uxth	r3, r3
 800ad1c:	461a      	mov	r2, r3
 800ad1e:	4909      	ldr	r1, [pc, #36]	; (800ad44 <HAL_UARTEx_RxEventCallback+0x88>)
 800ad20:	4809      	ldr	r0, [pc, #36]	; (800ad48 <HAL_UARTEx_RxEventCallback+0x8c>)
 800ad22:	f7f9 fd93 	bl	800484c <HAL_UARTEx_ReceiveToIdle_DMA>
 800ad26:	4603      	mov	r3, r0
 800ad28:	73fb      	strb	r3, [r7, #15]
                                 CDC_Transmit_FS(RxData,Size);}}
 800ad2a:	887b      	ldrh	r3, [r7, #2]
 800ad2c:	4619      	mov	r1, r3
 800ad2e:	4805      	ldr	r0, [pc, #20]	; (800ad44 <HAL_UARTEx_RxEventCallback+0x88>)
 800ad30:	f7ff fbcc 	bl	800a4cc <CDC_Transmit_FS>
                                while( error !=HAL_OK){
 800ad34:	7bfb      	ldrb	r3, [r7, #15]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d1ec      	bne.n	800ad14 <HAL_UARTEx_RxEventCallback+0x58>
}
 800ad3a:	bf00      	nop
 800ad3c:	3710      	adds	r7, #16
 800ad3e:	46bd      	mov	sp, r7
 800ad40:	bd80      	pop	{r7, pc}
 800ad42:	bf00      	nop
 800ad44:	200013c4 	.word	0x200013c4
 800ad48:	20001720 	.word	0x20001720

0800ad4c <ReadUart>:


 HAL_StatusTypeDef  ReadUart(void){ return HAL_UARTEx_ReceiveToIdle_DMA(&huart1 ,RxData, ReceivSize);}
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	af00      	add	r7, sp, #0
 800ad50:	2364      	movs	r3, #100	; 0x64
 800ad52:	b29b      	uxth	r3, r3
 800ad54:	461a      	mov	r2, r3
 800ad56:	4903      	ldr	r1, [pc, #12]	; (800ad64 <ReadUart+0x18>)
 800ad58:	4803      	ldr	r0, [pc, #12]	; (800ad68 <ReadUart+0x1c>)
 800ad5a:	f7f9 fd77 	bl	800484c <HAL_UARTEx_ReceiveToIdle_DMA>
 800ad5e:	4603      	mov	r3, r0
 800ad60:	4618      	mov	r0, r3
 800ad62:	bd80      	pop	{r7, pc}
 800ad64:	200013c4 	.word	0x200013c4
 800ad68:	20001720 	.word	0x20001720

0800ad6c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800ad6c:	480c      	ldr	r0, [pc, #48]	; (800ada0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800ad6e:	490d      	ldr	r1, [pc, #52]	; (800ada4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800ad70:	4a0d      	ldr	r2, [pc, #52]	; (800ada8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800ad72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800ad74:	e002      	b.n	800ad7c <LoopCopyDataInit>

0800ad76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800ad76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800ad78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800ad7a:	3304      	adds	r3, #4

0800ad7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800ad7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800ad7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800ad80:	d3f9      	bcc.n	800ad76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800ad82:	4a0a      	ldr	r2, [pc, #40]	; (800adac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800ad84:	4c0a      	ldr	r4, [pc, #40]	; (800adb0 <LoopFillZerobss+0x22>)
  movs r3, #0
 800ad86:	2300      	movs	r3, #0
  b LoopFillZerobss
 800ad88:	e001      	b.n	800ad8e <LoopFillZerobss>

0800ad8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800ad8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800ad8c:	3204      	adds	r2, #4

0800ad8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800ad8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800ad90:	d3fb      	bcc.n	800ad8a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800ad92:	f7f5 fced 	bl	8000770 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800ad96:	f000 f80f 	bl	800adb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800ad9a:	f7f5 fb63 	bl	8000464 <main>
  bx lr
 800ad9e:	4770      	bx	lr
  ldr r0, =_sdata
 800ada0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800ada4:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 800ada8:	0800b10c 	.word	0x0800b10c
  ldr r2, =_sbss
 800adac:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 800adb0:	20002024 	.word	0x20002024

0800adb4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800adb4:	e7fe      	b.n	800adb4 <ADC1_2_IRQHandler>
	...

0800adb8 <__libc_init_array>:
 800adb8:	b570      	push	{r4, r5, r6, lr}
 800adba:	2500      	movs	r5, #0
 800adbc:	4e0c      	ldr	r6, [pc, #48]	; (800adf0 <__libc_init_array+0x38>)
 800adbe:	4c0d      	ldr	r4, [pc, #52]	; (800adf4 <__libc_init_array+0x3c>)
 800adc0:	1ba4      	subs	r4, r4, r6
 800adc2:	10a4      	asrs	r4, r4, #2
 800adc4:	42a5      	cmp	r5, r4
 800adc6:	d109      	bne.n	800addc <__libc_init_array+0x24>
 800adc8:	f000 f822 	bl	800ae10 <_init>
 800adcc:	2500      	movs	r5, #0
 800adce:	4e0a      	ldr	r6, [pc, #40]	; (800adf8 <__libc_init_array+0x40>)
 800add0:	4c0a      	ldr	r4, [pc, #40]	; (800adfc <__libc_init_array+0x44>)
 800add2:	1ba4      	subs	r4, r4, r6
 800add4:	10a4      	asrs	r4, r4, #2
 800add6:	42a5      	cmp	r5, r4
 800add8:	d105      	bne.n	800ade6 <__libc_init_array+0x2e>
 800adda:	bd70      	pop	{r4, r5, r6, pc}
 800addc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ade0:	4798      	blx	r3
 800ade2:	3501      	adds	r5, #1
 800ade4:	e7ee      	b.n	800adc4 <__libc_init_array+0xc>
 800ade6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800adea:	4798      	blx	r3
 800adec:	3501      	adds	r5, #1
 800adee:	e7f2      	b.n	800add6 <__libc_init_array+0x1e>
 800adf0:	0800b104 	.word	0x0800b104
 800adf4:	0800b104 	.word	0x0800b104
 800adf8:	0800b104 	.word	0x0800b104
 800adfc:	0800b108 	.word	0x0800b108

0800ae00 <memset>:
 800ae00:	4603      	mov	r3, r0
 800ae02:	4402      	add	r2, r0
 800ae04:	4293      	cmp	r3, r2
 800ae06:	d100      	bne.n	800ae0a <memset+0xa>
 800ae08:	4770      	bx	lr
 800ae0a:	f803 1b01 	strb.w	r1, [r3], #1
 800ae0e:	e7f9      	b.n	800ae04 <memset+0x4>

0800ae10 <_init>:
 800ae10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae12:	bf00      	nop
 800ae14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae16:	bc08      	pop	{r3}
 800ae18:	469e      	mov	lr, r3
 800ae1a:	4770      	bx	lr

0800ae1c <_fini>:
 800ae1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae1e:	bf00      	nop
 800ae20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae22:	bc08      	pop	{r3}
 800ae24:	469e      	mov	lr, r3
 800ae26:	4770      	bx	lr
