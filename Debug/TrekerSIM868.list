
TrekerSIM868.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000adf4  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002dc  0800af04  0800af04  0001af04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800b1e0  0800b1e0  0001b1e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800b1e4  0800b1e4  0001b1e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000180  20000000  0800b1e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001de4  20000180  0800b368  00020180  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20001f64  0800b368  00021f64  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001f659  00000000  00000000  000201a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000047ef  00000000  00000000  0003f802  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001820  00000000  00000000  00043ff8  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001620  00000000  00000000  00045818  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000e9bd  00000000  00000000  00046e38  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00007049  00000000  00000000  000557f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0005c83e  2**0
                  CONTENTS, READONLY
 16 .debug_frame  0000610c  00000000  00000000  0005c8bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000180 	.word	0x20000180
 800012c:	00000000 	.word	0x00000000
 8000130:	0800aeec 	.word	0x0800aeec

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000184 	.word	0x20000184
 800014c:	0800aeec 	.word	0x0800aeec

08000150 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	b082      	sub	sp, #8
 8000154:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000156:	4a18      	ldr	r2, [pc, #96]	; (80001b8 <MX_DMA_Init+0x68>)
 8000158:	4b17      	ldr	r3, [pc, #92]	; (80001b8 <MX_DMA_Init+0x68>)
 800015a:	695b      	ldr	r3, [r3, #20]
 800015c:	f043 0301 	orr.w	r3, r3, #1
 8000160:	6153      	str	r3, [r2, #20]
 8000162:	4b15      	ldr	r3, [pc, #84]	; (80001b8 <MX_DMA_Init+0x68>)
 8000164:	695b      	ldr	r3, [r3, #20]
 8000166:	f003 0301 	and.w	r3, r3, #1
 800016a:	607b      	str	r3, [r7, #4]
 800016c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 800016e:	2200      	movs	r2, #0
 8000170:	2105      	movs	r1, #5
 8000172:	200e      	movs	r0, #14
 8000174:	f000 fda0 	bl	8000cb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000178:	200e      	movs	r0, #14
 800017a:	f000 fdc9 	bl	8000d10 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 800017e:	2200      	movs	r2, #0
 8000180:	2105      	movs	r1, #5
 8000182:	200f      	movs	r0, #15
 8000184:	f000 fd98 	bl	8000cb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000188:	200f      	movs	r0, #15
 800018a:	f000 fdc1 	bl	8000d10 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 800018e:	2200      	movs	r2, #0
 8000190:	2105      	movs	r1, #5
 8000192:	2010      	movs	r0, #16
 8000194:	f000 fd90 	bl	8000cb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000198:	2010      	movs	r0, #16
 800019a:	f000 fdb9 	bl	8000d10 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 800019e:	2200      	movs	r2, #0
 80001a0:	2105      	movs	r1, #5
 80001a2:	2011      	movs	r0, #17
 80001a4:	f000 fd88 	bl	8000cb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80001a8:	2011      	movs	r0, #17
 80001aa:	f000 fdb1 	bl	8000d10 <HAL_NVIC_EnableIRQ>

}
 80001ae:	bf00      	nop
 80001b0:	3708      	adds	r7, #8
 80001b2:	46bd      	mov	sp, r7
 80001b4:	bd80      	pop	{r7, pc}
 80001b6:	bf00      	nop
 80001b8:	40021000 	.word	0x40021000

080001bc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80001bc:	b480      	push	{r7}
 80001be:	b085      	sub	sp, #20
 80001c0:	af00      	add	r7, sp, #0
 80001c2:	60f8      	str	r0, [r7, #12]
 80001c4:	60b9      	str	r1, [r7, #8]
 80001c6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80001c8:	68fb      	ldr	r3, [r7, #12]
 80001ca:	4a06      	ldr	r2, [pc, #24]	; (80001e4 <vApplicationGetIdleTaskMemory+0x28>)
 80001cc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80001ce:	68bb      	ldr	r3, [r7, #8]
 80001d0:	4a05      	ldr	r2, [pc, #20]	; (80001e8 <vApplicationGetIdleTaskMemory+0x2c>)
 80001d2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	2280      	movs	r2, #128	; 0x80
 80001d8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80001da:	bf00      	nop
 80001dc:	3714      	adds	r7, #20
 80001de:	46bd      	mov	sp, r7
 80001e0:	bc80      	pop	{r7}
 80001e2:	4770      	bx	lr
 80001e4:	2000019c 	.word	0x2000019c
 80001e8:	200001f0 	.word	0x200001f0

080001ec <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80001ec:	b5b0      	push	{r4, r5, r7, lr}
 80001ee:	b09c      	sub	sp, #112	; 0x70
 80001f0:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of GPS */
  osThreadDef(GPS, StartGPS, osPriorityNormal, 0, 128);
 80001f2:	4b27      	ldr	r3, [pc, #156]	; (8000290 <MX_FREERTOS_Init+0xa4>)
 80001f4:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80001f8:	461d      	mov	r5, r3
 80001fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001fe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000202:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  GPSHandle = osThreadCreate(osThread(GPS), NULL);
 8000206:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800020a:	2100      	movs	r1, #0
 800020c:	4618      	mov	r0, r3
 800020e:	f008 fee1 	bl	8008fd4 <osThreadCreate>
 8000212:	4602      	mov	r2, r0
 8000214:	4b1f      	ldr	r3, [pc, #124]	; (8000294 <MX_FREERTOS_Init+0xa8>)
 8000216:	601a      	str	r2, [r3, #0]

  /* definition and creation of GSM */
  osThreadDef(GSM, StartGSM, osPriorityIdle, 0, 128);
 8000218:	4b1f      	ldr	r3, [pc, #124]	; (8000298 <MX_FREERTOS_Init+0xac>)
 800021a:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800021e:	461d      	mov	r5, r3
 8000220:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000222:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000224:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000228:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  GSMHandle = osThreadCreate(osThread(GSM), NULL);
 800022c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000230:	2100      	movs	r1, #0
 8000232:	4618      	mov	r0, r3
 8000234:	f008 fece 	bl	8008fd4 <osThreadCreate>
 8000238:	4602      	mov	r2, r0
 800023a:	4b18      	ldr	r3, [pc, #96]	; (800029c <MX_FREERTOS_Init+0xb0>)
 800023c:	601a      	str	r2, [r3, #0]

  /* definition and creation of Masage */
  osThreadDef(Masage, StartMasage, osPriorityIdle, 0, 128);
 800023e:	4b18      	ldr	r3, [pc, #96]	; (80002a0 <MX_FREERTOS_Init+0xb4>)
 8000240:	f107 041c 	add.w	r4, r7, #28
 8000244:	461d      	mov	r5, r3
 8000246:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000248:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800024a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800024e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  MasageHandle = osThreadCreate(osThread(Masage), NULL);
 8000252:	f107 031c 	add.w	r3, r7, #28
 8000256:	2100      	movs	r1, #0
 8000258:	4618      	mov	r0, r3
 800025a:	f008 febb 	bl	8008fd4 <osThreadCreate>
 800025e:	4602      	mov	r2, r0
 8000260:	4b10      	ldr	r3, [pc, #64]	; (80002a4 <MX_FREERTOS_Init+0xb8>)
 8000262:	601a      	str	r2, [r3, #0]

  /* definition and creation of mySTATUS */
  osThreadDef(mySTATUS, StartSTATUS, osPriorityIdle, 0, 128);
 8000264:	4b10      	ldr	r3, [pc, #64]	; (80002a8 <MX_FREERTOS_Init+0xbc>)
 8000266:	463c      	mov	r4, r7
 8000268:	461d      	mov	r5, r3
 800026a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800026c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800026e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000272:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  mySTATUSHandle = osThreadCreate(osThread(mySTATUS), NULL);
 8000276:	463b      	mov	r3, r7
 8000278:	2100      	movs	r1, #0
 800027a:	4618      	mov	r0, r3
 800027c:	f008 feaa 	bl	8008fd4 <osThreadCreate>
 8000280:	4602      	mov	r2, r0
 8000282:	4b0a      	ldr	r3, [pc, #40]	; (80002ac <MX_FREERTOS_Init+0xc0>)
 8000284:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000286:	bf00      	nop
 8000288:	3770      	adds	r7, #112	; 0x70
 800028a:	46bd      	mov	sp, r7
 800028c:	bdb0      	pop	{r4, r5, r7, pc}
 800028e:	bf00      	nop
 8000290:	0800af08 	.word	0x0800af08
 8000294:	200014f8 	.word	0x200014f8
 8000298:	0800af28 	.word	0x0800af28
 800029c:	20001504 	.word	0x20001504
 80002a0:	0800af4c 	.word	0x0800af4c
 80002a4:	20001500 	.word	0x20001500
 80002a8:	0800af74 	.word	0x0800af74
 80002ac:	200014fc 	.word	0x200014fc

080002b0 <StartGPS>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartGPS */
void StartGPS(void const * argument)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b082      	sub	sp, #8
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80002b8:	f00a f828 	bl	800a30c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartGPS */
  /* Infinite loop */
  for(;;)
  {
    osDelay(500);
 80002bc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002c0:	f008 fed4 	bl	800906c <osDelay>
    HAL_GPIO_WritePin(GPIOC, LED_WORK_Pin, GPIO_PIN_RESET);
 80002c4:	2200      	movs	r2, #0
 80002c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002ca:	4807      	ldr	r0, [pc, #28]	; (80002e8 <StartGPS+0x38>)
 80002cc:	f001 fad6 	bl	800187c <HAL_GPIO_WritePin>
    osDelay(500);
 80002d0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002d4:	f008 feca 	bl	800906c <osDelay>
    HAL_GPIO_WritePin(GPIOC, LED_WORK_Pin, GPIO_PIN_SET);
 80002d8:	2201      	movs	r2, #1
 80002da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002de:	4802      	ldr	r0, [pc, #8]	; (80002e8 <StartGPS+0x38>)
 80002e0:	f001 facc 	bl	800187c <HAL_GPIO_WritePin>
    osDelay(500);
 80002e4:	e7ea      	b.n	80002bc <StartGPS+0xc>
 80002e6:	bf00      	nop
 80002e8:	40011000 	.word	0x40011000

080002ec <StartGSM>:
*/
/* USER CODE END Header_StartGSM */

    void ATcomand(char Comand);
void StartGSM(void const * argument)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b082      	sub	sp, #8
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	6078      	str	r0, [r7, #4]
   // HAL_GPIO_WritePin(GNSS_EN_GPIO_Port, GNSS_EN_Pin, GPIO_PIN_RESET);
    //osDelay(5000);


  // ATcomand(AT);
   osDelay(2000);
 80002f4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80002f8:	f008 feb8 	bl	800906c <osDelay>
 80002fc:	e7fa      	b.n	80002f4 <StartGSM+0x8>

080002fe <StartMasage>:
*/
/* USER CODE END Header_StartMasage */
void SendToUSB(void);

void StartMasage(void const * argument)
{
 80002fe:	b580      	push	{r7, lr}
 8000300:	b082      	sub	sp, #8
 8000302:	af00      	add	r7, sp, #0
 8000304:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMasage */
  /* Infinite loop */
  for(;;)
  {

    osDelay(1000);
 8000306:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800030a:	f008 feaf 	bl	800906c <osDelay>

    SendToUSB();
 800030e:	f00a fcdf 	bl	800acd0 <SendToUSB>
    osDelay(1000);
 8000312:	e7f8      	b.n	8000306 <StartMasage+0x8>

08000314 <StartSTATUS>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSTATUS */
void StartSTATUS(void const * argument)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b082      	sub	sp, #8
 8000318:	af00      	add	r7, sp, #0
 800031a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSTATUS */
  /* Infinite loop */
  for(;;)
  {

      osDelay(500);
 800031c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000320:	f008 fea4 	bl	800906c <osDelay>
      HAL_GPIO_WritePin(GPIOC, LED_WORK_Pin, GPIO_PIN_RESET);
 8000324:	2200      	movs	r2, #0
 8000326:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800032a:	4807      	ldr	r0, [pc, #28]	; (8000348 <StartSTATUS+0x34>)
 800032c:	f001 faa6 	bl	800187c <HAL_GPIO_WritePin>
      osDelay(500);
 8000330:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000334:	f008 fe9a 	bl	800906c <osDelay>
      HAL_GPIO_WritePin(GPIOC, LED_WORK_Pin, GPIO_PIN_SET);
 8000338:	2201      	movs	r2, #1
 800033a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800033e:	4802      	ldr	r0, [pc, #8]	; (8000348 <StartSTATUS+0x34>)
 8000340:	f001 fa9c 	bl	800187c <HAL_GPIO_WritePin>
      osDelay(500);
 8000344:	e7ea      	b.n	800031c <StartSTATUS+0x8>
 8000346:	bf00      	nop
 8000348:	40011000 	.word	0x40011000

0800034c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b088      	sub	sp, #32
 8000350:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000352:	f107 0310 	add.w	r3, r7, #16
 8000356:	2200      	movs	r2, #0
 8000358:	601a      	str	r2, [r3, #0]
 800035a:	605a      	str	r2, [r3, #4]
 800035c:	609a      	str	r2, [r3, #8]
 800035e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000360:	4a3e      	ldr	r2, [pc, #248]	; (800045c <MX_GPIO_Init+0x110>)
 8000362:	4b3e      	ldr	r3, [pc, #248]	; (800045c <MX_GPIO_Init+0x110>)
 8000364:	699b      	ldr	r3, [r3, #24]
 8000366:	f043 0310 	orr.w	r3, r3, #16
 800036a:	6193      	str	r3, [r2, #24]
 800036c:	4b3b      	ldr	r3, [pc, #236]	; (800045c <MX_GPIO_Init+0x110>)
 800036e:	699b      	ldr	r3, [r3, #24]
 8000370:	f003 0310 	and.w	r3, r3, #16
 8000374:	60fb      	str	r3, [r7, #12]
 8000376:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000378:	4a38      	ldr	r2, [pc, #224]	; (800045c <MX_GPIO_Init+0x110>)
 800037a:	4b38      	ldr	r3, [pc, #224]	; (800045c <MX_GPIO_Init+0x110>)
 800037c:	699b      	ldr	r3, [r3, #24]
 800037e:	f043 0320 	orr.w	r3, r3, #32
 8000382:	6193      	str	r3, [r2, #24]
 8000384:	4b35      	ldr	r3, [pc, #212]	; (800045c <MX_GPIO_Init+0x110>)
 8000386:	699b      	ldr	r3, [r3, #24]
 8000388:	f003 0320 	and.w	r3, r3, #32
 800038c:	60bb      	str	r3, [r7, #8]
 800038e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000390:	4a32      	ldr	r2, [pc, #200]	; (800045c <MX_GPIO_Init+0x110>)
 8000392:	4b32      	ldr	r3, [pc, #200]	; (800045c <MX_GPIO_Init+0x110>)
 8000394:	699b      	ldr	r3, [r3, #24]
 8000396:	f043 0304 	orr.w	r3, r3, #4
 800039a:	6193      	str	r3, [r2, #24]
 800039c:	4b2f      	ldr	r3, [pc, #188]	; (800045c <MX_GPIO_Init+0x110>)
 800039e:	699b      	ldr	r3, [r3, #24]
 80003a0:	f003 0304 	and.w	r3, r3, #4
 80003a4:	607b      	str	r3, [r7, #4]
 80003a6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003a8:	4a2c      	ldr	r2, [pc, #176]	; (800045c <MX_GPIO_Init+0x110>)
 80003aa:	4b2c      	ldr	r3, [pc, #176]	; (800045c <MX_GPIO_Init+0x110>)
 80003ac:	699b      	ldr	r3, [r3, #24]
 80003ae:	f043 0308 	orr.w	r3, r3, #8
 80003b2:	6193      	str	r3, [r2, #24]
 80003b4:	4b29      	ldr	r3, [pc, #164]	; (800045c <MX_GPIO_Init+0x110>)
 80003b6:	699b      	ldr	r3, [r3, #24]
 80003b8:	f003 0308 	and.w	r3, r3, #8
 80003bc:	603b      	str	r3, [r7, #0]
 80003be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_WORK_GPIO_Port, LED_WORK_Pin, GPIO_PIN_SET);
 80003c0:	2201      	movs	r2, #1
 80003c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003c6:	4826      	ldr	r0, [pc, #152]	; (8000460 <MX_GPIO_Init+0x114>)
 80003c8:	f001 fa58 	bl	800187c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DTR_SlEEP_Pin|SIM_PWR_KEY_Pin|GNSS_EN_Pin|PWR_Sensor_Pin, GPIO_PIN_RESET);
 80003cc:	2200      	movs	r2, #0
 80003ce:	2172      	movs	r1, #114	; 0x72
 80003d0:	4824      	ldr	r0, [pc, #144]	; (8000464 <MX_GPIO_Init+0x118>)
 80003d2:	f001 fa53 	bl	800187c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_WORK_Pin;
 80003d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003dc:	2301      	movs	r3, #1
 80003de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003e0:	2300      	movs	r3, #0
 80003e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003e4:	2302      	movs	r3, #2
 80003e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_WORK_GPIO_Port, &GPIO_InitStruct);
 80003e8:	f107 0310 	add.w	r3, r7, #16
 80003ec:	4619      	mov	r1, r3
 80003ee:	481c      	ldr	r0, [pc, #112]	; (8000460 <MX_GPIO_Init+0x114>)
 80003f0:	f001 f80a 	bl	8001408 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80003f4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80003f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80003fa:	2303      	movs	r3, #3
 80003fc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003fe:	f107 0310 	add.w	r3, r7, #16
 8000402:	4619      	mov	r1, r3
 8000404:	4816      	ldr	r0, [pc, #88]	; (8000460 <MX_GPIO_Init+0x114>)
 8000406:	f000 ffff 	bl	8001408 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = DTR_SlEEP_Pin|SIM_PWR_KEY_Pin|GNSS_EN_Pin|PWR_Sensor_Pin;
 800040a:	2372      	movs	r3, #114	; 0x72
 800040c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800040e:	2301      	movs	r3, #1
 8000410:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000412:	2300      	movs	r3, #0
 8000414:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000416:	2302      	movs	r3, #2
 8000418:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800041a:	f107 0310 	add.w	r3, r7, #16
 800041e:	4619      	mov	r1, r3
 8000420:	4810      	ldr	r0, [pc, #64]	; (8000464 <MX_GPIO_Init+0x118>)
 8000422:	f000 fff1 	bl	8001408 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA7 PA8 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_15;
 8000426:	f248 1380 	movw	r3, #33152	; 0x8180
 800042a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800042c:	2303      	movs	r3, #3
 800042e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000430:	f107 0310 	add.w	r3, r7, #16
 8000434:	4619      	mov	r1, r3
 8000436:	480b      	ldr	r0, [pc, #44]	; (8000464 <MX_GPIO_Init+0x118>)
 8000438:	f000 ffe6 	bl	8001408 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB4 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 800043c:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 8000440:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000442:	2303      	movs	r3, #3
 8000444:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000446:	f107 0310 	add.w	r3, r7, #16
 800044a:	4619      	mov	r1, r3
 800044c:	4806      	ldr	r0, [pc, #24]	; (8000468 <MX_GPIO_Init+0x11c>)
 800044e:	f000 ffdb 	bl	8001408 <HAL_GPIO_Init>

}
 8000452:	bf00      	nop
 8000454:	3720      	adds	r7, #32
 8000456:	46bd      	mov	sp, r7
 8000458:	bd80      	pop	{r7, pc}
 800045a:	bf00      	nop
 800045c:	40021000 	.word	0x40021000
 8000460:	40011000 	.word	0x40011000
 8000464:	40010800 	.word	0x40010800
 8000468:	40010c00 	.word	0x40010c00

0800046c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000470:	f000 fb28 	bl	8000ac4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000474:	f000 f818 	bl	80004a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000478:	f7ff ff68 	bl	800034c <MX_GPIO_Init>
  MX_DMA_Init();
 800047c:	f7ff fe68 	bl	8000150 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000480:	f000 f98e 	bl	80007a0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000484:	f000 f9b6 	bl	80007f4 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000488:	f000 f984 	bl	8000794 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GNSS_EN_GPIO_Port, GNSS_EN_Pin, GPIO_PIN_SET);
 800048c:	2201      	movs	r2, #1
 800048e:	2120      	movs	r1, #32
 8000490:	4804      	ldr	r0, [pc, #16]	; (80004a4 <main+0x38>)
 8000492:	f001 f9f3 	bl	800187c <HAL_GPIO_WritePin>

  void ReadUart(void);
       ReadUart();
 8000496:	f00a fcc7 	bl	800ae28 <ReadUart>


  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 800049a:	f7ff fea7 	bl	80001ec <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800049e:	f008 fd92 	bl	8008fc6 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004a2:	e7fe      	b.n	80004a2 <main+0x36>
 80004a4:	40010800 	.word	0x40010800

080004a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b094      	sub	sp, #80	; 0x50
 80004ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80004b2:	2228      	movs	r2, #40	; 0x28
 80004b4:	2100      	movs	r1, #0
 80004b6:	4618      	mov	r0, r3
 80004b8:	f00a fd10 	bl	800aedc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004bc:	f107 0314 	add.w	r3, r7, #20
 80004c0:	2200      	movs	r2, #0
 80004c2:	601a      	str	r2, [r3, #0]
 80004c4:	605a      	str	r2, [r3, #4]
 80004c6:	609a      	str	r2, [r3, #8]
 80004c8:	60da      	str	r2, [r3, #12]
 80004ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004cc:	1d3b      	adds	r3, r7, #4
 80004ce:	2200      	movs	r2, #0
 80004d0:	601a      	str	r2, [r3, #0]
 80004d2:	605a      	str	r2, [r3, #4]
 80004d4:	609a      	str	r2, [r3, #8]
 80004d6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80004d8:	2301      	movs	r3, #1
 80004da:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80004dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80004e2:	2300      	movs	r3, #0
 80004e4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004e6:	2301      	movs	r3, #1
 80004e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004ea:	2302      	movs	r3, #2
 80004ec:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80004ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80004f4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80004f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80004fe:	4618      	mov	r0, r3
 8000500:	f002 fede 	bl	80032c0 <HAL_RCC_OscConfig>
 8000504:	4603      	mov	r3, r0
 8000506:	2b00      	cmp	r3, #0
 8000508:	d001      	beq.n	800050e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800050a:	f000 f83b 	bl	8000584 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800050e:	230f      	movs	r3, #15
 8000510:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000512:	2302      	movs	r3, #2
 8000514:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000516:	2300      	movs	r3, #0
 8000518:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800051a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800051e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000520:	2300      	movs	r3, #0
 8000522:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000524:	f107 0314 	add.w	r3, r7, #20
 8000528:	2101      	movs	r1, #1
 800052a:	4618      	mov	r0, r3
 800052c:	f003 fa38 	bl	80039a0 <HAL_RCC_ClockConfig>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d001      	beq.n	800053a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000536:	f000 f825 	bl	8000584 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800053a:	2310      	movs	r3, #16
 800053c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800053e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000542:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000544:	1d3b      	adds	r3, r7, #4
 8000546:	4618      	mov	r0, r3
 8000548:	f003 fcae 	bl	8003ea8 <HAL_RCCEx_PeriphCLKConfig>
 800054c:	4603      	mov	r3, r0
 800054e:	2b00      	cmp	r3, #0
 8000550:	d001      	beq.n	8000556 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000552:	f000 f817 	bl	8000584 <Error_Handler>
  }
}
 8000556:	bf00      	nop
 8000558:	3750      	adds	r7, #80	; 0x50
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}
	...

08000560 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	4a04      	ldr	r2, [pc, #16]	; (8000580 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800056e:	4293      	cmp	r3, r2
 8000570:	d101      	bne.n	8000576 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000572:	f000 fabd 	bl	8000af0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000576:	bf00      	nop
 8000578:	3708      	adds	r7, #8
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	40012c00 	.word	0x40012c00

08000584 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000588:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800058a:	e7fe      	b.n	800058a <Error_Handler+0x6>

0800058c <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 800058c:	b480      	push	{r7}
 800058e:	b083      	sub	sp, #12
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
 8000594:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000596:	bf00      	nop
 8000598:	370c      	adds	r7, #12
 800059a:	46bd      	mov	sp, r7
 800059c:	bc80      	pop	{r7}
 800059e:	4770      	bx	lr

080005a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b084      	sub	sp, #16
 80005a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005a6:	4a18      	ldr	r2, [pc, #96]	; (8000608 <HAL_MspInit+0x68>)
 80005a8:	4b17      	ldr	r3, [pc, #92]	; (8000608 <HAL_MspInit+0x68>)
 80005aa:	699b      	ldr	r3, [r3, #24]
 80005ac:	f043 0301 	orr.w	r3, r3, #1
 80005b0:	6193      	str	r3, [r2, #24]
 80005b2:	4b15      	ldr	r3, [pc, #84]	; (8000608 <HAL_MspInit+0x68>)
 80005b4:	699b      	ldr	r3, [r3, #24]
 80005b6:	f003 0301 	and.w	r3, r3, #1
 80005ba:	60bb      	str	r3, [r7, #8]
 80005bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005be:	4a12      	ldr	r2, [pc, #72]	; (8000608 <HAL_MspInit+0x68>)
 80005c0:	4b11      	ldr	r3, [pc, #68]	; (8000608 <HAL_MspInit+0x68>)
 80005c2:	69db      	ldr	r3, [r3, #28]
 80005c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005c8:	61d3      	str	r3, [r2, #28]
 80005ca:	4b0f      	ldr	r3, [pc, #60]	; (8000608 <HAL_MspInit+0x68>)
 80005cc:	69db      	ldr	r3, [r3, #28]
 80005ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005d2:	607b      	str	r3, [r7, #4]
 80005d4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80005d6:	2200      	movs	r2, #0
 80005d8:	210f      	movs	r1, #15
 80005da:	f06f 0001 	mvn.w	r0, #1
 80005de:	f000 fb6b 	bl	8000cb8 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80005e2:	4b0a      	ldr	r3, [pc, #40]	; (800060c <HAL_MspInit+0x6c>)
 80005e4:	685b      	ldr	r3, [r3, #4]
 80005e6:	60fb      	str	r3, [r7, #12]
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80005ee:	60fb      	str	r3, [r7, #12]
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005f6:	60fb      	str	r3, [r7, #12]
 80005f8:	4a04      	ldr	r2, [pc, #16]	; (800060c <HAL_MspInit+0x6c>)
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005fe:	bf00      	nop
 8000600:	3710      	adds	r7, #16
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	40021000 	.word	0x40021000
 800060c:	40010000 	.word	0x40010000

08000610 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b08c      	sub	sp, #48	; 0x30
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000618:	2300      	movs	r3, #0
 800061a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800061c:	2300      	movs	r3, #0
 800061e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8000620:	2200      	movs	r2, #0
 8000622:	6879      	ldr	r1, [r7, #4]
 8000624:	2019      	movs	r0, #25
 8000626:	f000 fb47 	bl	8000cb8 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800062a:	2019      	movs	r0, #25
 800062c:	f000 fb70 	bl	8000d10 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000630:	4a1e      	ldr	r2, [pc, #120]	; (80006ac <HAL_InitTick+0x9c>)
 8000632:	4b1e      	ldr	r3, [pc, #120]	; (80006ac <HAL_InitTick+0x9c>)
 8000634:	699b      	ldr	r3, [r3, #24]
 8000636:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800063a:	6193      	str	r3, [r2, #24]
 800063c:	4b1b      	ldr	r3, [pc, #108]	; (80006ac <HAL_InitTick+0x9c>)
 800063e:	699b      	ldr	r3, [r3, #24]
 8000640:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000644:	60fb      	str	r3, [r7, #12]
 8000646:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000648:	f107 0210 	add.w	r2, r7, #16
 800064c:	f107 0314 	add.w	r3, r7, #20
 8000650:	4611      	mov	r1, r2
 8000652:	4618      	mov	r0, r3
 8000654:	f003 fbc8 	bl	8003de8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000658:	f003 fbb2 	bl	8003dc0 <HAL_RCC_GetPCLK2Freq>
 800065c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800065e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000660:	4a13      	ldr	r2, [pc, #76]	; (80006b0 <HAL_InitTick+0xa0>)
 8000662:	fba2 2303 	umull	r2, r3, r2, r3
 8000666:	0c9b      	lsrs	r3, r3, #18
 8000668:	3b01      	subs	r3, #1
 800066a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800066c:	4b11      	ldr	r3, [pc, #68]	; (80006b4 <HAL_InitTick+0xa4>)
 800066e:	4a12      	ldr	r2, [pc, #72]	; (80006b8 <HAL_InitTick+0xa8>)
 8000670:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000672:	4b10      	ldr	r3, [pc, #64]	; (80006b4 <HAL_InitTick+0xa4>)
 8000674:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000678:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800067a:	4a0e      	ldr	r2, [pc, #56]	; (80006b4 <HAL_InitTick+0xa4>)
 800067c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800067e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000680:	4b0c      	ldr	r3, [pc, #48]	; (80006b4 <HAL_InitTick+0xa4>)
 8000682:	2200      	movs	r2, #0
 8000684:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000686:	4b0b      	ldr	r3, [pc, #44]	; (80006b4 <HAL_InitTick+0xa4>)
 8000688:	2200      	movs	r2, #0
 800068a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800068c:	4809      	ldr	r0, [pc, #36]	; (80006b4 <HAL_InitTick+0xa4>)
 800068e:	f003 fd15 	bl	80040bc <HAL_TIM_Base_Init>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d104      	bne.n	80006a2 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000698:	4806      	ldr	r0, [pc, #24]	; (80006b4 <HAL_InitTick+0xa4>)
 800069a:	f003 fdc3 	bl	8004224 <HAL_TIM_Base_Start_IT>
 800069e:	4603      	mov	r3, r0
 80006a0:	e000      	b.n	80006a4 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80006a2:	2301      	movs	r3, #1
}
 80006a4:	4618      	mov	r0, r3
 80006a6:	3730      	adds	r7, #48	; 0x30
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	40021000 	.word	0x40021000
 80006b0:	431bde83 	.word	0x431bde83
 80006b4:	20001508 	.word	0x20001508
 80006b8:	40012c00 	.word	0x40012c00

080006bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006c0:	e7fe      	b.n	80006c0 <NMI_Handler+0x4>

080006c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006c2:	b480      	push	{r7}
 80006c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006c6:	e7fe      	b.n	80006c6 <HardFault_Handler+0x4>

080006c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006cc:	e7fe      	b.n	80006cc <MemManage_Handler+0x4>

080006ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006ce:	b480      	push	{r7}
 80006d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006d2:	e7fe      	b.n	80006d2 <BusFault_Handler+0x4>

080006d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006d8:	e7fe      	b.n	80006d8 <UsageFault_Handler+0x4>

080006da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006da:	b480      	push	{r7}
 80006dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006de:	bf00      	nop
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bc80      	pop	{r7}
 80006e4:	4770      	bx	lr
	...

080006e8 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80006ec:	4802      	ldr	r0, [pc, #8]	; (80006f8 <DMA1_Channel4_IRQHandler+0x10>)
 80006ee:	f000 fd4b 	bl	8001188 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80006f2:	bf00      	nop
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	20001594 	.word	0x20001594

080006fc <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000700:	4802      	ldr	r0, [pc, #8]	; (800070c <DMA1_Channel5_IRQHandler+0x10>)
 8000702:	f000 fd41 	bl	8001188 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000706:	bf00      	nop
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	200015d8 	.word	0x200015d8

08000710 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000714:	4802      	ldr	r0, [pc, #8]	; (8000720 <DMA1_Channel6_IRQHandler+0x10>)
 8000716:	f000 fd37 	bl	8001188 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800071a:	bf00      	nop
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	20001550 	.word	0x20001550

08000724 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000728:	4802      	ldr	r0, [pc, #8]	; (8000734 <DMA1_Channel7_IRQHandler+0x10>)
 800072a:	f000 fd2d 	bl	8001188 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800072e:	bf00      	nop
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	2000161c 	.word	0x2000161c

08000738 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800073c:	4802      	ldr	r0, [pc, #8]	; (8000748 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800073e:	f001 fa0d 	bl	8001b5c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000742:	bf00      	nop
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	20001c78 	.word	0x20001c78

0800074c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000750:	4802      	ldr	r0, [pc, #8]	; (800075c <TIM1_UP_IRQHandler+0x10>)
 8000752:	f003 fdd3 	bl	80042fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000756:	bf00      	nop
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	20001508 	.word	0x20001508

08000760 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000764:	4802      	ldr	r0, [pc, #8]	; (8000770 <USART1_IRQHandler+0x10>)
 8000766:	f004 f8cd 	bl	8004904 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800076a:	bf00      	nop
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	20001660 	.word	0x20001660

08000774 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000778:	4802      	ldr	r0, [pc, #8]	; (8000784 <USART2_IRQHandler+0x10>)
 800077a:	f004 f8c3 	bl	8004904 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800077e:	bf00      	nop
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	200016a4 	.word	0x200016a4

08000788 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800078c:	bf00      	nop
 800078e:	46bd      	mov	sp, r7
 8000790:	bc80      	pop	{r7}
 8000792:	4770      	bx	lr

08000794 <MX_TIM2_Init>:

/* USER CODE END 0 */

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE END TIM2_Init 1 */
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000798:	bf00      	nop
 800079a:	46bd      	mov	sp, r7
 800079c:	bc80      	pop	{r7}
 800079e:	4770      	bx	lr

080007a0 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007a4:	4b11      	ldr	r3, [pc, #68]	; (80007ec <MX_USART1_UART_Init+0x4c>)
 80007a6:	4a12      	ldr	r2, [pc, #72]	; (80007f0 <MX_USART1_UART_Init+0x50>)
 80007a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80007aa:	4b10      	ldr	r3, [pc, #64]	; (80007ec <MX_USART1_UART_Init+0x4c>)
 80007ac:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80007b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007b2:	4b0e      	ldr	r3, [pc, #56]	; (80007ec <MX_USART1_UART_Init+0x4c>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007b8:	4b0c      	ldr	r3, [pc, #48]	; (80007ec <MX_USART1_UART_Init+0x4c>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007be:	4b0b      	ldr	r3, [pc, #44]	; (80007ec <MX_USART1_UART_Init+0x4c>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007c4:	4b09      	ldr	r3, [pc, #36]	; (80007ec <MX_USART1_UART_Init+0x4c>)
 80007c6:	220c      	movs	r2, #12
 80007c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ca:	4b08      	ldr	r3, [pc, #32]	; (80007ec <MX_USART1_UART_Init+0x4c>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007d0:	4b06      	ldr	r3, [pc, #24]	; (80007ec <MX_USART1_UART_Init+0x4c>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007d6:	4805      	ldr	r0, [pc, #20]	; (80007ec <MX_USART1_UART_Init+0x4c>)
 80007d8:	f003 ff30 	bl	800463c <HAL_UART_Init>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80007e2:	f7ff fecf 	bl	8000584 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007e6:	bf00      	nop
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	20001660 	.word	0x20001660
 80007f0:	40013800 	.word	0x40013800

080007f4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007f8:	4b11      	ldr	r3, [pc, #68]	; (8000840 <MX_USART2_UART_Init+0x4c>)
 80007fa:	4a12      	ldr	r2, [pc, #72]	; (8000844 <MX_USART2_UART_Init+0x50>)
 80007fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007fe:	4b10      	ldr	r3, [pc, #64]	; (8000840 <MX_USART2_UART_Init+0x4c>)
 8000800:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000804:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000806:	4b0e      	ldr	r3, [pc, #56]	; (8000840 <MX_USART2_UART_Init+0x4c>)
 8000808:	2200      	movs	r2, #0
 800080a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800080c:	4b0c      	ldr	r3, [pc, #48]	; (8000840 <MX_USART2_UART_Init+0x4c>)
 800080e:	2200      	movs	r2, #0
 8000810:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000812:	4b0b      	ldr	r3, [pc, #44]	; (8000840 <MX_USART2_UART_Init+0x4c>)
 8000814:	2200      	movs	r2, #0
 8000816:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000818:	4b09      	ldr	r3, [pc, #36]	; (8000840 <MX_USART2_UART_Init+0x4c>)
 800081a:	220c      	movs	r2, #12
 800081c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800081e:	4b08      	ldr	r3, [pc, #32]	; (8000840 <MX_USART2_UART_Init+0x4c>)
 8000820:	2200      	movs	r2, #0
 8000822:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000824:	4b06      	ldr	r3, [pc, #24]	; (8000840 <MX_USART2_UART_Init+0x4c>)
 8000826:	2200      	movs	r2, #0
 8000828:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800082a:	4805      	ldr	r0, [pc, #20]	; (8000840 <MX_USART2_UART_Init+0x4c>)
 800082c:	f003 ff06 	bl	800463c <HAL_UART_Init>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000836:	f7ff fea5 	bl	8000584 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800083a:	bf00      	nop
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	200016a4 	.word	0x200016a4
 8000844:	40004400 	.word	0x40004400

08000848 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b08a      	sub	sp, #40	; 0x28
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000850:	f107 0318 	add.w	r3, r7, #24
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
 8000858:	605a      	str	r2, [r3, #4]
 800085a:	609a      	str	r2, [r3, #8]
 800085c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	4a8c      	ldr	r2, [pc, #560]	; (8000a94 <HAL_UART_MspInit+0x24c>)
 8000864:	4293      	cmp	r3, r2
 8000866:	f040 8087 	bne.w	8000978 <HAL_UART_MspInit+0x130>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800086a:	4a8b      	ldr	r2, [pc, #556]	; (8000a98 <HAL_UART_MspInit+0x250>)
 800086c:	4b8a      	ldr	r3, [pc, #552]	; (8000a98 <HAL_UART_MspInit+0x250>)
 800086e:	699b      	ldr	r3, [r3, #24]
 8000870:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000874:	6193      	str	r3, [r2, #24]
 8000876:	4b88      	ldr	r3, [pc, #544]	; (8000a98 <HAL_UART_MspInit+0x250>)
 8000878:	699b      	ldr	r3, [r3, #24]
 800087a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800087e:	617b      	str	r3, [r7, #20]
 8000880:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000882:	4a85      	ldr	r2, [pc, #532]	; (8000a98 <HAL_UART_MspInit+0x250>)
 8000884:	4b84      	ldr	r3, [pc, #528]	; (8000a98 <HAL_UART_MspInit+0x250>)
 8000886:	699b      	ldr	r3, [r3, #24]
 8000888:	f043 0304 	orr.w	r3, r3, #4
 800088c:	6193      	str	r3, [r2, #24]
 800088e:	4b82      	ldr	r3, [pc, #520]	; (8000a98 <HAL_UART_MspInit+0x250>)
 8000890:	699b      	ldr	r3, [r3, #24]
 8000892:	f003 0304 	and.w	r3, r3, #4
 8000896:	613b      	str	r3, [r7, #16]
 8000898:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800089a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800089e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a0:	2302      	movs	r3, #2
 80008a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008a4:	2303      	movs	r3, #3
 80008a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a8:	f107 0318 	add.w	r3, r7, #24
 80008ac:	4619      	mov	r1, r3
 80008ae:	487b      	ldr	r0, [pc, #492]	; (8000a9c <HAL_UART_MspInit+0x254>)
 80008b0:	f000 fdaa 	bl	8001408 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80008b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ba:	2300      	movs	r3, #0
 80008bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c2:	f107 0318 	add.w	r3, r7, #24
 80008c6:	4619      	mov	r1, r3
 80008c8:	4874      	ldr	r0, [pc, #464]	; (8000a9c <HAL_UART_MspInit+0x254>)
 80008ca:	f000 fd9d 	bl	8001408 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80008ce:	4b74      	ldr	r3, [pc, #464]	; (8000aa0 <HAL_UART_MspInit+0x258>)
 80008d0:	4a74      	ldr	r2, [pc, #464]	; (8000aa4 <HAL_UART_MspInit+0x25c>)
 80008d2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008d4:	4b72      	ldr	r3, [pc, #456]	; (8000aa0 <HAL_UART_MspInit+0x258>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008da:	4b71      	ldr	r3, [pc, #452]	; (8000aa0 <HAL_UART_MspInit+0x258>)
 80008dc:	2200      	movs	r2, #0
 80008de:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80008e0:	4b6f      	ldr	r3, [pc, #444]	; (8000aa0 <HAL_UART_MspInit+0x258>)
 80008e2:	2280      	movs	r2, #128	; 0x80
 80008e4:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80008e6:	4b6e      	ldr	r3, [pc, #440]	; (8000aa0 <HAL_UART_MspInit+0x258>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80008ec:	4b6c      	ldr	r3, [pc, #432]	; (8000aa0 <HAL_UART_MspInit+0x258>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80008f2:	4b6b      	ldr	r3, [pc, #428]	; (8000aa0 <HAL_UART_MspInit+0x258>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80008f8:	4b69      	ldr	r3, [pc, #420]	; (8000aa0 <HAL_UART_MspInit+0x258>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80008fe:	4868      	ldr	r0, [pc, #416]	; (8000aa0 <HAL_UART_MspInit+0x258>)
 8000900:	f000 fa1e 	bl	8000d40 <HAL_DMA_Init>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 800090a:	f7ff fe3b 	bl	8000584 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	4a63      	ldr	r2, [pc, #396]	; (8000aa0 <HAL_UART_MspInit+0x258>)
 8000912:	639a      	str	r2, [r3, #56]	; 0x38
 8000914:	4a62      	ldr	r2, [pc, #392]	; (8000aa0 <HAL_UART_MspInit+0x258>)
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 800091a:	4b63      	ldr	r3, [pc, #396]	; (8000aa8 <HAL_UART_MspInit+0x260>)
 800091c:	4a63      	ldr	r2, [pc, #396]	; (8000aac <HAL_UART_MspInit+0x264>)
 800091e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000920:	4b61      	ldr	r3, [pc, #388]	; (8000aa8 <HAL_UART_MspInit+0x260>)
 8000922:	2210      	movs	r2, #16
 8000924:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000926:	4b60      	ldr	r3, [pc, #384]	; (8000aa8 <HAL_UART_MspInit+0x260>)
 8000928:	2200      	movs	r2, #0
 800092a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800092c:	4b5e      	ldr	r3, [pc, #376]	; (8000aa8 <HAL_UART_MspInit+0x260>)
 800092e:	2280      	movs	r2, #128	; 0x80
 8000930:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000932:	4b5d      	ldr	r3, [pc, #372]	; (8000aa8 <HAL_UART_MspInit+0x260>)
 8000934:	2200      	movs	r2, #0
 8000936:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000938:	4b5b      	ldr	r3, [pc, #364]	; (8000aa8 <HAL_UART_MspInit+0x260>)
 800093a:	2200      	movs	r2, #0
 800093c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800093e:	4b5a      	ldr	r3, [pc, #360]	; (8000aa8 <HAL_UART_MspInit+0x260>)
 8000940:	2200      	movs	r2, #0
 8000942:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000944:	4b58      	ldr	r3, [pc, #352]	; (8000aa8 <HAL_UART_MspInit+0x260>)
 8000946:	2200      	movs	r2, #0
 8000948:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800094a:	4857      	ldr	r0, [pc, #348]	; (8000aa8 <HAL_UART_MspInit+0x260>)
 800094c:	f000 f9f8 	bl	8000d40 <HAL_DMA_Init>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 8000956:	f7ff fe15 	bl	8000584 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	4a52      	ldr	r2, [pc, #328]	; (8000aa8 <HAL_UART_MspInit+0x260>)
 800095e:	635a      	str	r2, [r3, #52]	; 0x34
 8000960:	4a51      	ldr	r2, [pc, #324]	; (8000aa8 <HAL_UART_MspInit+0x260>)
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000966:	2200      	movs	r2, #0
 8000968:	2105      	movs	r1, #5
 800096a:	2025      	movs	r0, #37	; 0x25
 800096c:	f000 f9a4 	bl	8000cb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000970:	2025      	movs	r0, #37	; 0x25
 8000972:	f000 f9cd 	bl	8000d10 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000976:	e089      	b.n	8000a8c <HAL_UART_MspInit+0x244>
  else if(uartHandle->Instance==USART2)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a4c      	ldr	r2, [pc, #304]	; (8000ab0 <HAL_UART_MspInit+0x268>)
 800097e:	4293      	cmp	r3, r2
 8000980:	f040 8084 	bne.w	8000a8c <HAL_UART_MspInit+0x244>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000984:	4a44      	ldr	r2, [pc, #272]	; (8000a98 <HAL_UART_MspInit+0x250>)
 8000986:	4b44      	ldr	r3, [pc, #272]	; (8000a98 <HAL_UART_MspInit+0x250>)
 8000988:	69db      	ldr	r3, [r3, #28]
 800098a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800098e:	61d3      	str	r3, [r2, #28]
 8000990:	4b41      	ldr	r3, [pc, #260]	; (8000a98 <HAL_UART_MspInit+0x250>)
 8000992:	69db      	ldr	r3, [r3, #28]
 8000994:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000998:	60fb      	str	r3, [r7, #12]
 800099a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800099c:	4a3e      	ldr	r2, [pc, #248]	; (8000a98 <HAL_UART_MspInit+0x250>)
 800099e:	4b3e      	ldr	r3, [pc, #248]	; (8000a98 <HAL_UART_MspInit+0x250>)
 80009a0:	699b      	ldr	r3, [r3, #24]
 80009a2:	f043 0304 	orr.w	r3, r3, #4
 80009a6:	6193      	str	r3, [r2, #24]
 80009a8:	4b3b      	ldr	r3, [pc, #236]	; (8000a98 <HAL_UART_MspInit+0x250>)
 80009aa:	699b      	ldr	r3, [r3, #24]
 80009ac:	f003 0304 	and.w	r3, r3, #4
 80009b0:	60bb      	str	r3, [r7, #8]
 80009b2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80009b4:	2304      	movs	r3, #4
 80009b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b8:	2302      	movs	r3, #2
 80009ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009bc:	2303      	movs	r3, #3
 80009be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c0:	f107 0318 	add.w	r3, r7, #24
 80009c4:	4619      	mov	r1, r3
 80009c6:	4835      	ldr	r0, [pc, #212]	; (8000a9c <HAL_UART_MspInit+0x254>)
 80009c8:	f000 fd1e 	bl	8001408 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80009cc:	2308      	movs	r3, #8
 80009ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d0:	2300      	movs	r3, #0
 80009d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d4:	2300      	movs	r3, #0
 80009d6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d8:	f107 0318 	add.w	r3, r7, #24
 80009dc:	4619      	mov	r1, r3
 80009de:	482f      	ldr	r0, [pc, #188]	; (8000a9c <HAL_UART_MspInit+0x254>)
 80009e0:	f000 fd12 	bl	8001408 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80009e4:	4b33      	ldr	r3, [pc, #204]	; (8000ab4 <HAL_UART_MspInit+0x26c>)
 80009e6:	4a34      	ldr	r2, [pc, #208]	; (8000ab8 <HAL_UART_MspInit+0x270>)
 80009e8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009ea:	4b32      	ldr	r3, [pc, #200]	; (8000ab4 <HAL_UART_MspInit+0x26c>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009f0:	4b30      	ldr	r3, [pc, #192]	; (8000ab4 <HAL_UART_MspInit+0x26c>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80009f6:	4b2f      	ldr	r3, [pc, #188]	; (8000ab4 <HAL_UART_MspInit+0x26c>)
 80009f8:	2280      	movs	r2, #128	; 0x80
 80009fa:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80009fc:	4b2d      	ldr	r3, [pc, #180]	; (8000ab4 <HAL_UART_MspInit+0x26c>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a02:	4b2c      	ldr	r3, [pc, #176]	; (8000ab4 <HAL_UART_MspInit+0x26c>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000a08:	4b2a      	ldr	r3, [pc, #168]	; (8000ab4 <HAL_UART_MspInit+0x26c>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000a0e:	4b29      	ldr	r3, [pc, #164]	; (8000ab4 <HAL_UART_MspInit+0x26c>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000a14:	4827      	ldr	r0, [pc, #156]	; (8000ab4 <HAL_UART_MspInit+0x26c>)
 8000a16:	f000 f993 	bl	8000d40 <HAL_DMA_Init>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <HAL_UART_MspInit+0x1dc>
      Error_Handler();
 8000a20:	f7ff fdb0 	bl	8000584 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	4a23      	ldr	r2, [pc, #140]	; (8000ab4 <HAL_UART_MspInit+0x26c>)
 8000a28:	639a      	str	r2, [r3, #56]	; 0x38
 8000a2a:	4a22      	ldr	r2, [pc, #136]	; (8000ab4 <HAL_UART_MspInit+0x26c>)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8000a30:	4b22      	ldr	r3, [pc, #136]	; (8000abc <HAL_UART_MspInit+0x274>)
 8000a32:	4a23      	ldr	r2, [pc, #140]	; (8000ac0 <HAL_UART_MspInit+0x278>)
 8000a34:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a36:	4b21      	ldr	r3, [pc, #132]	; (8000abc <HAL_UART_MspInit+0x274>)
 8000a38:	2210      	movs	r2, #16
 8000a3a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a3c:	4b1f      	ldr	r3, [pc, #124]	; (8000abc <HAL_UART_MspInit+0x274>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000a42:	4b1e      	ldr	r3, [pc, #120]	; (8000abc <HAL_UART_MspInit+0x274>)
 8000a44:	2280      	movs	r2, #128	; 0x80
 8000a46:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a48:	4b1c      	ldr	r3, [pc, #112]	; (8000abc <HAL_UART_MspInit+0x274>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a4e:	4b1b      	ldr	r3, [pc, #108]	; (8000abc <HAL_UART_MspInit+0x274>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000a54:	4b19      	ldr	r3, [pc, #100]	; (8000abc <HAL_UART_MspInit+0x274>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000a5a:	4b18      	ldr	r3, [pc, #96]	; (8000abc <HAL_UART_MspInit+0x274>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000a60:	4816      	ldr	r0, [pc, #88]	; (8000abc <HAL_UART_MspInit+0x274>)
 8000a62:	f000 f96d 	bl	8000d40 <HAL_DMA_Init>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <HAL_UART_MspInit+0x228>
      Error_Handler();
 8000a6c:	f7ff fd8a 	bl	8000584 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	4a12      	ldr	r2, [pc, #72]	; (8000abc <HAL_UART_MspInit+0x274>)
 8000a74:	635a      	str	r2, [r3, #52]	; 0x34
 8000a76:	4a11      	ldr	r2, [pc, #68]	; (8000abc <HAL_UART_MspInit+0x274>)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	2105      	movs	r1, #5
 8000a80:	2026      	movs	r0, #38	; 0x26
 8000a82:	f000 f919 	bl	8000cb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a86:	2026      	movs	r0, #38	; 0x26
 8000a88:	f000 f942 	bl	8000d10 <HAL_NVIC_EnableIRQ>
}
 8000a8c:	bf00      	nop
 8000a8e:	3728      	adds	r7, #40	; 0x28
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	40013800 	.word	0x40013800
 8000a98:	40021000 	.word	0x40021000
 8000a9c:	40010800 	.word	0x40010800
 8000aa0:	200015d8 	.word	0x200015d8
 8000aa4:	40020058 	.word	0x40020058
 8000aa8:	20001594 	.word	0x20001594
 8000aac:	40020044 	.word	0x40020044
 8000ab0:	40004400 	.word	0x40004400
 8000ab4:	20001550 	.word	0x20001550
 8000ab8:	4002006c 	.word	0x4002006c
 8000abc:	2000161c 	.word	0x2000161c
 8000ac0:	40020080 	.word	0x40020080

08000ac4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ac8:	4a08      	ldr	r2, [pc, #32]	; (8000aec <HAL_Init+0x28>)
 8000aca:	4b08      	ldr	r3, [pc, #32]	; (8000aec <HAL_Init+0x28>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	f043 0310 	orr.w	r3, r3, #16
 8000ad2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ad4:	2003      	movs	r0, #3
 8000ad6:	f000 f8cf 	bl	8000c78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ada:	200f      	movs	r0, #15
 8000adc:	f7ff fd98 	bl	8000610 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ae0:	f7ff fd5e 	bl	80005a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ae4:	2300      	movs	r3, #0
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	40022000 	.word	0x40022000

08000af0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000af4:	4b05      	ldr	r3, [pc, #20]	; (8000b0c <HAL_IncTick+0x1c>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	461a      	mov	r2, r3
 8000afa:	4b05      	ldr	r3, [pc, #20]	; (8000b10 <HAL_IncTick+0x20>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	4413      	add	r3, r2
 8000b00:	4a03      	ldr	r2, [pc, #12]	; (8000b10 <HAL_IncTick+0x20>)
 8000b02:	6013      	str	r3, [r2, #0]
}
 8000b04:	bf00      	nop
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bc80      	pop	{r7}
 8000b0a:	4770      	bx	lr
 8000b0c:	20000008 	.word	0x20000008
 8000b10:	200016e8 	.word	0x200016e8

08000b14 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  return uwTick;
 8000b18:	4b02      	ldr	r3, [pc, #8]	; (8000b24 <HAL_GetTick+0x10>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bc80      	pop	{r7}
 8000b22:	4770      	bx	lr
 8000b24:	200016e8 	.word	0x200016e8

08000b28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b085      	sub	sp, #20
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	f003 0307 	and.w	r3, r3, #7
 8000b36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b38:	4b0c      	ldr	r3, [pc, #48]	; (8000b6c <__NVIC_SetPriorityGrouping+0x44>)
 8000b3a:	68db      	ldr	r3, [r3, #12]
 8000b3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b3e:	68ba      	ldr	r2, [r7, #8]
 8000b40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b44:	4013      	ands	r3, r2
 8000b46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b4c:	68bb      	ldr	r3, [r7, #8]
 8000b4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b5a:	4a04      	ldr	r2, [pc, #16]	; (8000b6c <__NVIC_SetPriorityGrouping+0x44>)
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	60d3      	str	r3, [r2, #12]
}
 8000b60:	bf00      	nop
 8000b62:	3714      	adds	r7, #20
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bc80      	pop	{r7}
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	e000ed00 	.word	0xe000ed00

08000b70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b74:	4b04      	ldr	r3, [pc, #16]	; (8000b88 <__NVIC_GetPriorityGrouping+0x18>)
 8000b76:	68db      	ldr	r3, [r3, #12]
 8000b78:	0a1b      	lsrs	r3, r3, #8
 8000b7a:	f003 0307 	and.w	r3, r3, #7
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bc80      	pop	{r7}
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	e000ed00 	.word	0xe000ed00

08000b8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	4603      	mov	r3, r0
 8000b94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	db0b      	blt.n	8000bb6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b9e:	4908      	ldr	r1, [pc, #32]	; (8000bc0 <__NVIC_EnableIRQ+0x34>)
 8000ba0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba4:	095b      	lsrs	r3, r3, #5
 8000ba6:	79fa      	ldrb	r2, [r7, #7]
 8000ba8:	f002 021f 	and.w	r2, r2, #31
 8000bac:	2001      	movs	r0, #1
 8000bae:	fa00 f202 	lsl.w	r2, r0, r2
 8000bb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bb6:	bf00      	nop
 8000bb8:	370c      	adds	r7, #12
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bc80      	pop	{r7}
 8000bbe:	4770      	bx	lr
 8000bc0:	e000e100 	.word	0xe000e100

08000bc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	4603      	mov	r3, r0
 8000bcc:	6039      	str	r1, [r7, #0]
 8000bce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	db0a      	blt.n	8000bee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bd8:	490d      	ldr	r1, [pc, #52]	; (8000c10 <__NVIC_SetPriority+0x4c>)
 8000bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bde:	683a      	ldr	r2, [r7, #0]
 8000be0:	b2d2      	uxtb	r2, r2
 8000be2:	0112      	lsls	r2, r2, #4
 8000be4:	b2d2      	uxtb	r2, r2
 8000be6:	440b      	add	r3, r1
 8000be8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bec:	e00a      	b.n	8000c04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bee:	4909      	ldr	r1, [pc, #36]	; (8000c14 <__NVIC_SetPriority+0x50>)
 8000bf0:	79fb      	ldrb	r3, [r7, #7]
 8000bf2:	f003 030f 	and.w	r3, r3, #15
 8000bf6:	3b04      	subs	r3, #4
 8000bf8:	683a      	ldr	r2, [r7, #0]
 8000bfa:	b2d2      	uxtb	r2, r2
 8000bfc:	0112      	lsls	r2, r2, #4
 8000bfe:	b2d2      	uxtb	r2, r2
 8000c00:	440b      	add	r3, r1
 8000c02:	761a      	strb	r2, [r3, #24]
}
 8000c04:	bf00      	nop
 8000c06:	370c      	adds	r7, #12
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bc80      	pop	{r7}
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	e000e100 	.word	0xe000e100
 8000c14:	e000ed00 	.word	0xe000ed00

08000c18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b089      	sub	sp, #36	; 0x24
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	60f8      	str	r0, [r7, #12]
 8000c20:	60b9      	str	r1, [r7, #8]
 8000c22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	f003 0307 	and.w	r3, r3, #7
 8000c2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c2c:	69fb      	ldr	r3, [r7, #28]
 8000c2e:	f1c3 0307 	rsb	r3, r3, #7
 8000c32:	2b04      	cmp	r3, #4
 8000c34:	bf28      	it	cs
 8000c36:	2304      	movcs	r3, #4
 8000c38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c3a:	69fb      	ldr	r3, [r7, #28]
 8000c3c:	3304      	adds	r3, #4
 8000c3e:	2b06      	cmp	r3, #6
 8000c40:	d902      	bls.n	8000c48 <NVIC_EncodePriority+0x30>
 8000c42:	69fb      	ldr	r3, [r7, #28]
 8000c44:	3b03      	subs	r3, #3
 8000c46:	e000      	b.n	8000c4a <NVIC_EncodePriority+0x32>
 8000c48:	2300      	movs	r3, #0
 8000c4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	69bb      	ldr	r3, [r7, #24]
 8000c50:	fa02 f303 	lsl.w	r3, r2, r3
 8000c54:	1e5a      	subs	r2, r3, #1
 8000c56:	68bb      	ldr	r3, [r7, #8]
 8000c58:	401a      	ands	r2, r3
 8000c5a:	697b      	ldr	r3, [r7, #20]
 8000c5c:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c5e:	2101      	movs	r1, #1
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	fa01 f303 	lsl.w	r3, r1, r3
 8000c66:	1e59      	subs	r1, r3, #1
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c6c:	4313      	orrs	r3, r2
         );
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	3724      	adds	r7, #36	; 0x24
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bc80      	pop	{r7}
 8000c76:	4770      	bx	lr

08000c78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	2b07      	cmp	r3, #7
 8000c84:	d00f      	beq.n	8000ca6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	2b06      	cmp	r3, #6
 8000c8a:	d00c      	beq.n	8000ca6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	2b05      	cmp	r3, #5
 8000c90:	d009      	beq.n	8000ca6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	2b04      	cmp	r3, #4
 8000c96:	d006      	beq.n	8000ca6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2b03      	cmp	r3, #3
 8000c9c:	d003      	beq.n	8000ca6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000c9e:	2192      	movs	r1, #146	; 0x92
 8000ca0:	4804      	ldr	r0, [pc, #16]	; (8000cb4 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8000ca2:	f7ff fc73 	bl	800058c <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ca6:	6878      	ldr	r0, [r7, #4]
 8000ca8:	f7ff ff3e 	bl	8000b28 <__NVIC_SetPriorityGrouping>
}
 8000cac:	bf00      	nop
 8000cae:	3708      	adds	r7, #8
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	0800af90 	.word	0x0800af90

08000cb8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b086      	sub	sp, #24
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	60b9      	str	r1, [r7, #8]
 8000cc2:	607a      	str	r2, [r7, #4]
 8000cc4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	2b0f      	cmp	r3, #15
 8000cce:	d903      	bls.n	8000cd8 <HAL_NVIC_SetPriority+0x20>
 8000cd0:	21aa      	movs	r1, #170	; 0xaa
 8000cd2:	480e      	ldr	r0, [pc, #56]	; (8000d0c <HAL_NVIC_SetPriority+0x54>)
 8000cd4:	f7ff fc5a 	bl	800058c <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	2b0f      	cmp	r3, #15
 8000cdc:	d903      	bls.n	8000ce6 <HAL_NVIC_SetPriority+0x2e>
 8000cde:	21ab      	movs	r1, #171	; 0xab
 8000ce0:	480a      	ldr	r0, [pc, #40]	; (8000d0c <HAL_NVIC_SetPriority+0x54>)
 8000ce2:	f7ff fc53 	bl	800058c <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ce6:	f7ff ff43 	bl	8000b70 <__NVIC_GetPriorityGrouping>
 8000cea:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cec:	687a      	ldr	r2, [r7, #4]
 8000cee:	68b9      	ldr	r1, [r7, #8]
 8000cf0:	6978      	ldr	r0, [r7, #20]
 8000cf2:	f7ff ff91 	bl	8000c18 <NVIC_EncodePriority>
 8000cf6:	4602      	mov	r2, r0
 8000cf8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cfc:	4611      	mov	r1, r2
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f7ff ff60 	bl	8000bc4 <__NVIC_SetPriority>
}
 8000d04:	bf00      	nop
 8000d06:	3718      	adds	r7, #24
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	0800af90 	.word	0x0800af90

08000d10 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	4603      	mov	r3, r0
 8000d18:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8000d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	da03      	bge.n	8000d2a <HAL_NVIC_EnableIRQ+0x1a>
 8000d22:	21be      	movs	r1, #190	; 0xbe
 8000d24:	4805      	ldr	r0, [pc, #20]	; (8000d3c <HAL_NVIC_EnableIRQ+0x2c>)
 8000d26:	f7ff fc31 	bl	800058c <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f7ff ff2c 	bl	8000b8c <__NVIC_EnableIRQ>
}
 8000d34:	bf00      	nop
 8000d36:	3708      	adds	r7, #8
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	0800af90 	.word	0x0800af90

08000d40 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b084      	sub	sp, #16
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d101      	bne.n	8000d56 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000d52:	2301      	movs	r3, #1
 8000d54:	e0da      	b.n	8000f0c <HAL_DMA_Init+0x1cc>
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4a6e      	ldr	r2, [pc, #440]	; (8000f14 <HAL_DMA_Init+0x1d4>)
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d021      	beq.n	8000da4 <HAL_DMA_Init+0x64>
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a6c      	ldr	r2, [pc, #432]	; (8000f18 <HAL_DMA_Init+0x1d8>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d01c      	beq.n	8000da4 <HAL_DMA_Init+0x64>
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4a6b      	ldr	r2, [pc, #428]	; (8000f1c <HAL_DMA_Init+0x1dc>)
 8000d70:	4293      	cmp	r3, r2
 8000d72:	d017      	beq.n	8000da4 <HAL_DMA_Init+0x64>
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a69      	ldr	r2, [pc, #420]	; (8000f20 <HAL_DMA_Init+0x1e0>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d012      	beq.n	8000da4 <HAL_DMA_Init+0x64>
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4a68      	ldr	r2, [pc, #416]	; (8000f24 <HAL_DMA_Init+0x1e4>)
 8000d84:	4293      	cmp	r3, r2
 8000d86:	d00d      	beq.n	8000da4 <HAL_DMA_Init+0x64>
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a66      	ldr	r2, [pc, #408]	; (8000f28 <HAL_DMA_Init+0x1e8>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d008      	beq.n	8000da4 <HAL_DMA_Init+0x64>
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4a65      	ldr	r2, [pc, #404]	; (8000f2c <HAL_DMA_Init+0x1ec>)
 8000d98:	4293      	cmp	r3, r2
 8000d9a:	d003      	beq.n	8000da4 <HAL_DMA_Init+0x64>
 8000d9c:	219a      	movs	r1, #154	; 0x9a
 8000d9e:	4864      	ldr	r0, [pc, #400]	; (8000f30 <HAL_DMA_Init+0x1f0>)
 8000da0:	f7ff fbf4 	bl	800058c <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d00c      	beq.n	8000dc6 <HAL_DMA_Init+0x86>
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	2b10      	cmp	r3, #16
 8000db2:	d008      	beq.n	8000dc6 <HAL_DMA_Init+0x86>
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000dbc:	d003      	beq.n	8000dc6 <HAL_DMA_Init+0x86>
 8000dbe:	219b      	movs	r1, #155	; 0x9b
 8000dc0:	485b      	ldr	r0, [pc, #364]	; (8000f30 <HAL_DMA_Init+0x1f0>)
 8000dc2:	f7ff fbe3 	bl	800058c <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	689b      	ldr	r3, [r3, #8]
 8000dca:	2b40      	cmp	r3, #64	; 0x40
 8000dcc:	d007      	beq.n	8000dde <HAL_DMA_Init+0x9e>
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	689b      	ldr	r3, [r3, #8]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d003      	beq.n	8000dde <HAL_DMA_Init+0x9e>
 8000dd6:	219c      	movs	r1, #156	; 0x9c
 8000dd8:	4855      	ldr	r0, [pc, #340]	; (8000f30 <HAL_DMA_Init+0x1f0>)
 8000dda:	f7ff fbd7 	bl	800058c <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	68db      	ldr	r3, [r3, #12]
 8000de2:	2b80      	cmp	r3, #128	; 0x80
 8000de4:	d007      	beq.n	8000df6 <HAL_DMA_Init+0xb6>
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	68db      	ldr	r3, [r3, #12]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d003      	beq.n	8000df6 <HAL_DMA_Init+0xb6>
 8000dee:	219d      	movs	r1, #157	; 0x9d
 8000df0:	484f      	ldr	r0, [pc, #316]	; (8000f30 <HAL_DMA_Init+0x1f0>)
 8000df2:	f7ff fbcb 	bl	800058c <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	691b      	ldr	r3, [r3, #16]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d00d      	beq.n	8000e1a <HAL_DMA_Init+0xda>
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	691b      	ldr	r3, [r3, #16]
 8000e02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000e06:	d008      	beq.n	8000e1a <HAL_DMA_Init+0xda>
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	691b      	ldr	r3, [r3, #16]
 8000e0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e10:	d003      	beq.n	8000e1a <HAL_DMA_Init+0xda>
 8000e12:	219e      	movs	r1, #158	; 0x9e
 8000e14:	4846      	ldr	r0, [pc, #280]	; (8000f30 <HAL_DMA_Init+0x1f0>)
 8000e16:	f7ff fbb9 	bl	800058c <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	695b      	ldr	r3, [r3, #20]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d00d      	beq.n	8000e3e <HAL_DMA_Init+0xfe>
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	695b      	ldr	r3, [r3, #20]
 8000e26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e2a:	d008      	beq.n	8000e3e <HAL_DMA_Init+0xfe>
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	695b      	ldr	r3, [r3, #20]
 8000e30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000e34:	d003      	beq.n	8000e3e <HAL_DMA_Init+0xfe>
 8000e36:	219f      	movs	r1, #159	; 0x9f
 8000e38:	483d      	ldr	r0, [pc, #244]	; (8000f30 <HAL_DMA_Init+0x1f0>)
 8000e3a:	f7ff fba7 	bl	800058c <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	699b      	ldr	r3, [r3, #24]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d007      	beq.n	8000e56 <HAL_DMA_Init+0x116>
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	699b      	ldr	r3, [r3, #24]
 8000e4a:	2b20      	cmp	r3, #32
 8000e4c:	d003      	beq.n	8000e56 <HAL_DMA_Init+0x116>
 8000e4e:	21a0      	movs	r1, #160	; 0xa0
 8000e50:	4837      	ldr	r0, [pc, #220]	; (8000f30 <HAL_DMA_Init+0x1f0>)
 8000e52:	f7ff fb9b 	bl	800058c <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	69db      	ldr	r3, [r3, #28]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d012      	beq.n	8000e84 <HAL_DMA_Init+0x144>
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	69db      	ldr	r3, [r3, #28]
 8000e62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000e66:	d00d      	beq.n	8000e84 <HAL_DMA_Init+0x144>
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	69db      	ldr	r3, [r3, #28]
 8000e6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000e70:	d008      	beq.n	8000e84 <HAL_DMA_Init+0x144>
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	69db      	ldr	r3, [r3, #28]
 8000e76:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8000e7a:	d003      	beq.n	8000e84 <HAL_DMA_Init+0x144>
 8000e7c:	21a1      	movs	r1, #161	; 0xa1
 8000e7e:	482c      	ldr	r0, [pc, #176]	; (8000f30 <HAL_DMA_Init+0x1f0>)
 8000e80:	f7ff fb84 	bl	800058c <assert_failed>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	461a      	mov	r2, r3
 8000e8a:	4b2a      	ldr	r3, [pc, #168]	; (8000f34 <HAL_DMA_Init+0x1f4>)
 8000e8c:	4413      	add	r3, r2
 8000e8e:	4a2a      	ldr	r2, [pc, #168]	; (8000f38 <HAL_DMA_Init+0x1f8>)
 8000e90:	fba2 2303 	umull	r2, r3, r2, r3
 8000e94:	091b      	lsrs	r3, r3, #4
 8000e96:	009a      	lsls	r2, r3, #2
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	4a27      	ldr	r2, [pc, #156]	; (8000f3c <HAL_DMA_Init+0x1fc>)
 8000ea0:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2202      	movs	r2, #2
 8000ea6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000eb8:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000ebc:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000ec6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	68db      	ldr	r3, [r3, #12]
 8000ecc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ed2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	695b      	ldr	r3, [r3, #20]
 8000ed8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ede:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	69db      	ldr	r3, [r3, #28]
 8000ee4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000ee6:	68fa      	ldr	r2, [r7, #12]
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	68fa      	ldr	r2, [r7, #12]
 8000ef2:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	2201      	movs	r2, #1
 8000efe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	2200      	movs	r2, #0
 8000f06:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000f0a:	2300      	movs	r3, #0
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	3710      	adds	r7, #16
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	40020008 	.word	0x40020008
 8000f18:	4002001c 	.word	0x4002001c
 8000f1c:	40020030 	.word	0x40020030
 8000f20:	40020044 	.word	0x40020044
 8000f24:	40020058 	.word	0x40020058
 8000f28:	4002006c 	.word	0x4002006c
 8000f2c:	40020080 	.word	0x40020080
 8000f30:	0800afcc 	.word	0x0800afcc
 8000f34:	bffdfff8 	.word	0xbffdfff8
 8000f38:	cccccccd 	.word	0xcccccccd
 8000f3c:	40020000 	.word	0x40020000

08000f40 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b086      	sub	sp, #24
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	60f8      	str	r0, [r7, #12]
 8000f48:	60b9      	str	r1, [r7, #8]
 8000f4a:	607a      	str	r2, [r7, #4]
 8000f4c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d003      	beq.n	8000f60 <HAL_DMA_Start_IT+0x20>
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f5e:	d304      	bcc.n	8000f6a <HAL_DMA_Start_IT+0x2a>
 8000f60:	f240 116f 	movw	r1, #367	; 0x16f
 8000f64:	482c      	ldr	r0, [pc, #176]	; (8001018 <HAL_DMA_Start_IT+0xd8>)
 8000f66:	f7ff fb11 	bl	800058c <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdma);
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f70:	2b01      	cmp	r3, #1
 8000f72:	d101      	bne.n	8000f78 <HAL_DMA_Start_IT+0x38>
 8000f74:	2302      	movs	r3, #2
 8000f76:	e04a      	b.n	800100e <HAL_DMA_Start_IT+0xce>
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	d13a      	bne.n	8001000 <HAL_DMA_Start_IT+0xc0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	2202      	movs	r2, #2
 8000f8e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	2200      	movs	r2, #0
 8000f96:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	68fa      	ldr	r2, [r7, #12]
 8000f9e:	6812      	ldr	r2, [r2, #0]
 8000fa0:	6812      	ldr	r2, [r2, #0]
 8000fa2:	f022 0201 	bic.w	r2, r2, #1
 8000fa6:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	687a      	ldr	r2, [r7, #4]
 8000fac:	68b9      	ldr	r1, [r7, #8]
 8000fae:	68f8      	ldr	r0, [r7, #12]
 8000fb0:	f000 f9fc 	bl	80013ac <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d008      	beq.n	8000fce <HAL_DMA_Start_IT+0x8e>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	68fa      	ldr	r2, [r7, #12]
 8000fc2:	6812      	ldr	r2, [r2, #0]
 8000fc4:	6812      	ldr	r2, [r2, #0]
 8000fc6:	f042 020e 	orr.w	r2, r2, #14
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	e00f      	b.n	8000fee <HAL_DMA_Start_IT+0xae>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	68fa      	ldr	r2, [r7, #12]
 8000fd4:	6812      	ldr	r2, [r2, #0]
 8000fd6:	6812      	ldr	r2, [r2, #0]
 8000fd8:	f022 0204 	bic.w	r2, r2, #4
 8000fdc:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	68fa      	ldr	r2, [r7, #12]
 8000fe4:	6812      	ldr	r2, [r2, #0]
 8000fe6:	6812      	ldr	r2, [r2, #0]
 8000fe8:	f042 020a 	orr.w	r2, r2, #10
 8000fec:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	68fa      	ldr	r2, [r7, #12]
 8000ff4:	6812      	ldr	r2, [r2, #0]
 8000ff6:	6812      	ldr	r2, [r2, #0]
 8000ff8:	f042 0201 	orr.w	r2, r2, #1
 8000ffc:	601a      	str	r2, [r3, #0]
 8000ffe:	e005      	b.n	800100c <HAL_DMA_Start_IT+0xcc>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	2200      	movs	r2, #0
 8001004:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001008:	2302      	movs	r3, #2
 800100a:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800100c:	7dfb      	ldrb	r3, [r7, #23]
}
 800100e:	4618      	mov	r0, r3
 8001010:	3718      	adds	r7, #24
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	0800afcc 	.word	0x0800afcc

0800101c <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800101c:	b480      	push	{r7}
 800101e:	b085      	sub	sp, #20
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001024:	2300      	movs	r3, #0
 8001026:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800102e:	2b02      	cmp	r3, #2
 8001030:	d008      	beq.n	8001044 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2204      	movs	r2, #4
 8001036:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2200      	movs	r2, #0
 800103c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001040:	2301      	movs	r3, #1
 8001042:	e020      	b.n	8001086 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	687a      	ldr	r2, [r7, #4]
 800104a:	6812      	ldr	r2, [r2, #0]
 800104c:	6812      	ldr	r2, [r2, #0]
 800104e:	f022 020e 	bic.w	r2, r2, #14
 8001052:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	687a      	ldr	r2, [r7, #4]
 800105a:	6812      	ldr	r2, [r2, #0]
 800105c:	6812      	ldr	r2, [r2, #0]
 800105e:	f022 0201 	bic.w	r2, r2, #1
 8001062:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001068:	687a      	ldr	r2, [r7, #4]
 800106a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800106c:	2101      	movs	r1, #1
 800106e:	fa01 f202 	lsl.w	r2, r1, r2
 8001072:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2201      	movs	r2, #1
 8001078:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2200      	movs	r2, #0
 8001080:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001084:	7bfb      	ldrb	r3, [r7, #15]
}
 8001086:	4618      	mov	r0, r3
 8001088:	3714      	adds	r7, #20
 800108a:	46bd      	mov	sp, r7
 800108c:	bc80      	pop	{r7}
 800108e:	4770      	bx	lr

08001090 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001098:	2300      	movs	r3, #0
 800109a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80010a2:	2b02      	cmp	r3, #2
 80010a4:	d005      	beq.n	80010b2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2204      	movs	r2, #4
 80010aa:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80010ac:	2301      	movs	r3, #1
 80010ae:	73fb      	strb	r3, [r7, #15]
 80010b0:	e057      	b.n	8001162 <HAL_DMA_Abort_IT+0xd2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	687a      	ldr	r2, [r7, #4]
 80010b8:	6812      	ldr	r2, [r2, #0]
 80010ba:	6812      	ldr	r2, [r2, #0]
 80010bc:	f022 020e 	bic.w	r2, r2, #14
 80010c0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	687a      	ldr	r2, [r7, #4]
 80010c8:	6812      	ldr	r2, [r2, #0]
 80010ca:	6812      	ldr	r2, [r2, #0]
 80010cc:	f022 0201 	bic.w	r2, r2, #1
 80010d0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80010d2:	4a26      	ldr	r2, [pc, #152]	; (800116c <HAL_DMA_Abort_IT+0xdc>)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4619      	mov	r1, r3
 80010da:	4b25      	ldr	r3, [pc, #148]	; (8001170 <HAL_DMA_Abort_IT+0xe0>)
 80010dc:	4299      	cmp	r1, r3
 80010de:	d02e      	beq.n	800113e <HAL_DMA_Abort_IT+0xae>
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4619      	mov	r1, r3
 80010e6:	4b23      	ldr	r3, [pc, #140]	; (8001174 <HAL_DMA_Abort_IT+0xe4>)
 80010e8:	4299      	cmp	r1, r3
 80010ea:	d026      	beq.n	800113a <HAL_DMA_Abort_IT+0xaa>
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4619      	mov	r1, r3
 80010f2:	4b21      	ldr	r3, [pc, #132]	; (8001178 <HAL_DMA_Abort_IT+0xe8>)
 80010f4:	4299      	cmp	r1, r3
 80010f6:	d01d      	beq.n	8001134 <HAL_DMA_Abort_IT+0xa4>
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4619      	mov	r1, r3
 80010fe:	4b1f      	ldr	r3, [pc, #124]	; (800117c <HAL_DMA_Abort_IT+0xec>)
 8001100:	4299      	cmp	r1, r3
 8001102:	d014      	beq.n	800112e <HAL_DMA_Abort_IT+0x9e>
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4619      	mov	r1, r3
 800110a:	4b1d      	ldr	r3, [pc, #116]	; (8001180 <HAL_DMA_Abort_IT+0xf0>)
 800110c:	4299      	cmp	r1, r3
 800110e:	d00b      	beq.n	8001128 <HAL_DMA_Abort_IT+0x98>
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4619      	mov	r1, r3
 8001116:	4b1b      	ldr	r3, [pc, #108]	; (8001184 <HAL_DMA_Abort_IT+0xf4>)
 8001118:	4299      	cmp	r1, r3
 800111a:	d102      	bne.n	8001122 <HAL_DMA_Abort_IT+0x92>
 800111c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001120:	e00e      	b.n	8001140 <HAL_DMA_Abort_IT+0xb0>
 8001122:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001126:	e00b      	b.n	8001140 <HAL_DMA_Abort_IT+0xb0>
 8001128:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800112c:	e008      	b.n	8001140 <HAL_DMA_Abort_IT+0xb0>
 800112e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001132:	e005      	b.n	8001140 <HAL_DMA_Abort_IT+0xb0>
 8001134:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001138:	e002      	b.n	8001140 <HAL_DMA_Abort_IT+0xb0>
 800113a:	2310      	movs	r3, #16
 800113c:	e000      	b.n	8001140 <HAL_DMA_Abort_IT+0xb0>
 800113e:	2301      	movs	r3, #1
 8001140:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2201      	movs	r2, #1
 8001146:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2200      	movs	r2, #0
 800114e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001156:	2b00      	cmp	r3, #0
 8001158:	d003      	beq.n	8001162 <HAL_DMA_Abort_IT+0xd2>
    {
      hdma->XferAbortCallback(hdma);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800115e:	6878      	ldr	r0, [r7, #4]
 8001160:	4798      	blx	r3
    } 
  }
  return status;
 8001162:	7bfb      	ldrb	r3, [r7, #15]
}
 8001164:	4618      	mov	r0, r3
 8001166:	3710      	adds	r7, #16
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	40020000 	.word	0x40020000
 8001170:	40020008 	.word	0x40020008
 8001174:	4002001c 	.word	0x4002001c
 8001178:	40020030 	.word	0x40020030
 800117c:	40020044 	.word	0x40020044
 8001180:	40020058 	.word	0x40020058
 8001184:	4002006c 	.word	0x4002006c

08001188 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a4:	2204      	movs	r2, #4
 80011a6:	409a      	lsls	r2, r3
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	4013      	ands	r3, r2
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d055      	beq.n	800125c <HAL_DMA_IRQHandler+0xd4>
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	f003 0304 	and.w	r3, r3, #4
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d050      	beq.n	800125c <HAL_DMA_IRQHandler+0xd4>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f003 0320 	and.w	r3, r3, #32
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d107      	bne.n	80011d8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	687a      	ldr	r2, [r7, #4]
 80011ce:	6812      	ldr	r2, [r2, #0]
 80011d0:	6812      	ldr	r2, [r2, #0]
 80011d2:	f022 0204 	bic.w	r2, r2, #4
 80011d6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80011d8:	4a6d      	ldr	r2, [pc, #436]	; (8001390 <HAL_DMA_IRQHandler+0x208>)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4619      	mov	r1, r3
 80011e0:	4b6c      	ldr	r3, [pc, #432]	; (8001394 <HAL_DMA_IRQHandler+0x20c>)
 80011e2:	4299      	cmp	r1, r3
 80011e4:	d02e      	beq.n	8001244 <HAL_DMA_IRQHandler+0xbc>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4619      	mov	r1, r3
 80011ec:	4b6a      	ldr	r3, [pc, #424]	; (8001398 <HAL_DMA_IRQHandler+0x210>)
 80011ee:	4299      	cmp	r1, r3
 80011f0:	d026      	beq.n	8001240 <HAL_DMA_IRQHandler+0xb8>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4619      	mov	r1, r3
 80011f8:	4b68      	ldr	r3, [pc, #416]	; (800139c <HAL_DMA_IRQHandler+0x214>)
 80011fa:	4299      	cmp	r1, r3
 80011fc:	d01d      	beq.n	800123a <HAL_DMA_IRQHandler+0xb2>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4619      	mov	r1, r3
 8001204:	4b66      	ldr	r3, [pc, #408]	; (80013a0 <HAL_DMA_IRQHandler+0x218>)
 8001206:	4299      	cmp	r1, r3
 8001208:	d014      	beq.n	8001234 <HAL_DMA_IRQHandler+0xac>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4619      	mov	r1, r3
 8001210:	4b64      	ldr	r3, [pc, #400]	; (80013a4 <HAL_DMA_IRQHandler+0x21c>)
 8001212:	4299      	cmp	r1, r3
 8001214:	d00b      	beq.n	800122e <HAL_DMA_IRQHandler+0xa6>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4619      	mov	r1, r3
 800121c:	4b62      	ldr	r3, [pc, #392]	; (80013a8 <HAL_DMA_IRQHandler+0x220>)
 800121e:	4299      	cmp	r1, r3
 8001220:	d102      	bne.n	8001228 <HAL_DMA_IRQHandler+0xa0>
 8001222:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001226:	e00e      	b.n	8001246 <HAL_DMA_IRQHandler+0xbe>
 8001228:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800122c:	e00b      	b.n	8001246 <HAL_DMA_IRQHandler+0xbe>
 800122e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001232:	e008      	b.n	8001246 <HAL_DMA_IRQHandler+0xbe>
 8001234:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001238:	e005      	b.n	8001246 <HAL_DMA_IRQHandler+0xbe>
 800123a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800123e:	e002      	b.n	8001246 <HAL_DMA_IRQHandler+0xbe>
 8001240:	2340      	movs	r3, #64	; 0x40
 8001242:	e000      	b.n	8001246 <HAL_DMA_IRQHandler+0xbe>
 8001244:	2304      	movs	r3, #4
 8001246:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800124c:	2b00      	cmp	r3, #0
 800124e:	f000 809a 	beq.w	8001386 <HAL_DMA_IRQHandler+0x1fe>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001256:	6878      	ldr	r0, [r7, #4]
 8001258:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800125a:	e094      	b.n	8001386 <HAL_DMA_IRQHandler+0x1fe>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001260:	2202      	movs	r2, #2
 8001262:	409a      	lsls	r2, r3
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	4013      	ands	r3, r2
 8001268:	2b00      	cmp	r3, #0
 800126a:	d05c      	beq.n	8001326 <HAL_DMA_IRQHandler+0x19e>
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	f003 0302 	and.w	r3, r3, #2
 8001272:	2b00      	cmp	r3, #0
 8001274:	d057      	beq.n	8001326 <HAL_DMA_IRQHandler+0x19e>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f003 0320 	and.w	r3, r3, #32
 8001280:	2b00      	cmp	r3, #0
 8001282:	d10b      	bne.n	800129c <HAL_DMA_IRQHandler+0x114>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	687a      	ldr	r2, [r7, #4]
 800128a:	6812      	ldr	r2, [r2, #0]
 800128c:	6812      	ldr	r2, [r2, #0]
 800128e:	f022 020a 	bic.w	r2, r2, #10
 8001292:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2201      	movs	r2, #1
 8001298:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800129c:	4a3c      	ldr	r2, [pc, #240]	; (8001390 <HAL_DMA_IRQHandler+0x208>)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4619      	mov	r1, r3
 80012a4:	4b3b      	ldr	r3, [pc, #236]	; (8001394 <HAL_DMA_IRQHandler+0x20c>)
 80012a6:	4299      	cmp	r1, r3
 80012a8:	d02e      	beq.n	8001308 <HAL_DMA_IRQHandler+0x180>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4619      	mov	r1, r3
 80012b0:	4b39      	ldr	r3, [pc, #228]	; (8001398 <HAL_DMA_IRQHandler+0x210>)
 80012b2:	4299      	cmp	r1, r3
 80012b4:	d026      	beq.n	8001304 <HAL_DMA_IRQHandler+0x17c>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4619      	mov	r1, r3
 80012bc:	4b37      	ldr	r3, [pc, #220]	; (800139c <HAL_DMA_IRQHandler+0x214>)
 80012be:	4299      	cmp	r1, r3
 80012c0:	d01d      	beq.n	80012fe <HAL_DMA_IRQHandler+0x176>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4619      	mov	r1, r3
 80012c8:	4b35      	ldr	r3, [pc, #212]	; (80013a0 <HAL_DMA_IRQHandler+0x218>)
 80012ca:	4299      	cmp	r1, r3
 80012cc:	d014      	beq.n	80012f8 <HAL_DMA_IRQHandler+0x170>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4619      	mov	r1, r3
 80012d4:	4b33      	ldr	r3, [pc, #204]	; (80013a4 <HAL_DMA_IRQHandler+0x21c>)
 80012d6:	4299      	cmp	r1, r3
 80012d8:	d00b      	beq.n	80012f2 <HAL_DMA_IRQHandler+0x16a>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4619      	mov	r1, r3
 80012e0:	4b31      	ldr	r3, [pc, #196]	; (80013a8 <HAL_DMA_IRQHandler+0x220>)
 80012e2:	4299      	cmp	r1, r3
 80012e4:	d102      	bne.n	80012ec <HAL_DMA_IRQHandler+0x164>
 80012e6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80012ea:	e00e      	b.n	800130a <HAL_DMA_IRQHandler+0x182>
 80012ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80012f0:	e00b      	b.n	800130a <HAL_DMA_IRQHandler+0x182>
 80012f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012f6:	e008      	b.n	800130a <HAL_DMA_IRQHandler+0x182>
 80012f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012fc:	e005      	b.n	800130a <HAL_DMA_IRQHandler+0x182>
 80012fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001302:	e002      	b.n	800130a <HAL_DMA_IRQHandler+0x182>
 8001304:	2320      	movs	r3, #32
 8001306:	e000      	b.n	800130a <HAL_DMA_IRQHandler+0x182>
 8001308:	2302      	movs	r3, #2
 800130a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2200      	movs	r2, #0
 8001310:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001318:	2b00      	cmp	r3, #0
 800131a:	d034      	beq.n	8001386 <HAL_DMA_IRQHandler+0x1fe>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001324:	e02f      	b.n	8001386 <HAL_DMA_IRQHandler+0x1fe>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132a:	2208      	movs	r2, #8
 800132c:	409a      	lsls	r2, r3
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	4013      	ands	r3, r2
 8001332:	2b00      	cmp	r3, #0
 8001334:	d028      	beq.n	8001388 <HAL_DMA_IRQHandler+0x200>
 8001336:	68bb      	ldr	r3, [r7, #8]
 8001338:	f003 0308 	and.w	r3, r3, #8
 800133c:	2b00      	cmp	r3, #0
 800133e:	d023      	beq.n	8001388 <HAL_DMA_IRQHandler+0x200>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	687a      	ldr	r2, [r7, #4]
 8001346:	6812      	ldr	r2, [r2, #0]
 8001348:	6812      	ldr	r2, [r2, #0]
 800134a:	f022 020e 	bic.w	r2, r2, #14
 800134e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001354:	687a      	ldr	r2, [r7, #4]
 8001356:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001358:	2101      	movs	r1, #1
 800135a:	fa01 f202 	lsl.w	r2, r1, r2
 800135e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2201      	movs	r2, #1
 8001364:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2201      	movs	r2, #1
 800136a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2200      	movs	r2, #0
 8001372:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137a:	2b00      	cmp	r3, #0
 800137c:	d004      	beq.n	8001388 <HAL_DMA_IRQHandler+0x200>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	4798      	blx	r3
    }
  }
  return;
 8001386:	bf00      	nop
 8001388:	bf00      	nop
}
 800138a:	3710      	adds	r7, #16
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	40020000 	.word	0x40020000
 8001394:	40020008 	.word	0x40020008
 8001398:	4002001c 	.word	0x4002001c
 800139c:	40020030 	.word	0x40020030
 80013a0:	40020044 	.word	0x40020044
 80013a4:	40020058 	.word	0x40020058
 80013a8:	4002006c 	.word	0x4002006c

080013ac <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b085      	sub	sp, #20
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	60f8      	str	r0, [r7, #12]
 80013b4:	60b9      	str	r1, [r7, #8]
 80013b6:	607a      	str	r2, [r7, #4]
 80013b8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013be:	68fa      	ldr	r2, [r7, #12]
 80013c0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80013c2:	2101      	movs	r1, #1
 80013c4:	fa01 f202 	lsl.w	r2, r1, r2
 80013c8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	683a      	ldr	r2, [r7, #0]
 80013d0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	2b10      	cmp	r3, #16
 80013d8:	d108      	bne.n	80013ec <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	687a      	ldr	r2, [r7, #4]
 80013e0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	68ba      	ldr	r2, [r7, #8]
 80013e8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80013ea:	e007      	b.n	80013fc <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	68ba      	ldr	r2, [r7, #8]
 80013f2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	687a      	ldr	r2, [r7, #4]
 80013fa:	60da      	str	r2, [r3, #12]
}
 80013fc:	bf00      	nop
 80013fe:	3714      	adds	r7, #20
 8001400:	46bd      	mov	sp, r7
 8001402:	bc80      	pop	{r7}
 8001404:	4770      	bx	lr
	...

08001408 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b08a      	sub	sp, #40	; 0x28
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001412:	2300      	movs	r3, #0
 8001414:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001416:	2300      	movs	r3, #0
 8001418:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset;       /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4a9c      	ldr	r2, [pc, #624]	; (8001690 <HAL_GPIO_Init+0x288>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d013      	beq.n	800144a <HAL_GPIO_Init+0x42>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4a9b      	ldr	r2, [pc, #620]	; (8001694 <HAL_GPIO_Init+0x28c>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d00f      	beq.n	800144a <HAL_GPIO_Init+0x42>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4a9a      	ldr	r2, [pc, #616]	; (8001698 <HAL_GPIO_Init+0x290>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d00b      	beq.n	800144a <HAL_GPIO_Init+0x42>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4a99      	ldr	r2, [pc, #612]	; (800169c <HAL_GPIO_Init+0x294>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d007      	beq.n	800144a <HAL_GPIO_Init+0x42>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4a98      	ldr	r2, [pc, #608]	; (80016a0 <HAL_GPIO_Init+0x298>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d003      	beq.n	800144a <HAL_GPIO_Init+0x42>
 8001442:	21bd      	movs	r1, #189	; 0xbd
 8001444:	4897      	ldr	r0, [pc, #604]	; (80016a4 <HAL_GPIO_Init+0x29c>)
 8001446:	f7ff f8a1 	bl	800058c <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	b29b      	uxth	r3, r3
 8001450:	2b00      	cmp	r3, #0
 8001452:	d005      	beq.n	8001460 <HAL_GPIO_Init+0x58>
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	0c1b      	lsrs	r3, r3, #16
 800145a:	041b      	lsls	r3, r3, #16
 800145c:	2b00      	cmp	r3, #0
 800145e:	d003      	beq.n	8001468 <HAL_GPIO_Init+0x60>
 8001460:	21be      	movs	r1, #190	; 0xbe
 8001462:	4890      	ldr	r0, [pc, #576]	; (80016a4 <HAL_GPIO_Init+0x29c>)
 8001464:	f7ff f892 	bl	800058c <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	2b00      	cmp	r3, #0
 800146e:	f000 81eb 	beq.w	8001848 <HAL_GPIO_Init+0x440>
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	2b01      	cmp	r3, #1
 8001478:	f000 81e6 	beq.w	8001848 <HAL_GPIO_Init+0x440>
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	2b11      	cmp	r3, #17
 8001482:	f000 81e1 	beq.w	8001848 <HAL_GPIO_Init+0x440>
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	2b02      	cmp	r3, #2
 800148c:	f000 81dc 	beq.w	8001848 <HAL_GPIO_Init+0x440>
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	2b12      	cmp	r3, #18
 8001496:	f000 81d7 	beq.w	8001848 <HAL_GPIO_Init+0x440>
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	4a82      	ldr	r2, [pc, #520]	; (80016a8 <HAL_GPIO_Init+0x2a0>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	f000 81d1 	beq.w	8001848 <HAL_GPIO_Init+0x440>
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	4a80      	ldr	r2, [pc, #512]	; (80016ac <HAL_GPIO_Init+0x2a4>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	f000 81cb 	beq.w	8001848 <HAL_GPIO_Init+0x440>
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	4a7e      	ldr	r2, [pc, #504]	; (80016b0 <HAL_GPIO_Init+0x2a8>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	f000 81c5 	beq.w	8001848 <HAL_GPIO_Init+0x440>
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	4a7c      	ldr	r2, [pc, #496]	; (80016b4 <HAL_GPIO_Init+0x2ac>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	f000 81bf 	beq.w	8001848 <HAL_GPIO_Init+0x440>
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	4a7a      	ldr	r2, [pc, #488]	; (80016b8 <HAL_GPIO_Init+0x2b0>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	f000 81b9 	beq.w	8001848 <HAL_GPIO_Init+0x440>
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	4a78      	ldr	r2, [pc, #480]	; (80016bc <HAL_GPIO_Init+0x2b4>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	f000 81b3 	beq.w	8001848 <HAL_GPIO_Init+0x440>
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	2b03      	cmp	r3, #3
 80014e8:	f000 81ae 	beq.w	8001848 <HAL_GPIO_Init+0x440>
 80014ec:	21bf      	movs	r1, #191	; 0xbf
 80014ee:	486d      	ldr	r0, [pc, #436]	; (80016a4 <HAL_GPIO_Init+0x29c>)
 80014f0:	f7ff f84c 	bl	800058c <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014f4:	e1a8      	b.n	8001848 <HAL_GPIO_Init+0x440>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80014f6:	2201      	movs	r2, #1
 80014f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014fa:	fa02 f303 	lsl.w	r3, r2, r3
 80014fe:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	4013      	ands	r3, r2
 8001508:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800150a:	69ba      	ldr	r2, [r7, #24]
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	429a      	cmp	r2, r3
 8001510:	f040 8197 	bne.w	8001842 <HAL_GPIO_Init+0x43a>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	4a5e      	ldr	r2, [pc, #376]	; (8001690 <HAL_GPIO_Init+0x288>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d013      	beq.n	8001544 <HAL_GPIO_Init+0x13c>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	4a5d      	ldr	r2, [pc, #372]	; (8001694 <HAL_GPIO_Init+0x28c>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d00f      	beq.n	8001544 <HAL_GPIO_Init+0x13c>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	4a5c      	ldr	r2, [pc, #368]	; (8001698 <HAL_GPIO_Init+0x290>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d00b      	beq.n	8001544 <HAL_GPIO_Init+0x13c>
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	4a5b      	ldr	r2, [pc, #364]	; (800169c <HAL_GPIO_Init+0x294>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d007      	beq.n	8001544 <HAL_GPIO_Init+0x13c>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	4a5a      	ldr	r2, [pc, #360]	; (80016a0 <HAL_GPIO_Init+0x298>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d003      	beq.n	8001544 <HAL_GPIO_Init+0x13c>
 800153c:	21cd      	movs	r1, #205	; 0xcd
 800153e:	4859      	ldr	r0, [pc, #356]	; (80016a4 <HAL_GPIO_Init+0x29c>)
 8001540:	f7ff f824 	bl	800058c <assert_failed>

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	2b12      	cmp	r3, #18
 800154a:	d065      	beq.n	8001618 <HAL_GPIO_Init+0x210>
 800154c:	2b12      	cmp	r3, #18
 800154e:	d80e      	bhi.n	800156e <HAL_GPIO_Init+0x166>
 8001550:	2b02      	cmp	r3, #2
 8001552:	d04c      	beq.n	80015ee <HAL_GPIO_Init+0x1e6>
 8001554:	2b02      	cmp	r3, #2
 8001556:	d804      	bhi.n	8001562 <HAL_GPIO_Init+0x15a>
 8001558:	2b00      	cmp	r3, #0
 800155a:	d072      	beq.n	8001642 <HAL_GPIO_Init+0x23a>
 800155c:	2b01      	cmp	r3, #1
 800155e:	d01d      	beq.n	800159c <HAL_GPIO_Init+0x194>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001560:	e0b1      	b.n	80016c6 <HAL_GPIO_Init+0x2be>
      switch (GPIO_Init->Mode)
 8001562:	2b03      	cmp	r3, #3
 8001564:	f000 80ac 	beq.w	80016c0 <HAL_GPIO_Init+0x2b8>
 8001568:	2b11      	cmp	r3, #17
 800156a:	d02b      	beq.n	80015c4 <HAL_GPIO_Init+0x1bc>
          break;
 800156c:	e0ab      	b.n	80016c6 <HAL_GPIO_Init+0x2be>
      switch (GPIO_Init->Mode)
 800156e:	4a4f      	ldr	r2, [pc, #316]	; (80016ac <HAL_GPIO_Init+0x2a4>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d066      	beq.n	8001642 <HAL_GPIO_Init+0x23a>
 8001574:	4a4d      	ldr	r2, [pc, #308]	; (80016ac <HAL_GPIO_Init+0x2a4>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d806      	bhi.n	8001588 <HAL_GPIO_Init+0x180>
 800157a:	4a4b      	ldr	r2, [pc, #300]	; (80016a8 <HAL_GPIO_Init+0x2a0>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d060      	beq.n	8001642 <HAL_GPIO_Init+0x23a>
 8001580:	4a4c      	ldr	r2, [pc, #304]	; (80016b4 <HAL_GPIO_Init+0x2ac>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d05d      	beq.n	8001642 <HAL_GPIO_Init+0x23a>
          break;
 8001586:	e09e      	b.n	80016c6 <HAL_GPIO_Init+0x2be>
      switch (GPIO_Init->Mode)
 8001588:	4a49      	ldr	r2, [pc, #292]	; (80016b0 <HAL_GPIO_Init+0x2a8>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d059      	beq.n	8001642 <HAL_GPIO_Init+0x23a>
 800158e:	4a4b      	ldr	r2, [pc, #300]	; (80016bc <HAL_GPIO_Init+0x2b4>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d056      	beq.n	8001642 <HAL_GPIO_Init+0x23a>
 8001594:	4a48      	ldr	r2, [pc, #288]	; (80016b8 <HAL_GPIO_Init+0x2b0>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d053      	beq.n	8001642 <HAL_GPIO_Init+0x23a>
          break;
 800159a:	e094      	b.n	80016c6 <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d00b      	beq.n	80015bc <HAL_GPIO_Init+0x1b4>
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d007      	beq.n	80015bc <HAL_GPIO_Init+0x1b4>
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	2b03      	cmp	r3, #3
 80015b2:	d003      	beq.n	80015bc <HAL_GPIO_Init+0x1b4>
 80015b4:	21d5      	movs	r1, #213	; 0xd5
 80015b6:	483b      	ldr	r0, [pc, #236]	; (80016a4 <HAL_GPIO_Init+0x29c>)
 80015b8:	f7fe ffe8 	bl	800058c <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	623b      	str	r3, [r7, #32]
          break;
 80015c2:	e080      	b.n	80016c6 <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	2b02      	cmp	r3, #2
 80015ca:	d00b      	beq.n	80015e4 <HAL_GPIO_Init+0x1dc>
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d007      	beq.n	80015e4 <HAL_GPIO_Init+0x1dc>
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	2b03      	cmp	r3, #3
 80015da:	d003      	beq.n	80015e4 <HAL_GPIO_Init+0x1dc>
 80015dc:	21dc      	movs	r1, #220	; 0xdc
 80015de:	4831      	ldr	r0, [pc, #196]	; (80016a4 <HAL_GPIO_Init+0x29c>)
 80015e0:	f7fe ffd4 	bl	800058c <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	3304      	adds	r3, #4
 80015ea:	623b      	str	r3, [r7, #32]
          break;
 80015ec:	e06b      	b.n	80016c6 <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	68db      	ldr	r3, [r3, #12]
 80015f2:	2b02      	cmp	r3, #2
 80015f4:	d00b      	beq.n	800160e <HAL_GPIO_Init+0x206>
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	68db      	ldr	r3, [r3, #12]
 80015fa:	2b01      	cmp	r3, #1
 80015fc:	d007      	beq.n	800160e <HAL_GPIO_Init+0x206>
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	68db      	ldr	r3, [r3, #12]
 8001602:	2b03      	cmp	r3, #3
 8001604:	d003      	beq.n	800160e <HAL_GPIO_Init+0x206>
 8001606:	21e3      	movs	r1, #227	; 0xe3
 8001608:	4826      	ldr	r0, [pc, #152]	; (80016a4 <HAL_GPIO_Init+0x29c>)
 800160a:	f7fe ffbf 	bl	800058c <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	68db      	ldr	r3, [r3, #12]
 8001612:	3308      	adds	r3, #8
 8001614:	623b      	str	r3, [r7, #32]
          break;
 8001616:	e056      	b.n	80016c6 <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	2b02      	cmp	r3, #2
 800161e:	d00b      	beq.n	8001638 <HAL_GPIO_Init+0x230>
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	2b01      	cmp	r3, #1
 8001626:	d007      	beq.n	8001638 <HAL_GPIO_Init+0x230>
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	2b03      	cmp	r3, #3
 800162e:	d003      	beq.n	8001638 <HAL_GPIO_Init+0x230>
 8001630:	21ea      	movs	r1, #234	; 0xea
 8001632:	481c      	ldr	r0, [pc, #112]	; (80016a4 <HAL_GPIO_Init+0x29c>)
 8001634:	f7fe ffaa 	bl	800058c <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	68db      	ldr	r3, [r3, #12]
 800163c:	330c      	adds	r3, #12
 800163e:	623b      	str	r3, [r7, #32]
          break;
 8001640:	e041      	b.n	80016c6 <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d00b      	beq.n	8001662 <HAL_GPIO_Init+0x25a>
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	2b01      	cmp	r3, #1
 8001650:	d007      	beq.n	8001662 <HAL_GPIO_Init+0x25a>
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	2b02      	cmp	r3, #2
 8001658:	d003      	beq.n	8001662 <HAL_GPIO_Init+0x25a>
 800165a:	21f7      	movs	r1, #247	; 0xf7
 800165c:	4811      	ldr	r0, [pc, #68]	; (80016a4 <HAL_GPIO_Init+0x29c>)
 800165e:	f7fe ff95 	bl	800058c <assert_failed>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d102      	bne.n	8001670 <HAL_GPIO_Init+0x268>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800166a:	2304      	movs	r3, #4
 800166c:	623b      	str	r3, [r7, #32]
          break;
 800166e:	e02a      	b.n	80016c6 <HAL_GPIO_Init+0x2be>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	2b01      	cmp	r3, #1
 8001676:	d105      	bne.n	8001684 <HAL_GPIO_Init+0x27c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001678:	2308      	movs	r3, #8
 800167a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	69fa      	ldr	r2, [r7, #28]
 8001680:	611a      	str	r2, [r3, #16]
          break;
 8001682:	e020      	b.n	80016c6 <HAL_GPIO_Init+0x2be>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001684:	2308      	movs	r3, #8
 8001686:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	69fa      	ldr	r2, [r7, #28]
 800168c:	615a      	str	r2, [r3, #20]
          break;
 800168e:	e01a      	b.n	80016c6 <HAL_GPIO_Init+0x2be>
 8001690:	40010800 	.word	0x40010800
 8001694:	40010c00 	.word	0x40010c00
 8001698:	40011000 	.word	0x40011000
 800169c:	40011400 	.word	0x40011400
 80016a0:	40011800 	.word	0x40011800
 80016a4:	0800b004 	.word	0x0800b004
 80016a8:	10110000 	.word	0x10110000
 80016ac:	10210000 	.word	0x10210000
 80016b0:	10310000 	.word	0x10310000
 80016b4:	10120000 	.word	0x10120000
 80016b8:	10220000 	.word	0x10220000
 80016bc:	10320000 	.word	0x10320000
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80016c0:	2300      	movs	r3, #0
 80016c2:	623b      	str	r3, [r7, #32]
          break;
 80016c4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80016c6:	69bb      	ldr	r3, [r7, #24]
 80016c8:	2bff      	cmp	r3, #255	; 0xff
 80016ca:	d801      	bhi.n	80016d0 <HAL_GPIO_Init+0x2c8>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	e001      	b.n	80016d4 <HAL_GPIO_Init+0x2cc>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	3304      	adds	r3, #4
 80016d4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80016d6:	69bb      	ldr	r3, [r7, #24]
 80016d8:	2bff      	cmp	r3, #255	; 0xff
 80016da:	d802      	bhi.n	80016e2 <HAL_GPIO_Init+0x2da>
 80016dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	e002      	b.n	80016e8 <HAL_GPIO_Init+0x2e0>
 80016e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e4:	3b08      	subs	r3, #8
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	210f      	movs	r1, #15
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	fa01 f303 	lsl.w	r3, r1, r3
 80016f6:	43db      	mvns	r3, r3
 80016f8:	401a      	ands	r2, r3
 80016fa:	6a39      	ldr	r1, [r7, #32]
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001702:	431a      	orrs	r2, r3
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001710:	2b00      	cmp	r3, #0
 8001712:	f000 8096 	beq.w	8001842 <HAL_GPIO_Init+0x43a>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001716:	4a52      	ldr	r2, [pc, #328]	; (8001860 <HAL_GPIO_Init+0x458>)
 8001718:	4b51      	ldr	r3, [pc, #324]	; (8001860 <HAL_GPIO_Init+0x458>)
 800171a:	699b      	ldr	r3, [r3, #24]
 800171c:	f043 0301 	orr.w	r3, r3, #1
 8001720:	6193      	str	r3, [r2, #24]
 8001722:	4b4f      	ldr	r3, [pc, #316]	; (8001860 <HAL_GPIO_Init+0x458>)
 8001724:	699b      	ldr	r3, [r3, #24]
 8001726:	f003 0301 	and.w	r3, r3, #1
 800172a:	60bb      	str	r3, [r7, #8]
 800172c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800172e:	4a4d      	ldr	r2, [pc, #308]	; (8001864 <HAL_GPIO_Init+0x45c>)
 8001730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001732:	089b      	lsrs	r3, r3, #2
 8001734:	3302      	adds	r3, #2
 8001736:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800173a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800173c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173e:	f003 0303 	and.w	r3, r3, #3
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	220f      	movs	r2, #15
 8001746:	fa02 f303 	lsl.w	r3, r2, r3
 800174a:	43db      	mvns	r3, r3
 800174c:	68fa      	ldr	r2, [r7, #12]
 800174e:	4013      	ands	r3, r2
 8001750:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4a44      	ldr	r2, [pc, #272]	; (8001868 <HAL_GPIO_Init+0x460>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d013      	beq.n	8001782 <HAL_GPIO_Init+0x37a>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4a43      	ldr	r2, [pc, #268]	; (800186c <HAL_GPIO_Init+0x464>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d00d      	beq.n	800177e <HAL_GPIO_Init+0x376>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4a42      	ldr	r2, [pc, #264]	; (8001870 <HAL_GPIO_Init+0x468>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d007      	beq.n	800177a <HAL_GPIO_Init+0x372>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4a41      	ldr	r2, [pc, #260]	; (8001874 <HAL_GPIO_Init+0x46c>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d101      	bne.n	8001776 <HAL_GPIO_Init+0x36e>
 8001772:	2303      	movs	r3, #3
 8001774:	e006      	b.n	8001784 <HAL_GPIO_Init+0x37c>
 8001776:	2304      	movs	r3, #4
 8001778:	e004      	b.n	8001784 <HAL_GPIO_Init+0x37c>
 800177a:	2302      	movs	r3, #2
 800177c:	e002      	b.n	8001784 <HAL_GPIO_Init+0x37c>
 800177e:	2301      	movs	r3, #1
 8001780:	e000      	b.n	8001784 <HAL_GPIO_Init+0x37c>
 8001782:	2300      	movs	r3, #0
 8001784:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001786:	f002 0203 	and.w	r2, r2, #3
 800178a:	0092      	lsls	r2, r2, #2
 800178c:	4093      	lsls	r3, r2
 800178e:	68fa      	ldr	r2, [r7, #12]
 8001790:	4313      	orrs	r3, r2
 8001792:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001794:	4933      	ldr	r1, [pc, #204]	; (8001864 <HAL_GPIO_Init+0x45c>)
 8001796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001798:	089b      	lsrs	r3, r3, #2
 800179a:	3302      	adds	r3, #2
 800179c:	68fa      	ldr	r2, [r7, #12]
 800179e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d006      	beq.n	80017bc <HAL_GPIO_Init+0x3b4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80017ae:	4932      	ldr	r1, [pc, #200]	; (8001878 <HAL_GPIO_Init+0x470>)
 80017b0:	4b31      	ldr	r3, [pc, #196]	; (8001878 <HAL_GPIO_Init+0x470>)
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	69bb      	ldr	r3, [r7, #24]
 80017b6:	4313      	orrs	r3, r2
 80017b8:	600b      	str	r3, [r1, #0]
 80017ba:	e006      	b.n	80017ca <HAL_GPIO_Init+0x3c2>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80017bc:	492e      	ldr	r1, [pc, #184]	; (8001878 <HAL_GPIO_Init+0x470>)
 80017be:	4b2e      	ldr	r3, [pc, #184]	; (8001878 <HAL_GPIO_Init+0x470>)
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	69bb      	ldr	r3, [r7, #24]
 80017c4:	43db      	mvns	r3, r3
 80017c6:	4013      	ands	r3, r2
 80017c8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d006      	beq.n	80017e4 <HAL_GPIO_Init+0x3dc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80017d6:	4928      	ldr	r1, [pc, #160]	; (8001878 <HAL_GPIO_Init+0x470>)
 80017d8:	4b27      	ldr	r3, [pc, #156]	; (8001878 <HAL_GPIO_Init+0x470>)
 80017da:	685a      	ldr	r2, [r3, #4]
 80017dc:	69bb      	ldr	r3, [r7, #24]
 80017de:	4313      	orrs	r3, r2
 80017e0:	604b      	str	r3, [r1, #4]
 80017e2:	e006      	b.n	80017f2 <HAL_GPIO_Init+0x3ea>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80017e4:	4924      	ldr	r1, [pc, #144]	; (8001878 <HAL_GPIO_Init+0x470>)
 80017e6:	4b24      	ldr	r3, [pc, #144]	; (8001878 <HAL_GPIO_Init+0x470>)
 80017e8:	685a      	ldr	r2, [r3, #4]
 80017ea:	69bb      	ldr	r3, [r7, #24]
 80017ec:	43db      	mvns	r3, r3
 80017ee:	4013      	ands	r3, r2
 80017f0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d006      	beq.n	800180c <HAL_GPIO_Init+0x404>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80017fe:	491e      	ldr	r1, [pc, #120]	; (8001878 <HAL_GPIO_Init+0x470>)
 8001800:	4b1d      	ldr	r3, [pc, #116]	; (8001878 <HAL_GPIO_Init+0x470>)
 8001802:	689a      	ldr	r2, [r3, #8]
 8001804:	69bb      	ldr	r3, [r7, #24]
 8001806:	4313      	orrs	r3, r2
 8001808:	608b      	str	r3, [r1, #8]
 800180a:	e006      	b.n	800181a <HAL_GPIO_Init+0x412>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800180c:	491a      	ldr	r1, [pc, #104]	; (8001878 <HAL_GPIO_Init+0x470>)
 800180e:	4b1a      	ldr	r3, [pc, #104]	; (8001878 <HAL_GPIO_Init+0x470>)
 8001810:	689a      	ldr	r2, [r3, #8]
 8001812:	69bb      	ldr	r3, [r7, #24]
 8001814:	43db      	mvns	r3, r3
 8001816:	4013      	ands	r3, r2
 8001818:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d006      	beq.n	8001834 <HAL_GPIO_Init+0x42c>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001826:	4914      	ldr	r1, [pc, #80]	; (8001878 <HAL_GPIO_Init+0x470>)
 8001828:	4b13      	ldr	r3, [pc, #76]	; (8001878 <HAL_GPIO_Init+0x470>)
 800182a:	68da      	ldr	r2, [r3, #12]
 800182c:	69bb      	ldr	r3, [r7, #24]
 800182e:	4313      	orrs	r3, r2
 8001830:	60cb      	str	r3, [r1, #12]
 8001832:	e006      	b.n	8001842 <HAL_GPIO_Init+0x43a>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001834:	4910      	ldr	r1, [pc, #64]	; (8001878 <HAL_GPIO_Init+0x470>)
 8001836:	4b10      	ldr	r3, [pc, #64]	; (8001878 <HAL_GPIO_Init+0x470>)
 8001838:	68da      	ldr	r2, [r3, #12]
 800183a:	69bb      	ldr	r3, [r7, #24]
 800183c:	43db      	mvns	r3, r3
 800183e:	4013      	ands	r3, r2
 8001840:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001844:	3301      	adds	r3, #1
 8001846:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184e:	fa22 f303 	lsr.w	r3, r2, r3
 8001852:	2b00      	cmp	r3, #0
 8001854:	f47f ae4f 	bne.w	80014f6 <HAL_GPIO_Init+0xee>
  }
}
 8001858:	bf00      	nop
 800185a:	3728      	adds	r7, #40	; 0x28
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	40021000 	.word	0x40021000
 8001864:	40010000 	.word	0x40010000
 8001868:	40010800 	.word	0x40010800
 800186c:	40010c00 	.word	0x40010c00
 8001870:	40011000 	.word	0x40011000
 8001874:	40011400 	.word	0x40011400
 8001878:	40010400 	.word	0x40010400

0800187c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	460b      	mov	r3, r1
 8001886:	807b      	strh	r3, [r7, #2]
 8001888:	4613      	mov	r3, r2
 800188a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800188c:	887b      	ldrh	r3, [r7, #2]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d004      	beq.n	800189c <HAL_GPIO_WritePin+0x20>
 8001892:	887b      	ldrh	r3, [r7, #2]
 8001894:	0c1b      	lsrs	r3, r3, #16
 8001896:	041b      	lsls	r3, r3, #16
 8001898:	2b00      	cmp	r3, #0
 800189a:	d004      	beq.n	80018a6 <HAL_GPIO_WritePin+0x2a>
 800189c:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 80018a0:	480e      	ldr	r0, [pc, #56]	; (80018dc <HAL_GPIO_WritePin+0x60>)
 80018a2:	f7fe fe73 	bl	800058c <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80018a6:	787b      	ldrb	r3, [r7, #1]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d007      	beq.n	80018bc <HAL_GPIO_WritePin+0x40>
 80018ac:	787b      	ldrb	r3, [r7, #1]
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d004      	beq.n	80018bc <HAL_GPIO_WritePin+0x40>
 80018b2:	f240 11d5 	movw	r1, #469	; 0x1d5
 80018b6:	4809      	ldr	r0, [pc, #36]	; (80018dc <HAL_GPIO_WritePin+0x60>)
 80018b8:	f7fe fe68 	bl	800058c <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 80018bc:	787b      	ldrb	r3, [r7, #1]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d003      	beq.n	80018ca <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018c2:	887a      	ldrh	r2, [r7, #2]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80018c8:	e003      	b.n	80018d2 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80018ca:	887b      	ldrh	r3, [r7, #2]
 80018cc:	041a      	lsls	r2, r3, #16
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	611a      	str	r2, [r3, #16]
}
 80018d2:	bf00      	nop
 80018d4:	3708      	adds	r7, #8
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	0800b004 	.word	0x0800b004

080018e0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80018e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018e2:	b08b      	sub	sp, #44	; 0x2c
 80018e4:	af06      	add	r7, sp, #24
 80018e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d101      	bne.n	80018f2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e106      	b.n	8001b00 <HAL_PCD_Init+0x220>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a84      	ldr	r2, [pc, #528]	; (8001b08 <HAL_PCD_Init+0x228>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d003      	beq.n	8001904 <HAL_PCD_Init+0x24>
 80018fc:	218e      	movs	r1, #142	; 0x8e
 80018fe:	4883      	ldr	r0, [pc, #524]	; (8001b0c <HAL_PCD_Init+0x22c>)
 8001900:	f7fe fe44 	bl	800058c <assert_failed>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800190a:	b2db      	uxtb	r3, r3
 800190c:	2b00      	cmp	r3, #0
 800190e:	d106      	bne.n	800191e <HAL_PCD_Init+0x3e>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2200      	movs	r2, #0
 8001914:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	f008 ff13 	bl	800a744 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2203      	movs	r2, #3
 8001922:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4618      	mov	r0, r3
 800192c:	f003 fd66 	bl	80053fc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	603b      	str	r3, [r7, #0]
 8001936:	687e      	ldr	r6, [r7, #4]
 8001938:	466d      	mov	r5, sp
 800193a:	f106 0410 	add.w	r4, r6, #16
 800193e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001940:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001942:	6823      	ldr	r3, [r4, #0]
 8001944:	602b      	str	r3, [r5, #0]
 8001946:	1d33      	adds	r3, r6, #4
 8001948:	cb0e      	ldmia	r3, {r1, r2, r3}
 800194a:	6838      	ldr	r0, [r7, #0]
 800194c:	f003 fd30 	bl	80053b0 <USB_CoreInit>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d005      	beq.n	8001962 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2202      	movs	r2, #2
 800195a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e0ce      	b.n	8001b00 <HAL_PCD_Init+0x220>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	2100      	movs	r1, #0
 8001968:	4618      	mov	r0, r3
 800196a:	f003 fd61 	bl	8005430 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800196e:	2300      	movs	r3, #0
 8001970:	73fb      	strb	r3, [r7, #15]
 8001972:	e04c      	b.n	8001a0e <HAL_PCD_Init+0x12e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001974:	7bfb      	ldrb	r3, [r7, #15]
 8001976:	6879      	ldr	r1, [r7, #4]
 8001978:	1c5a      	adds	r2, r3, #1
 800197a:	4613      	mov	r3, r2
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	4413      	add	r3, r2
 8001980:	00db      	lsls	r3, r3, #3
 8001982:	440b      	add	r3, r1
 8001984:	3301      	adds	r3, #1
 8001986:	2201      	movs	r2, #1
 8001988:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800198a:	7bfb      	ldrb	r3, [r7, #15]
 800198c:	6879      	ldr	r1, [r7, #4]
 800198e:	1c5a      	adds	r2, r3, #1
 8001990:	4613      	mov	r3, r2
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	4413      	add	r3, r2
 8001996:	00db      	lsls	r3, r3, #3
 8001998:	440b      	add	r3, r1
 800199a:	7bfa      	ldrb	r2, [r7, #15]
 800199c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800199e:	7bfa      	ldrb	r2, [r7, #15]
 80019a0:	7bfb      	ldrb	r3, [r7, #15]
 80019a2:	b298      	uxth	r0, r3
 80019a4:	6879      	ldr	r1, [r7, #4]
 80019a6:	4613      	mov	r3, r2
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	4413      	add	r3, r2
 80019ac:	00db      	lsls	r3, r3, #3
 80019ae:	440b      	add	r3, r1
 80019b0:	3336      	adds	r3, #54	; 0x36
 80019b2:	4602      	mov	r2, r0
 80019b4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80019b6:	7bfb      	ldrb	r3, [r7, #15]
 80019b8:	6879      	ldr	r1, [r7, #4]
 80019ba:	1c5a      	adds	r2, r3, #1
 80019bc:	4613      	mov	r3, r2
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	4413      	add	r3, r2
 80019c2:	00db      	lsls	r3, r3, #3
 80019c4:	440b      	add	r3, r1
 80019c6:	3303      	adds	r3, #3
 80019c8:	2200      	movs	r2, #0
 80019ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80019cc:	7bfa      	ldrb	r2, [r7, #15]
 80019ce:	6879      	ldr	r1, [r7, #4]
 80019d0:	4613      	mov	r3, r2
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	4413      	add	r3, r2
 80019d6:	00db      	lsls	r3, r3, #3
 80019d8:	440b      	add	r3, r1
 80019da:	3338      	adds	r3, #56	; 0x38
 80019dc:	2200      	movs	r2, #0
 80019de:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80019e0:	7bfa      	ldrb	r2, [r7, #15]
 80019e2:	6879      	ldr	r1, [r7, #4]
 80019e4:	4613      	mov	r3, r2
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	4413      	add	r3, r2
 80019ea:	00db      	lsls	r3, r3, #3
 80019ec:	440b      	add	r3, r1
 80019ee:	333c      	adds	r3, #60	; 0x3c
 80019f0:	2200      	movs	r2, #0
 80019f2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80019f4:	7bfa      	ldrb	r2, [r7, #15]
 80019f6:	6879      	ldr	r1, [r7, #4]
 80019f8:	4613      	mov	r3, r2
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	4413      	add	r3, r2
 80019fe:	00db      	lsls	r3, r3, #3
 8001a00:	440b      	add	r3, r1
 8001a02:	3340      	adds	r3, #64	; 0x40
 8001a04:	2200      	movs	r2, #0
 8001a06:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a08:	7bfb      	ldrb	r3, [r7, #15]
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	73fb      	strb	r3, [r7, #15]
 8001a0e:	7bfa      	ldrb	r2, [r7, #15]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d3ad      	bcc.n	8001974 <HAL_PCD_Init+0x94>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a18:	2300      	movs	r3, #0
 8001a1a:	73fb      	strb	r3, [r7, #15]
 8001a1c:	e044      	b.n	8001aa8 <HAL_PCD_Init+0x1c8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001a1e:	7bfa      	ldrb	r2, [r7, #15]
 8001a20:	6879      	ldr	r1, [r7, #4]
 8001a22:	4613      	mov	r3, r2
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	4413      	add	r3, r2
 8001a28:	00db      	lsls	r3, r3, #3
 8001a2a:	440b      	add	r3, r1
 8001a2c:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001a30:	2200      	movs	r2, #0
 8001a32:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001a34:	7bfa      	ldrb	r2, [r7, #15]
 8001a36:	6879      	ldr	r1, [r7, #4]
 8001a38:	4613      	mov	r3, r2
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	4413      	add	r3, r2
 8001a3e:	00db      	lsls	r3, r3, #3
 8001a40:	440b      	add	r3, r1
 8001a42:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a46:	7bfa      	ldrb	r2, [r7, #15]
 8001a48:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001a4a:	7bfa      	ldrb	r2, [r7, #15]
 8001a4c:	6879      	ldr	r1, [r7, #4]
 8001a4e:	4613      	mov	r3, r2
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	4413      	add	r3, r2
 8001a54:	00db      	lsls	r3, r3, #3
 8001a56:	440b      	add	r3, r1
 8001a58:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001a60:	7bfa      	ldrb	r2, [r7, #15]
 8001a62:	6879      	ldr	r1, [r7, #4]
 8001a64:	4613      	mov	r3, r2
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	4413      	add	r3, r2
 8001a6a:	00db      	lsls	r3, r3, #3
 8001a6c:	440b      	add	r3, r1
 8001a6e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001a72:	2200      	movs	r2, #0
 8001a74:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001a76:	7bfa      	ldrb	r2, [r7, #15]
 8001a78:	6879      	ldr	r1, [r7, #4]
 8001a7a:	4613      	mov	r3, r2
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	4413      	add	r3, r2
 8001a80:	00db      	lsls	r3, r3, #3
 8001a82:	440b      	add	r3, r1
 8001a84:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001a88:	2200      	movs	r2, #0
 8001a8a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001a8c:	7bfa      	ldrb	r2, [r7, #15]
 8001a8e:	6879      	ldr	r1, [r7, #4]
 8001a90:	4613      	mov	r3, r2
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	4413      	add	r3, r2
 8001a96:	00db      	lsls	r3, r3, #3
 8001a98:	440b      	add	r3, r1
 8001a9a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001aa2:	7bfb      	ldrb	r3, [r7, #15]
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	73fb      	strb	r3, [r7, #15]
 8001aa8:	7bfa      	ldrb	r2, [r7, #15]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	d3b5      	bcc.n	8001a1e <HAL_PCD_Init+0x13e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	603b      	str	r3, [r7, #0]
 8001ab8:	687e      	ldr	r6, [r7, #4]
 8001aba:	466d      	mov	r5, sp
 8001abc:	f106 0410 	add.w	r4, r6, #16
 8001ac0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ac2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ac4:	6823      	ldr	r3, [r4, #0]
 8001ac6:	602b      	str	r3, [r5, #0]
 8001ac8:	1d33      	adds	r3, r6, #4
 8001aca:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001acc:	6838      	ldr	r0, [r7, #0]
 8001ace:	f003 fcbb 	bl	8005448 <USB_DevInit>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d005      	beq.n	8001ae4 <HAL_PCD_Init+0x204>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2202      	movs	r2, #2
 8001adc:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e00d      	b.n	8001b00 <HAL_PCD_Init+0x220>
  }

  hpcd->USB_Address = 0U;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2201      	movs	r2, #1
 8001af0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4618      	mov	r0, r3
 8001afa:	f005 fe36 	bl	800776a <USB_DevDisconnect>

  return HAL_OK;
 8001afe:	2300      	movs	r3, #0
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3714      	adds	r7, #20
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b08:	40005c00 	.word	0x40005c00
 8001b0c:	0800b040 	.word	0x0800b040

08001b10 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d101      	bne.n	8001b26 <HAL_PCD_Start+0x16>
 8001b22:	2302      	movs	r3, #2
 8001b24:	e016      	b.n	8001b54 <HAL_PCD_Start+0x44>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2201      	movs	r2, #1
 8001b2a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4618      	mov	r0, r3
 8001b34:	f003 fc4c 	bl	80053d0 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001b38:	2101      	movs	r1, #1
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f009 f875 	bl	800ac2a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4618      	mov	r0, r3
 8001b46:	f005 fe06 	bl	8007756 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001b52:	2300      	movs	r3, #0
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3708      	adds	r7, #8
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}

08001b5c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b088      	sub	sp, #32
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f005 fe08 	bl	800777e <USB_ReadInterrupts>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b78:	d102      	bne.n	8001b80 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f000 fb61 	bl	8002242 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4618      	mov	r0, r3
 8001b86:	f005 fdfa 	bl	800777e <USB_ReadInterrupts>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b94:	d112      	bne.n	8001bbc <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	687a      	ldr	r2, [r7, #4]
 8001b9c:	6812      	ldr	r2, [r2, #0]
 8001b9e:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8001ba2:	b292      	uxth	r2, r2
 8001ba4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ba8:	b292      	uxth	r2, r2
 8001baa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f008 fe43 	bl	800a83a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001bb4:	2100      	movs	r1, #0
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f000 f925 	bl	8001e06 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f005 fddc 	bl	800777e <USB_ReadInterrupts>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bcc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001bd0:	d10b      	bne.n	8001bea <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	6812      	ldr	r2, [r2, #0]
 8001bda:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8001bde:	b292      	uxth	r2, r2
 8001be0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001be4:	b292      	uxth	r2, r2
 8001be6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f005 fdc5 	bl	800777e <USB_ReadInterrupts>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001bfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001bfe:	d10b      	bne.n	8001c18 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	687a      	ldr	r2, [r7, #4]
 8001c06:	6812      	ldr	r2, [r2, #0]
 8001c08:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8001c0c:	b292      	uxth	r2, r2
 8001c0e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001c12:	b292      	uxth	r2, r2
 8001c14:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f005 fdae 	bl	800777e <USB_ReadInterrupts>
 8001c22:	4603      	mov	r3, r0
 8001c24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c2c:	d126      	bne.n	8001c7c <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	6812      	ldr	r2, [r2, #0]
 8001c36:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8001c3a:	b292      	uxth	r2, r2
 8001c3c:	f022 0204 	bic.w	r2, r2, #4
 8001c40:	b292      	uxth	r2, r2
 8001c42:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	687a      	ldr	r2, [r7, #4]
 8001c4c:	6812      	ldr	r2, [r2, #0]
 8001c4e:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8001c52:	b292      	uxth	r2, r2
 8001c54:	f022 0208 	bic.w	r2, r2, #8
 8001c58:	b292      	uxth	r2, r2
 8001c5a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f008 fe24 	bl	800a8ac <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	687a      	ldr	r2, [r7, #4]
 8001c6a:	6812      	ldr	r2, [r2, #0]
 8001c6c:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8001c70:	b292      	uxth	r2, r2
 8001c72:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001c76:	b292      	uxth	r2, r2
 8001c78:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4618      	mov	r0, r3
 8001c82:	f005 fd7c 	bl	800777e <USB_ReadInterrupts>
 8001c86:	4603      	mov	r3, r0
 8001c88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001c90:	f040 8084 	bne.w	8001d9c <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8001c94:	2300      	movs	r3, #0
 8001c96:	77fb      	strb	r3, [r7, #31]
 8001c98:	e011      	b.n	8001cbe <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001c9a:	7ffb      	ldrb	r3, [r7, #31]
 8001c9c:	687a      	ldr	r2, [r7, #4]
 8001c9e:	6812      	ldr	r2, [r2, #0]
 8001ca0:	4611      	mov	r1, r2
 8001ca2:	7ffa      	ldrb	r2, [r7, #31]
 8001ca4:	0092      	lsls	r2, r2, #2
 8001ca6:	440a      	add	r2, r1
 8001ca8:	8812      	ldrh	r2, [r2, #0]
 8001caa:	b292      	uxth	r2, r2
 8001cac:	005b      	lsls	r3, r3, #1
 8001cae:	f107 0120 	add.w	r1, r7, #32
 8001cb2:	440b      	add	r3, r1
 8001cb4:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8001cb8:	7ffb      	ldrb	r3, [r7, #31]
 8001cba:	3301      	adds	r3, #1
 8001cbc:	77fb      	strb	r3, [r7, #31]
 8001cbe:	7ffb      	ldrb	r3, [r7, #31]
 8001cc0:	2b07      	cmp	r3, #7
 8001cc2:	d9ea      	bls.n	8001c9a <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	687a      	ldr	r2, [r7, #4]
 8001cca:	6812      	ldr	r2, [r2, #0]
 8001ccc:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8001cd0:	b292      	uxth	r2, r2
 8001cd2:	f042 0201 	orr.w	r2, r2, #1
 8001cd6:	b292      	uxth	r2, r2
 8001cd8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	687a      	ldr	r2, [r7, #4]
 8001ce2:	6812      	ldr	r2, [r2, #0]
 8001ce4:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8001ce8:	b292      	uxth	r2, r2
 8001cea:	f022 0201 	bic.w	r2, r2, #1
 8001cee:	b292      	uxth	r2, r2
 8001cf0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001cf4:	bf00      	nop
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d0f6      	beq.n	8001cf6 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	6812      	ldr	r2, [r2, #0]
 8001d10:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8001d14:	b292      	uxth	r2, r2
 8001d16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d1a:	b292      	uxth	r2, r2
 8001d1c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001d20:	2300      	movs	r3, #0
 8001d22:	77fb      	strb	r3, [r7, #31]
 8001d24:	e010      	b.n	8001d48 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	7ffb      	ldrb	r3, [r7, #31]
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	441a      	add	r2, r3
 8001d32:	7ffb      	ldrb	r3, [r7, #31]
 8001d34:	005b      	lsls	r3, r3, #1
 8001d36:	f107 0120 	add.w	r1, r7, #32
 8001d3a:	440b      	add	r3, r1
 8001d3c:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001d40:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001d42:	7ffb      	ldrb	r3, [r7, #31]
 8001d44:	3301      	adds	r3, #1
 8001d46:	77fb      	strb	r3, [r7, #31]
 8001d48:	7ffb      	ldrb	r3, [r7, #31]
 8001d4a:	2b07      	cmp	r3, #7
 8001d4c:	d9eb      	bls.n	8001d26 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	687a      	ldr	r2, [r7, #4]
 8001d54:	6812      	ldr	r2, [r2, #0]
 8001d56:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8001d5a:	b292      	uxth	r2, r2
 8001d5c:	f042 0208 	orr.w	r2, r2, #8
 8001d60:	b292      	uxth	r2, r2
 8001d62:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	6812      	ldr	r2, [r2, #0]
 8001d6e:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8001d72:	b292      	uxth	r2, r2
 8001d74:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d78:	b292      	uxth	r2, r2
 8001d7a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	6812      	ldr	r2, [r2, #0]
 8001d86:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8001d8a:	b292      	uxth	r2, r2
 8001d8c:	f042 0204 	orr.w	r2, r2, #4
 8001d90:	b292      	uxth	r2, r2
 8001d92:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f008 fd6e 	bl	800a878 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4618      	mov	r0, r3
 8001da2:	f005 fcec 	bl	800777e <USB_ReadInterrupts>
 8001da6:	4603      	mov	r3, r0
 8001da8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001dac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001db0:	d10e      	bne.n	8001dd0 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	6812      	ldr	r2, [r2, #0]
 8001dba:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8001dbe:	b292      	uxth	r2, r2
 8001dc0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001dc4:	b292      	uxth	r2, r2
 8001dc6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f008 fd27 	bl	800a81e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f005 fcd2 	bl	800777e <USB_ReadInterrupts>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001de0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001de4:	d10b      	bne.n	8001dfe <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	687a      	ldr	r2, [r7, #4]
 8001dec:	6812      	ldr	r2, [r2, #0]
 8001dee:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8001df2:	b292      	uxth	r2, r2
 8001df4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001df8:	b292      	uxth	r2, r2
 8001dfa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001dfe:	bf00      	nop
 8001e00:	3720      	adds	r7, #32
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}

08001e06 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001e06:	b580      	push	{r7, lr}
 8001e08:	b082      	sub	sp, #8
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	6078      	str	r0, [r7, #4]
 8001e0e:	460b      	mov	r3, r1
 8001e10:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d101      	bne.n	8001e20 <HAL_PCD_SetAddress+0x1a>
 8001e1c:	2302      	movs	r3, #2
 8001e1e:	e013      	b.n	8001e48 <HAL_PCD_SetAddress+0x42>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2201      	movs	r2, #1
 8001e24:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	78fa      	ldrb	r2, [r7, #3]
 8001e2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	78fa      	ldrb	r2, [r7, #3]
 8001e36:	4611      	mov	r1, r2
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f005 fc79 	bl	8007730 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2200      	movs	r2, #0
 8001e42:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001e46:	2300      	movs	r3, #0
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3708      	adds	r7, #8
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}

08001e50 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	4608      	mov	r0, r1
 8001e5a:	4611      	mov	r1, r2
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	4603      	mov	r3, r0
 8001e60:	70fb      	strb	r3, [r7, #3]
 8001e62:	460b      	mov	r3, r1
 8001e64:	803b      	strh	r3, [r7, #0]
 8001e66:	4613      	mov	r3, r2
 8001e68:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001e6e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	da0e      	bge.n	8001e94 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e76:	78fb      	ldrb	r3, [r7, #3]
 8001e78:	f003 0307 	and.w	r3, r3, #7
 8001e7c:	1c5a      	adds	r2, r3, #1
 8001e7e:	4613      	mov	r3, r2
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	4413      	add	r3, r2
 8001e84:	00db      	lsls	r3, r3, #3
 8001e86:	687a      	ldr	r2, [r7, #4]
 8001e88:	4413      	add	r3, r2
 8001e8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	2201      	movs	r2, #1
 8001e90:	705a      	strb	r2, [r3, #1]
 8001e92:	e00e      	b.n	8001eb2 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e94:	78fb      	ldrb	r3, [r7, #3]
 8001e96:	f003 0207 	and.w	r2, r3, #7
 8001e9a:	4613      	mov	r3, r2
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	4413      	add	r3, r2
 8001ea0:	00db      	lsls	r3, r3, #3
 8001ea2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001ea6:	687a      	ldr	r2, [r7, #4]
 8001ea8:	4413      	add	r3, r2
 8001eaa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001eb2:	78fb      	ldrb	r3, [r7, #3]
 8001eb4:	f003 0307 	and.w	r3, r3, #7
 8001eb8:	b2da      	uxtb	r2, r3
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001ebe:	883a      	ldrh	r2, [r7, #0]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	78ba      	ldrb	r2, [r7, #2]
 8001ec8:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	785b      	ldrb	r3, [r3, #1]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d004      	beq.n	8001edc <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	b29a      	uxth	r2, r3
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001edc:	78bb      	ldrb	r3, [r7, #2]
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d102      	bne.n	8001ee8 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d101      	bne.n	8001ef6 <HAL_PCD_EP_Open+0xa6>
 8001ef2:	2302      	movs	r3, #2
 8001ef4:	e00e      	b.n	8001f14 <HAL_PCD_EP_Open+0xc4>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2201      	movs	r2, #1
 8001efa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	68f9      	ldr	r1, [r7, #12]
 8001f04:	4618      	mov	r0, r3
 8001f06:	f003 fabf 	bl	8005488 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001f12:	7afb      	ldrb	r3, [r7, #11]
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3710      	adds	r7, #16
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}

08001f1c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	460b      	mov	r3, r1
 8001f26:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001f28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	da0e      	bge.n	8001f4e <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f30:	78fb      	ldrb	r3, [r7, #3]
 8001f32:	f003 0307 	and.w	r3, r3, #7
 8001f36:	1c5a      	adds	r2, r3, #1
 8001f38:	4613      	mov	r3, r2
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	4413      	add	r3, r2
 8001f3e:	00db      	lsls	r3, r3, #3
 8001f40:	687a      	ldr	r2, [r7, #4]
 8001f42:	4413      	add	r3, r2
 8001f44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2201      	movs	r2, #1
 8001f4a:	705a      	strb	r2, [r3, #1]
 8001f4c:	e00e      	b.n	8001f6c <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f4e:	78fb      	ldrb	r3, [r7, #3]
 8001f50:	f003 0207 	and.w	r2, r3, #7
 8001f54:	4613      	mov	r3, r2
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	4413      	add	r3, r2
 8001f5a:	00db      	lsls	r3, r3, #3
 8001f5c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001f60:	687a      	ldr	r2, [r7, #4]
 8001f62:	4413      	add	r3, r2
 8001f64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001f6c:	78fb      	ldrb	r3, [r7, #3]
 8001f6e:	f003 0307 	and.w	r3, r3, #7
 8001f72:	b2da      	uxtb	r2, r3
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d101      	bne.n	8001f86 <HAL_PCD_EP_Close+0x6a>
 8001f82:	2302      	movs	r3, #2
 8001f84:	e00e      	b.n	8001fa4 <HAL_PCD_EP_Close+0x88>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2201      	movs	r2, #1
 8001f8a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	68f9      	ldr	r1, [r7, #12]
 8001f94:	4618      	mov	r0, r3
 8001f96:	f003 fddb 	bl	8005b50 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001fa2:	2300      	movs	r3, #0
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3710      	adds	r7, #16
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}

08001fac <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b086      	sub	sp, #24
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	60f8      	str	r0, [r7, #12]
 8001fb4:	607a      	str	r2, [r7, #4]
 8001fb6:	603b      	str	r3, [r7, #0]
 8001fb8:	460b      	mov	r3, r1
 8001fba:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fbc:	7afb      	ldrb	r3, [r7, #11]
 8001fbe:	f003 0207 	and.w	r2, r3, #7
 8001fc2:	4613      	mov	r3, r2
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	4413      	add	r3, r2
 8001fc8:	00db      	lsls	r3, r3, #3
 8001fca:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001fce:	68fa      	ldr	r2, [r7, #12]
 8001fd0:	4413      	add	r3, r2
 8001fd2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	683a      	ldr	r2, [r7, #0]
 8001fde:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fec:	7afb      	ldrb	r3, [r7, #11]
 8001fee:	f003 0307 	and.w	r3, r3, #7
 8001ff2:	b2da      	uxtb	r2, r3
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ff8:	7afb      	ldrb	r3, [r7, #11]
 8001ffa:	f003 0307 	and.w	r3, r3, #7
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d106      	bne.n	8002010 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	6979      	ldr	r1, [r7, #20]
 8002008:	4618      	mov	r0, r3
 800200a:	f003 ff8d 	bl	8005f28 <USB_EPStartXfer>
 800200e:	e005      	b.n	800201c <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	6979      	ldr	r1, [r7, #20]
 8002016:	4618      	mov	r0, r3
 8002018:	f003 ff86 	bl	8005f28 <USB_EPStartXfer>
  }

  return HAL_OK;
 800201c:	2300      	movs	r3, #0
}
 800201e:	4618      	mov	r0, r3
 8002020:	3718      	adds	r7, #24
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}

08002026 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002026:	b480      	push	{r7}
 8002028:	b083      	sub	sp, #12
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
 800202e:	460b      	mov	r3, r1
 8002030:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002032:	78fb      	ldrb	r3, [r7, #3]
 8002034:	f003 0207 	and.w	r2, r3, #7
 8002038:	6879      	ldr	r1, [r7, #4]
 800203a:	4613      	mov	r3, r2
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	4413      	add	r3, r2
 8002040:	00db      	lsls	r3, r3, #3
 8002042:	440b      	add	r3, r1
 8002044:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8002048:	681b      	ldr	r3, [r3, #0]
}
 800204a:	4618      	mov	r0, r3
 800204c:	370c      	adds	r7, #12
 800204e:	46bd      	mov	sp, r7
 8002050:	bc80      	pop	{r7}
 8002052:	4770      	bx	lr

08002054 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b086      	sub	sp, #24
 8002058:	af00      	add	r7, sp, #0
 800205a:	60f8      	str	r0, [r7, #12]
 800205c:	607a      	str	r2, [r7, #4]
 800205e:	603b      	str	r3, [r7, #0]
 8002060:	460b      	mov	r3, r1
 8002062:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002064:	7afb      	ldrb	r3, [r7, #11]
 8002066:	f003 0307 	and.w	r3, r3, #7
 800206a:	1c5a      	adds	r2, r3, #1
 800206c:	4613      	mov	r3, r2
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	4413      	add	r3, r2
 8002072:	00db      	lsls	r3, r3, #3
 8002074:	68fa      	ldr	r2, [r7, #12]
 8002076:	4413      	add	r3, r2
 8002078:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	687a      	ldr	r2, [r7, #4]
 800207e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	683a      	ldr	r2, [r7, #0]
 8002084:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	2201      	movs	r2, #1
 800208a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	683a      	ldr	r2, [r7, #0]
 8002092:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	2200      	movs	r2, #0
 8002098:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	2201      	movs	r2, #1
 800209e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020a0:	7afb      	ldrb	r3, [r7, #11]
 80020a2:	f003 0307 	and.w	r3, r3, #7
 80020a6:	b2da      	uxtb	r2, r3
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80020ac:	7afb      	ldrb	r3, [r7, #11]
 80020ae:	f003 0307 	and.w	r3, r3, #7
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d106      	bne.n	80020c4 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	6979      	ldr	r1, [r7, #20]
 80020bc:	4618      	mov	r0, r3
 80020be:	f003 ff33 	bl	8005f28 <USB_EPStartXfer>
 80020c2:	e005      	b.n	80020d0 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	6979      	ldr	r1, [r7, #20]
 80020ca:	4618      	mov	r0, r3
 80020cc:	f003 ff2c 	bl	8005f28 <USB_EPStartXfer>
  }

  return HAL_OK;
 80020d0:	2300      	movs	r3, #0
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3718      	adds	r7, #24
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}

080020da <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020da:	b580      	push	{r7, lr}
 80020dc:	b084      	sub	sp, #16
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]
 80020e2:	460b      	mov	r3, r1
 80020e4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80020e6:	78fb      	ldrb	r3, [r7, #3]
 80020e8:	f003 0207 	and.w	r2, r3, #7
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d901      	bls.n	80020f8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e04c      	b.n	8002192 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80020f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	da0e      	bge.n	800211e <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002100:	78fb      	ldrb	r3, [r7, #3]
 8002102:	f003 0307 	and.w	r3, r3, #7
 8002106:	1c5a      	adds	r2, r3, #1
 8002108:	4613      	mov	r3, r2
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	4413      	add	r3, r2
 800210e:	00db      	lsls	r3, r3, #3
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	4413      	add	r3, r2
 8002114:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2201      	movs	r2, #1
 800211a:	705a      	strb	r2, [r3, #1]
 800211c:	e00c      	b.n	8002138 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800211e:	78fa      	ldrb	r2, [r7, #3]
 8002120:	4613      	mov	r3, r2
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	4413      	add	r3, r2
 8002126:	00db      	lsls	r3, r3, #3
 8002128:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800212c:	687a      	ldr	r2, [r7, #4]
 800212e:	4413      	add	r3, r2
 8002130:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	2200      	movs	r2, #0
 8002136:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	2201      	movs	r2, #1
 800213c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800213e:	78fb      	ldrb	r3, [r7, #3]
 8002140:	f003 0307 	and.w	r3, r3, #7
 8002144:	b2da      	uxtb	r2, r3
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002150:	2b01      	cmp	r3, #1
 8002152:	d101      	bne.n	8002158 <HAL_PCD_EP_SetStall+0x7e>
 8002154:	2302      	movs	r3, #2
 8002156:	e01c      	b.n	8002192 <HAL_PCD_EP_SetStall+0xb8>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2201      	movs	r2, #1
 800215c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	68f9      	ldr	r1, [r7, #12]
 8002166:	4618      	mov	r0, r3
 8002168:	f005 f9e5 	bl	8007536 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800216c:	78fb      	ldrb	r3, [r7, #3]
 800216e:	f003 0307 	and.w	r3, r3, #7
 8002172:	2b00      	cmp	r3, #0
 8002174:	d108      	bne.n	8002188 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8002180:	4619      	mov	r1, r3
 8002182:	4610      	mov	r0, r2
 8002184:	f005 fb0a 	bl	800779c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2200      	movs	r2, #0
 800218c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002190:	2300      	movs	r3, #0
}
 8002192:	4618      	mov	r0, r3
 8002194:	3710      	adds	r7, #16
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}

0800219a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800219a:	b580      	push	{r7, lr}
 800219c:	b084      	sub	sp, #16
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
 80021a2:	460b      	mov	r3, r1
 80021a4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80021a6:	78fb      	ldrb	r3, [r7, #3]
 80021a8:	f003 020f 	and.w	r2, r3, #15
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d901      	bls.n	80021b8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	e040      	b.n	800223a <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80021b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	da0e      	bge.n	80021de <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021c0:	78fb      	ldrb	r3, [r7, #3]
 80021c2:	f003 0307 	and.w	r3, r3, #7
 80021c6:	1c5a      	adds	r2, r3, #1
 80021c8:	4613      	mov	r3, r2
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	4413      	add	r3, r2
 80021ce:	00db      	lsls	r3, r3, #3
 80021d0:	687a      	ldr	r2, [r7, #4]
 80021d2:	4413      	add	r3, r2
 80021d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2201      	movs	r2, #1
 80021da:	705a      	strb	r2, [r3, #1]
 80021dc:	e00e      	b.n	80021fc <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021de:	78fb      	ldrb	r3, [r7, #3]
 80021e0:	f003 0207 	and.w	r2, r3, #7
 80021e4:	4613      	mov	r3, r2
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	4413      	add	r3, r2
 80021ea:	00db      	lsls	r3, r3, #3
 80021ec:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	4413      	add	r3, r2
 80021f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2200      	movs	r2, #0
 80021fa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2200      	movs	r2, #0
 8002200:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002202:	78fb      	ldrb	r3, [r7, #3]
 8002204:	f003 0307 	and.w	r3, r3, #7
 8002208:	b2da      	uxtb	r2, r3
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002214:	2b01      	cmp	r3, #1
 8002216:	d101      	bne.n	800221c <HAL_PCD_EP_ClrStall+0x82>
 8002218:	2302      	movs	r3, #2
 800221a:	e00e      	b.n	800223a <HAL_PCD_EP_ClrStall+0xa0>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2201      	movs	r2, #1
 8002220:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	68f9      	ldr	r1, [r7, #12]
 800222a:	4618      	mov	r0, r3
 800222c:	f005 f9d3 	bl	80075d6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2200      	movs	r2, #0
 8002234:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002238:	2300      	movs	r3, #0
}
 800223a:	4618      	mov	r0, r3
 800223c:	3710      	adds	r7, #16
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}

08002242 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002242:	b580      	push	{r7, lr}
 8002244:	b08e      	sub	sp, #56	; 0x38
 8002246:	af00      	add	r7, sp, #0
 8002248:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800224a:	e2ec      	b.n	8002826 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002254:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002256:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002258:	b2db      	uxtb	r3, r3
 800225a:	f003 030f 	and.w	r3, r3, #15
 800225e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8002262:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002266:	2b00      	cmp	r3, #0
 8002268:	f040 8161 	bne.w	800252e <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800226c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800226e:	f003 0310 	and.w	r3, r3, #16
 8002272:	2b00      	cmp	r3, #0
 8002274:	d152      	bne.n	800231c <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	881b      	ldrh	r3, [r3, #0]
 800227c:	b29b      	uxth	r3, r3
 800227e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002282:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002286:	857b      	strh	r3, [r7, #42]	; 0x2a
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800228e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002292:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002296:	b29b      	uxth	r3, r3
 8002298:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	3328      	adds	r3, #40	; 0x28
 800229e:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022a8:	b29b      	uxth	r3, r3
 80022aa:	461a      	mov	r2, r3
 80022ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	00db      	lsls	r3, r3, #3
 80022b2:	4413      	add	r3, r2
 80022b4:	3302      	adds	r3, #2
 80022b6:	005b      	lsls	r3, r3, #1
 80022b8:	687a      	ldr	r2, [r7, #4]
 80022ba:	6812      	ldr	r2, [r2, #0]
 80022bc:	4413      	add	r3, r2
 80022be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022c2:	881b      	ldrh	r3, [r3, #0]
 80022c4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80022c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ca:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80022cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ce:	695a      	ldr	r2, [r3, #20]
 80022d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d2:	69db      	ldr	r3, [r3, #28]
 80022d4:	441a      	add	r2, r3
 80022d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d8:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80022da:	2100      	movs	r1, #0
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	f008 fa84 	bl	800a7ea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	f000 829b 	beq.w	8002826 <PCD_EP_ISR_Handler+0x5e4>
 80022f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f2:	699b      	ldr	r3, [r3, #24]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	f040 8296 	bne.w	8002826 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8002304:	b2d2      	uxtb	r2, r2
 8002306:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800230a:	b2d2      	uxtb	r2, r2
 800230c:	b292      	uxth	r2, r2
 800230e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2200      	movs	r2, #0
 8002316:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800231a:	e284      	b.n	8002826 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002322:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	881b      	ldrh	r3, [r3, #0]
 800232a:	847b      	strh	r3, [r7, #34]	; 0x22

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800232c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800232e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002332:	2b00      	cmp	r3, #0
 8002334:	d034      	beq.n	80023a0 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800233e:	b29b      	uxth	r3, r3
 8002340:	461a      	mov	r2, r3
 8002342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	00db      	lsls	r3, r3, #3
 8002348:	4413      	add	r3, r2
 800234a:	3306      	adds	r3, #6
 800234c:	005b      	lsls	r3, r3, #1
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	6812      	ldr	r2, [r2, #0]
 8002352:	4413      	add	r3, r2
 8002354:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002358:	881b      	ldrh	r3, [r3, #0]
 800235a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800235e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002360:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6818      	ldr	r0, [r3, #0]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800236c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002372:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002374:	b29b      	uxth	r3, r3
 8002376:	f005 fa60 	bl	800783a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	881b      	ldrh	r3, [r3, #0]
 8002380:	b29a      	uxth	r2, r3
 8002382:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002386:	4013      	ands	r3, r2
 8002388:	843b      	strh	r3, [r7, #32]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	8c3a      	ldrh	r2, [r7, #32]
 8002390:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002394:	b292      	uxth	r2, r2
 8002396:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f008 f9f9 	bl	800a790 <HAL_PCD_SetupStageCallback>
 800239e:	e242      	b.n	8002826 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80023a0:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	f280 823e 	bge.w	8002826 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	881b      	ldrh	r3, [r3, #0]
 80023b0:	b29a      	uxth	r2, r3
 80023b2:	f640 738f 	movw	r3, #3983	; 0xf8f
 80023b6:	4013      	ands	r3, r2
 80023b8:	83fb      	strh	r3, [r7, #30]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	8bfa      	ldrh	r2, [r7, #30]
 80023c0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80023c4:	b292      	uxth	r2, r2
 80023c6:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023d0:	b29b      	uxth	r3, r3
 80023d2:	461a      	mov	r2, r3
 80023d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	00db      	lsls	r3, r3, #3
 80023da:	4413      	add	r3, r2
 80023dc:	3306      	adds	r3, #6
 80023de:	005b      	lsls	r3, r3, #1
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	6812      	ldr	r2, [r2, #0]
 80023e4:	4413      	add	r3, r2
 80023e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80023ea:	881b      	ldrh	r3, [r3, #0]
 80023ec:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80023f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f2:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80023f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f6:	69db      	ldr	r3, [r3, #28]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d019      	beq.n	8002430 <PCD_EP_ISR_Handler+0x1ee>
 80023fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fe:	695b      	ldr	r3, [r3, #20]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d015      	beq.n	8002430 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6818      	ldr	r0, [r3, #0]
 8002408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240a:	6959      	ldr	r1, [r3, #20]
 800240c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002412:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002414:	b29b      	uxth	r3, r3
 8002416:	f005 fa10 	bl	800783a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800241a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241c:	695a      	ldr	r2, [r3, #20]
 800241e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002420:	69db      	ldr	r3, [r3, #28]
 8002422:	441a      	add	r2, r3
 8002424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002426:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002428:	2100      	movs	r1, #0
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f008 f9c2 	bl	800a7b4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	881b      	ldrh	r3, [r3, #0]
 8002436:	b29b      	uxth	r3, r3
 8002438:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800243c:	2b00      	cmp	r3, #0
 800243e:	f040 81f2 	bne.w	8002826 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	61bb      	str	r3, [r7, #24]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002450:	b29b      	uxth	r3, r3
 8002452:	461a      	mov	r2, r3
 8002454:	69bb      	ldr	r3, [r7, #24]
 8002456:	4413      	add	r3, r2
 8002458:	61bb      	str	r3, [r7, #24]
 800245a:	69bb      	ldr	r3, [r7, #24]
 800245c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002460:	617b      	str	r3, [r7, #20]
 8002462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002464:	691b      	ldr	r3, [r3, #16]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d112      	bne.n	8002490 <PCD_EP_ISR_Handler+0x24e>
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	881b      	ldrh	r3, [r3, #0]
 800246e:	b29b      	uxth	r3, r3
 8002470:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002474:	b29a      	uxth	r2, r3
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	801a      	strh	r2, [r3, #0]
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	881b      	ldrh	r3, [r3, #0]
 800247e:	b29b      	uxth	r3, r3
 8002480:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002484:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002488:	b29a      	uxth	r2, r3
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	801a      	strh	r2, [r3, #0]
 800248e:	e02f      	b.n	80024f0 <PCD_EP_ISR_Handler+0x2ae>
 8002490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002492:	691b      	ldr	r3, [r3, #16]
 8002494:	2b3e      	cmp	r3, #62	; 0x3e
 8002496:	d813      	bhi.n	80024c0 <PCD_EP_ISR_Handler+0x27e>
 8002498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249a:	691b      	ldr	r3, [r3, #16]
 800249c:	085b      	lsrs	r3, r3, #1
 800249e:	633b      	str	r3, [r7, #48]	; 0x30
 80024a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a2:	691b      	ldr	r3, [r3, #16]
 80024a4:	f003 0301 	and.w	r3, r3, #1
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d002      	beq.n	80024b2 <PCD_EP_ISR_Handler+0x270>
 80024ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ae:	3301      	adds	r3, #1
 80024b0:	633b      	str	r3, [r7, #48]	; 0x30
 80024b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024b4:	b29b      	uxth	r3, r3
 80024b6:	029b      	lsls	r3, r3, #10
 80024b8:	b29a      	uxth	r2, r3
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	801a      	strh	r2, [r3, #0]
 80024be:	e017      	b.n	80024f0 <PCD_EP_ISR_Handler+0x2ae>
 80024c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c2:	691b      	ldr	r3, [r3, #16]
 80024c4:	095b      	lsrs	r3, r3, #5
 80024c6:	633b      	str	r3, [r7, #48]	; 0x30
 80024c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ca:	691b      	ldr	r3, [r3, #16]
 80024cc:	f003 031f 	and.w	r3, r3, #31
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d102      	bne.n	80024da <PCD_EP_ISR_Handler+0x298>
 80024d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024d6:	3b01      	subs	r3, #1
 80024d8:	633b      	str	r3, [r7, #48]	; 0x30
 80024da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024dc:	b29b      	uxth	r3, r3
 80024de:	029b      	lsls	r3, r3, #10
 80024e0:	b29b      	uxth	r3, r3
 80024e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024ea:	b29a      	uxth	r2, r3
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	881b      	ldrh	r3, [r3, #0]
 80024f6:	b29b      	uxth	r3, r3
 80024f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80024fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002500:	827b      	strh	r3, [r7, #18]
 8002502:	8a7b      	ldrh	r3, [r7, #18]
 8002504:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002508:	827b      	strh	r3, [r7, #18]
 800250a:	8a7b      	ldrh	r3, [r7, #18]
 800250c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002510:	827b      	strh	r3, [r7, #18]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	8a7b      	ldrh	r3, [r7, #18]
 8002518:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800251c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002520:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002524:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002528:	b29b      	uxth	r3, r3
 800252a:	8013      	strh	r3, [r2, #0]
 800252c:	e17b      	b.n	8002826 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	461a      	mov	r2, r3
 8002534:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	4413      	add	r3, r2
 800253c:	881b      	ldrh	r3, [r3, #0]
 800253e:	847b      	strh	r3, [r7, #34]	; 0x22

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002540:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8002544:	2b00      	cmp	r3, #0
 8002546:	f280 80ea 	bge.w	800271e <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	461a      	mov	r2, r3
 8002550:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	4413      	add	r3, r2
 8002558:	881b      	ldrh	r3, [r3, #0]
 800255a:	b29a      	uxth	r2, r3
 800255c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002560:	4013      	ands	r3, r2
 8002562:	823b      	strh	r3, [r7, #16]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	461a      	mov	r2, r3
 800256a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	4413      	add	r3, r2
 8002572:	8a3a      	ldrh	r2, [r7, #16]
 8002574:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002578:	b292      	uxth	r2, r2
 800257a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800257c:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002580:	4613      	mov	r3, r2
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	4413      	add	r3, r2
 8002586:	00db      	lsls	r3, r3, #3
 8002588:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	4413      	add	r3, r2
 8002590:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002594:	7b1b      	ldrb	r3, [r3, #12]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d122      	bne.n	80025e0 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	461a      	mov	r2, r3
 80025a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	00db      	lsls	r3, r3, #3
 80025ac:	4413      	add	r3, r2
 80025ae:	3306      	adds	r3, #6
 80025b0:	005b      	lsls	r3, r3, #1
 80025b2:	687a      	ldr	r2, [r7, #4]
 80025b4:	6812      	ldr	r2, [r2, #0]
 80025b6:	4413      	add	r3, r2
 80025b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80025bc:	881b      	ldrh	r3, [r3, #0]
 80025be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025c2:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80025c4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	f000 8087 	beq.w	80026da <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6818      	ldr	r0, [r3, #0]
 80025d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d2:	6959      	ldr	r1, [r3, #20]
 80025d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d6:	88da      	ldrh	r2, [r3, #6]
 80025d8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80025da:	f005 f92e 	bl	800783a <USB_ReadPMA>
 80025de:	e07c      	b.n	80026da <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80025e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e2:	78db      	ldrb	r3, [r3, #3]
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d108      	bne.n	80025fa <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80025e8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80025ea:	461a      	mov	r2, r3
 80025ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f000 f927 	bl	8002842 <HAL_PCD_EP_DB_Receive>
 80025f4:	4603      	mov	r3, r0
 80025f6:	86fb      	strh	r3, [r7, #54]	; 0x36
 80025f8:	e06f      	b.n	80026da <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	461a      	mov	r2, r3
 8002600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	4413      	add	r3, r2
 8002608:	881b      	ldrh	r3, [r3, #0]
 800260a:	b29b      	uxth	r3, r3
 800260c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002610:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002614:	81fb      	strh	r3, [r7, #14]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	461a      	mov	r2, r3
 800261c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	441a      	add	r2, r3
 8002624:	89fb      	ldrh	r3, [r7, #14]
 8002626:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800262a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800262e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002632:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002636:	b29b      	uxth	r3, r3
 8002638:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	461a      	mov	r2, r3
 8002640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	4413      	add	r3, r2
 8002648:	881b      	ldrh	r3, [r3, #0]
 800264a:	b29b      	uxth	r3, r3
 800264c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002650:	2b00      	cmp	r3, #0
 8002652:	d021      	beq.n	8002698 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800265c:	b29b      	uxth	r3, r3
 800265e:	461a      	mov	r2, r3
 8002660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	00db      	lsls	r3, r3, #3
 8002666:	4413      	add	r3, r2
 8002668:	3302      	adds	r3, #2
 800266a:	005b      	lsls	r3, r3, #1
 800266c:	687a      	ldr	r2, [r7, #4]
 800266e:	6812      	ldr	r2, [r2, #0]
 8002670:	4413      	add	r3, r2
 8002672:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002676:	881b      	ldrh	r3, [r3, #0]
 8002678:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800267c:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800267e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002680:	2b00      	cmp	r3, #0
 8002682:	d02a      	beq.n	80026da <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6818      	ldr	r0, [r3, #0]
 8002688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268a:	6959      	ldr	r1, [r3, #20]
 800268c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268e:	891a      	ldrh	r2, [r3, #8]
 8002690:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002692:	f005 f8d2 	bl	800783a <USB_ReadPMA>
 8002696:	e020      	b.n	80026da <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	461a      	mov	r2, r3
 80026a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	00db      	lsls	r3, r3, #3
 80026aa:	4413      	add	r3, r2
 80026ac:	3306      	adds	r3, #6
 80026ae:	005b      	lsls	r3, r3, #1
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	6812      	ldr	r2, [r2, #0]
 80026b4:	4413      	add	r3, r2
 80026b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80026ba:	881b      	ldrh	r3, [r3, #0]
 80026bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026c0:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80026c2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d008      	beq.n	80026da <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6818      	ldr	r0, [r3, #0]
 80026cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ce:	6959      	ldr	r1, [r3, #20]
 80026d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d2:	895a      	ldrh	r2, [r3, #10]
 80026d4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80026d6:	f005 f8b0 	bl	800783a <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80026da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026dc:	69da      	ldr	r2, [r3, #28]
 80026de:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80026e0:	441a      	add	r2, r3
 80026e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80026e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e8:	695a      	ldr	r2, [r3, #20]
 80026ea:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80026ec:	441a      	add	r2, r3
 80026ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f0:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80026f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f4:	699b      	ldr	r3, [r3, #24]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d004      	beq.n	8002704 <PCD_EP_ISR_Handler+0x4c2>
 80026fa:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80026fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fe:	691b      	ldr	r3, [r3, #16]
 8002700:	429a      	cmp	r2, r3
 8002702:	d206      	bcs.n	8002712 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	4619      	mov	r1, r3
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f008 f852 	bl	800a7b4 <HAL_PCD_DataOutStageCallback>
 8002710:	e005      	b.n	800271e <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002718:	4618      	mov	r0, r3
 800271a:	f003 fc05 	bl	8005f28 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800271e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002720:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002724:	2b00      	cmp	r3, #0
 8002726:	d07e      	beq.n	8002826 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8002728:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800272c:	1c5a      	adds	r2, r3, #1
 800272e:	4613      	mov	r3, r2
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	4413      	add	r3, r2
 8002734:	00db      	lsls	r3, r3, #3
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	4413      	add	r3, r2
 800273a:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	461a      	mov	r2, r3
 8002742:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	4413      	add	r3, r2
 800274a:	881b      	ldrh	r3, [r3, #0]
 800274c:	b29b      	uxth	r3, r3
 800274e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002752:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002756:	81bb      	strh	r3, [r7, #12]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	461a      	mov	r2, r3
 800275e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	441a      	add	r2, r3
 8002766:	89bb      	ldrh	r3, [r7, #12]
 8002768:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800276c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002770:	b29b      	uxth	r3, r3
 8002772:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002776:	78db      	ldrb	r3, [r3, #3]
 8002778:	2b03      	cmp	r3, #3
 800277a:	d00c      	beq.n	8002796 <PCD_EP_ISR_Handler+0x554>
 800277c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277e:	78db      	ldrb	r3, [r3, #3]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d008      	beq.n	8002796 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002786:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002788:	2b02      	cmp	r3, #2
 800278a:	d146      	bne.n	800281a <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800278c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800278e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002792:	2b00      	cmp	r3, #0
 8002794:	d141      	bne.n	800281a <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800279e:	b29b      	uxth	r3, r3
 80027a0:	461a      	mov	r2, r3
 80027a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	00db      	lsls	r3, r3, #3
 80027a8:	4413      	add	r3, r2
 80027aa:	3302      	adds	r3, #2
 80027ac:	005b      	lsls	r3, r3, #1
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	6812      	ldr	r2, [r2, #0]
 80027b2:	4413      	add	r3, r2
 80027b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80027b8:	881b      	ldrh	r3, [r3, #0]
 80027ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027be:	817b      	strh	r3, [r7, #10]

          if (ep->xfer_len > TxByteNbre)
 80027c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c2:	699a      	ldr	r2, [r3, #24]
 80027c4:	897b      	ldrh	r3, [r7, #10]
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d906      	bls.n	80027d8 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 80027ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027cc:	699a      	ldr	r2, [r3, #24]
 80027ce:	897b      	ldrh	r3, [r7, #10]
 80027d0:	1ad2      	subs	r2, r2, r3
 80027d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d4:	619a      	str	r2, [r3, #24]
 80027d6:	e002      	b.n	80027de <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 80027d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027da:	2200      	movs	r2, #0
 80027dc:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80027de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e0:	699b      	ldr	r3, [r3, #24]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d106      	bne.n	80027f4 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80027e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	4619      	mov	r1, r3
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	f007 fffc 	bl	800a7ea <HAL_PCD_DataInStageCallback>
 80027f2:	e018      	b.n	8002826 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80027f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f6:	695a      	ldr	r2, [r3, #20]
 80027f8:	897b      	ldrh	r3, [r7, #10]
 80027fa:	441a      	add	r2, r3
 80027fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fe:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8002800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002802:	69da      	ldr	r2, [r3, #28]
 8002804:	897b      	ldrh	r3, [r7, #10]
 8002806:	441a      	add	r2, r3
 8002808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280a:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002812:	4618      	mov	r0, r3
 8002814:	f003 fb88 	bl	8005f28 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002818:	e005      	b.n	8002826 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800281a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800281c:	461a      	mov	r2, r3
 800281e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	f000 f91b 	bl	8002a5c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800282e:	b29b      	uxth	r3, r3
 8002830:	b21b      	sxth	r3, r3
 8002832:	2b00      	cmp	r3, #0
 8002834:	f6ff ad0a 	blt.w	800224c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002838:	2300      	movs	r3, #0
}
 800283a:	4618      	mov	r0, r3
 800283c:	3738      	adds	r7, #56	; 0x38
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}

08002842 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002842:	b580      	push	{r7, lr}
 8002844:	b088      	sub	sp, #32
 8002846:	af00      	add	r7, sp, #0
 8002848:	60f8      	str	r0, [r7, #12]
 800284a:	60b9      	str	r1, [r7, #8]
 800284c:	4613      	mov	r3, r2
 800284e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002850:	88fb      	ldrh	r3, [r7, #6]
 8002852:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d07e      	beq.n	8002958 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002862:	b29b      	uxth	r3, r3
 8002864:	461a      	mov	r2, r3
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	00db      	lsls	r3, r3, #3
 800286c:	4413      	add	r3, r2
 800286e:	3302      	adds	r3, #2
 8002870:	005b      	lsls	r3, r3, #1
 8002872:	68fa      	ldr	r2, [r7, #12]
 8002874:	6812      	ldr	r2, [r2, #0]
 8002876:	4413      	add	r3, r2
 8002878:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800287c:	881b      	ldrh	r3, [r3, #0]
 800287e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002882:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= count)
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	699a      	ldr	r2, [r3, #24]
 8002888:	8bfb      	ldrh	r3, [r7, #30]
 800288a:	429a      	cmp	r2, r3
 800288c:	d306      	bcc.n	800289c <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	699a      	ldr	r2, [r3, #24]
 8002892:	8bfb      	ldrh	r3, [r7, #30]
 8002894:	1ad2      	subs	r2, r2, r3
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	619a      	str	r2, [r3, #24]
 800289a:	e002      	b.n	80028a2 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	2200      	movs	r2, #0
 80028a0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	699b      	ldr	r3, [r3, #24]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d123      	bne.n	80028f2 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	461a      	mov	r2, r3
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	4413      	add	r3, r2
 80028b8:	881b      	ldrh	r3, [r3, #0]
 80028ba:	b29b      	uxth	r3, r3
 80028bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80028c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028c4:	83bb      	strh	r3, [r7, #28]
 80028c6:	8bbb      	ldrh	r3, [r7, #28]
 80028c8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80028cc:	83bb      	strh	r3, [r7, #28]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	461a      	mov	r2, r3
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	781b      	ldrb	r3, [r3, #0]
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	441a      	add	r2, r3
 80028dc:	8bbb      	ldrh	r3, [r7, #28]
 80028de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80028e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80028e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028ee:	b29b      	uxth	r3, r3
 80028f0:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80028f2:	88fb      	ldrh	r3, [r7, #6]
 80028f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d01f      	beq.n	800293c <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	461a      	mov	r2, r3
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	781b      	ldrb	r3, [r3, #0]
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	4413      	add	r3, r2
 800290a:	881b      	ldrh	r3, [r3, #0]
 800290c:	b29b      	uxth	r3, r3
 800290e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002912:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002916:	837b      	strh	r3, [r7, #26]
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	461a      	mov	r2, r3
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	441a      	add	r2, r3
 8002926:	8b7b      	ldrh	r3, [r7, #26]
 8002928:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800292c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002930:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002934:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002938:	b29b      	uxth	r3, r3
 800293a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800293c:	8bfb      	ldrh	r3, [r7, #30]
 800293e:	2b00      	cmp	r3, #0
 8002940:	f000 8087 	beq.w	8002a52 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	6818      	ldr	r0, [r3, #0]
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	6959      	ldr	r1, [r3, #20]
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	891a      	ldrh	r2, [r3, #8]
 8002950:	8bfb      	ldrh	r3, [r7, #30]
 8002952:	f004 ff72 	bl	800783a <USB_ReadPMA>
 8002956:	e07c      	b.n	8002a52 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002960:	b29b      	uxth	r3, r3
 8002962:	461a      	mov	r2, r3
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	00db      	lsls	r3, r3, #3
 800296a:	4413      	add	r3, r2
 800296c:	3306      	adds	r3, #6
 800296e:	005b      	lsls	r3, r3, #1
 8002970:	68fa      	ldr	r2, [r7, #12]
 8002972:	6812      	ldr	r2, [r2, #0]
 8002974:	4413      	add	r3, r2
 8002976:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800297a:	881b      	ldrh	r3, [r3, #0]
 800297c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002980:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= count)
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	699a      	ldr	r2, [r3, #24]
 8002986:	8bfb      	ldrh	r3, [r7, #30]
 8002988:	429a      	cmp	r2, r3
 800298a:	d306      	bcc.n	800299a <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	699a      	ldr	r2, [r3, #24]
 8002990:	8bfb      	ldrh	r3, [r7, #30]
 8002992:	1ad2      	subs	r2, r2, r3
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	619a      	str	r2, [r3, #24]
 8002998:	e002      	b.n	80029a0 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	2200      	movs	r2, #0
 800299e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	699b      	ldr	r3, [r3, #24]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d123      	bne.n	80029f0 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	461a      	mov	r2, r3
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	4413      	add	r3, r2
 80029b6:	881b      	ldrh	r3, [r3, #0]
 80029b8:	b29b      	uxth	r3, r3
 80029ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80029be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029c2:	833b      	strh	r3, [r7, #24]
 80029c4:	8b3b      	ldrh	r3, [r7, #24]
 80029c6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80029ca:	833b      	strh	r3, [r7, #24]
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	461a      	mov	r2, r3
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	781b      	ldrb	r3, [r3, #0]
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	441a      	add	r2, r3
 80029da:	8b3b      	ldrh	r3, [r7, #24]
 80029dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80029e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80029e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80029f0:	88fb      	ldrh	r3, [r7, #6]
 80029f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d11f      	bne.n	8002a3a <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	461a      	mov	r2, r3
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	4413      	add	r3, r2
 8002a08:	881b      	ldrh	r3, [r3, #0]
 8002a0a:	b29b      	uxth	r3, r3
 8002a0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a14:	82fb      	strh	r3, [r7, #22]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	441a      	add	r2, r3
 8002a24:	8afb      	ldrh	r3, [r7, #22]
 8002a26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a32:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002a3a:	8bfb      	ldrh	r3, [r7, #30]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d008      	beq.n	8002a52 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	6818      	ldr	r0, [r3, #0]
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	6959      	ldr	r1, [r3, #20]
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	895a      	ldrh	r2, [r3, #10]
 8002a4c:	8bfb      	ldrh	r3, [r7, #30]
 8002a4e:	f004 fef4 	bl	800783a <USB_ReadPMA>
    }
  }

  return count;
 8002a52:	8bfb      	ldrh	r3, [r7, #30]
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3720      	adds	r7, #32
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}

08002a5c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b0a4      	sub	sp, #144	; 0x90
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	60f8      	str	r0, [r7, #12]
 8002a64:	60b9      	str	r1, [r7, #8]
 8002a66:	4613      	mov	r3, r2
 8002a68:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002a6a:	88fb      	ldrh	r3, [r7, #6]
 8002a6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	f000 81dd 	beq.w	8002e30 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	461a      	mov	r2, r3
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	00db      	lsls	r3, r3, #3
 8002a88:	4413      	add	r3, r2
 8002a8a:	3302      	adds	r3, #2
 8002a8c:	005b      	lsls	r3, r3, #1
 8002a8e:	68fa      	ldr	r2, [r7, #12]
 8002a90:	6812      	ldr	r2, [r2, #0]
 8002a92:	4413      	add	r3, r2
 8002a94:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a98:	881b      	ldrh	r3, [r3, #0]
 8002a9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a9e:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82

    if (ep->xfer_len > TxByteNbre)
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	699a      	ldr	r2, [r3, #24]
 8002aa6:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d907      	bls.n	8002abe <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	699a      	ldr	r2, [r3, #24]
 8002ab2:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8002ab6:	1ad2      	subs	r2, r2, r3
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	619a      	str	r2, [r3, #24]
 8002abc:	e002      	b.n	8002ac4 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	699b      	ldr	r3, [r3, #24]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	f040 80bb 	bne.w	8002c44 <HAL_PCD_EP_DB_Transmit+0x1e8>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	785b      	ldrb	r3, [r3, #1]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d126      	bne.n	8002b24 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ae4:	b29b      	uxth	r3, r3
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002aea:	4413      	add	r3, r2
 8002aec:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	011a      	lsls	r2, r3, #4
 8002af4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002af6:	4413      	add	r3, r2
 8002af8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002afc:	67bb      	str	r3, [r7, #120]	; 0x78
 8002afe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b00:	881b      	ldrh	r3, [r3, #0]
 8002b02:	b29b      	uxth	r3, r3
 8002b04:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002b08:	b29a      	uxth	r2, r3
 8002b0a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b0c:	801a      	strh	r2, [r3, #0]
 8002b0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b10:	881b      	ldrh	r3, [r3, #0]
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b1c:	b29a      	uxth	r2, r3
 8002b1e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b20:	801a      	strh	r2, [r3, #0]
 8002b22:	e01a      	b.n	8002b5a <HAL_PCD_EP_DB_Transmit+0xfe>
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	785b      	ldrb	r3, [r3, #1]
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d116      	bne.n	8002b5a <HAL_PCD_EP_DB_Transmit+0xfe>
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	677b      	str	r3, [r7, #116]	; 0x74
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b3a:	b29b      	uxth	r3, r3
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b40:	4413      	add	r3, r2
 8002b42:	677b      	str	r3, [r7, #116]	; 0x74
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	011a      	lsls	r2, r3, #4
 8002b4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b4c:	4413      	add	r3, r2
 8002b4e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002b52:	673b      	str	r3, [r7, #112]	; 0x70
 8002b54:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b56:	2200      	movs	r2, #0
 8002b58:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	785b      	ldrb	r3, [r3, #1]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d126      	bne.n	8002bb6 <HAL_PCD_EP_DB_Transmit+0x15a>
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	66bb      	str	r3, [r7, #104]	; 0x68
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	461a      	mov	r2, r3
 8002b7a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b7c:	4413      	add	r3, r2
 8002b7e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	011a      	lsls	r2, r3, #4
 8002b86:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b88:	4413      	add	r3, r2
 8002b8a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002b8e:	667b      	str	r3, [r7, #100]	; 0x64
 8002b90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b92:	881b      	ldrh	r3, [r3, #0]
 8002b94:	b29b      	uxth	r3, r3
 8002b96:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002b9a:	b29a      	uxth	r2, r3
 8002b9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b9e:	801a      	strh	r2, [r3, #0]
 8002ba0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ba2:	881b      	ldrh	r3, [r3, #0]
 8002ba4:	b29b      	uxth	r3, r3
 8002ba6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002baa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002bae:	b29a      	uxth	r2, r3
 8002bb0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002bb2:	801a      	strh	r2, [r3, #0]
 8002bb4:	e017      	b.n	8002be6 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	785b      	ldrb	r3, [r3, #1]
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d113      	bne.n	8002be6 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bc6:	b29b      	uxth	r3, r3
 8002bc8:	461a      	mov	r2, r3
 8002bca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bcc:	4413      	add	r3, r2
 8002bce:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	011a      	lsls	r2, r3, #4
 8002bd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bd8:	4413      	add	r3, r2
 8002bda:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002bde:	663b      	str	r3, [r7, #96]	; 0x60
 8002be0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002be2:	2200      	movs	r2, #0
 8002be4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	4619      	mov	r1, r3
 8002bec:	68f8      	ldr	r0, [r7, #12]
 8002bee:	f007 fdfc 	bl	800a7ea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002bf2:	88fb      	ldrh	r3, [r7, #6]
 8002bf4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	f000 82f1 	beq.w	80031e0 <HAL_PCD_EP_DB_Transmit+0x784>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	461a      	mov	r2, r3
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	4413      	add	r3, r2
 8002c0c:	881b      	ldrh	r3, [r3, #0]
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c18:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	461a      	mov	r2, r3
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	441a      	add	r2, r3
 8002c2a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8002c2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c36:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c3e:	b29b      	uxth	r3, r3
 8002c40:	8013      	strh	r3, [r2, #0]
 8002c42:	e2cd      	b.n	80031e0 <HAL_PCD_EP_DB_Transmit+0x784>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002c44:	88fb      	ldrh	r3, [r7, #6]
 8002c46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d021      	beq.n	8002c92 <HAL_PCD_EP_DB_Transmit+0x236>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	461a      	mov	r2, r3
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	4413      	add	r3, r2
 8002c5c:	881b      	ldrh	r3, [r3, #0]
 8002c5e:	b29b      	uxth	r3, r3
 8002c60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c68:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	461a      	mov	r2, r3
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	441a      	add	r2, r3
 8002c7a:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8002c7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c86:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	f040 82a1 	bne.w	80031e0 <HAL_PCD_EP_DB_Transmit+0x784>
      {
        ep->xfer_buff += TxByteNbre;
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	695a      	ldr	r2, [r3, #20]
 8002ca2:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8002ca6:	441a      	add	r2, r3
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	69da      	ldr	r2, [r3, #28]
 8002cb0:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8002cb4:	441a      	add	r2, r3
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	6a1a      	ldr	r2, [r3, #32]
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	691b      	ldr	r3, [r3, #16]
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d30b      	bcc.n	8002cde <HAL_PCD_EP_DB_Transmit+0x282>
        {
          len = ep->maxpacket;
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	691b      	ldr	r3, [r3, #16]
 8002cca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	6a1a      	ldr	r2, [r3, #32]
 8002cd2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002cd6:	1ad2      	subs	r2, r2, r3
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	621a      	str	r2, [r3, #32]
 8002cdc:	e017      	b.n	8002d0e <HAL_PCD_EP_DB_Transmit+0x2b2>
        }
        else if (ep->xfer_len_db == 0U)
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	6a1b      	ldr	r3, [r3, #32]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d108      	bne.n	8002cf8 <HAL_PCD_EP_DB_Transmit+0x29c>
        {
          len = TxByteNbre;
 8002ce6:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8002cea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002cf6:	e00a      	b.n	8002d0e <HAL_PCD_EP_DB_Transmit+0x2b2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	6a1b      	ldr	r3, [r3, #32]
 8002d04:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	785b      	ldrb	r3, [r3, #1]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d163      	bne.n	8002dde <HAL_PCD_EP_DB_Transmit+0x382>
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	65bb      	str	r3, [r7, #88]	; 0x58
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d24:	b29b      	uxth	r3, r3
 8002d26:	461a      	mov	r2, r3
 8002d28:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d2a:	4413      	add	r3, r2
 8002d2c:	65bb      	str	r3, [r7, #88]	; 0x58
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	011a      	lsls	r2, r3, #4
 8002d34:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d36:	4413      	add	r3, r2
 8002d38:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002d3c:	657b      	str	r3, [r7, #84]	; 0x54
 8002d3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d112      	bne.n	8002d6c <HAL_PCD_EP_DB_Transmit+0x310>
 8002d46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d48:	881b      	ldrh	r3, [r3, #0]
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002d50:	b29a      	uxth	r2, r3
 8002d52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d54:	801a      	strh	r2, [r3, #0]
 8002d56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d58:	881b      	ldrh	r3, [r3, #0]
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d64:	b29a      	uxth	r2, r3
 8002d66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d68:	801a      	strh	r2, [r3, #0]
 8002d6a:	e055      	b.n	8002e18 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002d6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d70:	2b3e      	cmp	r3, #62	; 0x3e
 8002d72:	d817      	bhi.n	8002da4 <HAL_PCD_EP_DB_Transmit+0x348>
 8002d74:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d78:	085b      	lsrs	r3, r3, #1
 8002d7a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002d7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d82:	f003 0301 	and.w	r3, r3, #1
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d004      	beq.n	8002d94 <HAL_PCD_EP_DB_Transmit+0x338>
 8002d8a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d8e:	3301      	adds	r3, #1
 8002d90:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002d94:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d98:	b29b      	uxth	r3, r3
 8002d9a:	029b      	lsls	r3, r3, #10
 8002d9c:	b29a      	uxth	r2, r3
 8002d9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002da0:	801a      	strh	r2, [r3, #0]
 8002da2:	e039      	b.n	8002e18 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002da4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002da8:	095b      	lsrs	r3, r3, #5
 8002daa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002dae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002db2:	f003 031f 	and.w	r3, r3, #31
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d104      	bne.n	8002dc4 <HAL_PCD_EP_DB_Transmit+0x368>
 8002dba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002dbe:	3b01      	subs	r3, #1
 8002dc0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002dc4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	029b      	lsls	r3, r3, #10
 8002dcc:	b29b      	uxth	r3, r3
 8002dce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002dd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002dd6:	b29a      	uxth	r2, r3
 8002dd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002dda:	801a      	strh	r2, [r3, #0]
 8002ddc:	e01c      	b.n	8002e18 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	785b      	ldrb	r3, [r3, #1]
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d118      	bne.n	8002e18 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	653b      	str	r3, [r7, #80]	; 0x50
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002df4:	b29b      	uxth	r3, r3
 8002df6:	461a      	mov	r2, r3
 8002df8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002dfa:	4413      	add	r3, r2
 8002dfc:	653b      	str	r3, [r7, #80]	; 0x50
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	781b      	ldrb	r3, [r3, #0]
 8002e02:	011a      	lsls	r2, r3, #4
 8002e04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e06:	4413      	add	r3, r2
 8002e08:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002e0c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e12:	b29a      	uxth	r2, r3
 8002e14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e16:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6818      	ldr	r0, [r3, #0]
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	6959      	ldr	r1, [r3, #20]
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	891a      	ldrh	r2, [r3, #8]
 8002e24:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e28:	b29b      	uxth	r3, r3
 8002e2a:	f004 fcc2 	bl	80077b2 <USB_WritePMA>
 8002e2e:	e1d7      	b.n	80031e0 <HAL_PCD_EP_DB_Transmit+0x784>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	00db      	lsls	r3, r3, #3
 8002e42:	4413      	add	r3, r2
 8002e44:	3306      	adds	r3, #6
 8002e46:	005b      	lsls	r3, r3, #1
 8002e48:	68fa      	ldr	r2, [r7, #12]
 8002e4a:	6812      	ldr	r2, [r2, #0]
 8002e4c:	4413      	add	r3, r2
 8002e4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e52:	881b      	ldrh	r3, [r3, #0]
 8002e54:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e58:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82

    if (ep->xfer_len >= TxByteNbre)
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	699a      	ldr	r2, [r3, #24]
 8002e60:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d307      	bcc.n	8002e78 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxByteNbre;
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	699a      	ldr	r2, [r3, #24]
 8002e6c:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8002e70:	1ad2      	subs	r2, r2, r3
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	619a      	str	r2, [r3, #24]
 8002e76:	e002      	b.n	8002e7e <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	699b      	ldr	r3, [r3, #24]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	f040 80b9 	bne.w	8002ffa <HAL_PCD_EP_DB_Transmit+0x59e>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	785b      	ldrb	r3, [r3, #1]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d126      	bne.n	8002ede <HAL_PCD_EP_DB_Transmit+0x482>
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	64bb      	str	r3, [r7, #72]	; 0x48
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ea4:	4413      	add	r3, r2
 8002ea6:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	011a      	lsls	r2, r3, #4
 8002eae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002eb0:	4413      	add	r3, r2
 8002eb2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002eb6:	647b      	str	r3, [r7, #68]	; 0x44
 8002eb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002eba:	881b      	ldrh	r3, [r3, #0]
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002ec2:	b29a      	uxth	r2, r3
 8002ec4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ec6:	801a      	strh	r2, [r3, #0]
 8002ec8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002eca:	881b      	ldrh	r3, [r3, #0]
 8002ecc:	b29b      	uxth	r3, r3
 8002ece:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ed2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ed6:	b29a      	uxth	r2, r3
 8002ed8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002eda:	801a      	strh	r2, [r3, #0]
 8002edc:	e01a      	b.n	8002f14 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	785b      	ldrb	r3, [r3, #1]
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d116      	bne.n	8002f14 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	643b      	str	r3, [r7, #64]	; 0x40
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ef4:	b29b      	uxth	r3, r3
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002efa:	4413      	add	r3, r2
 8002efc:	643b      	str	r3, [r7, #64]	; 0x40
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	781b      	ldrb	r3, [r3, #0]
 8002f02:	011a      	lsls	r2, r3, #4
 8002f04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f06:	4413      	add	r3, r2
 8002f08:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002f0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f10:	2200      	movs	r2, #0
 8002f12:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	785b      	ldrb	r3, [r3, #1]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d126      	bne.n	8002f70 <HAL_PCD_EP_DB_Transmit+0x514>
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	637b      	str	r3, [r7, #52]	; 0x34
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f30:	b29b      	uxth	r3, r3
 8002f32:	461a      	mov	r2, r3
 8002f34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f36:	4413      	add	r3, r2
 8002f38:	637b      	str	r3, [r7, #52]	; 0x34
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	781b      	ldrb	r3, [r3, #0]
 8002f3e:	011a      	lsls	r2, r3, #4
 8002f40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f42:	4413      	add	r3, r2
 8002f44:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002f48:	633b      	str	r3, [r7, #48]	; 0x30
 8002f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f4c:	881b      	ldrh	r3, [r3, #0]
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002f54:	b29a      	uxth	r2, r3
 8002f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f58:	801a      	strh	r2, [r3, #0]
 8002f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f5c:	881b      	ldrh	r3, [r3, #0]
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f68:	b29a      	uxth	r2, r3
 8002f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f6c:	801a      	strh	r2, [r3, #0]
 8002f6e:	e017      	b.n	8002fa0 <HAL_PCD_EP_DB_Transmit+0x544>
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	785b      	ldrb	r3, [r3, #1]
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d113      	bne.n	8002fa0 <HAL_PCD_EP_DB_Transmit+0x544>
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	461a      	mov	r2, r3
 8002f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f86:	4413      	add	r3, r2
 8002f88:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	781b      	ldrb	r3, [r3, #0]
 8002f8e:	011a      	lsls	r2, r3, #4
 8002f90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f92:	4413      	add	r3, r2
 8002f94:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002f98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	4619      	mov	r1, r3
 8002fa6:	68f8      	ldr	r0, [r7, #12]
 8002fa8:	f007 fc1f 	bl	800a7ea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002fac:	88fb      	ldrh	r3, [r7, #6]
 8002fae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	f040 8114 	bne.w	80031e0 <HAL_PCD_EP_DB_Transmit+0x784>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	781b      	ldrb	r3, [r3, #0]
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	4413      	add	r3, r2
 8002fc6:	881b      	ldrh	r3, [r3, #0]
 8002fc8:	b29b      	uxth	r3, r3
 8002fca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fd2:	857b      	strh	r3, [r7, #42]	; 0x2a
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	461a      	mov	r2, r3
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	781b      	ldrb	r3, [r3, #0]
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	441a      	add	r2, r3
 8002fe2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002fe4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002fe8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002fec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ff0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	8013      	strh	r3, [r2, #0]
 8002ff8:	e0f2      	b.n	80031e0 <HAL_PCD_EP_DB_Transmit+0x784>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002ffa:	88fb      	ldrh	r3, [r7, #6]
 8002ffc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003000:	2b00      	cmp	r3, #0
 8003002:	d11f      	bne.n	8003044 <HAL_PCD_EP_DB_Transmit+0x5e8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	461a      	mov	r2, r3
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	4413      	add	r3, r2
 8003012:	881b      	ldrh	r3, [r3, #0]
 8003014:	b29b      	uxth	r3, r3
 8003016:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800301a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800301e:	853b      	strh	r3, [r7, #40]	; 0x28
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	461a      	mov	r2, r3
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	781b      	ldrb	r3, [r3, #0]
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	441a      	add	r2, r3
 800302e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003030:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003034:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003038:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800303c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003040:	b29b      	uxth	r3, r3
 8003042:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800304a:	2b01      	cmp	r3, #1
 800304c:	f040 80c8 	bne.w	80031e0 <HAL_PCD_EP_DB_Transmit+0x784>
      {
        ep->xfer_buff += TxByteNbre;
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	695a      	ldr	r2, [r3, #20]
 8003054:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8003058:	441a      	add	r2, r3
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	69da      	ldr	r2, [r3, #28]
 8003062:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8003066:	441a      	add	r2, r3
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	6a1a      	ldr	r2, [r3, #32]
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	691b      	ldr	r3, [r3, #16]
 8003074:	429a      	cmp	r2, r3
 8003076:	d30b      	bcc.n	8003090 <HAL_PCD_EP_DB_Transmit+0x634>
        {
          len = ep->maxpacket;
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	691b      	ldr	r3, [r3, #16]
 800307c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	6a1a      	ldr	r2, [r3, #32]
 8003084:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003088:	1ad2      	subs	r2, r2, r3
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	621a      	str	r2, [r3, #32]
 800308e:	e017      	b.n	80030c0 <HAL_PCD_EP_DB_Transmit+0x664>
        }
        else if (ep->xfer_len_db == 0U)
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	6a1b      	ldr	r3, [r3, #32]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d108      	bne.n	80030aa <HAL_PCD_EP_DB_Transmit+0x64e>
        {
          len = TxByteNbre;
 8003098:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800309c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	2200      	movs	r2, #0
 80030a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80030a8:	e00a      	b.n	80030c0 <HAL_PCD_EP_DB_Transmit+0x664>
        }
        else
        {
          len = ep->xfer_len_db;
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	6a1b      	ldr	r3, [r3, #32]
 80030ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	2200      	movs	r2, #0
 80030b6:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	2200      	movs	r2, #0
 80030bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	627b      	str	r3, [r7, #36]	; 0x24
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	785b      	ldrb	r3, [r3, #1]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d163      	bne.n	8003196 <HAL_PCD_EP_DB_Transmit+0x73a>
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	623b      	str	r3, [r7, #32]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030dc:	b29b      	uxth	r3, r3
 80030de:	461a      	mov	r2, r3
 80030e0:	6a3b      	ldr	r3, [r7, #32]
 80030e2:	4413      	add	r3, r2
 80030e4:	623b      	str	r3, [r7, #32]
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	781b      	ldrb	r3, [r3, #0]
 80030ea:	011a      	lsls	r2, r3, #4
 80030ec:	6a3b      	ldr	r3, [r7, #32]
 80030ee:	4413      	add	r3, r2
 80030f0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80030f4:	61fb      	str	r3, [r7, #28]
 80030f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d112      	bne.n	8003124 <HAL_PCD_EP_DB_Transmit+0x6c8>
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	881b      	ldrh	r3, [r3, #0]
 8003102:	b29b      	uxth	r3, r3
 8003104:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003108:	b29a      	uxth	r2, r3
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	801a      	strh	r2, [r3, #0]
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	881b      	ldrh	r3, [r3, #0]
 8003112:	b29b      	uxth	r3, r3
 8003114:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003118:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800311c:	b29a      	uxth	r2, r3
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	801a      	strh	r2, [r3, #0]
 8003122:	e052      	b.n	80031ca <HAL_PCD_EP_DB_Transmit+0x76e>
 8003124:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003128:	2b3e      	cmp	r3, #62	; 0x3e
 800312a:	d817      	bhi.n	800315c <HAL_PCD_EP_DB_Transmit+0x700>
 800312c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003130:	085b      	lsrs	r3, r3, #1
 8003132:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003136:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800313a:	f003 0301 	and.w	r3, r3, #1
 800313e:	2b00      	cmp	r3, #0
 8003140:	d004      	beq.n	800314c <HAL_PCD_EP_DB_Transmit+0x6f0>
 8003142:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003146:	3301      	adds	r3, #1
 8003148:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800314c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003150:	b29b      	uxth	r3, r3
 8003152:	029b      	lsls	r3, r3, #10
 8003154:	b29a      	uxth	r2, r3
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	801a      	strh	r2, [r3, #0]
 800315a:	e036      	b.n	80031ca <HAL_PCD_EP_DB_Transmit+0x76e>
 800315c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003160:	095b      	lsrs	r3, r3, #5
 8003162:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003166:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800316a:	f003 031f 	and.w	r3, r3, #31
 800316e:	2b00      	cmp	r3, #0
 8003170:	d104      	bne.n	800317c <HAL_PCD_EP_DB_Transmit+0x720>
 8003172:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003176:	3b01      	subs	r3, #1
 8003178:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800317c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003180:	b29b      	uxth	r3, r3
 8003182:	029b      	lsls	r3, r3, #10
 8003184:	b29b      	uxth	r3, r3
 8003186:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800318a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800318e:	b29a      	uxth	r2, r3
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	801a      	strh	r2, [r3, #0]
 8003194:	e019      	b.n	80031ca <HAL_PCD_EP_DB_Transmit+0x76e>
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	785b      	ldrb	r3, [r3, #1]
 800319a:	2b01      	cmp	r3, #1
 800319c:	d115      	bne.n	80031ca <HAL_PCD_EP_DB_Transmit+0x76e>
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	461a      	mov	r2, r3
 80031aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ac:	4413      	add	r3, r2
 80031ae:	627b      	str	r3, [r7, #36]	; 0x24
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	011a      	lsls	r2, r3, #4
 80031b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b8:	4413      	add	r3, r2
 80031ba:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80031be:	61bb      	str	r3, [r7, #24]
 80031c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80031c4:	b29a      	uxth	r2, r3
 80031c6:	69bb      	ldr	r3, [r7, #24]
 80031c8:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	6818      	ldr	r0, [r3, #0]
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	6959      	ldr	r1, [r3, #20]
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	895a      	ldrh	r2, [r3, #10]
 80031d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80031da:	b29b      	uxth	r3, r3
 80031dc:	f004 fae9 	bl	80077b2 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	461a      	mov	r2, r3
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	781b      	ldrb	r3, [r3, #0]
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	4413      	add	r3, r2
 80031ee:	881b      	ldrh	r3, [r3, #0]
 80031f0:	b29b      	uxth	r3, r3
 80031f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031fa:	82fb      	strh	r3, [r7, #22]
 80031fc:	8afb      	ldrh	r3, [r7, #22]
 80031fe:	f083 0310 	eor.w	r3, r3, #16
 8003202:	82fb      	strh	r3, [r7, #22]
 8003204:	8afb      	ldrh	r3, [r7, #22]
 8003206:	f083 0320 	eor.w	r3, r3, #32
 800320a:	82fb      	strh	r3, [r7, #22]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	461a      	mov	r2, r3
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	781b      	ldrb	r3, [r3, #0]
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	441a      	add	r2, r3
 800321a:	8afb      	ldrh	r3, [r7, #22]
 800321c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003220:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003224:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003228:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800322c:	b29b      	uxth	r3, r3
 800322e:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003230:	2300      	movs	r3, #0
}
 8003232:	4618      	mov	r0, r3
 8003234:	3790      	adds	r7, #144	; 0x90
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}

0800323a <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800323a:	b480      	push	{r7}
 800323c:	b087      	sub	sp, #28
 800323e:	af00      	add	r7, sp, #0
 8003240:	60f8      	str	r0, [r7, #12]
 8003242:	607b      	str	r3, [r7, #4]
 8003244:	460b      	mov	r3, r1
 8003246:	817b      	strh	r3, [r7, #10]
 8003248:	4613      	mov	r3, r2
 800324a:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800324c:	897b      	ldrh	r3, [r7, #10]
 800324e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003252:	b29b      	uxth	r3, r3
 8003254:	2b00      	cmp	r3, #0
 8003256:	d00b      	beq.n	8003270 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003258:	897b      	ldrh	r3, [r7, #10]
 800325a:	f003 0307 	and.w	r3, r3, #7
 800325e:	1c5a      	adds	r2, r3, #1
 8003260:	4613      	mov	r3, r2
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	4413      	add	r3, r2
 8003266:	00db      	lsls	r3, r3, #3
 8003268:	68fa      	ldr	r2, [r7, #12]
 800326a:	4413      	add	r3, r2
 800326c:	617b      	str	r3, [r7, #20]
 800326e:	e009      	b.n	8003284 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003270:	897a      	ldrh	r2, [r7, #10]
 8003272:	4613      	mov	r3, r2
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	4413      	add	r3, r2
 8003278:	00db      	lsls	r3, r3, #3
 800327a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800327e:	68fa      	ldr	r2, [r7, #12]
 8003280:	4413      	add	r3, r2
 8003282:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003284:	893b      	ldrh	r3, [r7, #8]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d107      	bne.n	800329a <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	2200      	movs	r2, #0
 800328e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	b29a      	uxth	r2, r3
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	80da      	strh	r2, [r3, #6]
 8003298:	e00b      	b.n	80032b2 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	2201      	movs	r2, #1
 800329e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	b29a      	uxth	r2, r3
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	0c1b      	lsrs	r3, r3, #16
 80032ac:	b29a      	uxth	r2, r3
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80032b2:	2300      	movs	r3, #0
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	371c      	adds	r7, #28
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bc80      	pop	{r7}
 80032bc:	4770      	bx	lr
	...

080032c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b086      	sub	sp, #24
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d101      	bne.n	80032d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e35c      	b.n	800398c <HAL_RCC_OscConfig+0x6cc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d01c      	beq.n	8003314 <HAL_RCC_OscConfig+0x54>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0301 	and.w	r3, r3, #1
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d116      	bne.n	8003314 <HAL_RCC_OscConfig+0x54>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0302 	and.w	r3, r3, #2
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d110      	bne.n	8003314 <HAL_RCC_OscConfig+0x54>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0308 	and.w	r3, r3, #8
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d10a      	bne.n	8003314 <HAL_RCC_OscConfig+0x54>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0304 	and.w	r3, r3, #4
 8003306:	2b00      	cmp	r3, #0
 8003308:	d104      	bne.n	8003314 <HAL_RCC_OscConfig+0x54>
 800330a:	f240 1167 	movw	r1, #359	; 0x167
 800330e:	48a5      	ldr	r0, [pc, #660]	; (80035a4 <HAL_RCC_OscConfig+0x2e4>)
 8003310:	f7fd f93c 	bl	800058c <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0301 	and.w	r3, r3, #1
 800331c:	2b00      	cmp	r3, #0
 800331e:	f000 809a 	beq.w	8003456 <HAL_RCC_OscConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d00e      	beq.n	8003348 <HAL_RCC_OscConfig+0x88>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003332:	d009      	beq.n	8003348 <HAL_RCC_OscConfig+0x88>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800333c:	d004      	beq.n	8003348 <HAL_RCC_OscConfig+0x88>
 800333e:	f240 116d 	movw	r1, #365	; 0x16d
 8003342:	4898      	ldr	r0, [pc, #608]	; (80035a4 <HAL_RCC_OscConfig+0x2e4>)
 8003344:	f7fd f922 	bl	800058c <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003348:	4b97      	ldr	r3, [pc, #604]	; (80035a8 <HAL_RCC_OscConfig+0x2e8>)
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	f003 030c 	and.w	r3, r3, #12
 8003350:	2b04      	cmp	r3, #4
 8003352:	d00c      	beq.n	800336e <HAL_RCC_OscConfig+0xae>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003354:	4b94      	ldr	r3, [pc, #592]	; (80035a8 <HAL_RCC_OscConfig+0x2e8>)
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f003 030c 	and.w	r3, r3, #12
 800335c:	2b08      	cmp	r3, #8
 800335e:	d112      	bne.n	8003386 <HAL_RCC_OscConfig+0xc6>
 8003360:	4b91      	ldr	r3, [pc, #580]	; (80035a8 <HAL_RCC_OscConfig+0x2e8>)
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003368:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800336c:	d10b      	bne.n	8003386 <HAL_RCC_OscConfig+0xc6>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800336e:	4b8e      	ldr	r3, [pc, #568]	; (80035a8 <HAL_RCC_OscConfig+0x2e8>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d06c      	beq.n	8003454 <HAL_RCC_OscConfig+0x194>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d168      	bne.n	8003454 <HAL_RCC_OscConfig+0x194>
      {
        return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e302      	b.n	800398c <HAL_RCC_OscConfig+0x6cc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800338e:	d106      	bne.n	800339e <HAL_RCC_OscConfig+0xde>
 8003390:	4a85      	ldr	r2, [pc, #532]	; (80035a8 <HAL_RCC_OscConfig+0x2e8>)
 8003392:	4b85      	ldr	r3, [pc, #532]	; (80035a8 <HAL_RCC_OscConfig+0x2e8>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800339a:	6013      	str	r3, [r2, #0]
 800339c:	e02e      	b.n	80033fc <HAL_RCC_OscConfig+0x13c>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d10c      	bne.n	80033c0 <HAL_RCC_OscConfig+0x100>
 80033a6:	4a80      	ldr	r2, [pc, #512]	; (80035a8 <HAL_RCC_OscConfig+0x2e8>)
 80033a8:	4b7f      	ldr	r3, [pc, #508]	; (80035a8 <HAL_RCC_OscConfig+0x2e8>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033b0:	6013      	str	r3, [r2, #0]
 80033b2:	4a7d      	ldr	r2, [pc, #500]	; (80035a8 <HAL_RCC_OscConfig+0x2e8>)
 80033b4:	4b7c      	ldr	r3, [pc, #496]	; (80035a8 <HAL_RCC_OscConfig+0x2e8>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033bc:	6013      	str	r3, [r2, #0]
 80033be:	e01d      	b.n	80033fc <HAL_RCC_OscConfig+0x13c>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033c8:	d10c      	bne.n	80033e4 <HAL_RCC_OscConfig+0x124>
 80033ca:	4a77      	ldr	r2, [pc, #476]	; (80035a8 <HAL_RCC_OscConfig+0x2e8>)
 80033cc:	4b76      	ldr	r3, [pc, #472]	; (80035a8 <HAL_RCC_OscConfig+0x2e8>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033d4:	6013      	str	r3, [r2, #0]
 80033d6:	4a74      	ldr	r2, [pc, #464]	; (80035a8 <HAL_RCC_OscConfig+0x2e8>)
 80033d8:	4b73      	ldr	r3, [pc, #460]	; (80035a8 <HAL_RCC_OscConfig+0x2e8>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033e0:	6013      	str	r3, [r2, #0]
 80033e2:	e00b      	b.n	80033fc <HAL_RCC_OscConfig+0x13c>
 80033e4:	4a70      	ldr	r2, [pc, #448]	; (80035a8 <HAL_RCC_OscConfig+0x2e8>)
 80033e6:	4b70      	ldr	r3, [pc, #448]	; (80035a8 <HAL_RCC_OscConfig+0x2e8>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033ee:	6013      	str	r3, [r2, #0]
 80033f0:	4a6d      	ldr	r2, [pc, #436]	; (80035a8 <HAL_RCC_OscConfig+0x2e8>)
 80033f2:	4b6d      	ldr	r3, [pc, #436]	; (80035a8 <HAL_RCC_OscConfig+0x2e8>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033fa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d013      	beq.n	800342c <HAL_RCC_OscConfig+0x16c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003404:	f7fd fb86 	bl	8000b14 <HAL_GetTick>
 8003408:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800340a:	e008      	b.n	800341e <HAL_RCC_OscConfig+0x15e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800340c:	f7fd fb82 	bl	8000b14 <HAL_GetTick>
 8003410:	4602      	mov	r2, r0
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	2b64      	cmp	r3, #100	; 0x64
 8003418:	d901      	bls.n	800341e <HAL_RCC_OscConfig+0x15e>
          {
            return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e2b6      	b.n	800398c <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800341e:	4b62      	ldr	r3, [pc, #392]	; (80035a8 <HAL_RCC_OscConfig+0x2e8>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d0f0      	beq.n	800340c <HAL_RCC_OscConfig+0x14c>
 800342a:	e014      	b.n	8003456 <HAL_RCC_OscConfig+0x196>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800342c:	f7fd fb72 	bl	8000b14 <HAL_GetTick>
 8003430:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003432:	e008      	b.n	8003446 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003434:	f7fd fb6e 	bl	8000b14 <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	2b64      	cmp	r3, #100	; 0x64
 8003440:	d901      	bls.n	8003446 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e2a2      	b.n	800398c <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003446:	4b58      	ldr	r3, [pc, #352]	; (80035a8 <HAL_RCC_OscConfig+0x2e8>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d1f0      	bne.n	8003434 <HAL_RCC_OscConfig+0x174>
 8003452:	e000      	b.n	8003456 <HAL_RCC_OscConfig+0x196>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003454:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0302 	and.w	r3, r3, #2
 800345e:	2b00      	cmp	r3, #0
 8003460:	d079      	beq.n	8003556 <HAL_RCC_OscConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	691b      	ldr	r3, [r3, #16]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d008      	beq.n	800347c <HAL_RCC_OscConfig+0x1bc>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	691b      	ldr	r3, [r3, #16]
 800346e:	2b01      	cmp	r3, #1
 8003470:	d004      	beq.n	800347c <HAL_RCC_OscConfig+0x1bc>
 8003472:	f240 11a1 	movw	r1, #417	; 0x1a1
 8003476:	484b      	ldr	r0, [pc, #300]	; (80035a4 <HAL_RCC_OscConfig+0x2e4>)
 8003478:	f7fd f888 	bl	800058c <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	695b      	ldr	r3, [r3, #20]
 8003480:	2b1f      	cmp	r3, #31
 8003482:	d904      	bls.n	800348e <HAL_RCC_OscConfig+0x1ce>
 8003484:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 8003488:	4846      	ldr	r0, [pc, #280]	; (80035a4 <HAL_RCC_OscConfig+0x2e4>)
 800348a:	f7fd f87f 	bl	800058c <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800348e:	4b46      	ldr	r3, [pc, #280]	; (80035a8 <HAL_RCC_OscConfig+0x2e8>)
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	f003 030c 	and.w	r3, r3, #12
 8003496:	2b00      	cmp	r3, #0
 8003498:	d00b      	beq.n	80034b2 <HAL_RCC_OscConfig+0x1f2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800349a:	4b43      	ldr	r3, [pc, #268]	; (80035a8 <HAL_RCC_OscConfig+0x2e8>)
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	f003 030c 	and.w	r3, r3, #12
 80034a2:	2b08      	cmp	r3, #8
 80034a4:	d11c      	bne.n	80034e0 <HAL_RCC_OscConfig+0x220>
 80034a6:	4b40      	ldr	r3, [pc, #256]	; (80035a8 <HAL_RCC_OscConfig+0x2e8>)
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d116      	bne.n	80034e0 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034b2:	4b3d      	ldr	r3, [pc, #244]	; (80035a8 <HAL_RCC_OscConfig+0x2e8>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0302 	and.w	r3, r3, #2
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d005      	beq.n	80034ca <HAL_RCC_OscConfig+0x20a>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	691b      	ldr	r3, [r3, #16]
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d001      	beq.n	80034ca <HAL_RCC_OscConfig+0x20a>
      {
        return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e260      	b.n	800398c <HAL_RCC_OscConfig+0x6cc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034ca:	4937      	ldr	r1, [pc, #220]	; (80035a8 <HAL_RCC_OscConfig+0x2e8>)
 80034cc:	4b36      	ldr	r3, [pc, #216]	; (80035a8 <HAL_RCC_OscConfig+0x2e8>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	695b      	ldr	r3, [r3, #20]
 80034d8:	00db      	lsls	r3, r3, #3
 80034da:	4313      	orrs	r3, r2
 80034dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034de:	e03a      	b.n	8003556 <HAL_RCC_OscConfig+0x296>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	691b      	ldr	r3, [r3, #16]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d020      	beq.n	800352a <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034e8:	4b30      	ldr	r3, [pc, #192]	; (80035ac <HAL_RCC_OscConfig+0x2ec>)
 80034ea:	2201      	movs	r2, #1
 80034ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ee:	f7fd fb11 	bl	8000b14 <HAL_GetTick>
 80034f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034f4:	e008      	b.n	8003508 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034f6:	f7fd fb0d 	bl	8000b14 <HAL_GetTick>
 80034fa:	4602      	mov	r2, r0
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	2b02      	cmp	r3, #2
 8003502:	d901      	bls.n	8003508 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003504:	2303      	movs	r3, #3
 8003506:	e241      	b.n	800398c <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003508:	4b27      	ldr	r3, [pc, #156]	; (80035a8 <HAL_RCC_OscConfig+0x2e8>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0302 	and.w	r3, r3, #2
 8003510:	2b00      	cmp	r3, #0
 8003512:	d0f0      	beq.n	80034f6 <HAL_RCC_OscConfig+0x236>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003514:	4924      	ldr	r1, [pc, #144]	; (80035a8 <HAL_RCC_OscConfig+0x2e8>)
 8003516:	4b24      	ldr	r3, [pc, #144]	; (80035a8 <HAL_RCC_OscConfig+0x2e8>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	695b      	ldr	r3, [r3, #20]
 8003522:	00db      	lsls	r3, r3, #3
 8003524:	4313      	orrs	r3, r2
 8003526:	600b      	str	r3, [r1, #0]
 8003528:	e015      	b.n	8003556 <HAL_RCC_OscConfig+0x296>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800352a:	4b20      	ldr	r3, [pc, #128]	; (80035ac <HAL_RCC_OscConfig+0x2ec>)
 800352c:	2200      	movs	r2, #0
 800352e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003530:	f7fd faf0 	bl	8000b14 <HAL_GetTick>
 8003534:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003536:	e008      	b.n	800354a <HAL_RCC_OscConfig+0x28a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003538:	f7fd faec 	bl	8000b14 <HAL_GetTick>
 800353c:	4602      	mov	r2, r0
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	2b02      	cmp	r3, #2
 8003544:	d901      	bls.n	800354a <HAL_RCC_OscConfig+0x28a>
          {
            return HAL_TIMEOUT;
 8003546:	2303      	movs	r3, #3
 8003548:	e220      	b.n	800398c <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800354a:	4b17      	ldr	r3, [pc, #92]	; (80035a8 <HAL_RCC_OscConfig+0x2e8>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0302 	and.w	r3, r3, #2
 8003552:	2b00      	cmp	r3, #0
 8003554:	d1f0      	bne.n	8003538 <HAL_RCC_OscConfig+0x278>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0308 	and.w	r3, r3, #8
 800355e:	2b00      	cmp	r3, #0
 8003560:	d048      	beq.n	80035f4 <HAL_RCC_OscConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	699b      	ldr	r3, [r3, #24]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d008      	beq.n	800357c <HAL_RCC_OscConfig+0x2bc>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	699b      	ldr	r3, [r3, #24]
 800356e:	2b01      	cmp	r3, #1
 8003570:	d004      	beq.n	800357c <HAL_RCC_OscConfig+0x2bc>
 8003572:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 8003576:	480b      	ldr	r0, [pc, #44]	; (80035a4 <HAL_RCC_OscConfig+0x2e4>)
 8003578:	f7fd f808 	bl	800058c <assert_failed>

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	699b      	ldr	r3, [r3, #24]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d021      	beq.n	80035c8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003584:	4b0a      	ldr	r3, [pc, #40]	; (80035b0 <HAL_RCC_OscConfig+0x2f0>)
 8003586:	2201      	movs	r2, #1
 8003588:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800358a:	f7fd fac3 	bl	8000b14 <HAL_GetTick>
 800358e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003590:	e010      	b.n	80035b4 <HAL_RCC_OscConfig+0x2f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003592:	f7fd fabf 	bl	8000b14 <HAL_GetTick>
 8003596:	4602      	mov	r2, r0
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	1ad3      	subs	r3, r2, r3
 800359c:	2b02      	cmp	r3, #2
 800359e:	d909      	bls.n	80035b4 <HAL_RCC_OscConfig+0x2f4>
        {
          return HAL_TIMEOUT;
 80035a0:	2303      	movs	r3, #3
 80035a2:	e1f3      	b.n	800398c <HAL_RCC_OscConfig+0x6cc>
 80035a4:	0800b078 	.word	0x0800b078
 80035a8:	40021000 	.word	0x40021000
 80035ac:	42420000 	.word	0x42420000
 80035b0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035b4:	4b67      	ldr	r3, [pc, #412]	; (8003754 <HAL_RCC_OscConfig+0x494>)
 80035b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b8:	f003 0302 	and.w	r3, r3, #2
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d0e8      	beq.n	8003592 <HAL_RCC_OscConfig+0x2d2>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80035c0:	2001      	movs	r0, #1
 80035c2:	f000 fc53 	bl	8003e6c <RCC_Delay>
 80035c6:	e015      	b.n	80035f4 <HAL_RCC_OscConfig+0x334>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035c8:	4b63      	ldr	r3, [pc, #396]	; (8003758 <HAL_RCC_OscConfig+0x498>)
 80035ca:	2200      	movs	r2, #0
 80035cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035ce:	f7fd faa1 	bl	8000b14 <HAL_GetTick>
 80035d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035d4:	e008      	b.n	80035e8 <HAL_RCC_OscConfig+0x328>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035d6:	f7fd fa9d 	bl	8000b14 <HAL_GetTick>
 80035da:	4602      	mov	r2, r0
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	1ad3      	subs	r3, r2, r3
 80035e0:	2b02      	cmp	r3, #2
 80035e2:	d901      	bls.n	80035e8 <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 80035e4:	2303      	movs	r3, #3
 80035e6:	e1d1      	b.n	800398c <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035e8:	4b5a      	ldr	r3, [pc, #360]	; (8003754 <HAL_RCC_OscConfig+0x494>)
 80035ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ec:	f003 0302 	and.w	r3, r3, #2
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d1f0      	bne.n	80035d6 <HAL_RCC_OscConfig+0x316>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 0304 	and.w	r3, r3, #4
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	f000 80c0 	beq.w	8003782 <HAL_RCC_OscConfig+0x4c2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003602:	2300      	movs	r3, #0
 8003604:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	68db      	ldr	r3, [r3, #12]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d00c      	beq.n	8003628 <HAL_RCC_OscConfig+0x368>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	2b01      	cmp	r3, #1
 8003614:	d008      	beq.n	8003628 <HAL_RCC_OscConfig+0x368>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	68db      	ldr	r3, [r3, #12]
 800361a:	2b05      	cmp	r3, #5
 800361c:	d004      	beq.n	8003628 <HAL_RCC_OscConfig+0x368>
 800361e:	f240 2111 	movw	r1, #529	; 0x211
 8003622:	484e      	ldr	r0, [pc, #312]	; (800375c <HAL_RCC_OscConfig+0x49c>)
 8003624:	f7fc ffb2 	bl	800058c <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003628:	4b4a      	ldr	r3, [pc, #296]	; (8003754 <HAL_RCC_OscConfig+0x494>)
 800362a:	69db      	ldr	r3, [r3, #28]
 800362c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003630:	2b00      	cmp	r3, #0
 8003632:	d10d      	bne.n	8003650 <HAL_RCC_OscConfig+0x390>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003634:	4a47      	ldr	r2, [pc, #284]	; (8003754 <HAL_RCC_OscConfig+0x494>)
 8003636:	4b47      	ldr	r3, [pc, #284]	; (8003754 <HAL_RCC_OscConfig+0x494>)
 8003638:	69db      	ldr	r3, [r3, #28]
 800363a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800363e:	61d3      	str	r3, [r2, #28]
 8003640:	4b44      	ldr	r3, [pc, #272]	; (8003754 <HAL_RCC_OscConfig+0x494>)
 8003642:	69db      	ldr	r3, [r3, #28]
 8003644:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003648:	60bb      	str	r3, [r7, #8]
 800364a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800364c:	2301      	movs	r3, #1
 800364e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003650:	4b43      	ldr	r3, [pc, #268]	; (8003760 <HAL_RCC_OscConfig+0x4a0>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003658:	2b00      	cmp	r3, #0
 800365a:	d118      	bne.n	800368e <HAL_RCC_OscConfig+0x3ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800365c:	4a40      	ldr	r2, [pc, #256]	; (8003760 <HAL_RCC_OscConfig+0x4a0>)
 800365e:	4b40      	ldr	r3, [pc, #256]	; (8003760 <HAL_RCC_OscConfig+0x4a0>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003666:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003668:	f7fd fa54 	bl	8000b14 <HAL_GetTick>
 800366c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800366e:	e008      	b.n	8003682 <HAL_RCC_OscConfig+0x3c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003670:	f7fd fa50 	bl	8000b14 <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	2b64      	cmp	r3, #100	; 0x64
 800367c:	d901      	bls.n	8003682 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e184      	b.n	800398c <HAL_RCC_OscConfig+0x6cc>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003682:	4b37      	ldr	r3, [pc, #220]	; (8003760 <HAL_RCC_OscConfig+0x4a0>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800368a:	2b00      	cmp	r3, #0
 800368c:	d0f0      	beq.n	8003670 <HAL_RCC_OscConfig+0x3b0>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	68db      	ldr	r3, [r3, #12]
 8003692:	2b01      	cmp	r3, #1
 8003694:	d106      	bne.n	80036a4 <HAL_RCC_OscConfig+0x3e4>
 8003696:	4a2f      	ldr	r2, [pc, #188]	; (8003754 <HAL_RCC_OscConfig+0x494>)
 8003698:	4b2e      	ldr	r3, [pc, #184]	; (8003754 <HAL_RCC_OscConfig+0x494>)
 800369a:	6a1b      	ldr	r3, [r3, #32]
 800369c:	f043 0301 	orr.w	r3, r3, #1
 80036a0:	6213      	str	r3, [r2, #32]
 80036a2:	e02d      	b.n	8003700 <HAL_RCC_OscConfig+0x440>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d10c      	bne.n	80036c6 <HAL_RCC_OscConfig+0x406>
 80036ac:	4a29      	ldr	r2, [pc, #164]	; (8003754 <HAL_RCC_OscConfig+0x494>)
 80036ae:	4b29      	ldr	r3, [pc, #164]	; (8003754 <HAL_RCC_OscConfig+0x494>)
 80036b0:	6a1b      	ldr	r3, [r3, #32]
 80036b2:	f023 0301 	bic.w	r3, r3, #1
 80036b6:	6213      	str	r3, [r2, #32]
 80036b8:	4a26      	ldr	r2, [pc, #152]	; (8003754 <HAL_RCC_OscConfig+0x494>)
 80036ba:	4b26      	ldr	r3, [pc, #152]	; (8003754 <HAL_RCC_OscConfig+0x494>)
 80036bc:	6a1b      	ldr	r3, [r3, #32]
 80036be:	f023 0304 	bic.w	r3, r3, #4
 80036c2:	6213      	str	r3, [r2, #32]
 80036c4:	e01c      	b.n	8003700 <HAL_RCC_OscConfig+0x440>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	68db      	ldr	r3, [r3, #12]
 80036ca:	2b05      	cmp	r3, #5
 80036cc:	d10c      	bne.n	80036e8 <HAL_RCC_OscConfig+0x428>
 80036ce:	4a21      	ldr	r2, [pc, #132]	; (8003754 <HAL_RCC_OscConfig+0x494>)
 80036d0:	4b20      	ldr	r3, [pc, #128]	; (8003754 <HAL_RCC_OscConfig+0x494>)
 80036d2:	6a1b      	ldr	r3, [r3, #32]
 80036d4:	f043 0304 	orr.w	r3, r3, #4
 80036d8:	6213      	str	r3, [r2, #32]
 80036da:	4a1e      	ldr	r2, [pc, #120]	; (8003754 <HAL_RCC_OscConfig+0x494>)
 80036dc:	4b1d      	ldr	r3, [pc, #116]	; (8003754 <HAL_RCC_OscConfig+0x494>)
 80036de:	6a1b      	ldr	r3, [r3, #32]
 80036e0:	f043 0301 	orr.w	r3, r3, #1
 80036e4:	6213      	str	r3, [r2, #32]
 80036e6:	e00b      	b.n	8003700 <HAL_RCC_OscConfig+0x440>
 80036e8:	4a1a      	ldr	r2, [pc, #104]	; (8003754 <HAL_RCC_OscConfig+0x494>)
 80036ea:	4b1a      	ldr	r3, [pc, #104]	; (8003754 <HAL_RCC_OscConfig+0x494>)
 80036ec:	6a1b      	ldr	r3, [r3, #32]
 80036ee:	f023 0301 	bic.w	r3, r3, #1
 80036f2:	6213      	str	r3, [r2, #32]
 80036f4:	4a17      	ldr	r2, [pc, #92]	; (8003754 <HAL_RCC_OscConfig+0x494>)
 80036f6:	4b17      	ldr	r3, [pc, #92]	; (8003754 <HAL_RCC_OscConfig+0x494>)
 80036f8:	6a1b      	ldr	r3, [r3, #32]
 80036fa:	f023 0304 	bic.w	r3, r3, #4
 80036fe:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d015      	beq.n	8003734 <HAL_RCC_OscConfig+0x474>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003708:	f7fd fa04 	bl	8000b14 <HAL_GetTick>
 800370c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800370e:	e00a      	b.n	8003726 <HAL_RCC_OscConfig+0x466>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003710:	f7fd fa00 	bl	8000b14 <HAL_GetTick>
 8003714:	4602      	mov	r2, r0
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	f241 3288 	movw	r2, #5000	; 0x1388
 800371e:	4293      	cmp	r3, r2
 8003720:	d901      	bls.n	8003726 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	e132      	b.n	800398c <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003726:	4b0b      	ldr	r3, [pc, #44]	; (8003754 <HAL_RCC_OscConfig+0x494>)
 8003728:	6a1b      	ldr	r3, [r3, #32]
 800372a:	f003 0302 	and.w	r3, r3, #2
 800372e:	2b00      	cmp	r3, #0
 8003730:	d0ee      	beq.n	8003710 <HAL_RCC_OscConfig+0x450>
 8003732:	e01d      	b.n	8003770 <HAL_RCC_OscConfig+0x4b0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003734:	f7fd f9ee 	bl	8000b14 <HAL_GetTick>
 8003738:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800373a:	e013      	b.n	8003764 <HAL_RCC_OscConfig+0x4a4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800373c:	f7fd f9ea 	bl	8000b14 <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	f241 3288 	movw	r2, #5000	; 0x1388
 800374a:	4293      	cmp	r3, r2
 800374c:	d90a      	bls.n	8003764 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 800374e:	2303      	movs	r3, #3
 8003750:	e11c      	b.n	800398c <HAL_RCC_OscConfig+0x6cc>
 8003752:	bf00      	nop
 8003754:	40021000 	.word	0x40021000
 8003758:	42420480 	.word	0x42420480
 800375c:	0800b078 	.word	0x0800b078
 8003760:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003764:	4b8b      	ldr	r3, [pc, #556]	; (8003994 <HAL_RCC_OscConfig+0x6d4>)
 8003766:	6a1b      	ldr	r3, [r3, #32]
 8003768:	f003 0302 	and.w	r3, r3, #2
 800376c:	2b00      	cmp	r3, #0
 800376e:	d1e5      	bne.n	800373c <HAL_RCC_OscConfig+0x47c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003770:	7dfb      	ldrb	r3, [r7, #23]
 8003772:	2b01      	cmp	r3, #1
 8003774:	d105      	bne.n	8003782 <HAL_RCC_OscConfig+0x4c2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003776:	4a87      	ldr	r2, [pc, #540]	; (8003994 <HAL_RCC_OscConfig+0x6d4>)
 8003778:	4b86      	ldr	r3, [pc, #536]	; (8003994 <HAL_RCC_OscConfig+0x6d4>)
 800377a:	69db      	ldr	r3, [r3, #28]
 800377c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003780:	61d3      	str	r3, [r2, #28]
  }

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	69db      	ldr	r3, [r3, #28]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d00c      	beq.n	80037a4 <HAL_RCC_OscConfig+0x4e4>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	69db      	ldr	r3, [r3, #28]
 800378e:	2b01      	cmp	r3, #1
 8003790:	d008      	beq.n	80037a4 <HAL_RCC_OscConfig+0x4e4>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	69db      	ldr	r3, [r3, #28]
 8003796:	2b02      	cmp	r3, #2
 8003798:	d004      	beq.n	80037a4 <HAL_RCC_OscConfig+0x4e4>
 800379a:	f240 21af 	movw	r1, #687	; 0x2af
 800379e:	487e      	ldr	r0, [pc, #504]	; (8003998 <HAL_RCC_OscConfig+0x6d8>)
 80037a0:	f7fc fef4 	bl	800058c <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	69db      	ldr	r3, [r3, #28]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	f000 80ee 	beq.w	800398a <HAL_RCC_OscConfig+0x6ca>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037ae:	4b79      	ldr	r3, [pc, #484]	; (8003994 <HAL_RCC_OscConfig+0x6d4>)
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	f003 030c 	and.w	r3, r3, #12
 80037b6:	2b08      	cmp	r3, #8
 80037b8:	f000 80ce 	beq.w	8003958 <HAL_RCC_OscConfig+0x698>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	69db      	ldr	r3, [r3, #28]
 80037c0:	2b02      	cmp	r3, #2
 80037c2:	f040 80b2 	bne.w	800392a <HAL_RCC_OscConfig+0x66a>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6a1b      	ldr	r3, [r3, #32]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d009      	beq.n	80037e2 <HAL_RCC_OscConfig+0x522>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6a1b      	ldr	r3, [r3, #32]
 80037d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037d6:	d004      	beq.n	80037e2 <HAL_RCC_OscConfig+0x522>
 80037d8:	f44f 712e 	mov.w	r1, #696	; 0x2b8
 80037dc:	486e      	ldr	r0, [pc, #440]	; (8003998 <HAL_RCC_OscConfig+0x6d8>)
 80037de:	f7fc fed5 	bl	800058c <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d04a      	beq.n	8003880 <HAL_RCC_OscConfig+0x5c0>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80037f2:	d045      	beq.n	8003880 <HAL_RCC_OscConfig+0x5c0>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80037fc:	d040      	beq.n	8003880 <HAL_RCC_OscConfig+0x5c0>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003802:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003806:	d03b      	beq.n	8003880 <HAL_RCC_OscConfig+0x5c0>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800380c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003810:	d036      	beq.n	8003880 <HAL_RCC_OscConfig+0x5c0>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003816:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800381a:	d031      	beq.n	8003880 <HAL_RCC_OscConfig+0x5c0>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003820:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003824:	d02c      	beq.n	8003880 <HAL_RCC_OscConfig+0x5c0>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800382a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800382e:	d027      	beq.n	8003880 <HAL_RCC_OscConfig+0x5c0>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003834:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003838:	d022      	beq.n	8003880 <HAL_RCC_OscConfig+0x5c0>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003842:	d01d      	beq.n	8003880 <HAL_RCC_OscConfig+0x5c0>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003848:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800384c:	d018      	beq.n	8003880 <HAL_RCC_OscConfig+0x5c0>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003852:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003856:	d013      	beq.n	8003880 <HAL_RCC_OscConfig+0x5c0>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003860:	d00e      	beq.n	8003880 <HAL_RCC_OscConfig+0x5c0>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003866:	f5b3 1f50 	cmp.w	r3, #3407872	; 0x340000
 800386a:	d009      	beq.n	8003880 <HAL_RCC_OscConfig+0x5c0>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003870:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 8003874:	d004      	beq.n	8003880 <HAL_RCC_OscConfig+0x5c0>
 8003876:	f240 21b9 	movw	r1, #697	; 0x2b9
 800387a:	4847      	ldr	r0, [pc, #284]	; (8003998 <HAL_RCC_OscConfig+0x6d8>)
 800387c:	f7fc fe86 	bl	800058c <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003880:	4b46      	ldr	r3, [pc, #280]	; (800399c <HAL_RCC_OscConfig+0x6dc>)
 8003882:	2200      	movs	r2, #0
 8003884:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003886:	f7fd f945 	bl	8000b14 <HAL_GetTick>
 800388a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800388c:	e008      	b.n	80038a0 <HAL_RCC_OscConfig+0x5e0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800388e:	f7fd f941 	bl	8000b14 <HAL_GetTick>
 8003892:	4602      	mov	r2, r0
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	1ad3      	subs	r3, r2, r3
 8003898:	2b02      	cmp	r3, #2
 800389a:	d901      	bls.n	80038a0 <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 800389c:	2303      	movs	r3, #3
 800389e:	e075      	b.n	800398c <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038a0:	4b3c      	ldr	r3, [pc, #240]	; (8003994 <HAL_RCC_OscConfig+0x6d4>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d1f0      	bne.n	800388e <HAL_RCC_OscConfig+0x5ce>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6a1b      	ldr	r3, [r3, #32]
 80038b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038b4:	d116      	bne.n	80038e4 <HAL_RCC_OscConfig+0x624>
        {
          /* Check the parameter */
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d009      	beq.n	80038d2 <HAL_RCC_OscConfig+0x612>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80038c6:	d004      	beq.n	80038d2 <HAL_RCC_OscConfig+0x612>
 80038c8:	f240 21cf 	movw	r1, #719	; 0x2cf
 80038cc:	4832      	ldr	r0, [pc, #200]	; (8003998 <HAL_RCC_OscConfig+0x6d8>)
 80038ce:	f7fc fe5d 	bl	800058c <assert_failed>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80038d2:	4930      	ldr	r1, [pc, #192]	; (8003994 <HAL_RCC_OscConfig+0x6d4>)
 80038d4:	4b2f      	ldr	r3, [pc, #188]	; (8003994 <HAL_RCC_OscConfig+0x6d4>)
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	4313      	orrs	r3, r2
 80038e2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038e4:	482b      	ldr	r0, [pc, #172]	; (8003994 <HAL_RCC_OscConfig+0x6d4>)
 80038e6:	4b2b      	ldr	r3, [pc, #172]	; (8003994 <HAL_RCC_OscConfig+0x6d4>)
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6a19      	ldr	r1, [r3, #32]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f6:	430b      	orrs	r3, r1
 80038f8:	4313      	orrs	r3, r2
 80038fa:	6043      	str	r3, [r0, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038fc:	4b27      	ldr	r3, [pc, #156]	; (800399c <HAL_RCC_OscConfig+0x6dc>)
 80038fe:	2201      	movs	r2, #1
 8003900:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003902:	f7fd f907 	bl	8000b14 <HAL_GetTick>
 8003906:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003908:	e008      	b.n	800391c <HAL_RCC_OscConfig+0x65c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800390a:	f7fd f903 	bl	8000b14 <HAL_GetTick>
 800390e:	4602      	mov	r2, r0
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	1ad3      	subs	r3, r2, r3
 8003914:	2b02      	cmp	r3, #2
 8003916:	d901      	bls.n	800391c <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 8003918:	2303      	movs	r3, #3
 800391a:	e037      	b.n	800398c <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800391c:	4b1d      	ldr	r3, [pc, #116]	; (8003994 <HAL_RCC_OscConfig+0x6d4>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003924:	2b00      	cmp	r3, #0
 8003926:	d0f0      	beq.n	800390a <HAL_RCC_OscConfig+0x64a>
 8003928:	e02f      	b.n	800398a <HAL_RCC_OscConfig+0x6ca>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800392a:	4b1c      	ldr	r3, [pc, #112]	; (800399c <HAL_RCC_OscConfig+0x6dc>)
 800392c:	2200      	movs	r2, #0
 800392e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003930:	f7fd f8f0 	bl	8000b14 <HAL_GetTick>
 8003934:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003936:	e008      	b.n	800394a <HAL_RCC_OscConfig+0x68a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003938:	f7fd f8ec 	bl	8000b14 <HAL_GetTick>
 800393c:	4602      	mov	r2, r0
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	2b02      	cmp	r3, #2
 8003944:	d901      	bls.n	800394a <HAL_RCC_OscConfig+0x68a>
          {
            return HAL_TIMEOUT;
 8003946:	2303      	movs	r3, #3
 8003948:	e020      	b.n	800398c <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800394a:	4b12      	ldr	r3, [pc, #72]	; (8003994 <HAL_RCC_OscConfig+0x6d4>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d1f0      	bne.n	8003938 <HAL_RCC_OscConfig+0x678>
 8003956:	e018      	b.n	800398a <HAL_RCC_OscConfig+0x6ca>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	69db      	ldr	r3, [r3, #28]
 800395c:	2b01      	cmp	r3, #1
 800395e:	d101      	bne.n	8003964 <HAL_RCC_OscConfig+0x6a4>
      {
        return HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	e013      	b.n	800398c <HAL_RCC_OscConfig+0x6cc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003964:	4b0b      	ldr	r3, [pc, #44]	; (8003994 <HAL_RCC_OscConfig+0x6d4>)
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6a1b      	ldr	r3, [r3, #32]
 8003974:	429a      	cmp	r2, r3
 8003976:	d106      	bne.n	8003986 <HAL_RCC_OscConfig+0x6c6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003982:	429a      	cmp	r2, r3
 8003984:	d001      	beq.n	800398a <HAL_RCC_OscConfig+0x6ca>
        {
          return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e000      	b.n	800398c <HAL_RCC_OscConfig+0x6cc>
        }
      }
    }
  }

  return HAL_OK;
 800398a:	2300      	movs	r3, #0
}
 800398c:	4618      	mov	r0, r3
 800398e:	3718      	adds	r7, #24
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}
 8003994:	40021000 	.word	0x40021000
 8003998:	0800b078 	.word	0x0800b078
 800399c:	42420060 	.word	0x42420060

080039a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b084      	sub	sp, #16
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d101      	bne.n	80039b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	e176      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x302>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 0301 	and.w	r3, r3, #1
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d116      	bne.n	80039ee <HAL_RCC_ClockConfig+0x4e>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 0302 	and.w	r3, r3, #2
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d110      	bne.n	80039ee <HAL_RCC_ClockConfig+0x4e>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 0304 	and.w	r3, r3, #4
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d10a      	bne.n	80039ee <HAL_RCC_ClockConfig+0x4e>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 0308 	and.w	r3, r3, #8
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d104      	bne.n	80039ee <HAL_RCC_ClockConfig+0x4e>
 80039e4:	f44f 714e 	mov.w	r1, #824	; 0x338
 80039e8:	4874      	ldr	r0, [pc, #464]	; (8003bbc <HAL_RCC_ClockConfig+0x21c>)
 80039ea:	f7fc fdcf 	bl	800058c <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d00a      	beq.n	8003a0a <HAL_RCC_ClockConfig+0x6a>
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d007      	beq.n	8003a0a <HAL_RCC_ClockConfig+0x6a>
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	2b02      	cmp	r3, #2
 80039fe:	d004      	beq.n	8003a0a <HAL_RCC_ClockConfig+0x6a>
 8003a00:	f240 3139 	movw	r1, #825	; 0x339
 8003a04:	486d      	ldr	r0, [pc, #436]	; (8003bbc <HAL_RCC_ClockConfig+0x21c>)
 8003a06:	f7fc fdc1 	bl	800058c <assert_failed>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a0a:	4b6d      	ldr	r3, [pc, #436]	; (8003bc0 <HAL_RCC_ClockConfig+0x220>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0207 	and.w	r2, r3, #7
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d210      	bcs.n	8003a3a <HAL_RCC_ClockConfig+0x9a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a18:	4969      	ldr	r1, [pc, #420]	; (8003bc0 <HAL_RCC_ClockConfig+0x220>)
 8003a1a:	4b69      	ldr	r3, [pc, #420]	; (8003bc0 <HAL_RCC_ClockConfig+0x220>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f023 0207 	bic.w	r2, r3, #7
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a28:	4b65      	ldr	r3, [pc, #404]	; (8003bc0 <HAL_RCC_ClockConfig+0x220>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0207 	and.w	r2, r3, #7
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d001      	beq.n	8003a3a <HAL_RCC_ClockConfig+0x9a>
  {
    return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e133      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x302>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 0302 	and.w	r3, r3, #2
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d049      	beq.n	8003ada <HAL_RCC_ClockConfig+0x13a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0304 	and.w	r3, r3, #4
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d005      	beq.n	8003a5e <HAL_RCC_ClockConfig+0xbe>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a52:	4a5c      	ldr	r2, [pc, #368]	; (8003bc4 <HAL_RCC_ClockConfig+0x224>)
 8003a54:	4b5b      	ldr	r3, [pc, #364]	; (8003bc4 <HAL_RCC_ClockConfig+0x224>)
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003a5c:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0308 	and.w	r3, r3, #8
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d005      	beq.n	8003a76 <HAL_RCC_ClockConfig+0xd6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a6a:	4a56      	ldr	r2, [pc, #344]	; (8003bc4 <HAL_RCC_ClockConfig+0x224>)
 8003a6c:	4b55      	ldr	r3, [pc, #340]	; (8003bc4 <HAL_RCC_ClockConfig+0x224>)
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003a74:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d024      	beq.n	8003ac8 <HAL_RCC_ClockConfig+0x128>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	2b80      	cmp	r3, #128	; 0x80
 8003a84:	d020      	beq.n	8003ac8 <HAL_RCC_ClockConfig+0x128>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	2b90      	cmp	r3, #144	; 0x90
 8003a8c:	d01c      	beq.n	8003ac8 <HAL_RCC_ClockConfig+0x128>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	2ba0      	cmp	r3, #160	; 0xa0
 8003a94:	d018      	beq.n	8003ac8 <HAL_RCC_ClockConfig+0x128>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	2bb0      	cmp	r3, #176	; 0xb0
 8003a9c:	d014      	beq.n	8003ac8 <HAL_RCC_ClockConfig+0x128>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	2bc0      	cmp	r3, #192	; 0xc0
 8003aa4:	d010      	beq.n	8003ac8 <HAL_RCC_ClockConfig+0x128>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	2bd0      	cmp	r3, #208	; 0xd0
 8003aac:	d00c      	beq.n	8003ac8 <HAL_RCC_ClockConfig+0x128>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	2be0      	cmp	r3, #224	; 0xe0
 8003ab4:	d008      	beq.n	8003ac8 <HAL_RCC_ClockConfig+0x128>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	2bf0      	cmp	r3, #240	; 0xf0
 8003abc:	d004      	beq.n	8003ac8 <HAL_RCC_ClockConfig+0x128>
 8003abe:	f240 315f 	movw	r1, #863	; 0x35f
 8003ac2:	483e      	ldr	r0, [pc, #248]	; (8003bbc <HAL_RCC_ClockConfig+0x21c>)
 8003ac4:	f7fc fd62 	bl	800058c <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ac8:	493e      	ldr	r1, [pc, #248]	; (8003bc4 <HAL_RCC_ClockConfig+0x224>)
 8003aca:	4b3e      	ldr	r3, [pc, #248]	; (8003bc4 <HAL_RCC_ClockConfig+0x224>)
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 0301 	and.w	r3, r3, #1
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d051      	beq.n	8003b8a <HAL_RCC_ClockConfig+0x1ea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d00c      	beq.n	8003b08 <HAL_RCC_ClockConfig+0x168>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d008      	beq.n	8003b08 <HAL_RCC_ClockConfig+0x168>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	2b02      	cmp	r3, #2
 8003afc:	d004      	beq.n	8003b08 <HAL_RCC_ClockConfig+0x168>
 8003afe:	f240 3166 	movw	r1, #870	; 0x366
 8003b02:	482e      	ldr	r0, [pc, #184]	; (8003bbc <HAL_RCC_ClockConfig+0x21c>)
 8003b04:	f7fc fd42 	bl	800058c <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d107      	bne.n	8003b20 <HAL_RCC_ClockConfig+0x180>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b10:	4b2c      	ldr	r3, [pc, #176]	; (8003bc4 <HAL_RCC_ClockConfig+0x224>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d115      	bne.n	8003b48 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e0c0      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x302>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	2b02      	cmp	r3, #2
 8003b26:	d107      	bne.n	8003b38 <HAL_RCC_ClockConfig+0x198>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b28:	4b26      	ldr	r3, [pc, #152]	; (8003bc4 <HAL_RCC_ClockConfig+0x224>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d109      	bne.n	8003b48 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	e0b4      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x302>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b38:	4b22      	ldr	r3, [pc, #136]	; (8003bc4 <HAL_RCC_ClockConfig+0x224>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 0302 	and.w	r3, r3, #2
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d101      	bne.n	8003b48 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	e0ac      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x302>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b48:	491e      	ldr	r1, [pc, #120]	; (8003bc4 <HAL_RCC_ClockConfig+0x224>)
 8003b4a:	4b1e      	ldr	r3, [pc, #120]	; (8003bc4 <HAL_RCC_ClockConfig+0x224>)
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	f023 0203 	bic.w	r2, r3, #3
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b5a:	f7fc ffdb 	bl	8000b14 <HAL_GetTick>
 8003b5e:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b60:	e00a      	b.n	8003b78 <HAL_RCC_ClockConfig+0x1d8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b62:	f7fc ffd7 	bl	8000b14 <HAL_GetTick>
 8003b66:	4602      	mov	r2, r0
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d901      	bls.n	8003b78 <HAL_RCC_ClockConfig+0x1d8>
      {
        return HAL_TIMEOUT;
 8003b74:	2303      	movs	r3, #3
 8003b76:	e094      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x302>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b78:	4b12      	ldr	r3, [pc, #72]	; (8003bc4 <HAL_RCC_ClockConfig+0x224>)
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	f003 020c 	and.w	r2, r3, #12
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	429a      	cmp	r2, r3
 8003b88:	d1eb      	bne.n	8003b62 <HAL_RCC_ClockConfig+0x1c2>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b8a:	4b0d      	ldr	r3, [pc, #52]	; (8003bc0 <HAL_RCC_ClockConfig+0x220>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 0207 	and.w	r2, r3, #7
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d917      	bls.n	8003bc8 <HAL_RCC_ClockConfig+0x228>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b98:	4909      	ldr	r1, [pc, #36]	; (8003bc0 <HAL_RCC_ClockConfig+0x220>)
 8003b9a:	4b09      	ldr	r3, [pc, #36]	; (8003bc0 <HAL_RCC_ClockConfig+0x220>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f023 0207 	bic.w	r2, r3, #7
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ba8:	4b05      	ldr	r3, [pc, #20]	; (8003bc0 <HAL_RCC_ClockConfig+0x220>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0207 	and.w	r2, r3, #7
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	d008      	beq.n	8003bc8 <HAL_RCC_ClockConfig+0x228>
  {
    return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e073      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x302>
 8003bba:	bf00      	nop
 8003bbc:	0800b078 	.word	0x0800b078
 8003bc0:	40022000 	.word	0x40022000
 8003bc4:	40021000 	.word	0x40021000
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 0304 	and.w	r3, r3, #4
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d025      	beq.n	8003c20 <HAL_RCC_ClockConfig+0x280>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d018      	beq.n	8003c0e <HAL_RCC_ClockConfig+0x26e>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003be4:	d013      	beq.n	8003c0e <HAL_RCC_ClockConfig+0x26e>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	68db      	ldr	r3, [r3, #12]
 8003bea:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003bee:	d00e      	beq.n	8003c0e <HAL_RCC_ClockConfig+0x26e>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003bf8:	d009      	beq.n	8003c0e <HAL_RCC_ClockConfig+0x26e>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003c02:	d004      	beq.n	8003c0e <HAL_RCC_ClockConfig+0x26e>
 8003c04:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 8003c08:	4828      	ldr	r0, [pc, #160]	; (8003cac <HAL_RCC_ClockConfig+0x30c>)
 8003c0a:	f7fc fcbf 	bl	800058c <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c0e:	4928      	ldr	r1, [pc, #160]	; (8003cb0 <HAL_RCC_ClockConfig+0x310>)
 8003c10:	4b27      	ldr	r3, [pc, #156]	; (8003cb0 <HAL_RCC_ClockConfig+0x310>)
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f003 0308 	and.w	r3, r3, #8
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d026      	beq.n	8003c7a <HAL_RCC_ClockConfig+0x2da>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	691b      	ldr	r3, [r3, #16]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d018      	beq.n	8003c66 <HAL_RCC_ClockConfig+0x2c6>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	691b      	ldr	r3, [r3, #16]
 8003c38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c3c:	d013      	beq.n	8003c66 <HAL_RCC_ClockConfig+0x2c6>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	691b      	ldr	r3, [r3, #16]
 8003c42:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003c46:	d00e      	beq.n	8003c66 <HAL_RCC_ClockConfig+0x2c6>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	691b      	ldr	r3, [r3, #16]
 8003c4c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003c50:	d009      	beq.n	8003c66 <HAL_RCC_ClockConfig+0x2c6>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	691b      	ldr	r3, [r3, #16]
 8003c56:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003c5a:	d004      	beq.n	8003c66 <HAL_RCC_ClockConfig+0x2c6>
 8003c5c:	f240 31ab 	movw	r1, #939	; 0x3ab
 8003c60:	4812      	ldr	r0, [pc, #72]	; (8003cac <HAL_RCC_ClockConfig+0x30c>)
 8003c62:	f7fc fc93 	bl	800058c <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003c66:	4912      	ldr	r1, [pc, #72]	; (8003cb0 <HAL_RCC_ClockConfig+0x310>)
 8003c68:	4b11      	ldr	r3, [pc, #68]	; (8003cb0 <HAL_RCC_ClockConfig+0x310>)
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	691b      	ldr	r3, [r3, #16]
 8003c74:	00db      	lsls	r3, r3, #3
 8003c76:	4313      	orrs	r3, r2
 8003c78:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003c7a:	f000 f821 	bl	8003cc0 <HAL_RCC_GetSysClockFreq>
 8003c7e:	4601      	mov	r1, r0
 8003c80:	4b0b      	ldr	r3, [pc, #44]	; (8003cb0 <HAL_RCC_ClockConfig+0x310>)
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	091b      	lsrs	r3, r3, #4
 8003c86:	f003 030f 	and.w	r3, r3, #15
 8003c8a:	4a0a      	ldr	r2, [pc, #40]	; (8003cb4 <HAL_RCC_ClockConfig+0x314>)
 8003c8c:	5cd3      	ldrb	r3, [r2, r3]
 8003c8e:	fa21 f303 	lsr.w	r3, r1, r3
 8003c92:	4a09      	ldr	r2, [pc, #36]	; (8003cb8 <HAL_RCC_ClockConfig+0x318>)
 8003c94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003c96:	4b09      	ldr	r3, [pc, #36]	; (8003cbc <HAL_RCC_ClockConfig+0x31c>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f7fc fcb8 	bl	8000610 <HAL_InitTick>

  return HAL_OK;
 8003ca0:	2300      	movs	r3, #0
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3710      	adds	r7, #16
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	bf00      	nop
 8003cac:	0800b078 	.word	0x0800b078
 8003cb0:	40021000 	.word	0x40021000
 8003cb4:	0800b1c8 	.word	0x0800b1c8
 8003cb8:	20000000 	.word	0x20000000
 8003cbc:	20000004 	.word	0x20000004

08003cc0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cc0:	b490      	push	{r4, r7}
 8003cc2:	b08a      	sub	sp, #40	; 0x28
 8003cc4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003cc6:	4b2a      	ldr	r3, [pc, #168]	; (8003d70 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003cc8:	1d3c      	adds	r4, r7, #4
 8003cca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003ccc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003cd0:	4b28      	ldr	r3, [pc, #160]	; (8003d74 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003cd2:	881b      	ldrh	r3, [r3, #0]
 8003cd4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	61fb      	str	r3, [r7, #28]
 8003cda:	2300      	movs	r3, #0
 8003cdc:	61bb      	str	r3, [r7, #24]
 8003cde:	2300      	movs	r3, #0
 8003ce0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003cea:	4b23      	ldr	r3, [pc, #140]	; (8003d78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003cf0:	69fb      	ldr	r3, [r7, #28]
 8003cf2:	f003 030c 	and.w	r3, r3, #12
 8003cf6:	2b04      	cmp	r3, #4
 8003cf8:	d002      	beq.n	8003d00 <HAL_RCC_GetSysClockFreq+0x40>
 8003cfa:	2b08      	cmp	r3, #8
 8003cfc:	d003      	beq.n	8003d06 <HAL_RCC_GetSysClockFreq+0x46>
 8003cfe:	e02d      	b.n	8003d5c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003d00:	4b1e      	ldr	r3, [pc, #120]	; (8003d7c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003d02:	623b      	str	r3, [r7, #32]
      break;
 8003d04:	e02d      	b.n	8003d62 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003d06:	69fb      	ldr	r3, [r7, #28]
 8003d08:	0c9b      	lsrs	r3, r3, #18
 8003d0a:	f003 030f 	and.w	r3, r3, #15
 8003d0e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003d12:	4413      	add	r3, r2
 8003d14:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003d18:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003d1a:	69fb      	ldr	r3, [r7, #28]
 8003d1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d013      	beq.n	8003d4c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003d24:	4b14      	ldr	r3, [pc, #80]	; (8003d78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	0c5b      	lsrs	r3, r3, #17
 8003d2a:	f003 0301 	and.w	r3, r3, #1
 8003d2e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003d32:	4413      	add	r3, r2
 8003d34:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003d38:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	4a0f      	ldr	r2, [pc, #60]	; (8003d7c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003d3e:	fb02 f203 	mul.w	r2, r2, r3
 8003d42:	69bb      	ldr	r3, [r7, #24]
 8003d44:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d48:	627b      	str	r3, [r7, #36]	; 0x24
 8003d4a:	e004      	b.n	8003d56 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	4a0c      	ldr	r2, [pc, #48]	; (8003d80 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003d50:	fb02 f303 	mul.w	r3, r2, r3
 8003d54:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d58:	623b      	str	r3, [r7, #32]
      break;
 8003d5a:	e002      	b.n	8003d62 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003d5c:	4b07      	ldr	r3, [pc, #28]	; (8003d7c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003d5e:	623b      	str	r3, [r7, #32]
      break;
 8003d60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d62:	6a3b      	ldr	r3, [r7, #32]
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	3728      	adds	r7, #40	; 0x28
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bc90      	pop	{r4, r7}
 8003d6c:	4770      	bx	lr
 8003d6e:	bf00      	nop
 8003d70:	0800b0b0 	.word	0x0800b0b0
 8003d74:	0800b0c0 	.word	0x0800b0c0
 8003d78:	40021000 	.word	0x40021000
 8003d7c:	007a1200 	.word	0x007a1200
 8003d80:	003d0900 	.word	0x003d0900

08003d84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d84:	b480      	push	{r7}
 8003d86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d88:	4b02      	ldr	r3, [pc, #8]	; (8003d94 <HAL_RCC_GetHCLKFreq+0x10>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bc80      	pop	{r7}
 8003d92:	4770      	bx	lr
 8003d94:	20000000 	.word	0x20000000

08003d98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003d9c:	f7ff fff2 	bl	8003d84 <HAL_RCC_GetHCLKFreq>
 8003da0:	4601      	mov	r1, r0
 8003da2:	4b05      	ldr	r3, [pc, #20]	; (8003db8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	0a1b      	lsrs	r3, r3, #8
 8003da8:	f003 0307 	and.w	r3, r3, #7
 8003dac:	4a03      	ldr	r2, [pc, #12]	; (8003dbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003dae:	5cd3      	ldrb	r3, [r2, r3]
 8003db0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	bd80      	pop	{r7, pc}
 8003db8:	40021000 	.word	0x40021000
 8003dbc:	0800b1d8 	.word	0x0800b1d8

08003dc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003dc4:	f7ff ffde 	bl	8003d84 <HAL_RCC_GetHCLKFreq>
 8003dc8:	4601      	mov	r1, r0
 8003dca:	4b05      	ldr	r3, [pc, #20]	; (8003de0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	0adb      	lsrs	r3, r3, #11
 8003dd0:	f003 0307 	and.w	r3, r3, #7
 8003dd4:	4a03      	ldr	r2, [pc, #12]	; (8003de4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003dd6:	5cd3      	ldrb	r3, [r2, r3]
 8003dd8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	bd80      	pop	{r7, pc}
 8003de0:	40021000 	.word	0x40021000
 8003de4:	0800b1d8 	.word	0x0800b1d8

08003de8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b082      	sub	sp, #8
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d104      	bne.n	8003e02 <HAL_RCC_GetClockConfig+0x1a>
 8003df8:	f240 5123 	movw	r1, #1315	; 0x523
 8003dfc:	4818      	ldr	r0, [pc, #96]	; (8003e60 <HAL_RCC_GetClockConfig+0x78>)
 8003dfe:	f7fc fbc5 	bl	800058c <assert_failed>
  assert_param(pFLatency != NULL);
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d104      	bne.n	8003e12 <HAL_RCC_GetClockConfig+0x2a>
 8003e08:	f240 5124 	movw	r1, #1316	; 0x524
 8003e0c:	4814      	ldr	r0, [pc, #80]	; (8003e60 <HAL_RCC_GetClockConfig+0x78>)
 8003e0e:	f7fc fbbd 	bl	800058c <assert_failed>

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	220f      	movs	r2, #15
 8003e16:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003e18:	4b12      	ldr	r3, [pc, #72]	; (8003e64 <HAL_RCC_GetClockConfig+0x7c>)
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	f003 0203 	and.w	r2, r3, #3
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003e24:	4b0f      	ldr	r3, [pc, #60]	; (8003e64 <HAL_RCC_GetClockConfig+0x7c>)
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003e30:	4b0c      	ldr	r3, [pc, #48]	; (8003e64 <HAL_RCC_GetClockConfig+0x7c>)
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003e3c:	4b09      	ldr	r3, [pc, #36]	; (8003e64 <HAL_RCC_GetClockConfig+0x7c>)
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	08db      	lsrs	r3, r3, #3
 8003e42:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003e4a:	4b07      	ldr	r3, [pc, #28]	; (8003e68 <HAL_RCC_GetClockConfig+0x80>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f003 0207 	and.w	r2, r3, #7
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8003e56:	bf00      	nop
 8003e58:	3708      	adds	r7, #8
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	0800b078 	.word	0x0800b078
 8003e64:	40021000 	.word	0x40021000
 8003e68:	40022000 	.word	0x40022000

08003e6c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b085      	sub	sp, #20
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003e74:	4b0a      	ldr	r3, [pc, #40]	; (8003ea0 <RCC_Delay+0x34>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a0a      	ldr	r2, [pc, #40]	; (8003ea4 <RCC_Delay+0x38>)
 8003e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e7e:	0a5b      	lsrs	r3, r3, #9
 8003e80:	687a      	ldr	r2, [r7, #4]
 8003e82:	fb02 f303 	mul.w	r3, r2, r3
 8003e86:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003e88:	bf00      	nop
  }
  while (Delay --);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	1e5a      	subs	r2, r3, #1
 8003e8e:	60fa      	str	r2, [r7, #12]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d1f9      	bne.n	8003e88 <RCC_Delay+0x1c>
}
 8003e94:	bf00      	nop
 8003e96:	3714      	adds	r7, #20
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bc80      	pop	{r7}
 8003e9c:	4770      	bx	lr
 8003e9e:	bf00      	nop
 8003ea0:	20000000 	.word	0x20000000
 8003ea4:	10624dd3 	.word	0x10624dd3

08003ea8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b086      	sub	sp, #24
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	613b      	str	r3, [r7, #16]
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	60fb      	str	r3, [r7, #12]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
#endif /* STM32F105xC || STM32F107xC */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 0301 	and.w	r3, r3, #1
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d10f      	bne.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 0302 	and.w	r3, r3, #2
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d109      	bne.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 0310 	and.w	r3, r3, #16
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d103      	bne.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8003edc:	216c      	movs	r1, #108	; 0x6c
 8003ede:	4873      	ldr	r0, [pc, #460]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8003ee0:	f7fc fb54 	bl	800058c <assert_failed>

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 0301 	and.w	r3, r3, #1
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	f000 8095 	beq.w	800401c <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    FlagStatus pwrclkchanged = RESET;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	75fb      	strb	r3, [r7, #23]

    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d012      	beq.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f06:	d00d      	beq.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f10:	d008      	beq.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f1a:	d003      	beq.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003f1c:	2174      	movs	r1, #116	; 0x74
 8003f1e:	4863      	ldr	r0, [pc, #396]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8003f20:	f7fc fb34 	bl	800058c <assert_failed>

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f24:	4b62      	ldr	r3, [pc, #392]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003f26:	69db      	ldr	r3, [r3, #28]
 8003f28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d10d      	bne.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f30:	4a5f      	ldr	r2, [pc, #380]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003f32:	4b5f      	ldr	r3, [pc, #380]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003f34:	69db      	ldr	r3, [r3, #28]
 8003f36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f3a:	61d3      	str	r3, [r2, #28]
 8003f3c:	4b5c      	ldr	r3, [pc, #368]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003f3e:	69db      	ldr	r3, [r3, #28]
 8003f40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f44:	60bb      	str	r3, [r7, #8]
 8003f46:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f4c:	4b59      	ldr	r3, [pc, #356]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d118      	bne.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0xe2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f58:	4a56      	ldr	r2, [pc, #344]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8003f5a:	4b56      	ldr	r3, [pc, #344]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f62:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f64:	f7fc fdd6 	bl	8000b14 <HAL_GetTick>
 8003f68:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f6a:	e008      	b.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0xd6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f6c:	f7fc fdd2 	bl	8000b14 <HAL_GetTick>
 8003f70:	4602      	mov	r2, r0
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	1ad3      	subs	r3, r2, r3
 8003f76:	2b64      	cmp	r3, #100	; 0x64
 8003f78:	d901      	bls.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0xd6>
        {
          return HAL_TIMEOUT;
 8003f7a:	2303      	movs	r3, #3
 8003f7c:	e092      	b.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f7e:	4b4d      	ldr	r3, [pc, #308]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d0f0      	beq.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0xc4>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003f8a:	4b49      	ldr	r3, [pc, #292]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003f8c:	6a1b      	ldr	r3, [r3, #32]
 8003f8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f92:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d02e      	beq.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x150>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d027      	beq.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003fa8:	4b41      	ldr	r3, [pc, #260]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003faa:	6a1b      	ldr	r3, [r3, #32]
 8003fac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fb0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003fb2:	4b41      	ldr	r3, [pc, #260]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003fb8:	4b3f      	ldr	r3, [pc, #252]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003fba:	2200      	movs	r2, #0
 8003fbc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003fbe:	4a3c      	ldr	r2, [pc, #240]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f003 0301 	and.w	r3, r3, #1
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d014      	beq.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fce:	f7fc fda1 	bl	8000b14 <HAL_GetTick>
 8003fd2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fd4:	e00a      	b.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x144>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fd6:	f7fc fd9d 	bl	8000b14 <HAL_GetTick>
 8003fda:	4602      	mov	r2, r0
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	1ad3      	subs	r3, r2, r3
 8003fe0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d901      	bls.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x144>
          {
            return HAL_TIMEOUT;
 8003fe8:	2303      	movs	r3, #3
 8003fea:	e05b      	b.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fec:	4b30      	ldr	r3, [pc, #192]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003fee:	6a1b      	ldr	r3, [r3, #32]
 8003ff0:	f003 0302 	and.w	r3, r3, #2
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d0ee      	beq.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x12e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ff8:	492d      	ldr	r1, [pc, #180]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003ffa:	4b2d      	ldr	r3, [pc, #180]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003ffc:	6a1b      	ldr	r3, [r3, #32]
 8003ffe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	4313      	orrs	r3, r2
 8004008:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800400a:	7dfb      	ldrb	r3, [r7, #23]
 800400c:	2b01      	cmp	r3, #1
 800400e:	d105      	bne.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004010:	4a27      	ldr	r2, [pc, #156]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8004012:	4b27      	ldr	r3, [pc, #156]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8004014:	69db      	ldr	r3, [r3, #28]
 8004016:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800401a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 0302 	and.w	r3, r3, #2
 8004024:	2b00      	cmp	r3, #0
 8004026:	d01f      	beq.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d012      	beq.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004038:	d00d      	beq.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004042:	d008      	beq.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800404c:	d003      	beq.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 800404e:	21b9      	movs	r1, #185	; 0xb9
 8004050:	4816      	ldr	r0, [pc, #88]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8004052:	f7fc fa9b 	bl	800058c <assert_failed>

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004056:	4916      	ldr	r1, [pc, #88]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8004058:	4b15      	ldr	r3, [pc, #84]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	4313      	orrs	r3, r2
 8004066:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 0310 	and.w	r3, r3, #16
 8004070:	2b00      	cmp	r3, #0
 8004072:	d016      	beq.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	68db      	ldr	r3, [r3, #12]
 8004078:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800407c:	d008      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	68db      	ldr	r3, [r3, #12]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d004      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004086:	f240 1115 	movw	r1, #277	; 0x115
 800408a:	4808      	ldr	r0, [pc, #32]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x204>)
 800408c:	f7fc fa7e 	bl	800058c <assert_failed>

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004090:	4907      	ldr	r1, [pc, #28]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8004092:	4b07      	ldr	r3, [pc, #28]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	68db      	ldr	r3, [r3, #12]
 800409e:	4313      	orrs	r3, r2
 80040a0:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80040a2:	2300      	movs	r3, #0
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	3718      	adds	r7, #24
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}
 80040ac:	0800b0c4 	.word	0x0800b0c4
 80040b0:	40021000 	.word	0x40021000
 80040b4:	40007000 	.word	0x40007000
 80040b8:	42420440 	.word	0x42420440

080040bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b082      	sub	sp, #8
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d101      	bne.n	80040ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e093      	b.n	80041f6 <HAL_TIM_Base_Init+0x13a>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a4b      	ldr	r2, [pc, #300]	; (8004200 <HAL_TIM_Base_Init+0x144>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d013      	beq.n	8004100 <HAL_TIM_Base_Init+0x44>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040e0:	d00e      	beq.n	8004100 <HAL_TIM_Base_Init+0x44>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a47      	ldr	r2, [pc, #284]	; (8004204 <HAL_TIM_Base_Init+0x148>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d009      	beq.n	8004100 <HAL_TIM_Base_Init+0x44>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a45      	ldr	r2, [pc, #276]	; (8004208 <HAL_TIM_Base_Init+0x14c>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d004      	beq.n	8004100 <HAL_TIM_Base_Init+0x44>
 80040f6:	f240 1113 	movw	r1, #275	; 0x113
 80040fa:	4844      	ldr	r0, [pc, #272]	; (800420c <HAL_TIM_Base_Init+0x150>)
 80040fc:	f7fc fa46 	bl	800058c <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d014      	beq.n	8004132 <HAL_TIM_Base_Init+0x76>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	2b10      	cmp	r3, #16
 800410e:	d010      	beq.n	8004132 <HAL_TIM_Base_Init+0x76>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	2b20      	cmp	r3, #32
 8004116:	d00c      	beq.n	8004132 <HAL_TIM_Base_Init+0x76>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	2b40      	cmp	r3, #64	; 0x40
 800411e:	d008      	beq.n	8004132 <HAL_TIM_Base_Init+0x76>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	2b60      	cmp	r3, #96	; 0x60
 8004126:	d004      	beq.n	8004132 <HAL_TIM_Base_Init+0x76>
 8004128:	f44f 718a 	mov.w	r1, #276	; 0x114
 800412c:	4837      	ldr	r0, [pc, #220]	; (800420c <HAL_TIM_Base_Init+0x150>)
 800412e:	f7fc fa2d 	bl	800058c <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	691b      	ldr	r3, [r3, #16]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d00e      	beq.n	8004158 <HAL_TIM_Base_Init+0x9c>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	691b      	ldr	r3, [r3, #16]
 800413e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004142:	d009      	beq.n	8004158 <HAL_TIM_Base_Init+0x9c>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	691b      	ldr	r3, [r3, #16]
 8004148:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800414c:	d004      	beq.n	8004158 <HAL_TIM_Base_Init+0x9c>
 800414e:	f240 1115 	movw	r1, #277	; 0x115
 8004152:	482e      	ldr	r0, [pc, #184]	; (800420c <HAL_TIM_Base_Init+0x150>)
 8004154:	f7fc fa1a 	bl	800058c <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	699b      	ldr	r3, [r3, #24]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d008      	beq.n	8004172 <HAL_TIM_Base_Init+0xb6>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	699b      	ldr	r3, [r3, #24]
 8004164:	2b80      	cmp	r3, #128	; 0x80
 8004166:	d004      	beq.n	8004172 <HAL_TIM_Base_Init+0xb6>
 8004168:	f44f 718b 	mov.w	r1, #278	; 0x116
 800416c:	4827      	ldr	r0, [pc, #156]	; (800420c <HAL_TIM_Base_Init+0x150>)
 800416e:	f7fc fa0d 	bl	800058c <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004178:	b2db      	uxtb	r3, r3
 800417a:	2b00      	cmp	r3, #0
 800417c:	d106      	bne.n	800418c <HAL_TIM_Base_Init+0xd0>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f000 f842 	bl	8004210 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2202      	movs	r2, #2
 8004190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	3304      	adds	r3, #4
 800419c:	4619      	mov	r1, r3
 800419e:	4610      	mov	r0, r2
 80041a0:	f000 f9d8 	bl	8004554 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2201      	movs	r2, #1
 80041a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2201      	movs	r2, #1
 80041b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2201      	movs	r2, #1
 80041b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2201      	movs	r2, #1
 80041c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2201      	movs	r2, #1
 80041c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2201      	movs	r2, #1
 80041d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2201      	movs	r2, #1
 80041d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2201      	movs	r2, #1
 80041e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2201      	movs	r2, #1
 80041f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041f4:	2300      	movs	r3, #0
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3708      	adds	r7, #8
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}
 80041fe:	bf00      	nop
 8004200:	40012c00 	.word	0x40012c00
 8004204:	40000400 	.word	0x40000400
 8004208:	40000800 	.word	0x40000800
 800420c:	0800b114 	.word	0x0800b114

08004210 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004210:	b480      	push	{r7}
 8004212:	b083      	sub	sp, #12
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004218:	bf00      	nop
 800421a:	370c      	adds	r7, #12
 800421c:	46bd      	mov	sp, r7
 800421e:	bc80      	pop	{r7}
 8004220:	4770      	bx	lr
	...

08004224 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b084      	sub	sp, #16
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a2e      	ldr	r2, [pc, #184]	; (80042ec <HAL_TIM_Base_Start_IT+0xc8>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d013      	beq.n	800425e <HAL_TIM_Base_Start_IT+0x3a>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800423e:	d00e      	beq.n	800425e <HAL_TIM_Base_Start_IT+0x3a>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a2a      	ldr	r2, [pc, #168]	; (80042f0 <HAL_TIM_Base_Start_IT+0xcc>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d009      	beq.n	800425e <HAL_TIM_Base_Start_IT+0x3a>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a29      	ldr	r2, [pc, #164]	; (80042f4 <HAL_TIM_Base_Start_IT+0xd0>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d004      	beq.n	800425e <HAL_TIM_Base_Start_IT+0x3a>
 8004254:	f240 11cf 	movw	r1, #463	; 0x1cf
 8004258:	4827      	ldr	r0, [pc, #156]	; (80042f8 <HAL_TIM_Base_Start_IT+0xd4>)
 800425a:	f7fc f997 	bl	800058c <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004264:	b2db      	uxtb	r3, r3
 8004266:	2b01      	cmp	r3, #1
 8004268:	d001      	beq.n	800426e <HAL_TIM_Base_Start_IT+0x4a>
  {
    return HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	e03a      	b.n	80042e4 <HAL_TIM_Base_Start_IT+0xc0>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2202      	movs	r2, #2
 8004272:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	6812      	ldr	r2, [r2, #0]
 800427e:	68d2      	ldr	r2, [r2, #12]
 8004280:	f042 0201 	orr.w	r2, r2, #1
 8004284:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a18      	ldr	r2, [pc, #96]	; (80042ec <HAL_TIM_Base_Start_IT+0xc8>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d00e      	beq.n	80042ae <HAL_TIM_Base_Start_IT+0x8a>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004298:	d009      	beq.n	80042ae <HAL_TIM_Base_Start_IT+0x8a>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a14      	ldr	r2, [pc, #80]	; (80042f0 <HAL_TIM_Base_Start_IT+0xcc>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d004      	beq.n	80042ae <HAL_TIM_Base_Start_IT+0x8a>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a12      	ldr	r2, [pc, #72]	; (80042f4 <HAL_TIM_Base_Start_IT+0xd0>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d111      	bne.n	80042d2 <HAL_TIM_Base_Start_IT+0xae>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	f003 0307 	and.w	r3, r3, #7
 80042b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2b06      	cmp	r3, #6
 80042be:	d010      	beq.n	80042e2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	687a      	ldr	r2, [r7, #4]
 80042c6:	6812      	ldr	r2, [r2, #0]
 80042c8:	6812      	ldr	r2, [r2, #0]
 80042ca:	f042 0201 	orr.w	r2, r2, #1
 80042ce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042d0:	e007      	b.n	80042e2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	687a      	ldr	r2, [r7, #4]
 80042d8:	6812      	ldr	r2, [r2, #0]
 80042da:	6812      	ldr	r2, [r2, #0]
 80042dc:	f042 0201 	orr.w	r2, r2, #1
 80042e0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80042e2:	2300      	movs	r3, #0
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3710      	adds	r7, #16
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}
 80042ec:	40012c00 	.word	0x40012c00
 80042f0:	40000400 	.word	0x40000400
 80042f4:	40000800 	.word	0x40000800
 80042f8:	0800b114 	.word	0x0800b114

080042fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b082      	sub	sp, #8
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	691b      	ldr	r3, [r3, #16]
 800430a:	f003 0302 	and.w	r3, r3, #2
 800430e:	2b02      	cmp	r3, #2
 8004310:	d122      	bne.n	8004358 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	f003 0302 	and.w	r3, r3, #2
 800431c:	2b02      	cmp	r3, #2
 800431e:	d11b      	bne.n	8004358 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f06f 0202 	mvn.w	r2, #2
 8004328:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2201      	movs	r2, #1
 800432e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	699b      	ldr	r3, [r3, #24]
 8004336:	f003 0303 	and.w	r3, r3, #3
 800433a:	2b00      	cmp	r3, #0
 800433c:	d003      	beq.n	8004346 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f000 f8ed 	bl	800451e <HAL_TIM_IC_CaptureCallback>
 8004344:	e005      	b.n	8004352 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f000 f8e0 	bl	800450c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f000 f8ef 	bl	8004530 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2200      	movs	r2, #0
 8004356:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	691b      	ldr	r3, [r3, #16]
 800435e:	f003 0304 	and.w	r3, r3, #4
 8004362:	2b04      	cmp	r3, #4
 8004364:	d122      	bne.n	80043ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	f003 0304 	and.w	r3, r3, #4
 8004370:	2b04      	cmp	r3, #4
 8004372:	d11b      	bne.n	80043ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f06f 0204 	mvn.w	r2, #4
 800437c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2202      	movs	r2, #2
 8004382:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	699b      	ldr	r3, [r3, #24]
 800438a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800438e:	2b00      	cmp	r3, #0
 8004390:	d003      	beq.n	800439a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f000 f8c3 	bl	800451e <HAL_TIM_IC_CaptureCallback>
 8004398:	e005      	b.n	80043a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f000 f8b6 	bl	800450c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f000 f8c5 	bl	8004530 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2200      	movs	r2, #0
 80043aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	691b      	ldr	r3, [r3, #16]
 80043b2:	f003 0308 	and.w	r3, r3, #8
 80043b6:	2b08      	cmp	r3, #8
 80043b8:	d122      	bne.n	8004400 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	68db      	ldr	r3, [r3, #12]
 80043c0:	f003 0308 	and.w	r3, r3, #8
 80043c4:	2b08      	cmp	r3, #8
 80043c6:	d11b      	bne.n	8004400 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f06f 0208 	mvn.w	r2, #8
 80043d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2204      	movs	r2, #4
 80043d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	69db      	ldr	r3, [r3, #28]
 80043de:	f003 0303 	and.w	r3, r3, #3
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d003      	beq.n	80043ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f000 f899 	bl	800451e <HAL_TIM_IC_CaptureCallback>
 80043ec:	e005      	b.n	80043fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f000 f88c 	bl	800450c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	f000 f89b 	bl	8004530 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2200      	movs	r2, #0
 80043fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	691b      	ldr	r3, [r3, #16]
 8004406:	f003 0310 	and.w	r3, r3, #16
 800440a:	2b10      	cmp	r3, #16
 800440c:	d122      	bne.n	8004454 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	f003 0310 	and.w	r3, r3, #16
 8004418:	2b10      	cmp	r3, #16
 800441a:	d11b      	bne.n	8004454 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f06f 0210 	mvn.w	r2, #16
 8004424:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2208      	movs	r2, #8
 800442a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	69db      	ldr	r3, [r3, #28]
 8004432:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004436:	2b00      	cmp	r3, #0
 8004438:	d003      	beq.n	8004442 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f000 f86f 	bl	800451e <HAL_TIM_IC_CaptureCallback>
 8004440:	e005      	b.n	800444e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f000 f862 	bl	800450c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	f000 f871 	bl	8004530 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2200      	movs	r2, #0
 8004452:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	691b      	ldr	r3, [r3, #16]
 800445a:	f003 0301 	and.w	r3, r3, #1
 800445e:	2b01      	cmp	r3, #1
 8004460:	d10e      	bne.n	8004480 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	68db      	ldr	r3, [r3, #12]
 8004468:	f003 0301 	and.w	r3, r3, #1
 800446c:	2b01      	cmp	r3, #1
 800446e:	d107      	bne.n	8004480 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f06f 0201 	mvn.w	r2, #1
 8004478:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f7fc f870 	bl	8000560 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	691b      	ldr	r3, [r3, #16]
 8004486:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800448a:	2b80      	cmp	r3, #128	; 0x80
 800448c:	d10e      	bne.n	80044ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	68db      	ldr	r3, [r3, #12]
 8004494:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004498:	2b80      	cmp	r3, #128	; 0x80
 800449a:	d107      	bne.n	80044ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80044a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	f000 f8bf 	bl	800462a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	691b      	ldr	r3, [r3, #16]
 80044b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044b6:	2b40      	cmp	r3, #64	; 0x40
 80044b8:	d10e      	bne.n	80044d8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044c4:	2b40      	cmp	r3, #64	; 0x40
 80044c6:	d107      	bne.n	80044d8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80044d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f000 f835 	bl	8004542 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	691b      	ldr	r3, [r3, #16]
 80044de:	f003 0320 	and.w	r3, r3, #32
 80044e2:	2b20      	cmp	r3, #32
 80044e4:	d10e      	bne.n	8004504 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	68db      	ldr	r3, [r3, #12]
 80044ec:	f003 0320 	and.w	r3, r3, #32
 80044f0:	2b20      	cmp	r3, #32
 80044f2:	d107      	bne.n	8004504 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f06f 0220 	mvn.w	r2, #32
 80044fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f000 f88a 	bl	8004618 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004504:	bf00      	nop
 8004506:	3708      	adds	r7, #8
 8004508:	46bd      	mov	sp, r7
 800450a:	bd80      	pop	{r7, pc}

0800450c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800450c:	b480      	push	{r7}
 800450e:	b083      	sub	sp, #12
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004514:	bf00      	nop
 8004516:	370c      	adds	r7, #12
 8004518:	46bd      	mov	sp, r7
 800451a:	bc80      	pop	{r7}
 800451c:	4770      	bx	lr

0800451e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800451e:	b480      	push	{r7}
 8004520:	b083      	sub	sp, #12
 8004522:	af00      	add	r7, sp, #0
 8004524:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004526:	bf00      	nop
 8004528:	370c      	adds	r7, #12
 800452a:	46bd      	mov	sp, r7
 800452c:	bc80      	pop	{r7}
 800452e:	4770      	bx	lr

08004530 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004530:	b480      	push	{r7}
 8004532:	b083      	sub	sp, #12
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004538:	bf00      	nop
 800453a:	370c      	adds	r7, #12
 800453c:	46bd      	mov	sp, r7
 800453e:	bc80      	pop	{r7}
 8004540:	4770      	bx	lr

08004542 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004542:	b480      	push	{r7}
 8004544:	b083      	sub	sp, #12
 8004546:	af00      	add	r7, sp, #0
 8004548:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800454a:	bf00      	nop
 800454c:	370c      	adds	r7, #12
 800454e:	46bd      	mov	sp, r7
 8004550:	bc80      	pop	{r7}
 8004552:	4770      	bx	lr

08004554 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004554:	b480      	push	{r7}
 8004556:	b085      	sub	sp, #20
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
 800455c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	4a29      	ldr	r2, [pc, #164]	; (800460c <TIM_Base_SetConfig+0xb8>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d00b      	beq.n	8004584 <TIM_Base_SetConfig+0x30>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004572:	d007      	beq.n	8004584 <TIM_Base_SetConfig+0x30>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	4a26      	ldr	r2, [pc, #152]	; (8004610 <TIM_Base_SetConfig+0xbc>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d003      	beq.n	8004584 <TIM_Base_SetConfig+0x30>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	4a25      	ldr	r2, [pc, #148]	; (8004614 <TIM_Base_SetConfig+0xc0>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d108      	bne.n	8004596 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800458a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	68fa      	ldr	r2, [r7, #12]
 8004592:	4313      	orrs	r3, r2
 8004594:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	4a1c      	ldr	r2, [pc, #112]	; (800460c <TIM_Base_SetConfig+0xb8>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d00b      	beq.n	80045b6 <TIM_Base_SetConfig+0x62>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045a4:	d007      	beq.n	80045b6 <TIM_Base_SetConfig+0x62>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	4a19      	ldr	r2, [pc, #100]	; (8004610 <TIM_Base_SetConfig+0xbc>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d003      	beq.n	80045b6 <TIM_Base_SetConfig+0x62>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	4a18      	ldr	r2, [pc, #96]	; (8004614 <TIM_Base_SetConfig+0xc0>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d108      	bne.n	80045c8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	68db      	ldr	r3, [r3, #12]
 80045c2:	68fa      	ldr	r2, [r7, #12]
 80045c4:	4313      	orrs	r3, r2
 80045c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	695b      	ldr	r3, [r3, #20]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	68fa      	ldr	r2, [r7, #12]
 80045da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	689a      	ldr	r2, [r3, #8]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	4a07      	ldr	r2, [pc, #28]	; (800460c <TIM_Base_SetConfig+0xb8>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d103      	bne.n	80045fc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	691a      	ldr	r2, [r3, #16]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2201      	movs	r2, #1
 8004600:	615a      	str	r2, [r3, #20]
}
 8004602:	bf00      	nop
 8004604:	3714      	adds	r7, #20
 8004606:	46bd      	mov	sp, r7
 8004608:	bc80      	pop	{r7}
 800460a:	4770      	bx	lr
 800460c:	40012c00 	.word	0x40012c00
 8004610:	40000400 	.word	0x40000400
 8004614:	40000800 	.word	0x40000800

08004618 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004618:	b480      	push	{r7}
 800461a:	b083      	sub	sp, #12
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004620:	bf00      	nop
 8004622:	370c      	adds	r7, #12
 8004624:	46bd      	mov	sp, r7
 8004626:	bc80      	pop	{r7}
 8004628:	4770      	bx	lr

0800462a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800462a:	b480      	push	{r7}
 800462c:	b083      	sub	sp, #12
 800462e:	af00      	add	r7, sp, #0
 8004630:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004632:	bf00      	nop
 8004634:	370c      	adds	r7, #12
 8004636:	46bd      	mov	sp, r7
 8004638:	bc80      	pop	{r7}
 800463a:	4770      	bx	lr

0800463c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b082      	sub	sp, #8
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d101      	bne.n	800464e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	e092      	b.n	8004774 <HAL_UART_Init+0x138>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	699b      	ldr	r3, [r3, #24]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d02c      	beq.n	80046b0 <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2 and USART3 */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a48      	ldr	r2, [pc, #288]	; (800477c <HAL_UART_Init+0x140>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d00e      	beq.n	800467e <HAL_UART_Init+0x42>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a46      	ldr	r2, [pc, #280]	; (8004780 <HAL_UART_Init+0x144>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d009      	beq.n	800467e <HAL_UART_Init+0x42>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a45      	ldr	r2, [pc, #276]	; (8004784 <HAL_UART_Init+0x148>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d004      	beq.n	800467e <HAL_UART_Init+0x42>
 8004674:	f44f 71b6 	mov.w	r1, #364	; 0x16c
 8004678:	4843      	ldr	r0, [pc, #268]	; (8004788 <HAL_UART_Init+0x14c>)
 800467a:	f7fb ff87 	bl	800058c <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	699b      	ldr	r3, [r3, #24]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d028      	beq.n	80046d8 <HAL_UART_Init+0x9c>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	699b      	ldr	r3, [r3, #24]
 800468a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800468e:	d023      	beq.n	80046d8 <HAL_UART_Init+0x9c>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	699b      	ldr	r3, [r3, #24]
 8004694:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004698:	d01e      	beq.n	80046d8 <HAL_UART_Init+0x9c>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	699b      	ldr	r3, [r3, #24]
 800469e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046a2:	d019      	beq.n	80046d8 <HAL_UART_Init+0x9c>
 80046a4:	f240 116d 	movw	r1, #365	; 0x16d
 80046a8:	4837      	ldr	r0, [pc, #220]	; (8004788 <HAL_UART_Init+0x14c>)
 80046aa:	f7fb ff6f 	bl	800058c <assert_failed>
 80046ae:	e013      	b.n	80046d8 <HAL_UART_Init+0x9c>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a31      	ldr	r2, [pc, #196]	; (800477c <HAL_UART_Init+0x140>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d00e      	beq.n	80046d8 <HAL_UART_Init+0x9c>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a30      	ldr	r2, [pc, #192]	; (8004780 <HAL_UART_Init+0x144>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d009      	beq.n	80046d8 <HAL_UART_Init+0x9c>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a2e      	ldr	r2, [pc, #184]	; (8004784 <HAL_UART_Init+0x148>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d004      	beq.n	80046d8 <HAL_UART_Init+0x9c>
 80046ce:	f240 1171 	movw	r1, #369	; 0x171
 80046d2:	482d      	ldr	r0, [pc, #180]	; (8004788 <HAL_UART_Init+0x14c>)
 80046d4:	f7fb ff5a 	bl	800058c <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d009      	beq.n	80046f4 <HAL_UART_Init+0xb8>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046e8:	d004      	beq.n	80046f4 <HAL_UART_Init+0xb8>
 80046ea:	f240 1173 	movw	r1, #371	; 0x173
 80046ee:	4826      	ldr	r0, [pc, #152]	; (8004788 <HAL_UART_Init+0x14c>)
 80046f0:	f7fb ff4c 	bl	800058c <assert_failed>
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046fa:	b2db      	uxtb	r3, r3
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d106      	bne.n	800470e <HAL_UART_Init+0xd2>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2200      	movs	r2, #0
 8004704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	f7fc f89d 	bl	8000848 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2224      	movs	r2, #36	; 0x24
 8004712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	687a      	ldr	r2, [r7, #4]
 800471c:	6812      	ldr	r2, [r2, #0]
 800471e:	68d2      	ldr	r2, [r2, #12]
 8004720:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004724:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f000 fd74 	bl	8005214 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	687a      	ldr	r2, [r7, #4]
 8004732:	6812      	ldr	r2, [r2, #0]
 8004734:	6912      	ldr	r2, [r2, #16]
 8004736:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800473a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	687a      	ldr	r2, [r7, #4]
 8004742:	6812      	ldr	r2, [r2, #0]
 8004744:	6952      	ldr	r2, [r2, #20]
 8004746:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800474a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	687a      	ldr	r2, [r7, #4]
 8004752:	6812      	ldr	r2, [r2, #0]
 8004754:	68d2      	ldr	r2, [r2, #12]
 8004756:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800475a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2200      	movs	r2, #0
 8004760:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2220      	movs	r2, #32
 8004766:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2220      	movs	r2, #32
 800476e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004772:	2300      	movs	r3, #0
}
 8004774:	4618      	mov	r0, r3
 8004776:	3708      	adds	r7, #8
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}
 800477c:	40013800 	.word	0x40013800
 8004780:	40004400 	.word	0x40004400
 8004784:	40004800 	.word	0x40004800
 8004788:	0800b14c 	.word	0x0800b14c

0800478c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b086      	sub	sp, #24
 8004790:	af00      	add	r7, sp, #0
 8004792:	60f8      	str	r0, [r7, #12]
 8004794:	60b9      	str	r1, [r7, #8]
 8004796:	4613      	mov	r3, r2
 8004798:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	2b20      	cmp	r3, #32
 80047a4:	d153      	bne.n	800484e <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d002      	beq.n	80047b2 <HAL_UART_Transmit_DMA+0x26>
 80047ac:	88fb      	ldrh	r3, [r7, #6]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d101      	bne.n	80047b6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	e04c      	b.n	8004850 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d101      	bne.n	80047c4 <HAL_UART_Transmit_DMA+0x38>
 80047c0:	2302      	movs	r3, #2
 80047c2:	e045      	b.n	8004850 <HAL_UART_Transmit_DMA+0xc4>
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2201      	movs	r2, #1
 80047c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80047cc:	68ba      	ldr	r2, [r7, #8]
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	88fa      	ldrh	r2, [r7, #6]
 80047d6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	88fa      	ldrh	r2, [r7, #6]
 80047dc:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2200      	movs	r2, #0
 80047e2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2221      	movs	r2, #33	; 0x21
 80047e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047f0:	4a19      	ldr	r2, [pc, #100]	; (8004858 <HAL_UART_Transmit_DMA+0xcc>)
 80047f2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047f8:	4a18      	ldr	r2, [pc, #96]	; (800485c <HAL_UART_Transmit_DMA+0xd0>)
 80047fa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004800:	4a17      	ldr	r2, [pc, #92]	; (8004860 <HAL_UART_Transmit_DMA+0xd4>)
 8004802:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004808:	2200      	movs	r2, #0
 800480a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 800480c:	f107 0308 	add.w	r3, r7, #8
 8004810:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	6819      	ldr	r1, [r3, #0]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	3304      	adds	r3, #4
 8004820:	461a      	mov	r2, r3
 8004822:	88fb      	ldrh	r3, [r7, #6]
 8004824:	f7fc fb8c 	bl	8000f40 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004830:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2200      	movs	r2, #0
 8004836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	68fa      	ldr	r2, [r7, #12]
 8004840:	6812      	ldr	r2, [r2, #0]
 8004842:	6952      	ldr	r2, [r2, #20]
 8004844:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004848:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800484a:	2300      	movs	r3, #0
 800484c:	e000      	b.n	8004850 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800484e:	2302      	movs	r3, #2
  }
}
 8004850:	4618      	mov	r0, r3
 8004852:	3718      	adds	r7, #24
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}
 8004858:	08004cb7 	.word	0x08004cb7
 800485c:	08004d09 	.word	0x08004d09
 8004860:	08004df1 	.word	0x08004df1

08004864 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b086      	sub	sp, #24
 8004868:	af00      	add	r7, sp, #0
 800486a:	60f8      	str	r0, [r7, #12]
 800486c:	60b9      	str	r1, [r7, #8]
 800486e:	4613      	mov	r3, r2
 8004870:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004878:	b2db      	uxtb	r3, r3
 800487a:	2b20      	cmp	r3, #32
 800487c:	d13c      	bne.n	80048f8 <HAL_UARTEx_ReceiveToIdle_DMA+0x94>
  {
    if ((pData == NULL) || (Size == 0U))
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d002      	beq.n	800488a <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8004884:	88fb      	ldrh	r3, [r7, #6]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d101      	bne.n	800488e <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e035      	b.n	80048fa <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
    }

    __HAL_LOCK(huart);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004894:	2b01      	cmp	r3, #1
 8004896:	d101      	bne.n	800489c <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8004898:	2302      	movs	r3, #2
 800489a:	e02e      	b.n	80048fa <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2201      	movs	r2, #1
 80048a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2201      	movs	r2, #1
 80048a8:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80048aa:	88fb      	ldrh	r3, [r7, #6]
 80048ac:	461a      	mov	r2, r3
 80048ae:	68b9      	ldr	r1, [r7, #8]
 80048b0:	68f8      	ldr	r0, [r7, #12]
 80048b2:	f000 fae7 	bl	8004e84 <UART_Start_Receive_DMA>
 80048b6:	4603      	mov	r3, r0
 80048b8:	75fb      	strb	r3, [r7, #23]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80048ba:	7dfb      	ldrb	r3, [r7, #23]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d119      	bne.n	80048f4 <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d113      	bne.n	80048f0 <HAL_UARTEx_ReceiveToIdle_DMA+0x8c>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80048c8:	2300      	movs	r3, #0
 80048ca:	613b      	str	r3, [r7, #16]
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	613b      	str	r3, [r7, #16]
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	613b      	str	r3, [r7, #16]
 80048dc:	693b      	ldr	r3, [r7, #16]
        SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	68fa      	ldr	r2, [r7, #12]
 80048e4:	6812      	ldr	r2, [r2, #0]
 80048e6:	68d2      	ldr	r2, [r2, #12]
 80048e8:	f042 0210 	orr.w	r2, r2, #16
 80048ec:	60da      	str	r2, [r3, #12]
 80048ee:	e001      	b.n	80048f4 <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	75fb      	strb	r3, [r7, #23]
      }
    }

    return status;
 80048f4:	7dfb      	ldrb	r3, [r7, #23]
 80048f6:	e000      	b.n	80048fa <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
  }
  else
  {
    return HAL_BUSY;
 80048f8:	2302      	movs	r3, #2
  }
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3718      	adds	r7, #24
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}
	...

08004904 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b08a      	sub	sp, #40	; 0x28
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	68db      	ldr	r3, [r3, #12]
 800491a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	695b      	ldr	r3, [r3, #20]
 8004922:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004924:	2300      	movs	r3, #0
 8004926:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004928:	2300      	movs	r3, #0
 800492a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800492c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492e:	f003 030f 	and.w	r3, r3, #15
 8004932:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004934:	69bb      	ldr	r3, [r7, #24]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d10d      	bne.n	8004956 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800493a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800493c:	f003 0320 	and.w	r3, r3, #32
 8004940:	2b00      	cmp	r3, #0
 8004942:	d008      	beq.n	8004956 <HAL_UART_IRQHandler+0x52>
 8004944:	6a3b      	ldr	r3, [r7, #32]
 8004946:	f003 0320 	and.w	r3, r3, #32
 800494a:	2b00      	cmp	r3, #0
 800494c:	d003      	beq.n	8004956 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f000 fbb7 	bl	80050c2 <UART_Receive_IT>
      return;
 8004954:	e17c      	b.n	8004c50 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004956:	69bb      	ldr	r3, [r7, #24]
 8004958:	2b00      	cmp	r3, #0
 800495a:	f000 80b1 	beq.w	8004ac0 <HAL_UART_IRQHandler+0x1bc>
 800495e:	69fb      	ldr	r3, [r7, #28]
 8004960:	f003 0301 	and.w	r3, r3, #1
 8004964:	2b00      	cmp	r3, #0
 8004966:	d105      	bne.n	8004974 <HAL_UART_IRQHandler+0x70>
 8004968:	6a3b      	ldr	r3, [r7, #32]
 800496a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800496e:	2b00      	cmp	r3, #0
 8004970:	f000 80a6 	beq.w	8004ac0 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004976:	f003 0301 	and.w	r3, r3, #1
 800497a:	2b00      	cmp	r3, #0
 800497c:	d00a      	beq.n	8004994 <HAL_UART_IRQHandler+0x90>
 800497e:	6a3b      	ldr	r3, [r7, #32]
 8004980:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004984:	2b00      	cmp	r3, #0
 8004986:	d005      	beq.n	8004994 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800498c:	f043 0201 	orr.w	r2, r3, #1
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004996:	f003 0304 	and.w	r3, r3, #4
 800499a:	2b00      	cmp	r3, #0
 800499c:	d00a      	beq.n	80049b4 <HAL_UART_IRQHandler+0xb0>
 800499e:	69fb      	ldr	r3, [r7, #28]
 80049a0:	f003 0301 	and.w	r3, r3, #1
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d005      	beq.n	80049b4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ac:	f043 0202 	orr.w	r2, r3, #2
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80049b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b6:	f003 0302 	and.w	r3, r3, #2
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d00a      	beq.n	80049d4 <HAL_UART_IRQHandler+0xd0>
 80049be:	69fb      	ldr	r3, [r7, #28]
 80049c0:	f003 0301 	and.w	r3, r3, #1
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d005      	beq.n	80049d4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049cc:	f043 0204 	orr.w	r2, r3, #4
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80049d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d6:	f003 0308 	and.w	r3, r3, #8
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d00f      	beq.n	80049fe <HAL_UART_IRQHandler+0xfa>
 80049de:	6a3b      	ldr	r3, [r7, #32]
 80049e0:	f003 0320 	and.w	r3, r3, #32
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d104      	bne.n	80049f2 <HAL_UART_IRQHandler+0xee>
 80049e8:	69fb      	ldr	r3, [r7, #28]
 80049ea:	f003 0301 	and.w	r3, r3, #1
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d005      	beq.n	80049fe <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f6:	f043 0208 	orr.w	r2, r3, #8
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	f000 811f 	beq.w	8004c46 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0a:	f003 0320 	and.w	r3, r3, #32
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d007      	beq.n	8004a22 <HAL_UART_IRQHandler+0x11e>
 8004a12:	6a3b      	ldr	r3, [r7, #32]
 8004a14:	f003 0320 	and.w	r3, r3, #32
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d002      	beq.n	8004a22 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f000 fb50 	bl	80050c2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	695b      	ldr	r3, [r3, #20]
 8004a28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	bf14      	ite	ne
 8004a30:	2301      	movne	r3, #1
 8004a32:	2300      	moveq	r3, #0
 8004a34:	b2db      	uxtb	r3, r3
 8004a36:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a3c:	f003 0308 	and.w	r3, r3, #8
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d102      	bne.n	8004a4a <HAL_UART_IRQHandler+0x146>
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d031      	beq.n	8004aae <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f000 fa93 	bl	8004f76 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	695b      	ldr	r3, [r3, #20]
 8004a56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d023      	beq.n	8004aa6 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	6812      	ldr	r2, [r2, #0]
 8004a66:	6952      	ldr	r2, [r2, #20]
 8004a68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a6c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d013      	beq.n	8004a9e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a7a:	4a77      	ldr	r2, [pc, #476]	; (8004c58 <HAL_UART_IRQHandler+0x354>)
 8004a7c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a82:	4618      	mov	r0, r3
 8004a84:	f7fc fb04 	bl	8001090 <HAL_DMA_Abort_IT>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d016      	beq.n	8004abc <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a94:	687a      	ldr	r2, [r7, #4]
 8004a96:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004a98:	4610      	mov	r0, r2
 8004a9a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a9c:	e00e      	b.n	8004abc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f000 f900 	bl	8004ca4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004aa4:	e00a      	b.n	8004abc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f000 f8fc 	bl	8004ca4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004aac:	e006      	b.n	8004abc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f000 f8f8 	bl	8004ca4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004aba:	e0c4      	b.n	8004c46 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004abc:	bf00      	nop
    return;
 8004abe:	e0c2      	b.n	8004c46 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	f040 80a1 	bne.w	8004c0c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004acc:	f003 0310 	and.w	r3, r3, #16
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	f000 809b 	beq.w	8004c0c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004ad6:	6a3b      	ldr	r3, [r7, #32]
 8004ad8:	f003 0310 	and.w	r3, r3, #16
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	f000 8095 	beq.w	8004c0c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	60fb      	str	r3, [r7, #12]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	60fb      	str	r3, [r7, #12]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	60fb      	str	r3, [r7, #12]
 8004af6:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	695b      	ldr	r3, [r3, #20]
 8004afe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d04e      	beq.n	8004ba4 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	827b      	strh	r3, [r7, #18]
      if (  (nb_remaining_rx_data > 0U)
 8004b10:	8a7b      	ldrh	r3, [r7, #18]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	f000 8099 	beq.w	8004c4a <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004b1c:	8a7a      	ldrh	r2, [r7, #18]
 8004b1e:	429a      	cmp	r2, r3
 8004b20:	f080 8093 	bcs.w	8004c4a <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	8a7a      	ldrh	r2, [r7, #18]
 8004b28:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b2e:	699b      	ldr	r3, [r3, #24]
 8004b30:	2b20      	cmp	r3, #32
 8004b32:	d02b      	beq.n	8004b8c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	687a      	ldr	r2, [r7, #4]
 8004b3a:	6812      	ldr	r2, [r2, #0]
 8004b3c:	68d2      	ldr	r2, [r2, #12]
 8004b3e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b42:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	687a      	ldr	r2, [r7, #4]
 8004b4a:	6812      	ldr	r2, [r2, #0]
 8004b4c:	6952      	ldr	r2, [r2, #20]
 8004b4e:	f022 0201 	bic.w	r2, r2, #1
 8004b52:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	6812      	ldr	r2, [r2, #0]
 8004b5c:	6952      	ldr	r2, [r2, #20]
 8004b5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b62:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2220      	movs	r2, #32
 8004b68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	6812      	ldr	r2, [r2, #0]
 8004b7a:	68d2      	ldr	r2, [r2, #12]
 8004b7c:	f022 0210 	bic.w	r2, r2, #16
 8004b80:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b86:	4618      	mov	r0, r3
 8004b88:	f7fc fa48 	bl	800101c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b94:	b29b      	uxth	r3, r3
 8004b96:	1ad3      	subs	r3, r2, r3
 8004b98:	b29b      	uxth	r3, r3
 8004b9a:	4619      	mov	r1, r3
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	f006 f8b9 	bl	800ad14 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004ba2:	e052      	b.n	8004c4a <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	1ad3      	subs	r3, r2, r3
 8004bb0:	823b      	strh	r3, [r7, #16]
      if (  (huart->RxXferCount > 0U)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004bb6:	b29b      	uxth	r3, r3
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d048      	beq.n	8004c4e <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8004bbc:	8a3b      	ldrh	r3, [r7, #16]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d045      	beq.n	8004c4e <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	687a      	ldr	r2, [r7, #4]
 8004bc8:	6812      	ldr	r2, [r2, #0]
 8004bca:	68d2      	ldr	r2, [r2, #12]
 8004bcc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004bd0:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	6812      	ldr	r2, [r2, #0]
 8004bda:	6952      	ldr	r2, [r2, #20]
 8004bdc:	f022 0201 	bic.w	r2, r2, #1
 8004be0:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2220      	movs	r2, #32
 8004be6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2200      	movs	r2, #0
 8004bee:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	687a      	ldr	r2, [r7, #4]
 8004bf6:	6812      	ldr	r2, [r2, #0]
 8004bf8:	68d2      	ldr	r2, [r2, #12]
 8004bfa:	f022 0210 	bic.w	r2, r2, #16
 8004bfe:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004c00:	8a3b      	ldrh	r3, [r7, #16]
 8004c02:	4619      	mov	r1, r3
 8004c04:	6878      	ldr	r0, [r7, #4]
 8004c06:	f006 f885 	bl	800ad14 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004c0a:	e020      	b.n	8004c4e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d008      	beq.n	8004c28 <HAL_UART_IRQHandler+0x324>
 8004c16:	6a3b      	ldr	r3, [r7, #32]
 8004c18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d003      	beq.n	8004c28 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	f000 f9e8 	bl	8004ff6 <UART_Transmit_IT>
    return;
 8004c26:	e013      	b.n	8004c50 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d00e      	beq.n	8004c50 <HAL_UART_IRQHandler+0x34c>
 8004c32:	6a3b      	ldr	r3, [r7, #32]
 8004c34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d009      	beq.n	8004c50 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f000 fa28 	bl	8005092 <UART_EndTransmit_IT>
    return;
 8004c42:	bf00      	nop
 8004c44:	e004      	b.n	8004c50 <HAL_UART_IRQHandler+0x34c>
    return;
 8004c46:	bf00      	nop
 8004c48:	e002      	b.n	8004c50 <HAL_UART_IRQHandler+0x34c>
      return;
 8004c4a:	bf00      	nop
 8004c4c:	e000      	b.n	8004c50 <HAL_UART_IRQHandler+0x34c>
      return;
 8004c4e:	bf00      	nop
  }
}
 8004c50:	3728      	adds	r7, #40	; 0x28
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}
 8004c56:	bf00      	nop
 8004c58:	08004fcf 	.word	0x08004fcf

08004c5c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b083      	sub	sp, #12
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004c64:	bf00      	nop
 8004c66:	370c      	adds	r7, #12
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bc80      	pop	{r7}
 8004c6c:	4770      	bx	lr

08004c6e <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004c6e:	b480      	push	{r7}
 8004c70:	b083      	sub	sp, #12
 8004c72:	af00      	add	r7, sp, #0
 8004c74:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8004c76:	bf00      	nop
 8004c78:	370c      	adds	r7, #12
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bc80      	pop	{r7}
 8004c7e:	4770      	bx	lr

08004c80 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b083      	sub	sp, #12
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004c88:	bf00      	nop
 8004c8a:	370c      	adds	r7, #12
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bc80      	pop	{r7}
 8004c90:	4770      	bx	lr

08004c92 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004c92:	b480      	push	{r7}
 8004c94:	b083      	sub	sp, #12
 8004c96:	af00      	add	r7, sp, #0
 8004c98:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004c9a:	bf00      	nop
 8004c9c:	370c      	adds	r7, #12
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bc80      	pop	{r7}
 8004ca2:	4770      	bx	lr

08004ca4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b083      	sub	sp, #12
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004cac:	bf00      	nop
 8004cae:	370c      	adds	r7, #12
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bc80      	pop	{r7}
 8004cb4:	4770      	bx	lr

08004cb6 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004cb6:	b580      	push	{r7, lr}
 8004cb8:	b084      	sub	sp, #16
 8004cba:	af00      	add	r7, sp, #0
 8004cbc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc2:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 0320 	and.w	r3, r3, #32
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d113      	bne.n	8004cfa <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	68fa      	ldr	r2, [r7, #12]
 8004cde:	6812      	ldr	r2, [r2, #0]
 8004ce0:	6952      	ldr	r2, [r2, #20]
 8004ce2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ce6:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	68fa      	ldr	r2, [r7, #12]
 8004cee:	6812      	ldr	r2, [r2, #0]
 8004cf0:	68d2      	ldr	r2, [r2, #12]
 8004cf2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004cf6:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004cf8:	e002      	b.n	8004d00 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8004cfa:	68f8      	ldr	r0, [r7, #12]
 8004cfc:	f7ff ffae 	bl	8004c5c <HAL_UART_TxCpltCallback>
}
 8004d00:	bf00      	nop
 8004d02:	3710      	adds	r7, #16
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}

08004d08 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b084      	sub	sp, #16
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d14:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004d16:	68f8      	ldr	r0, [r7, #12]
 8004d18:	f7ff ffa9 	bl	8004c6e <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d1c:	bf00      	nop
 8004d1e:	3710      	adds	r7, #16
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}

08004d24 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b084      	sub	sp, #16
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d30:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 0320 	and.w	r3, r3, #32
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d12a      	bne.n	8004d96 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2200      	movs	r2, #0
 8004d44:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	68fa      	ldr	r2, [r7, #12]
 8004d4c:	6812      	ldr	r2, [r2, #0]
 8004d4e:	68d2      	ldr	r2, [r2, #12]
 8004d50:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d54:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	68fa      	ldr	r2, [r7, #12]
 8004d5c:	6812      	ldr	r2, [r2, #0]
 8004d5e:	6952      	ldr	r2, [r2, #20]
 8004d60:	f022 0201 	bic.w	r2, r2, #1
 8004d64:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	68fa      	ldr	r2, [r7, #12]
 8004d6c:	6812      	ldr	r2, [r2, #0]
 8004d6e:	6952      	ldr	r2, [r2, #20]
 8004d70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d74:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2220      	movs	r2, #32
 8004d7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d107      	bne.n	8004d96 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	68fa      	ldr	r2, [r7, #12]
 8004d8c:	6812      	ldr	r2, [r2, #0]
 8004d8e:	68d2      	ldr	r2, [r2, #12]
 8004d90:	f022 0210 	bic.w	r2, r2, #16
 8004d94:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d9a:	2b01      	cmp	r3, #1
 8004d9c:	d106      	bne.n	8004dac <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004da2:	4619      	mov	r1, r3
 8004da4:	68f8      	ldr	r0, [r7, #12]
 8004da6:	f005 ffb5 	bl	800ad14 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004daa:	e002      	b.n	8004db2 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8004dac:	68f8      	ldr	r0, [r7, #12]
 8004dae:	f7ff ff67 	bl	8004c80 <HAL_UART_RxCpltCallback>
}
 8004db2:	bf00      	nop
 8004db4:	3710      	adds	r7, #16
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}

08004dba <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004dba:	b580      	push	{r7, lr}
 8004dbc:	b084      	sub	sp, #16
 8004dbe:	af00      	add	r7, sp, #0
 8004dc0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc6:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d108      	bne.n	8004de2 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004dd4:	085b      	lsrs	r3, r3, #1
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	4619      	mov	r1, r3
 8004dda:	68f8      	ldr	r0, [r7, #12]
 8004ddc:	f005 ff9a 	bl	800ad14 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004de0:	e002      	b.n	8004de8 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8004de2:	68f8      	ldr	r0, [r7, #12]
 8004de4:	f7ff ff55 	bl	8004c92 <HAL_UART_RxHalfCpltCallback>
}
 8004de8:	bf00      	nop
 8004dea:	3710      	adds	r7, #16
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}

08004df0 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b084      	sub	sp, #16
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e00:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	695b      	ldr	r3, [r3, #20]
 8004e08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	bf14      	ite	ne
 8004e10:	2301      	movne	r3, #1
 8004e12:	2300      	moveq	r3, #0
 8004e14:	b2db      	uxtb	r3, r3
 8004e16:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e1e:	b2db      	uxtb	r3, r3
 8004e20:	2b21      	cmp	r3, #33	; 0x21
 8004e22:	d108      	bne.n	8004e36 <UART_DMAError+0x46>
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d005      	beq.n	8004e36 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004e30:	68b8      	ldr	r0, [r7, #8]
 8004e32:	f000 f88b 	bl	8004f4c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	695b      	ldr	r3, [r3, #20]
 8004e3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	bf14      	ite	ne
 8004e44:	2301      	movne	r3, #1
 8004e46:	2300      	moveq	r3, #0
 8004e48:	b2db      	uxtb	r3, r3
 8004e4a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e52:	b2db      	uxtb	r3, r3
 8004e54:	2b22      	cmp	r3, #34	; 0x22
 8004e56:	d108      	bne.n	8004e6a <UART_DMAError+0x7a>
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d005      	beq.n	8004e6a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	2200      	movs	r2, #0
 8004e62:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004e64:	68b8      	ldr	r0, [r7, #8]
 8004e66:	f000 f886 	bl	8004f76 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e6e:	f043 0210 	orr.w	r2, r3, #16
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004e76:	68b8      	ldr	r0, [r7, #8]
 8004e78:	f7ff ff14 	bl	8004ca4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e7c:	bf00      	nop
 8004e7e:	3710      	adds	r7, #16
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}

08004e84 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b086      	sub	sp, #24
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	60f8      	str	r0, [r7, #12]
 8004e8c:	60b9      	str	r1, [r7, #8]
 8004e8e:	4613      	mov	r3, r2
 8004e90:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004e92:	68ba      	ldr	r2, [r7, #8]
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	88fa      	ldrh	r2, [r7, #6]
 8004e9c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2222      	movs	r2, #34	; 0x22
 8004ea8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eb0:	4a23      	ldr	r2, [pc, #140]	; (8004f40 <UART_Start_Receive_DMA+0xbc>)
 8004eb2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eb8:	4a22      	ldr	r2, [pc, #136]	; (8004f44 <UART_Start_Receive_DMA+0xc0>)
 8004eba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ec0:	4a21      	ldr	r2, [pc, #132]	; (8004f48 <UART_Start_Receive_DMA+0xc4>)
 8004ec2:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ec8:	2200      	movs	r2, #0
 8004eca:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004ecc:	f107 0308 	add.w	r3, r7, #8
 8004ed0:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	3304      	adds	r3, #4
 8004edc:	4619      	mov	r1, r3
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	88fb      	ldrh	r3, [r7, #6]
 8004ee4:	f7fc f82c 	bl	8000f40 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004ee8:	2300      	movs	r3, #0
 8004eea:	613b      	str	r3, [r7, #16]
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	613b      	str	r3, [r7, #16]
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	613b      	str	r3, [r7, #16]
 8004efc:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2200      	movs	r2, #0
 8004f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	68fa      	ldr	r2, [r7, #12]
 8004f0c:	6812      	ldr	r2, [r2, #0]
 8004f0e:	68d2      	ldr	r2, [r2, #12]
 8004f10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f14:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	68fa      	ldr	r2, [r7, #12]
 8004f1c:	6812      	ldr	r2, [r2, #0]
 8004f1e:	6952      	ldr	r2, [r2, #20]
 8004f20:	f042 0201 	orr.w	r2, r2, #1
 8004f24:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	68fa      	ldr	r2, [r7, #12]
 8004f2c:	6812      	ldr	r2, [r2, #0]
 8004f2e:	6952      	ldr	r2, [r2, #20]
 8004f30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f34:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8004f36:	2300      	movs	r3, #0
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3718      	adds	r7, #24
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}
 8004f40:	08004d25 	.word	0x08004d25
 8004f44:	08004dbb 	.word	0x08004dbb
 8004f48:	08004df1 	.word	0x08004df1

08004f4c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b083      	sub	sp, #12
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	687a      	ldr	r2, [r7, #4]
 8004f5a:	6812      	ldr	r2, [r2, #0]
 8004f5c:	68d2      	ldr	r2, [r2, #12]
 8004f5e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004f62:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2220      	movs	r2, #32
 8004f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8004f6c:	bf00      	nop
 8004f6e:	370c      	adds	r7, #12
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bc80      	pop	{r7}
 8004f74:	4770      	bx	lr

08004f76 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f76:	b480      	push	{r7}
 8004f78:	b083      	sub	sp, #12
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	687a      	ldr	r2, [r7, #4]
 8004f84:	6812      	ldr	r2, [r2, #0]
 8004f86:	68d2      	ldr	r2, [r2, #12]
 8004f88:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004f8c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	6812      	ldr	r2, [r2, #0]
 8004f96:	6952      	ldr	r2, [r2, #20]
 8004f98:	f022 0201 	bic.w	r2, r2, #1
 8004f9c:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fa2:	2b01      	cmp	r3, #1
 8004fa4:	d107      	bne.n	8004fb6 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	687a      	ldr	r2, [r7, #4]
 8004fac:	6812      	ldr	r2, [r2, #0]
 8004fae:	68d2      	ldr	r2, [r2, #12]
 8004fb0:	f022 0210 	bic.w	r2, r2, #16
 8004fb4:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2220      	movs	r2, #32
 8004fba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004fc4:	bf00      	nop
 8004fc6:	370c      	adds	r7, #12
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bc80      	pop	{r7}
 8004fcc:	4770      	bx	lr

08004fce <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004fce:	b580      	push	{r7, lr}
 8004fd0:	b084      	sub	sp, #16
 8004fd2:	af00      	add	r7, sp, #0
 8004fd4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fda:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004fe8:	68f8      	ldr	r0, [r7, #12]
 8004fea:	f7ff fe5b 	bl	8004ca4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004fee:	bf00      	nop
 8004ff0:	3710      	adds	r7, #16
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}

08004ff6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004ff6:	b480      	push	{r7}
 8004ff8:	b085      	sub	sp, #20
 8004ffa:	af00      	add	r7, sp, #0
 8004ffc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005004:	b2db      	uxtb	r3, r3
 8005006:	2b21      	cmp	r3, #33	; 0x21
 8005008:	d13d      	bne.n	8005086 <UART_Transmit_IT+0x90>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005012:	d113      	bne.n	800503c <UART_Transmit_IT+0x46>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	691b      	ldr	r3, [r3, #16]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d10f      	bne.n	800503c <UART_Transmit_IT+0x46>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6a1b      	ldr	r3, [r3, #32]
 8005020:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	68fa      	ldr	r2, [r7, #12]
 8005028:	8812      	ldrh	r2, [r2, #0]
 800502a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800502e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6a1b      	ldr	r3, [r3, #32]
 8005034:	1c9a      	adds	r2, r3, #2
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	621a      	str	r2, [r3, #32]
 800503a:	e008      	b.n	800504e <UART_Transmit_IT+0x58>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6a1b      	ldr	r3, [r3, #32]
 8005044:	1c58      	adds	r0, r3, #1
 8005046:	6879      	ldr	r1, [r7, #4]
 8005048:	6208      	str	r0, [r1, #32]
 800504a:	781b      	ldrb	r3, [r3, #0]
 800504c:	6053      	str	r3, [r2, #4]
    }

    if (--huart->TxXferCount == 0U)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005052:	b29b      	uxth	r3, r3
 8005054:	3b01      	subs	r3, #1
 8005056:	b29b      	uxth	r3, r3
 8005058:	687a      	ldr	r2, [r7, #4]
 800505a:	4619      	mov	r1, r3
 800505c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800505e:	2b00      	cmp	r3, #0
 8005060:	d10f      	bne.n	8005082 <UART_Transmit_IT+0x8c>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	687a      	ldr	r2, [r7, #4]
 8005068:	6812      	ldr	r2, [r2, #0]
 800506a:	68d2      	ldr	r2, [r2, #12]
 800506c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005070:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	687a      	ldr	r2, [r7, #4]
 8005078:	6812      	ldr	r2, [r2, #0]
 800507a:	68d2      	ldr	r2, [r2, #12]
 800507c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005080:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005082:	2300      	movs	r3, #0
 8005084:	e000      	b.n	8005088 <UART_Transmit_IT+0x92>
  }
  else
  {
    return HAL_BUSY;
 8005086:	2302      	movs	r3, #2
  }
}
 8005088:	4618      	mov	r0, r3
 800508a:	3714      	adds	r7, #20
 800508c:	46bd      	mov	sp, r7
 800508e:	bc80      	pop	{r7}
 8005090:	4770      	bx	lr

08005092 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005092:	b580      	push	{r7, lr}
 8005094:	b082      	sub	sp, #8
 8005096:	af00      	add	r7, sp, #0
 8005098:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	687a      	ldr	r2, [r7, #4]
 80050a0:	6812      	ldr	r2, [r2, #0]
 80050a2:	68d2      	ldr	r2, [r2, #12]
 80050a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050a8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2220      	movs	r2, #32
 80050ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f7ff fdd2 	bl	8004c5c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80050b8:	2300      	movs	r3, #0
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	3708      	adds	r7, #8
 80050be:	46bd      	mov	sp, r7
 80050c0:	bd80      	pop	{r7, pc}

080050c2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80050c2:	b580      	push	{r7, lr}
 80050c4:	b086      	sub	sp, #24
 80050c6:	af00      	add	r7, sp, #0
 80050c8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	2b22      	cmp	r3, #34	; 0x22
 80050d4:	f040 8099 	bne.w	800520a <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050e0:	d117      	bne.n	8005112 <UART_Receive_IT+0x50>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	691b      	ldr	r3, [r3, #16]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d113      	bne.n	8005112 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80050ea:	2300      	movs	r3, #0
 80050ec:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050f2:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	b29b      	uxth	r3, r3
 80050fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005100:	b29a      	uxth	r2, r3
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800510a:	1c9a      	adds	r2, r3, #2
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	629a      	str	r2, [r3, #40]	; 0x28
 8005110:	e026      	b.n	8005160 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005116:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8005118:	2300      	movs	r3, #0
 800511a:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005124:	d007      	beq.n	8005136 <UART_Receive_IT+0x74>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d10a      	bne.n	8005144 <UART_Receive_IT+0x82>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	691b      	ldr	r3, [r3, #16]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d106      	bne.n	8005144 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	b2da      	uxtb	r2, r3
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	701a      	strb	r2, [r3, #0]
 8005142:	e008      	b.n	8005156 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	b2db      	uxtb	r3, r3
 800514c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005150:	b2da      	uxtb	r2, r3
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800515a:	1c5a      	adds	r2, r3, #1
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005164:	b29b      	uxth	r3, r3
 8005166:	3b01      	subs	r3, #1
 8005168:	b29b      	uxth	r3, r3
 800516a:	687a      	ldr	r2, [r7, #4]
 800516c:	4619      	mov	r1, r3
 800516e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005170:	2b00      	cmp	r3, #0
 8005172:	d148      	bne.n	8005206 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	687a      	ldr	r2, [r7, #4]
 800517a:	6812      	ldr	r2, [r2, #0]
 800517c:	68d2      	ldr	r2, [r2, #12]
 800517e:	f022 0220 	bic.w	r2, r2, #32
 8005182:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	687a      	ldr	r2, [r7, #4]
 800518a:	6812      	ldr	r2, [r2, #0]
 800518c:	68d2      	ldr	r2, [r2, #12]
 800518e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005192:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	687a      	ldr	r2, [r7, #4]
 800519a:	6812      	ldr	r2, [r2, #0]
 800519c:	6952      	ldr	r2, [r2, #20]
 800519e:	f022 0201 	bic.w	r2, r2, #1
 80051a2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2220      	movs	r2, #32
 80051a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d123      	bne.n	80051fc <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2200      	movs	r2, #0
 80051b8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	687a      	ldr	r2, [r7, #4]
 80051c0:	6812      	ldr	r2, [r2, #0]
 80051c2:	68d2      	ldr	r2, [r2, #12]
 80051c4:	f022 0210 	bic.w	r2, r2, #16
 80051c8:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f003 0310 	and.w	r3, r3, #16
 80051d4:	2b10      	cmp	r3, #16
 80051d6:	d10a      	bne.n	80051ee <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80051d8:	2300      	movs	r3, #0
 80051da:	60fb      	str	r3, [r7, #12]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	60fb      	str	r3, [r7, #12]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	60fb      	str	r3, [r7, #12]
 80051ec:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80051f2:	4619      	mov	r1, r3
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	f005 fd8d 	bl	800ad14 <HAL_UARTEx_RxEventCallback>
 80051fa:	e002      	b.n	8005202 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80051fc:	6878      	ldr	r0, [r7, #4]
 80051fe:	f7ff fd3f 	bl	8004c80 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005202:	2300      	movs	r3, #0
 8005204:	e002      	b.n	800520c <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8005206:	2300      	movs	r3, #0
 8005208:	e000      	b.n	800520c <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800520a:	2302      	movs	r3, #2
  }
}
 800520c:	4618      	mov	r0, r3
 800520e:	3718      	adds	r7, #24
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}

08005214 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005214:	b590      	push	{r4, r7, lr}
 8005216:	b085      	sub	sp, #20
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	4a5f      	ldr	r2, [pc, #380]	; (80053a0 <UART_SetConfig+0x18c>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d904      	bls.n	8005230 <UART_SetConfig+0x1c>
 8005226:	f640 6153 	movw	r1, #3667	; 0xe53
 800522a:	485e      	ldr	r0, [pc, #376]	; (80053a4 <UART_SetConfig+0x190>)
 800522c:	f7fb f9ae 	bl	800058c <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	68db      	ldr	r3, [r3, #12]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d009      	beq.n	800524c <UART_SetConfig+0x38>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	68db      	ldr	r3, [r3, #12]
 800523c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005240:	d004      	beq.n	800524c <UART_SetConfig+0x38>
 8005242:	f640 6154 	movw	r1, #3668	; 0xe54
 8005246:	4857      	ldr	r0, [pc, #348]	; (80053a4 <UART_SetConfig+0x190>)
 8005248:	f7fb f9a0 	bl	800058c <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	691b      	ldr	r3, [r3, #16]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d00e      	beq.n	8005272 <UART_SetConfig+0x5e>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	691b      	ldr	r3, [r3, #16]
 8005258:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800525c:	d009      	beq.n	8005272 <UART_SetConfig+0x5e>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	691b      	ldr	r3, [r3, #16]
 8005262:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005266:	d004      	beq.n	8005272 <UART_SetConfig+0x5e>
 8005268:	f640 6155 	movw	r1, #3669	; 0xe55
 800526c:	484d      	ldr	r0, [pc, #308]	; (80053a4 <UART_SetConfig+0x190>)
 800526e:	f7fb f98d 	bl	800058c <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	695a      	ldr	r2, [r3, #20]
 8005276:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 800527a:	4013      	ands	r3, r2
 800527c:	2b00      	cmp	r3, #0
 800527e:	d103      	bne.n	8005288 <UART_SetConfig+0x74>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	695b      	ldr	r3, [r3, #20]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d104      	bne.n	8005292 <UART_SetConfig+0x7e>
 8005288:	f640 6156 	movw	r1, #3670	; 0xe56
 800528c:	4845      	ldr	r0, [pc, #276]	; (80053a4 <UART_SetConfig+0x190>)
 800528e:	f7fb f97d 	bl	800058c <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	687a      	ldr	r2, [r7, #4]
 8005298:	6812      	ldr	r2, [r2, #0]
 800529a:	6912      	ldr	r2, [r2, #16]
 800529c:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 80052a0:	687a      	ldr	r2, [r7, #4]
 80052a2:	68d2      	ldr	r2, [r2, #12]
 80052a4:	430a      	orrs	r2, r1
 80052a6:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	689a      	ldr	r2, [r3, #8]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	691b      	ldr	r3, [r3, #16]
 80052b0:	431a      	orrs	r2, r3
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	695b      	ldr	r3, [r3, #20]
 80052b6:	4313      	orrs	r3, r2
 80052b8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	68db      	ldr	r3, [r3, #12]
 80052c4:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80052c8:	f023 030c 	bic.w	r3, r3, #12
 80052cc:	68b9      	ldr	r1, [r7, #8]
 80052ce:	430b      	orrs	r3, r1
 80052d0:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	687a      	ldr	r2, [r7, #4]
 80052d8:	6812      	ldr	r2, [r2, #0]
 80052da:	6952      	ldr	r2, [r2, #20]
 80052dc:	f422 7140 	bic.w	r1, r2, #768	; 0x300
 80052e0:	687a      	ldr	r2, [r7, #4]
 80052e2:	6992      	ldr	r2, [r2, #24]
 80052e4:	430a      	orrs	r2, r1
 80052e6:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a2e      	ldr	r2, [pc, #184]	; (80053a8 <UART_SetConfig+0x194>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d103      	bne.n	80052fa <UART_SetConfig+0xe6>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80052f2:	f7fe fd65 	bl	8003dc0 <HAL_RCC_GetPCLK2Freq>
 80052f6:	60f8      	str	r0, [r7, #12]
 80052f8:	e002      	b.n	8005300 <UART_SetConfig+0xec>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80052fa:	f7fe fd4d 	bl	8003d98 <HAL_RCC_GetPCLK1Freq>
 80052fe:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6819      	ldr	r1, [r3, #0]
 8005304:	68fa      	ldr	r2, [r7, #12]
 8005306:	4613      	mov	r3, r2
 8005308:	009b      	lsls	r3, r3, #2
 800530a:	4413      	add	r3, r2
 800530c:	009a      	lsls	r2, r3, #2
 800530e:	441a      	add	r2, r3
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	009b      	lsls	r3, r3, #2
 8005316:	fbb2 f3f3 	udiv	r3, r2, r3
 800531a:	4a24      	ldr	r2, [pc, #144]	; (80053ac <UART_SetConfig+0x198>)
 800531c:	fba2 2303 	umull	r2, r3, r2, r3
 8005320:	095b      	lsrs	r3, r3, #5
 8005322:	0118      	lsls	r0, r3, #4
 8005324:	68fa      	ldr	r2, [r7, #12]
 8005326:	4613      	mov	r3, r2
 8005328:	009b      	lsls	r3, r3, #2
 800532a:	4413      	add	r3, r2
 800532c:	009a      	lsls	r2, r3, #2
 800532e:	441a      	add	r2, r3
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	009b      	lsls	r3, r3, #2
 8005336:	fbb2 f2f3 	udiv	r2, r2, r3
 800533a:	4b1c      	ldr	r3, [pc, #112]	; (80053ac <UART_SetConfig+0x198>)
 800533c:	fba3 4302 	umull	r4, r3, r3, r2
 8005340:	095b      	lsrs	r3, r3, #5
 8005342:	2464      	movs	r4, #100	; 0x64
 8005344:	fb04 f303 	mul.w	r3, r4, r3
 8005348:	1ad3      	subs	r3, r2, r3
 800534a:	011b      	lsls	r3, r3, #4
 800534c:	3332      	adds	r3, #50	; 0x32
 800534e:	4a17      	ldr	r2, [pc, #92]	; (80053ac <UART_SetConfig+0x198>)
 8005350:	fba2 2303 	umull	r2, r3, r2, r3
 8005354:	095b      	lsrs	r3, r3, #5
 8005356:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800535a:	4418      	add	r0, r3
 800535c:	68fa      	ldr	r2, [r7, #12]
 800535e:	4613      	mov	r3, r2
 8005360:	009b      	lsls	r3, r3, #2
 8005362:	4413      	add	r3, r2
 8005364:	009a      	lsls	r2, r3, #2
 8005366:	441a      	add	r2, r3
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	009b      	lsls	r3, r3, #2
 800536e:	fbb2 f2f3 	udiv	r2, r2, r3
 8005372:	4b0e      	ldr	r3, [pc, #56]	; (80053ac <UART_SetConfig+0x198>)
 8005374:	fba3 4302 	umull	r4, r3, r3, r2
 8005378:	095b      	lsrs	r3, r3, #5
 800537a:	2464      	movs	r4, #100	; 0x64
 800537c:	fb04 f303 	mul.w	r3, r4, r3
 8005380:	1ad3      	subs	r3, r2, r3
 8005382:	011b      	lsls	r3, r3, #4
 8005384:	3332      	adds	r3, #50	; 0x32
 8005386:	4a09      	ldr	r2, [pc, #36]	; (80053ac <UART_SetConfig+0x198>)
 8005388:	fba2 2303 	umull	r2, r3, r2, r3
 800538c:	095b      	lsrs	r3, r3, #5
 800538e:	f003 030f 	and.w	r3, r3, #15
 8005392:	4403      	add	r3, r0
 8005394:	608b      	str	r3, [r1, #8]
#endif /* USART_CR1_OVER8 */
}
 8005396:	bf00      	nop
 8005398:	3714      	adds	r7, #20
 800539a:	46bd      	mov	sp, r7
 800539c:	bd90      	pop	{r4, r7, pc}
 800539e:	bf00      	nop
 80053a0:	0044aa20 	.word	0x0044aa20
 80053a4:	0800b14c 	.word	0x0800b14c
 80053a8:	40013800 	.word	0x40013800
 80053ac:	51eb851f 	.word	0x51eb851f

080053b0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80053b0:	b084      	sub	sp, #16
 80053b2:	b480      	push	{r7}
 80053b4:	b083      	sub	sp, #12
 80053b6:	af00      	add	r7, sp, #0
 80053b8:	6078      	str	r0, [r7, #4]
 80053ba:	f107 0014 	add.w	r0, r7, #20
 80053be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80053c2:	2300      	movs	r3, #0
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	370c      	adds	r7, #12
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bc80      	pop	{r7}
 80053cc:	b004      	add	sp, #16
 80053ce:	4770      	bx	lr

080053d0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b085      	sub	sp, #20
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2200      	movs	r2, #0
 80053dc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80053e0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80053e4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	b29a      	uxth	r2, r3
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80053f0:	2300      	movs	r3, #0
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3714      	adds	r7, #20
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bc80      	pop	{r7}
 80053fa:	4770      	bx	lr

080053fc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b085      	sub	sp, #20
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005404:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005408:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005410:	b29a      	uxth	r2, r3
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	b29b      	uxth	r3, r3
 8005416:	43db      	mvns	r3, r3
 8005418:	b29b      	uxth	r3, r3
 800541a:	4013      	ands	r3, r2
 800541c:	b29a      	uxth	r2, r3
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005424:	2300      	movs	r3, #0
}
 8005426:	4618      	mov	r0, r3
 8005428:	3714      	adds	r7, #20
 800542a:	46bd      	mov	sp, r7
 800542c:	bc80      	pop	{r7}
 800542e:	4770      	bx	lr

08005430 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8005430:	b480      	push	{r7}
 8005432:	b083      	sub	sp, #12
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
 8005438:	460b      	mov	r3, r1
 800543a:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800543c:	2300      	movs	r3, #0
}
 800543e:	4618      	mov	r0, r3
 8005440:	370c      	adds	r7, #12
 8005442:	46bd      	mov	sp, r7
 8005444:	bc80      	pop	{r7}
 8005446:	4770      	bx	lr

08005448 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005448:	b084      	sub	sp, #16
 800544a:	b480      	push	{r7}
 800544c:	b083      	sub	sp, #12
 800544e:	af00      	add	r7, sp, #0
 8005450:	6078      	str	r0, [r7, #4]
 8005452:	f107 0014 	add.w	r0, r7, #20
 8005456:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2201      	movs	r2, #1
 800545e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2200      	movs	r2, #0
 8005466:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2200      	movs	r2, #0
 800546e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2200      	movs	r2, #0
 8005476:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800547a:	2300      	movs	r3, #0
}
 800547c:	4618      	mov	r0, r3
 800547e:	370c      	adds	r7, #12
 8005480:	46bd      	mov	sp, r7
 8005482:	bc80      	pop	{r7}
 8005484:	b004      	add	sp, #16
 8005486:	4770      	bx	lr

08005488 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005488:	b480      	push	{r7}
 800548a:	b09b      	sub	sp, #108	; 0x6c
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
 8005490:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005492:	2300      	movs	r3, #0
 8005494:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005498:	687a      	ldr	r2, [r7, #4]
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	781b      	ldrb	r3, [r3, #0]
 800549e:	009b      	lsls	r3, r3, #2
 80054a0:	4413      	add	r3, r2
 80054a2:	881b      	ldrh	r3, [r3, #0]
 80054a4:	b29b      	uxth	r3, r3
 80054a6:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80054aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054ae:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	78db      	ldrb	r3, [r3, #3]
 80054b6:	2b03      	cmp	r3, #3
 80054b8:	d81f      	bhi.n	80054fa <USB_ActivateEndpoint+0x72>
 80054ba:	a201      	add	r2, pc, #4	; (adr r2, 80054c0 <USB_ActivateEndpoint+0x38>)
 80054bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054c0:	080054d1 	.word	0x080054d1
 80054c4:	080054ed 	.word	0x080054ed
 80054c8:	08005503 	.word	0x08005503
 80054cc:	080054df 	.word	0x080054df
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80054d0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80054d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80054d8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80054dc:	e012      	b.n	8005504 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80054de:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80054e2:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80054e6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80054ea:	e00b      	b.n	8005504 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80054ec:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80054f0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80054f4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80054f8:	e004      	b.n	8005504 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8005500:	e000      	b.n	8005504 <USB_ActivateEndpoint+0x7c>
      break;
 8005502:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005504:	687a      	ldr	r2, [r7, #4]
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	781b      	ldrb	r3, [r3, #0]
 800550a:	009b      	lsls	r3, r3, #2
 800550c:	441a      	add	r2, r3
 800550e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005512:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005516:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800551a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800551e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005522:	b29b      	uxth	r3, r3
 8005524:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005526:	687a      	ldr	r2, [r7, #4]
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	781b      	ldrb	r3, [r3, #0]
 800552c:	009b      	lsls	r3, r3, #2
 800552e:	4413      	add	r3, r2
 8005530:	881b      	ldrh	r3, [r3, #0]
 8005532:	b29b      	uxth	r3, r3
 8005534:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005538:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800553c:	b29a      	uxth	r2, r3
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	781b      	ldrb	r3, [r3, #0]
 8005542:	b29b      	uxth	r3, r3
 8005544:	4313      	orrs	r3, r2
 8005546:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800554a:	687a      	ldr	r2, [r7, #4]
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	781b      	ldrb	r3, [r3, #0]
 8005550:	009b      	lsls	r3, r3, #2
 8005552:	441a      	add	r2, r3
 8005554:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8005558:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800555c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005560:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005564:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005568:	b29b      	uxth	r3, r3
 800556a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	7b1b      	ldrb	r3, [r3, #12]
 8005570:	2b00      	cmp	r3, #0
 8005572:	f040 8153 	bne.w	800581c <USB_ActivateEndpoint+0x394>
  {
    if (ep->is_in != 0U)
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	785b      	ldrb	r3, [r3, #1]
 800557a:	2b00      	cmp	r3, #0
 800557c:	f000 808e 	beq.w	800569c <USB_ActivateEndpoint+0x214>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	65bb      	str	r3, [r7, #88]	; 0x58
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800558a:	b29b      	uxth	r3, r3
 800558c:	461a      	mov	r2, r3
 800558e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005590:	4413      	add	r3, r2
 8005592:	65bb      	str	r3, [r7, #88]	; 0x58
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	781b      	ldrb	r3, [r3, #0]
 8005598:	011a      	lsls	r2, r3, #4
 800559a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800559c:	4413      	add	r3, r2
 800559e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055a2:	657b      	str	r3, [r7, #84]	; 0x54
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	88db      	ldrh	r3, [r3, #6]
 80055a8:	085b      	lsrs	r3, r3, #1
 80055aa:	b29b      	uxth	r3, r3
 80055ac:	005b      	lsls	r3, r3, #1
 80055ae:	b29a      	uxth	r2, r3
 80055b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055b2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80055b4:	687a      	ldr	r2, [r7, #4]
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	781b      	ldrb	r3, [r3, #0]
 80055ba:	009b      	lsls	r3, r3, #2
 80055bc:	4413      	add	r3, r2
 80055be:	881b      	ldrh	r3, [r3, #0]
 80055c0:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80055c4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80055c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d01d      	beq.n	800560c <USB_ActivateEndpoint+0x184>
 80055d0:	687a      	ldr	r2, [r7, #4]
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	781b      	ldrb	r3, [r3, #0]
 80055d6:	009b      	lsls	r3, r3, #2
 80055d8:	4413      	add	r3, r2
 80055da:	881b      	ldrh	r3, [r3, #0]
 80055dc:	b29b      	uxth	r3, r3
 80055de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055e6:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80055ea:	687a      	ldr	r2, [r7, #4]
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	781b      	ldrb	r3, [r3, #0]
 80055f0:	009b      	lsls	r3, r3, #2
 80055f2:	441a      	add	r2, r3
 80055f4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80055f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005600:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005604:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005608:	b29b      	uxth	r3, r3
 800560a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	78db      	ldrb	r3, [r3, #3]
 8005610:	2b01      	cmp	r3, #1
 8005612:	d024      	beq.n	800565e <USB_ActivateEndpoint+0x1d6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005614:	687a      	ldr	r2, [r7, #4]
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	781b      	ldrb	r3, [r3, #0]
 800561a:	009b      	lsls	r3, r3, #2
 800561c:	4413      	add	r3, r2
 800561e:	881b      	ldrh	r3, [r3, #0]
 8005620:	b29b      	uxth	r3, r3
 8005622:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005626:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800562a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800562e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005632:	f083 0320 	eor.w	r3, r3, #32
 8005636:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800563a:	687a      	ldr	r2, [r7, #4]
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	781b      	ldrb	r3, [r3, #0]
 8005640:	009b      	lsls	r3, r3, #2
 8005642:	441a      	add	r2, r3
 8005644:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005648:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800564c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005650:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005654:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005658:	b29b      	uxth	r3, r3
 800565a:	8013      	strh	r3, [r2, #0]
 800565c:	e271      	b.n	8005b42 <USB_ActivateEndpoint+0x6ba>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800565e:	687a      	ldr	r2, [r7, #4]
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	781b      	ldrb	r3, [r3, #0]
 8005664:	009b      	lsls	r3, r3, #2
 8005666:	4413      	add	r3, r2
 8005668:	881b      	ldrh	r3, [r3, #0]
 800566a:	b29b      	uxth	r3, r3
 800566c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005670:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005674:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8005678:	687a      	ldr	r2, [r7, #4]
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	781b      	ldrb	r3, [r3, #0]
 800567e:	009b      	lsls	r3, r3, #2
 8005680:	441a      	add	r2, r3
 8005682:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005686:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800568a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800568e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005692:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005696:	b29b      	uxth	r3, r3
 8005698:	8013      	strh	r3, [r2, #0]
 800569a:	e252      	b.n	8005b42 <USB_ActivateEndpoint+0x6ba>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	64bb      	str	r3, [r7, #72]	; 0x48
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056a6:	b29b      	uxth	r3, r3
 80056a8:	461a      	mov	r2, r3
 80056aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056ac:	4413      	add	r3, r2
 80056ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	781b      	ldrb	r3, [r3, #0]
 80056b4:	011a      	lsls	r2, r3, #4
 80056b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056b8:	4413      	add	r3, r2
 80056ba:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80056be:	647b      	str	r3, [r7, #68]	; 0x44
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	88db      	ldrh	r3, [r3, #6]
 80056c4:	085b      	lsrs	r3, r3, #1
 80056c6:	b29b      	uxth	r3, r3
 80056c8:	005b      	lsls	r3, r3, #1
 80056ca:	b29a      	uxth	r2, r3
 80056cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056ce:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	643b      	str	r3, [r7, #64]	; 0x40
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056da:	b29b      	uxth	r3, r3
 80056dc:	461a      	mov	r2, r3
 80056de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056e0:	4413      	add	r3, r2
 80056e2:	643b      	str	r3, [r7, #64]	; 0x40
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	781b      	ldrb	r3, [r3, #0]
 80056e8:	011a      	lsls	r2, r3, #4
 80056ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056ec:	4413      	add	r3, r2
 80056ee:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80056f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	691b      	ldr	r3, [r3, #16]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d112      	bne.n	8005722 <USB_ActivateEndpoint+0x29a>
 80056fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056fe:	881b      	ldrh	r3, [r3, #0]
 8005700:	b29b      	uxth	r3, r3
 8005702:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005706:	b29a      	uxth	r2, r3
 8005708:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800570a:	801a      	strh	r2, [r3, #0]
 800570c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800570e:	881b      	ldrh	r3, [r3, #0]
 8005710:	b29b      	uxth	r3, r3
 8005712:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005716:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800571a:	b29a      	uxth	r2, r3
 800571c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800571e:	801a      	strh	r2, [r3, #0]
 8005720:	e02f      	b.n	8005782 <USB_ActivateEndpoint+0x2fa>
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	691b      	ldr	r3, [r3, #16]
 8005726:	2b3e      	cmp	r3, #62	; 0x3e
 8005728:	d813      	bhi.n	8005752 <USB_ActivateEndpoint+0x2ca>
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	691b      	ldr	r3, [r3, #16]
 800572e:	085b      	lsrs	r3, r3, #1
 8005730:	663b      	str	r3, [r7, #96]	; 0x60
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	691b      	ldr	r3, [r3, #16]
 8005736:	f003 0301 	and.w	r3, r3, #1
 800573a:	2b00      	cmp	r3, #0
 800573c:	d002      	beq.n	8005744 <USB_ActivateEndpoint+0x2bc>
 800573e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005740:	3301      	adds	r3, #1
 8005742:	663b      	str	r3, [r7, #96]	; 0x60
 8005744:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005746:	b29b      	uxth	r3, r3
 8005748:	029b      	lsls	r3, r3, #10
 800574a:	b29a      	uxth	r2, r3
 800574c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800574e:	801a      	strh	r2, [r3, #0]
 8005750:	e017      	b.n	8005782 <USB_ActivateEndpoint+0x2fa>
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	691b      	ldr	r3, [r3, #16]
 8005756:	095b      	lsrs	r3, r3, #5
 8005758:	663b      	str	r3, [r7, #96]	; 0x60
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	691b      	ldr	r3, [r3, #16]
 800575e:	f003 031f 	and.w	r3, r3, #31
 8005762:	2b00      	cmp	r3, #0
 8005764:	d102      	bne.n	800576c <USB_ActivateEndpoint+0x2e4>
 8005766:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005768:	3b01      	subs	r3, #1
 800576a:	663b      	str	r3, [r7, #96]	; 0x60
 800576c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800576e:	b29b      	uxth	r3, r3
 8005770:	029b      	lsls	r3, r3, #10
 8005772:	b29b      	uxth	r3, r3
 8005774:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005778:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800577c:	b29a      	uxth	r2, r3
 800577e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005780:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005782:	687a      	ldr	r2, [r7, #4]
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	781b      	ldrb	r3, [r3, #0]
 8005788:	009b      	lsls	r3, r3, #2
 800578a:	4413      	add	r3, r2
 800578c:	881b      	ldrh	r3, [r3, #0]
 800578e:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005790:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005792:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005796:	2b00      	cmp	r3, #0
 8005798:	d01b      	beq.n	80057d2 <USB_ActivateEndpoint+0x34a>
 800579a:	687a      	ldr	r2, [r7, #4]
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	781b      	ldrb	r3, [r3, #0]
 80057a0:	009b      	lsls	r3, r3, #2
 80057a2:	4413      	add	r3, r2
 80057a4:	881b      	ldrh	r3, [r3, #0]
 80057a6:	b29b      	uxth	r3, r3
 80057a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057b0:	873b      	strh	r3, [r7, #56]	; 0x38
 80057b2:	687a      	ldr	r2, [r7, #4]
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	781b      	ldrb	r3, [r3, #0]
 80057b8:	009b      	lsls	r3, r3, #2
 80057ba:	441a      	add	r2, r3
 80057bc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80057be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057c6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80057ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057ce:	b29b      	uxth	r3, r3
 80057d0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80057d2:	687a      	ldr	r2, [r7, #4]
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	781b      	ldrb	r3, [r3, #0]
 80057d8:	009b      	lsls	r3, r3, #2
 80057da:	4413      	add	r3, r2
 80057dc:	881b      	ldrh	r3, [r3, #0]
 80057de:	b29b      	uxth	r3, r3
 80057e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80057e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057e8:	86fb      	strh	r3, [r7, #54]	; 0x36
 80057ea:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80057ec:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80057f0:	86fb      	strh	r3, [r7, #54]	; 0x36
 80057f2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80057f4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80057f8:	86fb      	strh	r3, [r7, #54]	; 0x36
 80057fa:	687a      	ldr	r2, [r7, #4]
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	781b      	ldrb	r3, [r3, #0]
 8005800:	009b      	lsls	r3, r3, #2
 8005802:	441a      	add	r2, r3
 8005804:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005806:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800580a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800580e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005812:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005816:	b29b      	uxth	r3, r3
 8005818:	8013      	strh	r3, [r2, #0]
 800581a:	e192      	b.n	8005b42 <USB_ActivateEndpoint+0x6ba>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 800581c:	687a      	ldr	r2, [r7, #4]
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	781b      	ldrb	r3, [r3, #0]
 8005822:	009b      	lsls	r3, r3, #2
 8005824:	4413      	add	r3, r2
 8005826:	881b      	ldrh	r3, [r3, #0]
 8005828:	b29b      	uxth	r3, r3
 800582a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800582e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005832:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005834:	687a      	ldr	r2, [r7, #4]
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	781b      	ldrb	r3, [r3, #0]
 800583a:	009b      	lsls	r3, r3, #2
 800583c:	441a      	add	r2, r3
 800583e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005840:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005844:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005848:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800584c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005850:	b29b      	uxth	r3, r3
 8005852:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	633b      	str	r3, [r7, #48]	; 0x30
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800585e:	b29b      	uxth	r3, r3
 8005860:	461a      	mov	r2, r3
 8005862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005864:	4413      	add	r3, r2
 8005866:	633b      	str	r3, [r7, #48]	; 0x30
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	781b      	ldrb	r3, [r3, #0]
 800586c:	011a      	lsls	r2, r3, #4
 800586e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005870:	4413      	add	r3, r2
 8005872:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005876:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	891b      	ldrh	r3, [r3, #8]
 800587c:	085b      	lsrs	r3, r3, #1
 800587e:	b29b      	uxth	r3, r3
 8005880:	005b      	lsls	r3, r3, #1
 8005882:	b29a      	uxth	r2, r3
 8005884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005886:	801a      	strh	r2, [r3, #0]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	62bb      	str	r3, [r7, #40]	; 0x28
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005892:	b29b      	uxth	r3, r3
 8005894:	461a      	mov	r2, r3
 8005896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005898:	4413      	add	r3, r2
 800589a:	62bb      	str	r3, [r7, #40]	; 0x28
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	781b      	ldrb	r3, [r3, #0]
 80058a0:	011a      	lsls	r2, r3, #4
 80058a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058a4:	4413      	add	r3, r2
 80058a6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80058aa:	627b      	str	r3, [r7, #36]	; 0x24
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	895b      	ldrh	r3, [r3, #10]
 80058b0:	085b      	lsrs	r3, r3, #1
 80058b2:	b29b      	uxth	r3, r3
 80058b4:	005b      	lsls	r3, r3, #1
 80058b6:	b29a      	uxth	r2, r3
 80058b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ba:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	785b      	ldrb	r3, [r3, #1]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	f040 8091 	bne.w	80059e8 <USB_ActivateEndpoint+0x560>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80058c6:	687a      	ldr	r2, [r7, #4]
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	781b      	ldrb	r3, [r3, #0]
 80058cc:	009b      	lsls	r3, r3, #2
 80058ce:	4413      	add	r3, r2
 80058d0:	881b      	ldrh	r3, [r3, #0]
 80058d2:	847b      	strh	r3, [r7, #34]	; 0x22
 80058d4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80058d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d01b      	beq.n	8005916 <USB_ActivateEndpoint+0x48e>
 80058de:	687a      	ldr	r2, [r7, #4]
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	781b      	ldrb	r3, [r3, #0]
 80058e4:	009b      	lsls	r3, r3, #2
 80058e6:	4413      	add	r3, r2
 80058e8:	881b      	ldrh	r3, [r3, #0]
 80058ea:	b29b      	uxth	r3, r3
 80058ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058f4:	843b      	strh	r3, [r7, #32]
 80058f6:	687a      	ldr	r2, [r7, #4]
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	781b      	ldrb	r3, [r3, #0]
 80058fc:	009b      	lsls	r3, r3, #2
 80058fe:	441a      	add	r2, r3
 8005900:	8c3b      	ldrh	r3, [r7, #32]
 8005902:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005906:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800590a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800590e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005912:	b29b      	uxth	r3, r3
 8005914:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005916:	687a      	ldr	r2, [r7, #4]
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	781b      	ldrb	r3, [r3, #0]
 800591c:	009b      	lsls	r3, r3, #2
 800591e:	4413      	add	r3, r2
 8005920:	881b      	ldrh	r3, [r3, #0]
 8005922:	83fb      	strh	r3, [r7, #30]
 8005924:	8bfb      	ldrh	r3, [r7, #30]
 8005926:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800592a:	2b00      	cmp	r3, #0
 800592c:	d01b      	beq.n	8005966 <USB_ActivateEndpoint+0x4de>
 800592e:	687a      	ldr	r2, [r7, #4]
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	781b      	ldrb	r3, [r3, #0]
 8005934:	009b      	lsls	r3, r3, #2
 8005936:	4413      	add	r3, r2
 8005938:	881b      	ldrh	r3, [r3, #0]
 800593a:	b29b      	uxth	r3, r3
 800593c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005940:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005944:	83bb      	strh	r3, [r7, #28]
 8005946:	687a      	ldr	r2, [r7, #4]
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	781b      	ldrb	r3, [r3, #0]
 800594c:	009b      	lsls	r3, r3, #2
 800594e:	441a      	add	r2, r3
 8005950:	8bbb      	ldrh	r3, [r7, #28]
 8005952:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005956:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800595a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800595e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005962:	b29b      	uxth	r3, r3
 8005964:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005966:	687a      	ldr	r2, [r7, #4]
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	781b      	ldrb	r3, [r3, #0]
 800596c:	009b      	lsls	r3, r3, #2
 800596e:	4413      	add	r3, r2
 8005970:	881b      	ldrh	r3, [r3, #0]
 8005972:	b29b      	uxth	r3, r3
 8005974:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005978:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800597c:	837b      	strh	r3, [r7, #26]
 800597e:	8b7b      	ldrh	r3, [r7, #26]
 8005980:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005984:	837b      	strh	r3, [r7, #26]
 8005986:	8b7b      	ldrh	r3, [r7, #26]
 8005988:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800598c:	837b      	strh	r3, [r7, #26]
 800598e:	687a      	ldr	r2, [r7, #4]
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	781b      	ldrb	r3, [r3, #0]
 8005994:	009b      	lsls	r3, r3, #2
 8005996:	441a      	add	r2, r3
 8005998:	8b7b      	ldrh	r3, [r7, #26]
 800599a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800599e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059aa:	b29b      	uxth	r3, r3
 80059ac:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80059ae:	687a      	ldr	r2, [r7, #4]
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	781b      	ldrb	r3, [r3, #0]
 80059b4:	009b      	lsls	r3, r3, #2
 80059b6:	4413      	add	r3, r2
 80059b8:	881b      	ldrh	r3, [r3, #0]
 80059ba:	b29b      	uxth	r3, r3
 80059bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059c4:	833b      	strh	r3, [r7, #24]
 80059c6:	687a      	ldr	r2, [r7, #4]
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	781b      	ldrb	r3, [r3, #0]
 80059cc:	009b      	lsls	r3, r3, #2
 80059ce:	441a      	add	r2, r3
 80059d0:	8b3b      	ldrh	r3, [r7, #24]
 80059d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059e2:	b29b      	uxth	r3, r3
 80059e4:	8013      	strh	r3, [r2, #0]
 80059e6:	e0ac      	b.n	8005b42 <USB_ActivateEndpoint+0x6ba>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80059e8:	687a      	ldr	r2, [r7, #4]
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	781b      	ldrb	r3, [r3, #0]
 80059ee:	009b      	lsls	r3, r3, #2
 80059f0:	4413      	add	r3, r2
 80059f2:	881b      	ldrh	r3, [r3, #0]
 80059f4:	82fb      	strh	r3, [r7, #22]
 80059f6:	8afb      	ldrh	r3, [r7, #22]
 80059f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d01b      	beq.n	8005a38 <USB_ActivateEndpoint+0x5b0>
 8005a00:	687a      	ldr	r2, [r7, #4]
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	781b      	ldrb	r3, [r3, #0]
 8005a06:	009b      	lsls	r3, r3, #2
 8005a08:	4413      	add	r3, r2
 8005a0a:	881b      	ldrh	r3, [r3, #0]
 8005a0c:	b29b      	uxth	r3, r3
 8005a0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a16:	82bb      	strh	r3, [r7, #20]
 8005a18:	687a      	ldr	r2, [r7, #4]
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	781b      	ldrb	r3, [r3, #0]
 8005a1e:	009b      	lsls	r3, r3, #2
 8005a20:	441a      	add	r2, r3
 8005a22:	8abb      	ldrh	r3, [r7, #20]
 8005a24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a2c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005a30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a34:	b29b      	uxth	r3, r3
 8005a36:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005a38:	687a      	ldr	r2, [r7, #4]
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	781b      	ldrb	r3, [r3, #0]
 8005a3e:	009b      	lsls	r3, r3, #2
 8005a40:	4413      	add	r3, r2
 8005a42:	881b      	ldrh	r3, [r3, #0]
 8005a44:	827b      	strh	r3, [r7, #18]
 8005a46:	8a7b      	ldrh	r3, [r7, #18]
 8005a48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d01b      	beq.n	8005a88 <USB_ActivateEndpoint+0x600>
 8005a50:	687a      	ldr	r2, [r7, #4]
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	781b      	ldrb	r3, [r3, #0]
 8005a56:	009b      	lsls	r3, r3, #2
 8005a58:	4413      	add	r3, r2
 8005a5a:	881b      	ldrh	r3, [r3, #0]
 8005a5c:	b29b      	uxth	r3, r3
 8005a5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a66:	823b      	strh	r3, [r7, #16]
 8005a68:	687a      	ldr	r2, [r7, #4]
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	781b      	ldrb	r3, [r3, #0]
 8005a6e:	009b      	lsls	r3, r3, #2
 8005a70:	441a      	add	r2, r3
 8005a72:	8a3b      	ldrh	r3, [r7, #16]
 8005a74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a80:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005a84:	b29b      	uxth	r3, r3
 8005a86:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	78db      	ldrb	r3, [r3, #3]
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	d020      	beq.n	8005ad2 <USB_ActivateEndpoint+0x64a>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005a90:	687a      	ldr	r2, [r7, #4]
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	781b      	ldrb	r3, [r3, #0]
 8005a96:	009b      	lsls	r3, r3, #2
 8005a98:	4413      	add	r3, r2
 8005a9a:	881b      	ldrh	r3, [r3, #0]
 8005a9c:	b29b      	uxth	r3, r3
 8005a9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005aa2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005aa6:	81fb      	strh	r3, [r7, #14]
 8005aa8:	89fb      	ldrh	r3, [r7, #14]
 8005aaa:	f083 0320 	eor.w	r3, r3, #32
 8005aae:	81fb      	strh	r3, [r7, #14]
 8005ab0:	687a      	ldr	r2, [r7, #4]
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	781b      	ldrb	r3, [r3, #0]
 8005ab6:	009b      	lsls	r3, r3, #2
 8005ab8:	441a      	add	r2, r3
 8005aba:	89fb      	ldrh	r3, [r7, #14]
 8005abc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ac0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ac4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ac8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005acc:	b29b      	uxth	r3, r3
 8005ace:	8013      	strh	r3, [r2, #0]
 8005ad0:	e01b      	b.n	8005b0a <USB_ActivateEndpoint+0x682>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005ad2:	687a      	ldr	r2, [r7, #4]
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	781b      	ldrb	r3, [r3, #0]
 8005ad8:	009b      	lsls	r3, r3, #2
 8005ada:	4413      	add	r3, r2
 8005adc:	881b      	ldrh	r3, [r3, #0]
 8005ade:	b29b      	uxth	r3, r3
 8005ae0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ae4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ae8:	81bb      	strh	r3, [r7, #12]
 8005aea:	687a      	ldr	r2, [r7, #4]
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	781b      	ldrb	r3, [r3, #0]
 8005af0:	009b      	lsls	r3, r3, #2
 8005af2:	441a      	add	r2, r3
 8005af4:	89bb      	ldrh	r3, [r7, #12]
 8005af6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005afa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005afe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b06:	b29b      	uxth	r3, r3
 8005b08:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005b0a:	687a      	ldr	r2, [r7, #4]
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	781b      	ldrb	r3, [r3, #0]
 8005b10:	009b      	lsls	r3, r3, #2
 8005b12:	4413      	add	r3, r2
 8005b14:	881b      	ldrh	r3, [r3, #0]
 8005b16:	b29b      	uxth	r3, r3
 8005b18:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b20:	817b      	strh	r3, [r7, #10]
 8005b22:	687a      	ldr	r2, [r7, #4]
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	781b      	ldrb	r3, [r3, #0]
 8005b28:	009b      	lsls	r3, r3, #2
 8005b2a:	441a      	add	r2, r3
 8005b2c:	897b      	ldrh	r3, [r7, #10]
 8005b2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b3e:	b29b      	uxth	r3, r3
 8005b40:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8005b42:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	376c      	adds	r7, #108	; 0x6c
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bc80      	pop	{r7}
 8005b4e:	4770      	bx	lr

08005b50 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b08d      	sub	sp, #52	; 0x34
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
 8005b58:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	7b1b      	ldrb	r3, [r3, #12]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	f040 808e 	bne.w	8005c80 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	785b      	ldrb	r3, [r3, #1]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d044      	beq.n	8005bf6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005b6c:	687a      	ldr	r2, [r7, #4]
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	781b      	ldrb	r3, [r3, #0]
 8005b72:	009b      	lsls	r3, r3, #2
 8005b74:	4413      	add	r3, r2
 8005b76:	881b      	ldrh	r3, [r3, #0]
 8005b78:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005b7a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005b7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d01b      	beq.n	8005bbc <USB_DeactivateEndpoint+0x6c>
 8005b84:	687a      	ldr	r2, [r7, #4]
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	781b      	ldrb	r3, [r3, #0]
 8005b8a:	009b      	lsls	r3, r3, #2
 8005b8c:	4413      	add	r3, r2
 8005b8e:	881b      	ldrh	r3, [r3, #0]
 8005b90:	b29b      	uxth	r3, r3
 8005b92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b9a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005b9c:	687a      	ldr	r2, [r7, #4]
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	781b      	ldrb	r3, [r3, #0]
 8005ba2:	009b      	lsls	r3, r3, #2
 8005ba4:	441a      	add	r2, r3
 8005ba6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005ba8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bb4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005bb8:	b29b      	uxth	r3, r3
 8005bba:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005bbc:	687a      	ldr	r2, [r7, #4]
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	781b      	ldrb	r3, [r3, #0]
 8005bc2:	009b      	lsls	r3, r3, #2
 8005bc4:	4413      	add	r3, r2
 8005bc6:	881b      	ldrh	r3, [r3, #0]
 8005bc8:	b29b      	uxth	r3, r3
 8005bca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bd2:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005bd4:	687a      	ldr	r2, [r7, #4]
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	781b      	ldrb	r3, [r3, #0]
 8005bda:	009b      	lsls	r3, r3, #2
 8005bdc:	441a      	add	r2, r3
 8005bde:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005be0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005be4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005be8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bf0:	b29b      	uxth	r3, r3
 8005bf2:	8013      	strh	r3, [r2, #0]
 8005bf4:	e192      	b.n	8005f1c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005bf6:	687a      	ldr	r2, [r7, #4]
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	781b      	ldrb	r3, [r3, #0]
 8005bfc:	009b      	lsls	r3, r3, #2
 8005bfe:	4413      	add	r3, r2
 8005c00:	881b      	ldrh	r3, [r3, #0]
 8005c02:	853b      	strh	r3, [r7, #40]	; 0x28
 8005c04:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005c06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d01b      	beq.n	8005c46 <USB_DeactivateEndpoint+0xf6>
 8005c0e:	687a      	ldr	r2, [r7, #4]
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	781b      	ldrb	r3, [r3, #0]
 8005c14:	009b      	lsls	r3, r3, #2
 8005c16:	4413      	add	r3, r2
 8005c18:	881b      	ldrh	r3, [r3, #0]
 8005c1a:	b29b      	uxth	r3, r3
 8005c1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c24:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005c26:	687a      	ldr	r2, [r7, #4]
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	781b      	ldrb	r3, [r3, #0]
 8005c2c:	009b      	lsls	r3, r3, #2
 8005c2e:	441a      	add	r2, r3
 8005c30:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005c32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c3a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c42:	b29b      	uxth	r3, r3
 8005c44:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005c46:	687a      	ldr	r2, [r7, #4]
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	781b      	ldrb	r3, [r3, #0]
 8005c4c:	009b      	lsls	r3, r3, #2
 8005c4e:	4413      	add	r3, r2
 8005c50:	881b      	ldrh	r3, [r3, #0]
 8005c52:	b29b      	uxth	r3, r3
 8005c54:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c5c:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005c5e:	687a      	ldr	r2, [r7, #4]
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	781b      	ldrb	r3, [r3, #0]
 8005c64:	009b      	lsls	r3, r3, #2
 8005c66:	441a      	add	r2, r3
 8005c68:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005c6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c7a:	b29b      	uxth	r3, r3
 8005c7c:	8013      	strh	r3, [r2, #0]
 8005c7e:	e14d      	b.n	8005f1c <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	785b      	ldrb	r3, [r3, #1]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	f040 80a5 	bne.w	8005dd4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005c8a:	687a      	ldr	r2, [r7, #4]
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	781b      	ldrb	r3, [r3, #0]
 8005c90:	009b      	lsls	r3, r3, #2
 8005c92:	4413      	add	r3, r2
 8005c94:	881b      	ldrh	r3, [r3, #0]
 8005c96:	847b      	strh	r3, [r7, #34]	; 0x22
 8005c98:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005c9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d01b      	beq.n	8005cda <USB_DeactivateEndpoint+0x18a>
 8005ca2:	687a      	ldr	r2, [r7, #4]
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	781b      	ldrb	r3, [r3, #0]
 8005ca8:	009b      	lsls	r3, r3, #2
 8005caa:	4413      	add	r3, r2
 8005cac:	881b      	ldrh	r3, [r3, #0]
 8005cae:	b29b      	uxth	r3, r3
 8005cb0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cb8:	843b      	strh	r3, [r7, #32]
 8005cba:	687a      	ldr	r2, [r7, #4]
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	781b      	ldrb	r3, [r3, #0]
 8005cc0:	009b      	lsls	r3, r3, #2
 8005cc2:	441a      	add	r2, r3
 8005cc4:	8c3b      	ldrh	r3, [r7, #32]
 8005cc6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005cd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cd6:	b29b      	uxth	r3, r3
 8005cd8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005cda:	687a      	ldr	r2, [r7, #4]
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	781b      	ldrb	r3, [r3, #0]
 8005ce0:	009b      	lsls	r3, r3, #2
 8005ce2:	4413      	add	r3, r2
 8005ce4:	881b      	ldrh	r3, [r3, #0]
 8005ce6:	83fb      	strh	r3, [r7, #30]
 8005ce8:	8bfb      	ldrh	r3, [r7, #30]
 8005cea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d01b      	beq.n	8005d2a <USB_DeactivateEndpoint+0x1da>
 8005cf2:	687a      	ldr	r2, [r7, #4]
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	781b      	ldrb	r3, [r3, #0]
 8005cf8:	009b      	lsls	r3, r3, #2
 8005cfa:	4413      	add	r3, r2
 8005cfc:	881b      	ldrh	r3, [r3, #0]
 8005cfe:	b29b      	uxth	r3, r3
 8005d00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d08:	83bb      	strh	r3, [r7, #28]
 8005d0a:	687a      	ldr	r2, [r7, #4]
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	781b      	ldrb	r3, [r3, #0]
 8005d10:	009b      	lsls	r3, r3, #2
 8005d12:	441a      	add	r2, r3
 8005d14:	8bbb      	ldrh	r3, [r7, #28]
 8005d16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d22:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005d26:	b29b      	uxth	r3, r3
 8005d28:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005d2a:	687a      	ldr	r2, [r7, #4]
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	781b      	ldrb	r3, [r3, #0]
 8005d30:	009b      	lsls	r3, r3, #2
 8005d32:	4413      	add	r3, r2
 8005d34:	881b      	ldrh	r3, [r3, #0]
 8005d36:	b29b      	uxth	r3, r3
 8005d38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d40:	837b      	strh	r3, [r7, #26]
 8005d42:	687a      	ldr	r2, [r7, #4]
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	781b      	ldrb	r3, [r3, #0]
 8005d48:	009b      	lsls	r3, r3, #2
 8005d4a:	441a      	add	r2, r3
 8005d4c:	8b7b      	ldrh	r3, [r7, #26]
 8005d4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d5a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005d5e:	b29b      	uxth	r3, r3
 8005d60:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005d62:	687a      	ldr	r2, [r7, #4]
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	781b      	ldrb	r3, [r3, #0]
 8005d68:	009b      	lsls	r3, r3, #2
 8005d6a:	4413      	add	r3, r2
 8005d6c:	881b      	ldrh	r3, [r3, #0]
 8005d6e:	b29b      	uxth	r3, r3
 8005d70:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d78:	833b      	strh	r3, [r7, #24]
 8005d7a:	687a      	ldr	r2, [r7, #4]
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	781b      	ldrb	r3, [r3, #0]
 8005d80:	009b      	lsls	r3, r3, #2
 8005d82:	441a      	add	r2, r3
 8005d84:	8b3b      	ldrh	r3, [r7, #24]
 8005d86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d96:	b29b      	uxth	r3, r3
 8005d98:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005d9a:	687a      	ldr	r2, [r7, #4]
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	781b      	ldrb	r3, [r3, #0]
 8005da0:	009b      	lsls	r3, r3, #2
 8005da2:	4413      	add	r3, r2
 8005da4:	881b      	ldrh	r3, [r3, #0]
 8005da6:	b29b      	uxth	r3, r3
 8005da8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005db0:	82fb      	strh	r3, [r7, #22]
 8005db2:	687a      	ldr	r2, [r7, #4]
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	781b      	ldrb	r3, [r3, #0]
 8005db8:	009b      	lsls	r3, r3, #2
 8005dba:	441a      	add	r2, r3
 8005dbc:	8afb      	ldrh	r3, [r7, #22]
 8005dbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dc2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dce:	b29b      	uxth	r3, r3
 8005dd0:	8013      	strh	r3, [r2, #0]
 8005dd2:	e0a3      	b.n	8005f1c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005dd4:	687a      	ldr	r2, [r7, #4]
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	781b      	ldrb	r3, [r3, #0]
 8005dda:	009b      	lsls	r3, r3, #2
 8005ddc:	4413      	add	r3, r2
 8005dde:	881b      	ldrh	r3, [r3, #0]
 8005de0:	82bb      	strh	r3, [r7, #20]
 8005de2:	8abb      	ldrh	r3, [r7, #20]
 8005de4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d01b      	beq.n	8005e24 <USB_DeactivateEndpoint+0x2d4>
 8005dec:	687a      	ldr	r2, [r7, #4]
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	781b      	ldrb	r3, [r3, #0]
 8005df2:	009b      	lsls	r3, r3, #2
 8005df4:	4413      	add	r3, r2
 8005df6:	881b      	ldrh	r3, [r3, #0]
 8005df8:	b29b      	uxth	r3, r3
 8005dfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e02:	827b      	strh	r3, [r7, #18]
 8005e04:	687a      	ldr	r2, [r7, #4]
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	781b      	ldrb	r3, [r3, #0]
 8005e0a:	009b      	lsls	r3, r3, #2
 8005e0c:	441a      	add	r2, r3
 8005e0e:	8a7b      	ldrh	r3, [r7, #18]
 8005e10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005e1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e20:	b29b      	uxth	r3, r3
 8005e22:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005e24:	687a      	ldr	r2, [r7, #4]
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	781b      	ldrb	r3, [r3, #0]
 8005e2a:	009b      	lsls	r3, r3, #2
 8005e2c:	4413      	add	r3, r2
 8005e2e:	881b      	ldrh	r3, [r3, #0]
 8005e30:	823b      	strh	r3, [r7, #16]
 8005e32:	8a3b      	ldrh	r3, [r7, #16]
 8005e34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d01b      	beq.n	8005e74 <USB_DeactivateEndpoint+0x324>
 8005e3c:	687a      	ldr	r2, [r7, #4]
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	781b      	ldrb	r3, [r3, #0]
 8005e42:	009b      	lsls	r3, r3, #2
 8005e44:	4413      	add	r3, r2
 8005e46:	881b      	ldrh	r3, [r3, #0]
 8005e48:	b29b      	uxth	r3, r3
 8005e4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e52:	81fb      	strh	r3, [r7, #14]
 8005e54:	687a      	ldr	r2, [r7, #4]
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	781b      	ldrb	r3, [r3, #0]
 8005e5a:	009b      	lsls	r3, r3, #2
 8005e5c:	441a      	add	r2, r3
 8005e5e:	89fb      	ldrh	r3, [r7, #14]
 8005e60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e6c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005e70:	b29b      	uxth	r3, r3
 8005e72:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005e74:	687a      	ldr	r2, [r7, #4]
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	781b      	ldrb	r3, [r3, #0]
 8005e7a:	009b      	lsls	r3, r3, #2
 8005e7c:	4413      	add	r3, r2
 8005e7e:	881b      	ldrh	r3, [r3, #0]
 8005e80:	b29b      	uxth	r3, r3
 8005e82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e8a:	81bb      	strh	r3, [r7, #12]
 8005e8c:	687a      	ldr	r2, [r7, #4]
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	781b      	ldrb	r3, [r3, #0]
 8005e92:	009b      	lsls	r3, r3, #2
 8005e94:	441a      	add	r2, r3
 8005e96:	89bb      	ldrh	r3, [r7, #12]
 8005e98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ea0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005ea4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ea8:	b29b      	uxth	r3, r3
 8005eaa:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005eac:	687a      	ldr	r2, [r7, #4]
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	781b      	ldrb	r3, [r3, #0]
 8005eb2:	009b      	lsls	r3, r3, #2
 8005eb4:	4413      	add	r3, r2
 8005eb6:	881b      	ldrh	r3, [r3, #0]
 8005eb8:	b29b      	uxth	r3, r3
 8005eba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ebe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ec2:	817b      	strh	r3, [r7, #10]
 8005ec4:	687a      	ldr	r2, [r7, #4]
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	781b      	ldrb	r3, [r3, #0]
 8005eca:	009b      	lsls	r3, r3, #2
 8005ecc:	441a      	add	r2, r3
 8005ece:	897b      	ldrh	r3, [r7, #10]
 8005ed0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ed4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ed8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005edc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ee0:	b29b      	uxth	r3, r3
 8005ee2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005ee4:	687a      	ldr	r2, [r7, #4]
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	781b      	ldrb	r3, [r3, #0]
 8005eea:	009b      	lsls	r3, r3, #2
 8005eec:	4413      	add	r3, r2
 8005eee:	881b      	ldrh	r3, [r3, #0]
 8005ef0:	b29b      	uxth	r3, r3
 8005ef2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ef6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005efa:	813b      	strh	r3, [r7, #8]
 8005efc:	687a      	ldr	r2, [r7, #4]
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	781b      	ldrb	r3, [r3, #0]
 8005f02:	009b      	lsls	r3, r3, #2
 8005f04:	441a      	add	r2, r3
 8005f06:	893b      	ldrh	r3, [r7, #8]
 8005f08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f18:	b29b      	uxth	r3, r3
 8005f1a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005f1c:	2300      	movs	r3, #0
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	3734      	adds	r7, #52	; 0x34
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bc80      	pop	{r7}
 8005f26:	4770      	bx	lr

08005f28 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b0ce      	sub	sp, #312	; 0x138
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	1d3b      	adds	r3, r7, #4
 8005f30:	6018      	str	r0, [r3, #0]
 8005f32:	463b      	mov	r3, r7
 8005f34:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005f36:	463b      	mov	r3, r7
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	785b      	ldrb	r3, [r3, #1]
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	f040 873e 	bne.w	8006dbe <USB_EPStartXfer+0xe96>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005f42:	463b      	mov	r3, r7
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	699a      	ldr	r2, [r3, #24]
 8005f48:	463b      	mov	r3, r7
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	691b      	ldr	r3, [r3, #16]
 8005f4e:	429a      	cmp	r2, r3
 8005f50:	d905      	bls.n	8005f5e <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8005f52:	463b      	mov	r3, r7
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	691b      	ldr	r3, [r3, #16]
 8005f58:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8005f5c:	e004      	b.n	8005f68 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8005f5e:	463b      	mov	r3, r7
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	699b      	ldr	r3, [r3, #24]
 8005f64:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005f68:	463b      	mov	r3, r7
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	7b1b      	ldrb	r3, [r3, #12]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d12e      	bne.n	8005fd0 <USB_EPStartXfer+0xa8>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005f72:	463b      	mov	r3, r7
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	6959      	ldr	r1, [r3, #20]
 8005f78:	463b      	mov	r3, r7
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	88da      	ldrh	r2, [r3, #6]
 8005f7e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005f82:	b29b      	uxth	r3, r3
 8005f84:	1d38      	adds	r0, r7, #4
 8005f86:	6800      	ldr	r0, [r0, #0]
 8005f88:	f001 fc13 	bl	80077b2 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005f8c:	1d3b      	adds	r3, r7, #4
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005f94:	1d3b      	adds	r3, r7, #4
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	461a      	mov	r2, r3
 8005fa0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005fa4:	4413      	add	r3, r2
 8005fa6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005faa:	463b      	mov	r3, r7
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	781b      	ldrb	r3, [r3, #0]
 8005fb0:	011a      	lsls	r2, r3, #4
 8005fb2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005fb6:	4413      	add	r3, r2
 8005fb8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005fbc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005fc0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005fc4:	b29a      	uxth	r2, r3
 8005fc6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005fca:	801a      	strh	r2, [r3, #0]
 8005fcc:	f000 bec2 	b.w	8006d54 <USB_EPStartXfer+0xe2c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005fd0:	463b      	mov	r3, r7
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	78db      	ldrb	r3, [r3, #3]
 8005fd6:	2b02      	cmp	r3, #2
 8005fd8:	f040 836a 	bne.w	80066b0 <USB_EPStartXfer+0x788>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005fdc:	463b      	mov	r3, r7
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	6a1a      	ldr	r2, [r3, #32]
 8005fe2:	463b      	mov	r3, r7
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	691b      	ldr	r3, [r3, #16]
 8005fe8:	429a      	cmp	r2, r3
 8005fea:	f240 830e 	bls.w	800660a <USB_EPStartXfer+0x6e2>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8005fee:	1d3b      	adds	r3, r7, #4
 8005ff0:	681a      	ldr	r2, [r3, #0]
 8005ff2:	463b      	mov	r3, r7
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	781b      	ldrb	r3, [r3, #0]
 8005ff8:	009b      	lsls	r3, r3, #2
 8005ffa:	4413      	add	r3, r2
 8005ffc:	881b      	ldrh	r3, [r3, #0]
 8005ffe:	b29b      	uxth	r3, r3
 8006000:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006004:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006008:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 800600c:	1d3b      	adds	r3, r7, #4
 800600e:	681a      	ldr	r2, [r3, #0]
 8006010:	463b      	mov	r3, r7
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	781b      	ldrb	r3, [r3, #0]
 8006016:	009b      	lsls	r3, r3, #2
 8006018:	441a      	add	r2, r3
 800601a:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800601e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006022:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006026:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800602a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800602e:	b29b      	uxth	r3, r3
 8006030:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006032:	463b      	mov	r3, r7
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	6a1a      	ldr	r2, [r3, #32]
 8006038:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800603c:	1ad2      	subs	r2, r2, r3
 800603e:	463b      	mov	r3, r7
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006044:	1d3b      	adds	r3, r7, #4
 8006046:	681a      	ldr	r2, [r3, #0]
 8006048:	463b      	mov	r3, r7
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	781b      	ldrb	r3, [r3, #0]
 800604e:	009b      	lsls	r3, r3, #2
 8006050:	4413      	add	r3, r2
 8006052:	881b      	ldrh	r3, [r3, #0]
 8006054:	b29b      	uxth	r3, r3
 8006056:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800605a:	2b00      	cmp	r3, #0
 800605c:	f000 817c 	beq.w	8006358 <USB_EPStartXfer+0x430>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006060:	1d3b      	adds	r3, r7, #4
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006068:	463b      	mov	r3, r7
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	785b      	ldrb	r3, [r3, #1]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d16f      	bne.n	8006152 <USB_EPStartXfer+0x22a>
 8006072:	1d3b      	adds	r3, r7, #4
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800607a:	1d3b      	adds	r3, r7, #4
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006082:	b29b      	uxth	r3, r3
 8006084:	461a      	mov	r2, r3
 8006086:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800608a:	4413      	add	r3, r2
 800608c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006090:	463b      	mov	r3, r7
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	781b      	ldrb	r3, [r3, #0]
 8006096:	011a      	lsls	r2, r3, #4
 8006098:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800609c:	4413      	add	r3, r2
 800609e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80060a2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80060a6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d116      	bne.n	80060dc <USB_EPStartXfer+0x1b4>
 80060ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80060b2:	881b      	ldrh	r3, [r3, #0]
 80060b4:	b29b      	uxth	r3, r3
 80060b6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80060ba:	b29a      	uxth	r2, r3
 80060bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80060c0:	801a      	strh	r2, [r3, #0]
 80060c2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80060c6:	881b      	ldrh	r3, [r3, #0]
 80060c8:	b29b      	uxth	r3, r3
 80060ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060d2:	b29a      	uxth	r2, r3
 80060d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80060d8:	801a      	strh	r2, [r3, #0]
 80060da:	e05b      	b.n	8006194 <USB_EPStartXfer+0x26c>
 80060dc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80060e0:	2b3e      	cmp	r3, #62	; 0x3e
 80060e2:	d818      	bhi.n	8006116 <USB_EPStartXfer+0x1ee>
 80060e4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80060e8:	085b      	lsrs	r3, r3, #1
 80060ea:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80060ee:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80060f2:	f003 0301 	and.w	r3, r3, #1
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d004      	beq.n	8006104 <USB_EPStartXfer+0x1dc>
 80060fa:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80060fe:	3301      	adds	r3, #1
 8006100:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8006104:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006108:	b29b      	uxth	r3, r3
 800610a:	029b      	lsls	r3, r3, #10
 800610c:	b29a      	uxth	r2, r3
 800610e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006112:	801a      	strh	r2, [r3, #0]
 8006114:	e03e      	b.n	8006194 <USB_EPStartXfer+0x26c>
 8006116:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800611a:	095b      	lsrs	r3, r3, #5
 800611c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8006120:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006124:	f003 031f 	and.w	r3, r3, #31
 8006128:	2b00      	cmp	r3, #0
 800612a:	d104      	bne.n	8006136 <USB_EPStartXfer+0x20e>
 800612c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006130:	3b01      	subs	r3, #1
 8006132:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8006136:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800613a:	b29b      	uxth	r3, r3
 800613c:	029b      	lsls	r3, r3, #10
 800613e:	b29b      	uxth	r3, r3
 8006140:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006144:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006148:	b29a      	uxth	r2, r3
 800614a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800614e:	801a      	strh	r2, [r3, #0]
 8006150:	e020      	b.n	8006194 <USB_EPStartXfer+0x26c>
 8006152:	463b      	mov	r3, r7
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	785b      	ldrb	r3, [r3, #1]
 8006158:	2b01      	cmp	r3, #1
 800615a:	d11b      	bne.n	8006194 <USB_EPStartXfer+0x26c>
 800615c:	1d3b      	adds	r3, r7, #4
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006164:	b29b      	uxth	r3, r3
 8006166:	461a      	mov	r2, r3
 8006168:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800616c:	4413      	add	r3, r2
 800616e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006172:	463b      	mov	r3, r7
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	781b      	ldrb	r3, [r3, #0]
 8006178:	011a      	lsls	r2, r3, #4
 800617a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800617e:	4413      	add	r3, r2
 8006180:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006184:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006188:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800618c:	b29a      	uxth	r2, r3
 800618e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006192:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006194:	463b      	mov	r3, r7
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	895b      	ldrh	r3, [r3, #10]
 800619a:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800619e:	463b      	mov	r3, r7
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	6959      	ldr	r1, [r3, #20]
 80061a4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80061a8:	b29b      	uxth	r3, r3
 80061aa:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 80061ae:	1d38      	adds	r0, r7, #4
 80061b0:	6800      	ldr	r0, [r0, #0]
 80061b2:	f001 fafe 	bl	80077b2 <USB_WritePMA>
            ep->xfer_buff += len;
 80061b6:	463b      	mov	r3, r7
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	695a      	ldr	r2, [r3, #20]
 80061bc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80061c0:	441a      	add	r2, r3
 80061c2:	463b      	mov	r3, r7
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80061c8:	463b      	mov	r3, r7
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	6a1a      	ldr	r2, [r3, #32]
 80061ce:	463b      	mov	r3, r7
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	691b      	ldr	r3, [r3, #16]
 80061d4:	429a      	cmp	r2, r3
 80061d6:	d909      	bls.n	80061ec <USB_EPStartXfer+0x2c4>
            {
              ep->xfer_len_db -= len;
 80061d8:	463b      	mov	r3, r7
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	6a1a      	ldr	r2, [r3, #32]
 80061de:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80061e2:	1ad2      	subs	r2, r2, r3
 80061e4:	463b      	mov	r3, r7
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	621a      	str	r2, [r3, #32]
 80061ea:	e008      	b.n	80061fe <USB_EPStartXfer+0x2d6>
            }
            else
            {
              len = ep->xfer_len_db;
 80061ec:	463b      	mov	r3, r7
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	6a1b      	ldr	r3, [r3, #32]
 80061f2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
              ep->xfer_len_db = 0U;
 80061f6:	463b      	mov	r3, r7
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	2200      	movs	r2, #0
 80061fc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80061fe:	463b      	mov	r3, r7
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	785b      	ldrb	r3, [r3, #1]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d16f      	bne.n	80062e8 <USB_EPStartXfer+0x3c0>
 8006208:	1d3b      	adds	r3, r7, #4
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006210:	1d3b      	adds	r3, r7, #4
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006218:	b29b      	uxth	r3, r3
 800621a:	461a      	mov	r2, r3
 800621c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006220:	4413      	add	r3, r2
 8006222:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006226:	463b      	mov	r3, r7
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	781b      	ldrb	r3, [r3, #0]
 800622c:	011a      	lsls	r2, r3, #4
 800622e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006232:	4413      	add	r3, r2
 8006234:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006238:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800623c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006240:	2b00      	cmp	r3, #0
 8006242:	d116      	bne.n	8006272 <USB_EPStartXfer+0x34a>
 8006244:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006248:	881b      	ldrh	r3, [r3, #0]
 800624a:	b29b      	uxth	r3, r3
 800624c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006250:	b29a      	uxth	r2, r3
 8006252:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006256:	801a      	strh	r2, [r3, #0]
 8006258:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800625c:	881b      	ldrh	r3, [r3, #0]
 800625e:	b29b      	uxth	r3, r3
 8006260:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006264:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006268:	b29a      	uxth	r2, r3
 800626a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800626e:	801a      	strh	r2, [r3, #0]
 8006270:	e05f      	b.n	8006332 <USB_EPStartXfer+0x40a>
 8006272:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006276:	2b3e      	cmp	r3, #62	; 0x3e
 8006278:	d818      	bhi.n	80062ac <USB_EPStartXfer+0x384>
 800627a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800627e:	085b      	lsrs	r3, r3, #1
 8006280:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8006284:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006288:	f003 0301 	and.w	r3, r3, #1
 800628c:	2b00      	cmp	r3, #0
 800628e:	d004      	beq.n	800629a <USB_EPStartXfer+0x372>
 8006290:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006294:	3301      	adds	r3, #1
 8006296:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800629a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800629e:	b29b      	uxth	r3, r3
 80062a0:	029b      	lsls	r3, r3, #10
 80062a2:	b29a      	uxth	r2, r3
 80062a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80062a8:	801a      	strh	r2, [r3, #0]
 80062aa:	e042      	b.n	8006332 <USB_EPStartXfer+0x40a>
 80062ac:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80062b0:	095b      	lsrs	r3, r3, #5
 80062b2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80062b6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80062ba:	f003 031f 	and.w	r3, r3, #31
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d104      	bne.n	80062cc <USB_EPStartXfer+0x3a4>
 80062c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062c6:	3b01      	subs	r3, #1
 80062c8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80062cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062d0:	b29b      	uxth	r3, r3
 80062d2:	029b      	lsls	r3, r3, #10
 80062d4:	b29b      	uxth	r3, r3
 80062d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062de:	b29a      	uxth	r2, r3
 80062e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80062e4:	801a      	strh	r2, [r3, #0]
 80062e6:	e024      	b.n	8006332 <USB_EPStartXfer+0x40a>
 80062e8:	463b      	mov	r3, r7
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	785b      	ldrb	r3, [r3, #1]
 80062ee:	2b01      	cmp	r3, #1
 80062f0:	d11f      	bne.n	8006332 <USB_EPStartXfer+0x40a>
 80062f2:	1d3b      	adds	r3, r7, #4
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80062fa:	1d3b      	adds	r3, r7, #4
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006302:	b29b      	uxth	r3, r3
 8006304:	461a      	mov	r2, r3
 8006306:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800630a:	4413      	add	r3, r2
 800630c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006310:	463b      	mov	r3, r7
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	781b      	ldrb	r3, [r3, #0]
 8006316:	011a      	lsls	r2, r3, #4
 8006318:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800631c:	4413      	add	r3, r2
 800631e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006322:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006326:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800632a:	b29a      	uxth	r2, r3
 800632c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006330:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006332:	463b      	mov	r3, r7
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	891b      	ldrh	r3, [r3, #8]
 8006338:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800633c:	463b      	mov	r3, r7
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	6959      	ldr	r1, [r3, #20]
 8006342:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006346:	b29b      	uxth	r3, r3
 8006348:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 800634c:	1d38      	adds	r0, r7, #4
 800634e:	6800      	ldr	r0, [r0, #0]
 8006350:	f001 fa2f 	bl	80077b2 <USB_WritePMA>
 8006354:	f000 bcfe 	b.w	8006d54 <USB_EPStartXfer+0xe2c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006358:	463b      	mov	r3, r7
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	785b      	ldrb	r3, [r3, #1]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d164      	bne.n	800642c <USB_EPStartXfer+0x504>
 8006362:	1d3b      	adds	r3, r7, #4
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006368:	1d3b      	adds	r3, r7, #4
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006370:	b29b      	uxth	r3, r3
 8006372:	461a      	mov	r2, r3
 8006374:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006376:	4413      	add	r3, r2
 8006378:	67fb      	str	r3, [r7, #124]	; 0x7c
 800637a:	463b      	mov	r3, r7
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	781b      	ldrb	r3, [r3, #0]
 8006380:	011a      	lsls	r2, r3, #4
 8006382:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006384:	4413      	add	r3, r2
 8006386:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800638a:	67bb      	str	r3, [r7, #120]	; 0x78
 800638c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006390:	2b00      	cmp	r3, #0
 8006392:	d112      	bne.n	80063ba <USB_EPStartXfer+0x492>
 8006394:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006396:	881b      	ldrh	r3, [r3, #0]
 8006398:	b29b      	uxth	r3, r3
 800639a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800639e:	b29a      	uxth	r2, r3
 80063a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80063a2:	801a      	strh	r2, [r3, #0]
 80063a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80063a6:	881b      	ldrh	r3, [r3, #0]
 80063a8:	b29b      	uxth	r3, r3
 80063aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063b2:	b29a      	uxth	r2, r3
 80063b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80063b6:	801a      	strh	r2, [r3, #0]
 80063b8:	e057      	b.n	800646a <USB_EPStartXfer+0x542>
 80063ba:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80063be:	2b3e      	cmp	r3, #62	; 0x3e
 80063c0:	d817      	bhi.n	80063f2 <USB_EPStartXfer+0x4ca>
 80063c2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80063c6:	085b      	lsrs	r3, r3, #1
 80063c8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80063cc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80063d0:	f003 0301 	and.w	r3, r3, #1
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d004      	beq.n	80063e2 <USB_EPStartXfer+0x4ba>
 80063d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80063dc:	3301      	adds	r3, #1
 80063de:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80063e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80063e6:	b29b      	uxth	r3, r3
 80063e8:	029b      	lsls	r3, r3, #10
 80063ea:	b29a      	uxth	r2, r3
 80063ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80063ee:	801a      	strh	r2, [r3, #0]
 80063f0:	e03b      	b.n	800646a <USB_EPStartXfer+0x542>
 80063f2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80063f6:	095b      	lsrs	r3, r3, #5
 80063f8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80063fc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006400:	f003 031f 	and.w	r3, r3, #31
 8006404:	2b00      	cmp	r3, #0
 8006406:	d104      	bne.n	8006412 <USB_EPStartXfer+0x4ea>
 8006408:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800640c:	3b01      	subs	r3, #1
 800640e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006412:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006416:	b29b      	uxth	r3, r3
 8006418:	029b      	lsls	r3, r3, #10
 800641a:	b29b      	uxth	r3, r3
 800641c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006420:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006424:	b29a      	uxth	r2, r3
 8006426:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006428:	801a      	strh	r2, [r3, #0]
 800642a:	e01e      	b.n	800646a <USB_EPStartXfer+0x542>
 800642c:	463b      	mov	r3, r7
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	785b      	ldrb	r3, [r3, #1]
 8006432:	2b01      	cmp	r3, #1
 8006434:	d119      	bne.n	800646a <USB_EPStartXfer+0x542>
 8006436:	1d3b      	adds	r3, r7, #4
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	677b      	str	r3, [r7, #116]	; 0x74
 800643c:	1d3b      	adds	r3, r7, #4
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006444:	b29b      	uxth	r3, r3
 8006446:	461a      	mov	r2, r3
 8006448:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800644a:	4413      	add	r3, r2
 800644c:	677b      	str	r3, [r7, #116]	; 0x74
 800644e:	463b      	mov	r3, r7
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	781b      	ldrb	r3, [r3, #0]
 8006454:	011a      	lsls	r2, r3, #4
 8006456:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006458:	4413      	add	r3, r2
 800645a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800645e:	673b      	str	r3, [r7, #112]	; 0x70
 8006460:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006464:	b29a      	uxth	r2, r3
 8006466:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006468:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800646a:	463b      	mov	r3, r7
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	891b      	ldrh	r3, [r3, #8]
 8006470:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006474:	463b      	mov	r3, r7
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	6959      	ldr	r1, [r3, #20]
 800647a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800647e:	b29b      	uxth	r3, r3
 8006480:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 8006484:	1d38      	adds	r0, r7, #4
 8006486:	6800      	ldr	r0, [r0, #0]
 8006488:	f001 f993 	bl	80077b2 <USB_WritePMA>
            ep->xfer_buff += len;
 800648c:	463b      	mov	r3, r7
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	695a      	ldr	r2, [r3, #20]
 8006492:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006496:	441a      	add	r2, r3
 8006498:	463b      	mov	r3, r7
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800649e:	463b      	mov	r3, r7
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	6a1a      	ldr	r2, [r3, #32]
 80064a4:	463b      	mov	r3, r7
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	691b      	ldr	r3, [r3, #16]
 80064aa:	429a      	cmp	r2, r3
 80064ac:	d909      	bls.n	80064c2 <USB_EPStartXfer+0x59a>
            {
              ep->xfer_len_db -= len;
 80064ae:	463b      	mov	r3, r7
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	6a1a      	ldr	r2, [r3, #32]
 80064b4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80064b8:	1ad2      	subs	r2, r2, r3
 80064ba:	463b      	mov	r3, r7
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	621a      	str	r2, [r3, #32]
 80064c0:	e008      	b.n	80064d4 <USB_EPStartXfer+0x5ac>
            }
            else
            {
              len = ep->xfer_len_db;
 80064c2:	463b      	mov	r3, r7
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	6a1b      	ldr	r3, [r3, #32]
 80064c8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
              ep->xfer_len_db = 0U;
 80064cc:	463b      	mov	r3, r7
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	2200      	movs	r2, #0
 80064d2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80064d4:	1d3b      	adds	r3, r7, #4
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80064da:	463b      	mov	r3, r7
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	785b      	ldrb	r3, [r3, #1]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d164      	bne.n	80065ae <USB_EPStartXfer+0x686>
 80064e4:	1d3b      	adds	r3, r7, #4
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	66bb      	str	r3, [r7, #104]	; 0x68
 80064ea:	1d3b      	adds	r3, r7, #4
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064f2:	b29b      	uxth	r3, r3
 80064f4:	461a      	mov	r2, r3
 80064f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80064f8:	4413      	add	r3, r2
 80064fa:	66bb      	str	r3, [r7, #104]	; 0x68
 80064fc:	463b      	mov	r3, r7
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	781b      	ldrb	r3, [r3, #0]
 8006502:	011a      	lsls	r2, r3, #4
 8006504:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006506:	4413      	add	r3, r2
 8006508:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800650c:	667b      	str	r3, [r7, #100]	; 0x64
 800650e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006512:	2b00      	cmp	r3, #0
 8006514:	d112      	bne.n	800653c <USB_EPStartXfer+0x614>
 8006516:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006518:	881b      	ldrh	r3, [r3, #0]
 800651a:	b29b      	uxth	r3, r3
 800651c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006520:	b29a      	uxth	r2, r3
 8006522:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006524:	801a      	strh	r2, [r3, #0]
 8006526:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006528:	881b      	ldrh	r3, [r3, #0]
 800652a:	b29b      	uxth	r3, r3
 800652c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006530:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006534:	b29a      	uxth	r2, r3
 8006536:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006538:	801a      	strh	r2, [r3, #0]
 800653a:	e054      	b.n	80065e6 <USB_EPStartXfer+0x6be>
 800653c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006540:	2b3e      	cmp	r3, #62	; 0x3e
 8006542:	d817      	bhi.n	8006574 <USB_EPStartXfer+0x64c>
 8006544:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006548:	085b      	lsrs	r3, r3, #1
 800654a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800654e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006552:	f003 0301 	and.w	r3, r3, #1
 8006556:	2b00      	cmp	r3, #0
 8006558:	d004      	beq.n	8006564 <USB_EPStartXfer+0x63c>
 800655a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800655e:	3301      	adds	r3, #1
 8006560:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006564:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006568:	b29b      	uxth	r3, r3
 800656a:	029b      	lsls	r3, r3, #10
 800656c:	b29a      	uxth	r2, r3
 800656e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006570:	801a      	strh	r2, [r3, #0]
 8006572:	e038      	b.n	80065e6 <USB_EPStartXfer+0x6be>
 8006574:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006578:	095b      	lsrs	r3, r3, #5
 800657a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800657e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006582:	f003 031f 	and.w	r3, r3, #31
 8006586:	2b00      	cmp	r3, #0
 8006588:	d104      	bne.n	8006594 <USB_EPStartXfer+0x66c>
 800658a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800658e:	3b01      	subs	r3, #1
 8006590:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006594:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006598:	b29b      	uxth	r3, r3
 800659a:	029b      	lsls	r3, r3, #10
 800659c:	b29b      	uxth	r3, r3
 800659e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065a6:	b29a      	uxth	r2, r3
 80065a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80065aa:	801a      	strh	r2, [r3, #0]
 80065ac:	e01b      	b.n	80065e6 <USB_EPStartXfer+0x6be>
 80065ae:	463b      	mov	r3, r7
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	785b      	ldrb	r3, [r3, #1]
 80065b4:	2b01      	cmp	r3, #1
 80065b6:	d116      	bne.n	80065e6 <USB_EPStartXfer+0x6be>
 80065b8:	1d3b      	adds	r3, r7, #4
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065c0:	b29b      	uxth	r3, r3
 80065c2:	461a      	mov	r2, r3
 80065c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065c6:	4413      	add	r3, r2
 80065c8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80065ca:	463b      	mov	r3, r7
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	781b      	ldrb	r3, [r3, #0]
 80065d0:	011a      	lsls	r2, r3, #4
 80065d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065d4:	4413      	add	r3, r2
 80065d6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80065da:	663b      	str	r3, [r7, #96]	; 0x60
 80065dc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80065e0:	b29a      	uxth	r2, r3
 80065e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80065e4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80065e6:	463b      	mov	r3, r7
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	895b      	ldrh	r3, [r3, #10]
 80065ec:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80065f0:	463b      	mov	r3, r7
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	6959      	ldr	r1, [r3, #20]
 80065f6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80065fa:	b29b      	uxth	r3, r3
 80065fc:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 8006600:	1d38      	adds	r0, r7, #4
 8006602:	6800      	ldr	r0, [r0, #0]
 8006604:	f001 f8d5 	bl	80077b2 <USB_WritePMA>
 8006608:	e3a4      	b.n	8006d54 <USB_EPStartXfer+0xe2c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800660a:	463b      	mov	r3, r7
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	6a1b      	ldr	r3, [r3, #32]
 8006610:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8006614:	1d3b      	adds	r3, r7, #4
 8006616:	681a      	ldr	r2, [r3, #0]
 8006618:	463b      	mov	r3, r7
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	781b      	ldrb	r3, [r3, #0]
 800661e:	009b      	lsls	r3, r3, #2
 8006620:	4413      	add	r3, r2
 8006622:	881b      	ldrh	r3, [r3, #0]
 8006624:	b29b      	uxth	r3, r3
 8006626:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800662a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800662e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8006632:	1d3b      	adds	r3, r7, #4
 8006634:	681a      	ldr	r2, [r3, #0]
 8006636:	463b      	mov	r3, r7
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	781b      	ldrb	r3, [r3, #0]
 800663c:	009b      	lsls	r3, r3, #2
 800663e:	441a      	add	r2, r3
 8006640:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8006644:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006648:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800664c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006650:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006654:	b29b      	uxth	r3, r3
 8006656:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006658:	1d3b      	adds	r3, r7, #4
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	65bb      	str	r3, [r7, #88]	; 0x58
 800665e:	1d3b      	adds	r3, r7, #4
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006666:	b29b      	uxth	r3, r3
 8006668:	461a      	mov	r2, r3
 800666a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800666c:	4413      	add	r3, r2
 800666e:	65bb      	str	r3, [r7, #88]	; 0x58
 8006670:	463b      	mov	r3, r7
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	781b      	ldrb	r3, [r3, #0]
 8006676:	011a      	lsls	r2, r3, #4
 8006678:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800667a:	4413      	add	r3, r2
 800667c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006680:	657b      	str	r3, [r7, #84]	; 0x54
 8006682:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006686:	b29a      	uxth	r2, r3
 8006688:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800668a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800668c:	463b      	mov	r3, r7
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	891b      	ldrh	r3, [r3, #8]
 8006692:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006696:	463b      	mov	r3, r7
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	6959      	ldr	r1, [r3, #20]
 800669c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80066a0:	b29b      	uxth	r3, r3
 80066a2:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 80066a6:	1d38      	adds	r0, r7, #4
 80066a8:	6800      	ldr	r0, [r0, #0]
 80066aa:	f001 f882 	bl	80077b2 <USB_WritePMA>
 80066ae:	e351      	b.n	8006d54 <USB_EPStartXfer+0xe2c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 80066b0:	1d3b      	adds	r3, r7, #4
 80066b2:	681a      	ldr	r2, [r3, #0]
 80066b4:	463b      	mov	r3, r7
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	781b      	ldrb	r3, [r3, #0]
 80066ba:	009b      	lsls	r3, r3, #2
 80066bc:	4413      	add	r3, r2
 80066be:	881b      	ldrh	r3, [r3, #0]
 80066c0:	b29b      	uxth	r3, r3
 80066c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066ca:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80066ce:	1d3b      	adds	r3, r7, #4
 80066d0:	681a      	ldr	r2, [r3, #0]
 80066d2:	463b      	mov	r3, r7
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	781b      	ldrb	r3, [r3, #0]
 80066d8:	009b      	lsls	r3, r3, #2
 80066da:	441a      	add	r2, r3
 80066dc:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80066e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066e8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80066ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066f0:	b29b      	uxth	r3, r3
 80066f2:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80066f4:	463b      	mov	r3, r7
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	6a1a      	ldr	r2, [r3, #32]
 80066fa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80066fe:	1ad2      	subs	r2, r2, r3
 8006700:	463b      	mov	r3, r7
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006706:	1d3b      	adds	r3, r7, #4
 8006708:	681a      	ldr	r2, [r3, #0]
 800670a:	463b      	mov	r3, r7
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	781b      	ldrb	r3, [r3, #0]
 8006710:	009b      	lsls	r3, r3, #2
 8006712:	4413      	add	r3, r2
 8006714:	881b      	ldrh	r3, [r3, #0]
 8006716:	b29b      	uxth	r3, r3
 8006718:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800671c:	2b00      	cmp	r3, #0
 800671e:	f000 8178 	beq.w	8006a12 <USB_EPStartXfer+0xaea>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006722:	1d3b      	adds	r3, r7, #4
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006728:	463b      	mov	r3, r7
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	785b      	ldrb	r3, [r3, #1]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d164      	bne.n	80067fc <USB_EPStartXfer+0x8d4>
 8006732:	1d3b      	adds	r3, r7, #4
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	64bb      	str	r3, [r7, #72]	; 0x48
 8006738:	1d3b      	adds	r3, r7, #4
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006740:	b29b      	uxth	r3, r3
 8006742:	461a      	mov	r2, r3
 8006744:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006746:	4413      	add	r3, r2
 8006748:	64bb      	str	r3, [r7, #72]	; 0x48
 800674a:	463b      	mov	r3, r7
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	781b      	ldrb	r3, [r3, #0]
 8006750:	011a      	lsls	r2, r3, #4
 8006752:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006754:	4413      	add	r3, r2
 8006756:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800675a:	647b      	str	r3, [r7, #68]	; 0x44
 800675c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006760:	2b00      	cmp	r3, #0
 8006762:	d112      	bne.n	800678a <USB_EPStartXfer+0x862>
 8006764:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006766:	881b      	ldrh	r3, [r3, #0]
 8006768:	b29b      	uxth	r3, r3
 800676a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800676e:	b29a      	uxth	r2, r3
 8006770:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006772:	801a      	strh	r2, [r3, #0]
 8006774:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006776:	881b      	ldrh	r3, [r3, #0]
 8006778:	b29b      	uxth	r3, r3
 800677a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800677e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006782:	b29a      	uxth	r2, r3
 8006784:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006786:	801a      	strh	r2, [r3, #0]
 8006788:	e054      	b.n	8006834 <USB_EPStartXfer+0x90c>
 800678a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800678e:	2b3e      	cmp	r3, #62	; 0x3e
 8006790:	d817      	bhi.n	80067c2 <USB_EPStartXfer+0x89a>
 8006792:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006796:	085b      	lsrs	r3, r3, #1
 8006798:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800679c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80067a0:	f003 0301 	and.w	r3, r3, #1
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d004      	beq.n	80067b2 <USB_EPStartXfer+0x88a>
 80067a8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80067ac:	3301      	adds	r3, #1
 80067ae:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80067b2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80067b6:	b29b      	uxth	r3, r3
 80067b8:	029b      	lsls	r3, r3, #10
 80067ba:	b29a      	uxth	r2, r3
 80067bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067be:	801a      	strh	r2, [r3, #0]
 80067c0:	e038      	b.n	8006834 <USB_EPStartXfer+0x90c>
 80067c2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80067c6:	095b      	lsrs	r3, r3, #5
 80067c8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80067cc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80067d0:	f003 031f 	and.w	r3, r3, #31
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d104      	bne.n	80067e2 <USB_EPStartXfer+0x8ba>
 80067d8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80067dc:	3b01      	subs	r3, #1
 80067de:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80067e2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80067e6:	b29b      	uxth	r3, r3
 80067e8:	029b      	lsls	r3, r3, #10
 80067ea:	b29b      	uxth	r3, r3
 80067ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067f4:	b29a      	uxth	r2, r3
 80067f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067f8:	801a      	strh	r2, [r3, #0]
 80067fa:	e01b      	b.n	8006834 <USB_EPStartXfer+0x90c>
 80067fc:	463b      	mov	r3, r7
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	785b      	ldrb	r3, [r3, #1]
 8006802:	2b01      	cmp	r3, #1
 8006804:	d116      	bne.n	8006834 <USB_EPStartXfer+0x90c>
 8006806:	1d3b      	adds	r3, r7, #4
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800680e:	b29b      	uxth	r3, r3
 8006810:	461a      	mov	r2, r3
 8006812:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006814:	4413      	add	r3, r2
 8006816:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006818:	463b      	mov	r3, r7
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	781b      	ldrb	r3, [r3, #0]
 800681e:	011a      	lsls	r2, r3, #4
 8006820:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006822:	4413      	add	r3, r2
 8006824:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006828:	643b      	str	r3, [r7, #64]	; 0x40
 800682a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800682e:	b29a      	uxth	r2, r3
 8006830:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006832:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006834:	463b      	mov	r3, r7
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	895b      	ldrh	r3, [r3, #10]
 800683a:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800683e:	463b      	mov	r3, r7
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	6959      	ldr	r1, [r3, #20]
 8006844:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006848:	b29b      	uxth	r3, r3
 800684a:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 800684e:	1d38      	adds	r0, r7, #4
 8006850:	6800      	ldr	r0, [r0, #0]
 8006852:	f000 ffae 	bl	80077b2 <USB_WritePMA>
          ep->xfer_buff += len;
 8006856:	463b      	mov	r3, r7
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	695a      	ldr	r2, [r3, #20]
 800685c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006860:	441a      	add	r2, r3
 8006862:	463b      	mov	r3, r7
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8006868:	463b      	mov	r3, r7
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	6a1a      	ldr	r2, [r3, #32]
 800686e:	463b      	mov	r3, r7
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	691b      	ldr	r3, [r3, #16]
 8006874:	429a      	cmp	r2, r3
 8006876:	d909      	bls.n	800688c <USB_EPStartXfer+0x964>
          {
            ep->xfer_len_db -= len;
 8006878:	463b      	mov	r3, r7
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	6a1a      	ldr	r2, [r3, #32]
 800687e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006882:	1ad2      	subs	r2, r2, r3
 8006884:	463b      	mov	r3, r7
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	621a      	str	r2, [r3, #32]
 800688a:	e008      	b.n	800689e <USB_EPStartXfer+0x976>
          }
          else
          {
            len = ep->xfer_len_db;
 800688c:	463b      	mov	r3, r7
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	6a1b      	ldr	r3, [r3, #32]
 8006892:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
            ep->xfer_len_db = 0U;
 8006896:	463b      	mov	r3, r7
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	2200      	movs	r2, #0
 800689c:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800689e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	f000 8256 	beq.w	8006d54 <USB_EPStartXfer+0xe2c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80068a8:	463b      	mov	r3, r7
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	785b      	ldrb	r3, [r3, #1]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d172      	bne.n	8006998 <USB_EPStartXfer+0xa70>
 80068b2:	1d3b      	adds	r3, r7, #4
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068b8:	1d3b      	adds	r3, r7, #4
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068c0:	b29b      	uxth	r3, r3
 80068c2:	461a      	mov	r2, r3
 80068c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068c6:	4413      	add	r3, r2
 80068c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068ca:	463b      	mov	r3, r7
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	781b      	ldrb	r3, [r3, #0]
 80068d0:	011a      	lsls	r2, r3, #4
 80068d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068d4:	4413      	add	r3, r2
 80068d6:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80068da:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80068de:	601a      	str	r2, [r3, #0]
 80068e0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d11a      	bne.n	800691e <USB_EPStartXfer+0x9f6>
 80068e8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	881b      	ldrh	r3, [r3, #0]
 80068f0:	b29b      	uxth	r3, r3
 80068f2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80068f6:	b29a      	uxth	r2, r3
 80068f8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	801a      	strh	r2, [r3, #0]
 8006900:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	881b      	ldrh	r3, [r3, #0]
 8006908:	b29b      	uxth	r3, r3
 800690a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800690e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006912:	b29a      	uxth	r2, r3
 8006914:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	801a      	strh	r2, [r3, #0]
 800691c:	e067      	b.n	80069ee <USB_EPStartXfer+0xac6>
 800691e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006922:	2b3e      	cmp	r3, #62	; 0x3e
 8006924:	d819      	bhi.n	800695a <USB_EPStartXfer+0xa32>
 8006926:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800692a:	085b      	lsrs	r3, r3, #1
 800692c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006930:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006934:	f003 0301 	and.w	r3, r3, #1
 8006938:	2b00      	cmp	r3, #0
 800693a:	d004      	beq.n	8006946 <USB_EPStartXfer+0xa1e>
 800693c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006940:	3301      	adds	r3, #1
 8006942:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006946:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800694a:	b29b      	uxth	r3, r3
 800694c:	029b      	lsls	r3, r3, #10
 800694e:	b29a      	uxth	r2, r3
 8006950:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	801a      	strh	r2, [r3, #0]
 8006958:	e049      	b.n	80069ee <USB_EPStartXfer+0xac6>
 800695a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800695e:	095b      	lsrs	r3, r3, #5
 8006960:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006964:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006968:	f003 031f 	and.w	r3, r3, #31
 800696c:	2b00      	cmp	r3, #0
 800696e:	d104      	bne.n	800697a <USB_EPStartXfer+0xa52>
 8006970:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006974:	3b01      	subs	r3, #1
 8006976:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800697a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800697e:	b29b      	uxth	r3, r3
 8006980:	029b      	lsls	r3, r3, #10
 8006982:	b29b      	uxth	r3, r3
 8006984:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006988:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800698c:	b29a      	uxth	r2, r3
 800698e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	801a      	strh	r2, [r3, #0]
 8006996:	e02a      	b.n	80069ee <USB_EPStartXfer+0xac6>
 8006998:	463b      	mov	r3, r7
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	785b      	ldrb	r3, [r3, #1]
 800699e:	2b01      	cmp	r3, #1
 80069a0:	d125      	bne.n	80069ee <USB_EPStartXfer+0xac6>
 80069a2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80069a6:	1d3a      	adds	r2, r7, #4
 80069a8:	6812      	ldr	r2, [r2, #0]
 80069aa:	601a      	str	r2, [r3, #0]
 80069ac:	1d3b      	adds	r3, r7, #4
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069b4:	b29b      	uxth	r3, r3
 80069b6:	4619      	mov	r1, r3
 80069b8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80069bc:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80069c0:	6812      	ldr	r2, [r2, #0]
 80069c2:	440a      	add	r2, r1
 80069c4:	601a      	str	r2, [r3, #0]
 80069c6:	463b      	mov	r3, r7
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	781b      	ldrb	r3, [r3, #0]
 80069cc:	011a      	lsls	r2, r3, #4
 80069ce:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4413      	add	r3, r2
 80069d6:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80069da:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80069de:	601a      	str	r2, [r3, #0]
 80069e0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80069e4:	b29a      	uxth	r2, r3
 80069e6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80069ee:	463b      	mov	r3, r7
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	891b      	ldrh	r3, [r3, #8]
 80069f4:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80069f8:	463b      	mov	r3, r7
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	6959      	ldr	r1, [r3, #20]
 80069fe:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006a02:	b29b      	uxth	r3, r3
 8006a04:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 8006a08:	1d38      	adds	r0, r7, #4
 8006a0a:	6800      	ldr	r0, [r0, #0]
 8006a0c:	f000 fed1 	bl	80077b2 <USB_WritePMA>
 8006a10:	e1a0      	b.n	8006d54 <USB_EPStartXfer+0xe2c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006a12:	463b      	mov	r3, r7
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	785b      	ldrb	r3, [r3, #1]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d17a      	bne.n	8006b12 <USB_EPStartXfer+0xbea>
 8006a1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006a20:	1d3a      	adds	r2, r7, #4
 8006a22:	6812      	ldr	r2, [r2, #0]
 8006a24:	601a      	str	r2, [r3, #0]
 8006a26:	1d3b      	adds	r3, r7, #4
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a2e:	b29b      	uxth	r3, r3
 8006a30:	4619      	mov	r1, r3
 8006a32:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006a36:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8006a3a:	6812      	ldr	r2, [r2, #0]
 8006a3c:	440a      	add	r2, r1
 8006a3e:	601a      	str	r2, [r3, #0]
 8006a40:	463b      	mov	r3, r7
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	781b      	ldrb	r3, [r3, #0]
 8006a46:	011a      	lsls	r2, r3, #4
 8006a48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	4413      	add	r3, r2
 8006a50:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006a54:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006a58:	601a      	str	r2, [r3, #0]
 8006a5a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d11a      	bne.n	8006a98 <USB_EPStartXfer+0xb70>
 8006a62:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	881b      	ldrh	r3, [r3, #0]
 8006a6a:	b29b      	uxth	r3, r3
 8006a6c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006a70:	b29a      	uxth	r2, r3
 8006a72:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	801a      	strh	r2, [r3, #0]
 8006a7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	881b      	ldrh	r3, [r3, #0]
 8006a82:	b29b      	uxth	r3, r3
 8006a84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a8c:	b29a      	uxth	r2, r3
 8006a8e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	801a      	strh	r2, [r3, #0]
 8006a96:	e067      	b.n	8006b68 <USB_EPStartXfer+0xc40>
 8006a98:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006a9c:	2b3e      	cmp	r3, #62	; 0x3e
 8006a9e:	d819      	bhi.n	8006ad4 <USB_EPStartXfer+0xbac>
 8006aa0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006aa4:	085b      	lsrs	r3, r3, #1
 8006aa6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006aaa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006aae:	f003 0301 	and.w	r3, r3, #1
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d004      	beq.n	8006ac0 <USB_EPStartXfer+0xb98>
 8006ab6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006aba:	3301      	adds	r3, #1
 8006abc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006ac0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006ac4:	b29b      	uxth	r3, r3
 8006ac6:	029b      	lsls	r3, r3, #10
 8006ac8:	b29a      	uxth	r2, r3
 8006aca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	801a      	strh	r2, [r3, #0]
 8006ad2:	e049      	b.n	8006b68 <USB_EPStartXfer+0xc40>
 8006ad4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006ad8:	095b      	lsrs	r3, r3, #5
 8006ada:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006ade:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006ae2:	f003 031f 	and.w	r3, r3, #31
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d104      	bne.n	8006af4 <USB_EPStartXfer+0xbcc>
 8006aea:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006aee:	3b01      	subs	r3, #1
 8006af0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006af4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006af8:	b29b      	uxth	r3, r3
 8006afa:	029b      	lsls	r3, r3, #10
 8006afc:	b29b      	uxth	r3, r3
 8006afe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b06:	b29a      	uxth	r2, r3
 8006b08:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	801a      	strh	r2, [r3, #0]
 8006b10:	e02a      	b.n	8006b68 <USB_EPStartXfer+0xc40>
 8006b12:	463b      	mov	r3, r7
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	785b      	ldrb	r3, [r3, #1]
 8006b18:	2b01      	cmp	r3, #1
 8006b1a:	d125      	bne.n	8006b68 <USB_EPStartXfer+0xc40>
 8006b1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b20:	1d3a      	adds	r2, r7, #4
 8006b22:	6812      	ldr	r2, [r2, #0]
 8006b24:	601a      	str	r2, [r3, #0]
 8006b26:	1d3b      	adds	r3, r7, #4
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b2e:	b29b      	uxth	r3, r3
 8006b30:	4619      	mov	r1, r3
 8006b32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b36:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8006b3a:	6812      	ldr	r2, [r2, #0]
 8006b3c:	440a      	add	r2, r1
 8006b3e:	601a      	str	r2, [r3, #0]
 8006b40:	463b      	mov	r3, r7
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	781b      	ldrb	r3, [r3, #0]
 8006b46:	011a      	lsls	r2, r3, #4
 8006b48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4413      	add	r3, r2
 8006b50:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006b54:	f107 0320 	add.w	r3, r7, #32
 8006b58:	601a      	str	r2, [r3, #0]
 8006b5a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006b5e:	b29a      	uxth	r2, r3
 8006b60:	f107 0320 	add.w	r3, r7, #32
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006b68:	463b      	mov	r3, r7
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	891b      	ldrh	r3, [r3, #8]
 8006b6e:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006b72:	463b      	mov	r3, r7
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	6959      	ldr	r1, [r3, #20]
 8006b78:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006b7c:	b29b      	uxth	r3, r3
 8006b7e:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 8006b82:	1d38      	adds	r0, r7, #4
 8006b84:	6800      	ldr	r0, [r0, #0]
 8006b86:	f000 fe14 	bl	80077b2 <USB_WritePMA>
          ep->xfer_buff += len;
 8006b8a:	463b      	mov	r3, r7
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	695a      	ldr	r2, [r3, #20]
 8006b90:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006b94:	441a      	add	r2, r3
 8006b96:	463b      	mov	r3, r7
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8006b9c:	463b      	mov	r3, r7
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	6a1a      	ldr	r2, [r3, #32]
 8006ba2:	463b      	mov	r3, r7
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	691b      	ldr	r3, [r3, #16]
 8006ba8:	429a      	cmp	r2, r3
 8006baa:	d909      	bls.n	8006bc0 <USB_EPStartXfer+0xc98>
          {
            ep->xfer_len_db -= len;
 8006bac:	463b      	mov	r3, r7
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	6a1a      	ldr	r2, [r3, #32]
 8006bb2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006bb6:	1ad2      	subs	r2, r2, r3
 8006bb8:	463b      	mov	r3, r7
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	621a      	str	r2, [r3, #32]
 8006bbe:	e008      	b.n	8006bd2 <USB_EPStartXfer+0xcaa>
          }
          else
          {
            len = ep->xfer_len_db;
 8006bc0:	463b      	mov	r3, r7
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	6a1b      	ldr	r3, [r3, #32]
 8006bc6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
            ep->xfer_len_db = 0U;
 8006bca:	463b      	mov	r3, r7
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8006bd2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	f000 80bc 	beq.w	8006d54 <USB_EPStartXfer+0xe2c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006bdc:	f107 031c 	add.w	r3, r7, #28
 8006be0:	1d3a      	adds	r2, r7, #4
 8006be2:	6812      	ldr	r2, [r2, #0]
 8006be4:	601a      	str	r2, [r3, #0]
 8006be6:	463b      	mov	r3, r7
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	785b      	ldrb	r3, [r3, #1]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d17a      	bne.n	8006ce6 <USB_EPStartXfer+0xdbe>
 8006bf0:	f107 0318 	add.w	r3, r7, #24
 8006bf4:	1d3a      	adds	r2, r7, #4
 8006bf6:	6812      	ldr	r2, [r2, #0]
 8006bf8:	601a      	str	r2, [r3, #0]
 8006bfa:	1d3b      	adds	r3, r7, #4
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c02:	b29b      	uxth	r3, r3
 8006c04:	4619      	mov	r1, r3
 8006c06:	f107 0318 	add.w	r3, r7, #24
 8006c0a:	f107 0218 	add.w	r2, r7, #24
 8006c0e:	6812      	ldr	r2, [r2, #0]
 8006c10:	440a      	add	r2, r1
 8006c12:	601a      	str	r2, [r3, #0]
 8006c14:	463b      	mov	r3, r7
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	781b      	ldrb	r3, [r3, #0]
 8006c1a:	011a      	lsls	r2, r3, #4
 8006c1c:	f107 0318 	add.w	r3, r7, #24
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4413      	add	r3, r2
 8006c24:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8006c28:	f107 0314 	add.w	r3, r7, #20
 8006c2c:	601a      	str	r2, [r3, #0]
 8006c2e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d11a      	bne.n	8006c6c <USB_EPStartXfer+0xd44>
 8006c36:	f107 0314 	add.w	r3, r7, #20
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	881b      	ldrh	r3, [r3, #0]
 8006c3e:	b29b      	uxth	r3, r3
 8006c40:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006c44:	b29a      	uxth	r2, r3
 8006c46:	f107 0314 	add.w	r3, r7, #20
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	801a      	strh	r2, [r3, #0]
 8006c4e:	f107 0314 	add.w	r3, r7, #20
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	881b      	ldrh	r3, [r3, #0]
 8006c56:	b29b      	uxth	r3, r3
 8006c58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c60:	b29a      	uxth	r2, r3
 8006c62:	f107 0314 	add.w	r3, r7, #20
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	801a      	strh	r2, [r3, #0]
 8006c6a:	e062      	b.n	8006d32 <USB_EPStartXfer+0xe0a>
 8006c6c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006c70:	2b3e      	cmp	r3, #62	; 0x3e
 8006c72:	d819      	bhi.n	8006ca8 <USB_EPStartXfer+0xd80>
 8006c74:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006c78:	085b      	lsrs	r3, r3, #1
 8006c7a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006c7e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006c82:	f003 0301 	and.w	r3, r3, #1
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d004      	beq.n	8006c94 <USB_EPStartXfer+0xd6c>
 8006c8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c8e:	3301      	adds	r3, #1
 8006c90:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006c94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c98:	b29b      	uxth	r3, r3
 8006c9a:	029b      	lsls	r3, r3, #10
 8006c9c:	b29a      	uxth	r2, r3
 8006c9e:	f107 0314 	add.w	r3, r7, #20
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	801a      	strh	r2, [r3, #0]
 8006ca6:	e044      	b.n	8006d32 <USB_EPStartXfer+0xe0a>
 8006ca8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006cac:	095b      	lsrs	r3, r3, #5
 8006cae:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006cb2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006cb6:	f003 031f 	and.w	r3, r3, #31
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d104      	bne.n	8006cc8 <USB_EPStartXfer+0xda0>
 8006cbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006cc2:	3b01      	subs	r3, #1
 8006cc4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006cc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ccc:	b29b      	uxth	r3, r3
 8006cce:	029b      	lsls	r3, r3, #10
 8006cd0:	b29b      	uxth	r3, r3
 8006cd2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cd6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cda:	b29a      	uxth	r2, r3
 8006cdc:	f107 0314 	add.w	r3, r7, #20
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	801a      	strh	r2, [r3, #0]
 8006ce4:	e025      	b.n	8006d32 <USB_EPStartXfer+0xe0a>
 8006ce6:	463b      	mov	r3, r7
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	785b      	ldrb	r3, [r3, #1]
 8006cec:	2b01      	cmp	r3, #1
 8006cee:	d120      	bne.n	8006d32 <USB_EPStartXfer+0xe0a>
 8006cf0:	1d3b      	adds	r3, r7, #4
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cf8:	b29b      	uxth	r3, r3
 8006cfa:	4619      	mov	r1, r3
 8006cfc:	f107 031c 	add.w	r3, r7, #28
 8006d00:	f107 021c 	add.w	r2, r7, #28
 8006d04:	6812      	ldr	r2, [r2, #0]
 8006d06:	440a      	add	r2, r1
 8006d08:	601a      	str	r2, [r3, #0]
 8006d0a:	463b      	mov	r3, r7
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	781b      	ldrb	r3, [r3, #0]
 8006d10:	011a      	lsls	r2, r3, #4
 8006d12:	f107 031c 	add.w	r3, r7, #28
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4413      	add	r3, r2
 8006d1a:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8006d1e:	f107 0310 	add.w	r3, r7, #16
 8006d22:	601a      	str	r2, [r3, #0]
 8006d24:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006d28:	b29a      	uxth	r2, r3
 8006d2a:	f107 0310 	add.w	r3, r7, #16
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006d32:	463b      	mov	r3, r7
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	895b      	ldrh	r3, [r3, #10]
 8006d38:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006d3c:	463b      	mov	r3, r7
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	6959      	ldr	r1, [r3, #20]
 8006d42:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006d46:	b29b      	uxth	r3, r3
 8006d48:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 8006d4c:	1d38      	adds	r0, r7, #4
 8006d4e:	6800      	ldr	r0, [r0, #0]
 8006d50:	f000 fd2f 	bl	80077b2 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006d54:	1d3b      	adds	r3, r7, #4
 8006d56:	681a      	ldr	r2, [r3, #0]
 8006d58:	463b      	mov	r3, r7
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	781b      	ldrb	r3, [r3, #0]
 8006d5e:	009b      	lsls	r3, r3, #2
 8006d60:	4413      	add	r3, r2
 8006d62:	881b      	ldrh	r3, [r3, #0]
 8006d64:	b29b      	uxth	r3, r3
 8006d66:	f107 020e 	add.w	r2, r7, #14
 8006d6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d72:	8013      	strh	r3, [r2, #0]
 8006d74:	f107 030e 	add.w	r3, r7, #14
 8006d78:	f107 020e 	add.w	r2, r7, #14
 8006d7c:	8812      	ldrh	r2, [r2, #0]
 8006d7e:	f082 0210 	eor.w	r2, r2, #16
 8006d82:	801a      	strh	r2, [r3, #0]
 8006d84:	f107 030e 	add.w	r3, r7, #14
 8006d88:	f107 020e 	add.w	r2, r7, #14
 8006d8c:	8812      	ldrh	r2, [r2, #0]
 8006d8e:	f082 0220 	eor.w	r2, r2, #32
 8006d92:	801a      	strh	r2, [r3, #0]
 8006d94:	1d3b      	adds	r3, r7, #4
 8006d96:	681a      	ldr	r2, [r3, #0]
 8006d98:	463b      	mov	r3, r7
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	781b      	ldrb	r3, [r3, #0]
 8006d9e:	009b      	lsls	r3, r3, #2
 8006da0:	441a      	add	r2, r3
 8006da2:	f107 030e 	add.w	r3, r7, #14
 8006da6:	881b      	ldrh	r3, [r3, #0]
 8006da8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006dac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006db0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006db4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006db8:	b29b      	uxth	r3, r3
 8006dba:	8013      	strh	r3, [r2, #0]
 8006dbc:	e3b5      	b.n	800752a <USB_EPStartXfer+0x1602>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006dbe:	463b      	mov	r3, r7
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	7b1b      	ldrb	r3, [r3, #12]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	f040 8090 	bne.w	8006eea <USB_EPStartXfer+0xfc2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006dca:	463b      	mov	r3, r7
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	699a      	ldr	r2, [r3, #24]
 8006dd0:	463b      	mov	r3, r7
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	691b      	ldr	r3, [r3, #16]
 8006dd6:	429a      	cmp	r2, r3
 8006dd8:	d90e      	bls.n	8006df8 <USB_EPStartXfer+0xed0>
      {
        len = ep->maxpacket;
 8006dda:	463b      	mov	r3, r7
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	691b      	ldr	r3, [r3, #16]
 8006de0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
        ep->xfer_len -= len;
 8006de4:	463b      	mov	r3, r7
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	699a      	ldr	r2, [r3, #24]
 8006dea:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006dee:	1ad2      	subs	r2, r2, r3
 8006df0:	463b      	mov	r3, r7
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	619a      	str	r2, [r3, #24]
 8006df6:	e008      	b.n	8006e0a <USB_EPStartXfer+0xee2>
      }
      else
      {
        len = ep->xfer_len;
 8006df8:	463b      	mov	r3, r7
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	699b      	ldr	r3, [r3, #24]
 8006dfe:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
        ep->xfer_len = 0U;
 8006e02:	463b      	mov	r3, r7
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	2200      	movs	r2, #0
 8006e08:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006e0a:	1d3b      	adds	r3, r7, #4
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006e12:	1d3b      	adds	r3, r7, #4
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e1a:	b29b      	uxth	r3, r3
 8006e1c:	461a      	mov	r2, r3
 8006e1e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006e22:	4413      	add	r3, r2
 8006e24:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006e28:	463b      	mov	r3, r7
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	781b      	ldrb	r3, [r3, #0]
 8006e2e:	011a      	lsls	r2, r3, #4
 8006e30:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006e34:	4413      	add	r3, r2
 8006e36:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006e3a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006e3e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d116      	bne.n	8006e74 <USB_EPStartXfer+0xf4c>
 8006e46:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006e4a:	881b      	ldrh	r3, [r3, #0]
 8006e4c:	b29b      	uxth	r3, r3
 8006e4e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006e52:	b29a      	uxth	r2, r3
 8006e54:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006e58:	801a      	strh	r2, [r3, #0]
 8006e5a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006e5e:	881b      	ldrh	r3, [r3, #0]
 8006e60:	b29b      	uxth	r3, r3
 8006e62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e6a:	b29a      	uxth	r2, r3
 8006e6c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006e70:	801a      	strh	r2, [r3, #0]
 8006e72:	e32c      	b.n	80074ce <USB_EPStartXfer+0x15a6>
 8006e74:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006e78:	2b3e      	cmp	r3, #62	; 0x3e
 8006e7a:	d818      	bhi.n	8006eae <USB_EPStartXfer+0xf86>
 8006e7c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006e80:	085b      	lsrs	r3, r3, #1
 8006e82:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006e86:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006e8a:	f003 0301 	and.w	r3, r3, #1
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d004      	beq.n	8006e9c <USB_EPStartXfer+0xf74>
 8006e92:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006e96:	3301      	adds	r3, #1
 8006e98:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006e9c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006ea0:	b29b      	uxth	r3, r3
 8006ea2:	029b      	lsls	r3, r3, #10
 8006ea4:	b29a      	uxth	r2, r3
 8006ea6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006eaa:	801a      	strh	r2, [r3, #0]
 8006eac:	e30f      	b.n	80074ce <USB_EPStartXfer+0x15a6>
 8006eae:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006eb2:	095b      	lsrs	r3, r3, #5
 8006eb4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006eb8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006ebc:	f003 031f 	and.w	r3, r3, #31
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d104      	bne.n	8006ece <USB_EPStartXfer+0xfa6>
 8006ec4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006ec8:	3b01      	subs	r3, #1
 8006eca:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006ece:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006ed2:	b29b      	uxth	r3, r3
 8006ed4:	029b      	lsls	r3, r3, #10
 8006ed6:	b29b      	uxth	r3, r3
 8006ed8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006edc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ee0:	b29a      	uxth	r2, r3
 8006ee2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006ee6:	801a      	strh	r2, [r3, #0]
 8006ee8:	e2f1      	b.n	80074ce <USB_EPStartXfer+0x15a6>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006eea:	463b      	mov	r3, r7
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	78db      	ldrb	r3, [r3, #3]
 8006ef0:	2b02      	cmp	r3, #2
 8006ef2:	f040 818f 	bne.w	8007214 <USB_EPStartXfer+0x12ec>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006ef6:	463b      	mov	r3, r7
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	785b      	ldrb	r3, [r3, #1]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d175      	bne.n	8006fec <USB_EPStartXfer+0x10c4>
 8006f00:	1d3b      	adds	r3, r7, #4
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006f08:	1d3b      	adds	r3, r7, #4
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f10:	b29b      	uxth	r3, r3
 8006f12:	461a      	mov	r2, r3
 8006f14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f18:	4413      	add	r3, r2
 8006f1a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006f1e:	463b      	mov	r3, r7
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	781b      	ldrb	r3, [r3, #0]
 8006f24:	011a      	lsls	r2, r3, #4
 8006f26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f2a:	4413      	add	r3, r2
 8006f2c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006f30:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006f34:	463b      	mov	r3, r7
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	691b      	ldr	r3, [r3, #16]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d116      	bne.n	8006f6c <USB_EPStartXfer+0x1044>
 8006f3e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006f42:	881b      	ldrh	r3, [r3, #0]
 8006f44:	b29b      	uxth	r3, r3
 8006f46:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006f4a:	b29a      	uxth	r2, r3
 8006f4c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006f50:	801a      	strh	r2, [r3, #0]
 8006f52:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006f56:	881b      	ldrh	r3, [r3, #0]
 8006f58:	b29b      	uxth	r3, r3
 8006f5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f62:	b29a      	uxth	r2, r3
 8006f64:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006f68:	801a      	strh	r2, [r3, #0]
 8006f6a:	e065      	b.n	8007038 <USB_EPStartXfer+0x1110>
 8006f6c:	463b      	mov	r3, r7
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	691b      	ldr	r3, [r3, #16]
 8006f72:	2b3e      	cmp	r3, #62	; 0x3e
 8006f74:	d81a      	bhi.n	8006fac <USB_EPStartXfer+0x1084>
 8006f76:	463b      	mov	r3, r7
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	691b      	ldr	r3, [r3, #16]
 8006f7c:	085b      	lsrs	r3, r3, #1
 8006f7e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006f82:	463b      	mov	r3, r7
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	691b      	ldr	r3, [r3, #16]
 8006f88:	f003 0301 	and.w	r3, r3, #1
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d004      	beq.n	8006f9a <USB_EPStartXfer+0x1072>
 8006f90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f94:	3301      	adds	r3, #1
 8006f96:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006f9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f9e:	b29b      	uxth	r3, r3
 8006fa0:	029b      	lsls	r3, r3, #10
 8006fa2:	b29a      	uxth	r2, r3
 8006fa4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006fa8:	801a      	strh	r2, [r3, #0]
 8006faa:	e045      	b.n	8007038 <USB_EPStartXfer+0x1110>
 8006fac:	463b      	mov	r3, r7
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	691b      	ldr	r3, [r3, #16]
 8006fb2:	095b      	lsrs	r3, r3, #5
 8006fb4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006fb8:	463b      	mov	r3, r7
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	691b      	ldr	r3, [r3, #16]
 8006fbe:	f003 031f 	and.w	r3, r3, #31
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d104      	bne.n	8006fd0 <USB_EPStartXfer+0x10a8>
 8006fc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006fca:	3b01      	subs	r3, #1
 8006fcc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006fd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006fd4:	b29b      	uxth	r3, r3
 8006fd6:	029b      	lsls	r3, r3, #10
 8006fd8:	b29b      	uxth	r3, r3
 8006fda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fe2:	b29a      	uxth	r2, r3
 8006fe4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006fe8:	801a      	strh	r2, [r3, #0]
 8006fea:	e025      	b.n	8007038 <USB_EPStartXfer+0x1110>
 8006fec:	463b      	mov	r3, r7
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	785b      	ldrb	r3, [r3, #1]
 8006ff2:	2b01      	cmp	r3, #1
 8006ff4:	d120      	bne.n	8007038 <USB_EPStartXfer+0x1110>
 8006ff6:	1d3b      	adds	r3, r7, #4
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006ffe:	1d3b      	adds	r3, r7, #4
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007006:	b29b      	uxth	r3, r3
 8007008:	461a      	mov	r2, r3
 800700a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800700e:	4413      	add	r3, r2
 8007010:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007014:	463b      	mov	r3, r7
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	781b      	ldrb	r3, [r3, #0]
 800701a:	011a      	lsls	r2, r3, #4
 800701c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007020:	4413      	add	r3, r2
 8007022:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007026:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800702a:	463b      	mov	r3, r7
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	691b      	ldr	r3, [r3, #16]
 8007030:	b29a      	uxth	r2, r3
 8007032:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007036:	801a      	strh	r2, [r3, #0]
 8007038:	1d3b      	adds	r3, r7, #4
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007040:	463b      	mov	r3, r7
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	785b      	ldrb	r3, [r3, #1]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d175      	bne.n	8007136 <USB_EPStartXfer+0x120e>
 800704a:	1d3b      	adds	r3, r7, #4
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007052:	1d3b      	adds	r3, r7, #4
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800705a:	b29b      	uxth	r3, r3
 800705c:	461a      	mov	r2, r3
 800705e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007062:	4413      	add	r3, r2
 8007064:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007068:	463b      	mov	r3, r7
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	781b      	ldrb	r3, [r3, #0]
 800706e:	011a      	lsls	r2, r3, #4
 8007070:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007074:	4413      	add	r3, r2
 8007076:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800707a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800707e:	463b      	mov	r3, r7
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	691b      	ldr	r3, [r3, #16]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d116      	bne.n	80070b6 <USB_EPStartXfer+0x118e>
 8007088:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800708c:	881b      	ldrh	r3, [r3, #0]
 800708e:	b29b      	uxth	r3, r3
 8007090:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007094:	b29a      	uxth	r2, r3
 8007096:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800709a:	801a      	strh	r2, [r3, #0]
 800709c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80070a0:	881b      	ldrh	r3, [r3, #0]
 80070a2:	b29b      	uxth	r3, r3
 80070a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070ac:	b29a      	uxth	r2, r3
 80070ae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80070b2:	801a      	strh	r2, [r3, #0]
 80070b4:	e061      	b.n	800717a <USB_EPStartXfer+0x1252>
 80070b6:	463b      	mov	r3, r7
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	691b      	ldr	r3, [r3, #16]
 80070bc:	2b3e      	cmp	r3, #62	; 0x3e
 80070be:	d81a      	bhi.n	80070f6 <USB_EPStartXfer+0x11ce>
 80070c0:	463b      	mov	r3, r7
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	691b      	ldr	r3, [r3, #16]
 80070c6:	085b      	lsrs	r3, r3, #1
 80070c8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80070cc:	463b      	mov	r3, r7
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	691b      	ldr	r3, [r3, #16]
 80070d2:	f003 0301 	and.w	r3, r3, #1
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d004      	beq.n	80070e4 <USB_EPStartXfer+0x11bc>
 80070da:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80070de:	3301      	adds	r3, #1
 80070e0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80070e4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80070e8:	b29b      	uxth	r3, r3
 80070ea:	029b      	lsls	r3, r3, #10
 80070ec:	b29a      	uxth	r2, r3
 80070ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80070f2:	801a      	strh	r2, [r3, #0]
 80070f4:	e041      	b.n	800717a <USB_EPStartXfer+0x1252>
 80070f6:	463b      	mov	r3, r7
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	691b      	ldr	r3, [r3, #16]
 80070fc:	095b      	lsrs	r3, r3, #5
 80070fe:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007102:	463b      	mov	r3, r7
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	691b      	ldr	r3, [r3, #16]
 8007108:	f003 031f 	and.w	r3, r3, #31
 800710c:	2b00      	cmp	r3, #0
 800710e:	d104      	bne.n	800711a <USB_EPStartXfer+0x11f2>
 8007110:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007114:	3b01      	subs	r3, #1
 8007116:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800711a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800711e:	b29b      	uxth	r3, r3
 8007120:	029b      	lsls	r3, r3, #10
 8007122:	b29b      	uxth	r3, r3
 8007124:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007128:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800712c:	b29a      	uxth	r2, r3
 800712e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007132:	801a      	strh	r2, [r3, #0]
 8007134:	e021      	b.n	800717a <USB_EPStartXfer+0x1252>
 8007136:	463b      	mov	r3, r7
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	785b      	ldrb	r3, [r3, #1]
 800713c:	2b01      	cmp	r3, #1
 800713e:	d11c      	bne.n	800717a <USB_EPStartXfer+0x1252>
 8007140:	1d3b      	adds	r3, r7, #4
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007148:	b29b      	uxth	r3, r3
 800714a:	461a      	mov	r2, r3
 800714c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007150:	4413      	add	r3, r2
 8007152:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007156:	463b      	mov	r3, r7
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	781b      	ldrb	r3, [r3, #0]
 800715c:	011a      	lsls	r2, r3, #4
 800715e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007162:	4413      	add	r3, r2
 8007164:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007168:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800716c:	463b      	mov	r3, r7
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	691b      	ldr	r3, [r3, #16]
 8007172:	b29a      	uxth	r2, r3
 8007174:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007178:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800717a:	463b      	mov	r3, r7
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	69db      	ldr	r3, [r3, #28]
 8007180:	2b00      	cmp	r3, #0
 8007182:	f000 81a4 	beq.w	80074ce <USB_EPStartXfer+0x15a6>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007186:	1d3b      	adds	r3, r7, #4
 8007188:	681a      	ldr	r2, [r3, #0]
 800718a:	463b      	mov	r3, r7
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	781b      	ldrb	r3, [r3, #0]
 8007190:	009b      	lsls	r3, r3, #2
 8007192:	4413      	add	r3, r2
 8007194:	881b      	ldrh	r3, [r3, #0]
 8007196:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800719a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800719e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d005      	beq.n	80071b2 <USB_EPStartXfer+0x128a>
 80071a6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80071aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d10d      	bne.n	80071ce <USB_EPStartXfer+0x12a6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80071b2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80071b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	f040 8187 	bne.w	80074ce <USB_EPStartXfer+0x15a6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80071c0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80071c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	f040 8180 	bne.w	80074ce <USB_EPStartXfer+0x15a6>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80071ce:	1d3b      	adds	r3, r7, #4
 80071d0:	681a      	ldr	r2, [r3, #0]
 80071d2:	463b      	mov	r3, r7
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	781b      	ldrb	r3, [r3, #0]
 80071d8:	009b      	lsls	r3, r3, #2
 80071da:	4413      	add	r3, r2
 80071dc:	881b      	ldrh	r3, [r3, #0]
 80071de:	b29b      	uxth	r3, r3
 80071e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071e8:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
 80071ec:	1d3b      	adds	r3, r7, #4
 80071ee:	681a      	ldr	r2, [r3, #0]
 80071f0:	463b      	mov	r3, r7
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	781b      	ldrb	r3, [r3, #0]
 80071f6:	009b      	lsls	r3, r3, #2
 80071f8:	441a      	add	r2, r3
 80071fa:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 80071fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007202:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007206:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800720a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800720e:	b29b      	uxth	r3, r3
 8007210:	8013      	strh	r3, [r2, #0]
 8007212:	e15c      	b.n	80074ce <USB_EPStartXfer+0x15a6>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007214:	463b      	mov	r3, r7
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	78db      	ldrb	r3, [r3, #3]
 800721a:	2b01      	cmp	r3, #1
 800721c:	f040 8155 	bne.w	80074ca <USB_EPStartXfer+0x15a2>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007220:	463b      	mov	r3, r7
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	699a      	ldr	r2, [r3, #24]
 8007226:	463b      	mov	r3, r7
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	691b      	ldr	r3, [r3, #16]
 800722c:	429a      	cmp	r2, r3
 800722e:	d90e      	bls.n	800724e <USB_EPStartXfer+0x1326>
        {
          len = ep->maxpacket;
 8007230:	463b      	mov	r3, r7
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	691b      	ldr	r3, [r3, #16]
 8007236:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
          ep->xfer_len -= len;
 800723a:	463b      	mov	r3, r7
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	699a      	ldr	r2, [r3, #24]
 8007240:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007244:	1ad2      	subs	r2, r2, r3
 8007246:	463b      	mov	r3, r7
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	619a      	str	r2, [r3, #24]
 800724c:	e008      	b.n	8007260 <USB_EPStartXfer+0x1338>
        }
        else
        {
          len = ep->xfer_len;
 800724e:	463b      	mov	r3, r7
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	699b      	ldr	r3, [r3, #24]
 8007254:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
          ep->xfer_len = 0U;
 8007258:	463b      	mov	r3, r7
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	2200      	movs	r2, #0
 800725e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007260:	463b      	mov	r3, r7
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	785b      	ldrb	r3, [r3, #1]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d16f      	bne.n	800734a <USB_EPStartXfer+0x1422>
 800726a:	1d3b      	adds	r3, r7, #4
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007272:	1d3b      	adds	r3, r7, #4
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800727a:	b29b      	uxth	r3, r3
 800727c:	461a      	mov	r2, r3
 800727e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007282:	4413      	add	r3, r2
 8007284:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007288:	463b      	mov	r3, r7
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	781b      	ldrb	r3, [r3, #0]
 800728e:	011a      	lsls	r2, r3, #4
 8007290:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007294:	4413      	add	r3, r2
 8007296:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800729a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800729e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d116      	bne.n	80072d4 <USB_EPStartXfer+0x13ac>
 80072a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80072aa:	881b      	ldrh	r3, [r3, #0]
 80072ac:	b29b      	uxth	r3, r3
 80072ae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80072b2:	b29a      	uxth	r2, r3
 80072b4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80072b8:	801a      	strh	r2, [r3, #0]
 80072ba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80072be:	881b      	ldrh	r3, [r3, #0]
 80072c0:	b29b      	uxth	r3, r3
 80072c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072ca:	b29a      	uxth	r2, r3
 80072cc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80072d0:	801a      	strh	r2, [r3, #0]
 80072d2:	e05f      	b.n	8007394 <USB_EPStartXfer+0x146c>
 80072d4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80072d8:	2b3e      	cmp	r3, #62	; 0x3e
 80072da:	d818      	bhi.n	800730e <USB_EPStartXfer+0x13e6>
 80072dc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80072e0:	085b      	lsrs	r3, r3, #1
 80072e2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80072e6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80072ea:	f003 0301 	and.w	r3, r3, #1
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d004      	beq.n	80072fc <USB_EPStartXfer+0x13d4>
 80072f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072f6:	3301      	adds	r3, #1
 80072f8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80072fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007300:	b29b      	uxth	r3, r3
 8007302:	029b      	lsls	r3, r3, #10
 8007304:	b29a      	uxth	r2, r3
 8007306:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800730a:	801a      	strh	r2, [r3, #0]
 800730c:	e042      	b.n	8007394 <USB_EPStartXfer+0x146c>
 800730e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007312:	095b      	lsrs	r3, r3, #5
 8007314:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007318:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800731c:	f003 031f 	and.w	r3, r3, #31
 8007320:	2b00      	cmp	r3, #0
 8007322:	d104      	bne.n	800732e <USB_EPStartXfer+0x1406>
 8007324:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007328:	3b01      	subs	r3, #1
 800732a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800732e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007332:	b29b      	uxth	r3, r3
 8007334:	029b      	lsls	r3, r3, #10
 8007336:	b29b      	uxth	r3, r3
 8007338:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800733c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007340:	b29a      	uxth	r2, r3
 8007342:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007346:	801a      	strh	r2, [r3, #0]
 8007348:	e024      	b.n	8007394 <USB_EPStartXfer+0x146c>
 800734a:	463b      	mov	r3, r7
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	785b      	ldrb	r3, [r3, #1]
 8007350:	2b01      	cmp	r3, #1
 8007352:	d11f      	bne.n	8007394 <USB_EPStartXfer+0x146c>
 8007354:	1d3b      	adds	r3, r7, #4
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800735c:	1d3b      	adds	r3, r7, #4
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007364:	b29b      	uxth	r3, r3
 8007366:	461a      	mov	r2, r3
 8007368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800736c:	4413      	add	r3, r2
 800736e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007372:	463b      	mov	r3, r7
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	781b      	ldrb	r3, [r3, #0]
 8007378:	011a      	lsls	r2, r3, #4
 800737a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800737e:	4413      	add	r3, r2
 8007380:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007384:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007388:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800738c:	b29a      	uxth	r2, r3
 800738e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007392:	801a      	strh	r2, [r3, #0]
 8007394:	1d3b      	adds	r3, r7, #4
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800739c:	463b      	mov	r3, r7
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	785b      	ldrb	r3, [r3, #1]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d16f      	bne.n	8007486 <USB_EPStartXfer+0x155e>
 80073a6:	1d3b      	adds	r3, r7, #4
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80073ae:	1d3b      	adds	r3, r7, #4
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073b6:	b29b      	uxth	r3, r3
 80073b8:	461a      	mov	r2, r3
 80073ba:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80073be:	4413      	add	r3, r2
 80073c0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80073c4:	463b      	mov	r3, r7
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	781b      	ldrb	r3, [r3, #0]
 80073ca:	011a      	lsls	r2, r3, #4
 80073cc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80073d0:	4413      	add	r3, r2
 80073d2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80073d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80073da:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d116      	bne.n	8007410 <USB_EPStartXfer+0x14e8>
 80073e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073e6:	881b      	ldrh	r3, [r3, #0]
 80073e8:	b29b      	uxth	r3, r3
 80073ea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80073ee:	b29a      	uxth	r2, r3
 80073f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073f4:	801a      	strh	r2, [r3, #0]
 80073f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073fa:	881b      	ldrh	r3, [r3, #0]
 80073fc:	b29b      	uxth	r3, r3
 80073fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007402:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007406:	b29a      	uxth	r2, r3
 8007408:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800740c:	801a      	strh	r2, [r3, #0]
 800740e:	e05e      	b.n	80074ce <USB_EPStartXfer+0x15a6>
 8007410:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007414:	2b3e      	cmp	r3, #62	; 0x3e
 8007416:	d818      	bhi.n	800744a <USB_EPStartXfer+0x1522>
 8007418:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800741c:	085b      	lsrs	r3, r3, #1
 800741e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007422:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007426:	f003 0301 	and.w	r3, r3, #1
 800742a:	2b00      	cmp	r3, #0
 800742c:	d004      	beq.n	8007438 <USB_EPStartXfer+0x1510>
 800742e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007432:	3301      	adds	r3, #1
 8007434:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007438:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800743c:	b29b      	uxth	r3, r3
 800743e:	029b      	lsls	r3, r3, #10
 8007440:	b29a      	uxth	r2, r3
 8007442:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007446:	801a      	strh	r2, [r3, #0]
 8007448:	e041      	b.n	80074ce <USB_EPStartXfer+0x15a6>
 800744a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800744e:	095b      	lsrs	r3, r3, #5
 8007450:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007454:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007458:	f003 031f 	and.w	r3, r3, #31
 800745c:	2b00      	cmp	r3, #0
 800745e:	d104      	bne.n	800746a <USB_EPStartXfer+0x1542>
 8007460:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007464:	3b01      	subs	r3, #1
 8007466:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800746a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800746e:	b29b      	uxth	r3, r3
 8007470:	029b      	lsls	r3, r3, #10
 8007472:	b29b      	uxth	r3, r3
 8007474:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007478:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800747c:	b29a      	uxth	r2, r3
 800747e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007482:	801a      	strh	r2, [r3, #0]
 8007484:	e023      	b.n	80074ce <USB_EPStartXfer+0x15a6>
 8007486:	463b      	mov	r3, r7
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	785b      	ldrb	r3, [r3, #1]
 800748c:	2b01      	cmp	r3, #1
 800748e:	d11e      	bne.n	80074ce <USB_EPStartXfer+0x15a6>
 8007490:	1d3b      	adds	r3, r7, #4
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007498:	b29b      	uxth	r3, r3
 800749a:	461a      	mov	r2, r3
 800749c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80074a0:	4413      	add	r3, r2
 80074a2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80074a6:	463b      	mov	r3, r7
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	781b      	ldrb	r3, [r3, #0]
 80074ac:	011a      	lsls	r2, r3, #4
 80074ae:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80074b2:	4413      	add	r3, r2
 80074b4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80074b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80074bc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80074c0:	b29a      	uxth	r2, r3
 80074c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074c6:	801a      	strh	r2, [r3, #0]
 80074c8:	e001      	b.n	80074ce <USB_EPStartXfer+0x15a6>
      }
      else
      {
        return HAL_ERROR;
 80074ca:	2301      	movs	r3, #1
 80074cc:	e02e      	b.n	800752c <USB_EPStartXfer+0x1604>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80074ce:	1d3b      	adds	r3, r7, #4
 80074d0:	681a      	ldr	r2, [r3, #0]
 80074d2:	463b      	mov	r3, r7
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	781b      	ldrb	r3, [r3, #0]
 80074d8:	009b      	lsls	r3, r3, #2
 80074da:	4413      	add	r3, r2
 80074dc:	881b      	ldrh	r3, [r3, #0]
 80074de:	b29b      	uxth	r3, r3
 80074e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80074e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074e8:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 80074ec:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80074f0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80074f4:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 80074f8:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80074fc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007500:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 8007504:	1d3b      	adds	r3, r7, #4
 8007506:	681a      	ldr	r2, [r3, #0]
 8007508:	463b      	mov	r3, r7
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	781b      	ldrb	r3, [r3, #0]
 800750e:	009b      	lsls	r3, r3, #2
 8007510:	441a      	add	r2, r3
 8007512:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8007516:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800751a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800751e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007522:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007526:	b29b      	uxth	r3, r3
 8007528:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800752a:	2300      	movs	r3, #0
}
 800752c:	4618      	mov	r0, r3
 800752e:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8007532:	46bd      	mov	sp, r7
 8007534:	bd80      	pop	{r7, pc}

08007536 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007536:	b480      	push	{r7}
 8007538:	b085      	sub	sp, #20
 800753a:	af00      	add	r7, sp, #0
 800753c:	6078      	str	r0, [r7, #4]
 800753e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	785b      	ldrb	r3, [r3, #1]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d020      	beq.n	800758a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007548:	687a      	ldr	r2, [r7, #4]
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	781b      	ldrb	r3, [r3, #0]
 800754e:	009b      	lsls	r3, r3, #2
 8007550:	4413      	add	r3, r2
 8007552:	881b      	ldrh	r3, [r3, #0]
 8007554:	b29b      	uxth	r3, r3
 8007556:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800755a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800755e:	81fb      	strh	r3, [r7, #14]
 8007560:	89fb      	ldrh	r3, [r7, #14]
 8007562:	f083 0310 	eor.w	r3, r3, #16
 8007566:	81fb      	strh	r3, [r7, #14]
 8007568:	687a      	ldr	r2, [r7, #4]
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	781b      	ldrb	r3, [r3, #0]
 800756e:	009b      	lsls	r3, r3, #2
 8007570:	441a      	add	r2, r3
 8007572:	89fb      	ldrh	r3, [r7, #14]
 8007574:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007578:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800757c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007580:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007584:	b29b      	uxth	r3, r3
 8007586:	8013      	strh	r3, [r2, #0]
 8007588:	e01f      	b.n	80075ca <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800758a:	687a      	ldr	r2, [r7, #4]
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	781b      	ldrb	r3, [r3, #0]
 8007590:	009b      	lsls	r3, r3, #2
 8007592:	4413      	add	r3, r2
 8007594:	881b      	ldrh	r3, [r3, #0]
 8007596:	b29b      	uxth	r3, r3
 8007598:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800759c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075a0:	81bb      	strh	r3, [r7, #12]
 80075a2:	89bb      	ldrh	r3, [r7, #12]
 80075a4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80075a8:	81bb      	strh	r3, [r7, #12]
 80075aa:	687a      	ldr	r2, [r7, #4]
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	781b      	ldrb	r3, [r3, #0]
 80075b0:	009b      	lsls	r3, r3, #2
 80075b2:	441a      	add	r2, r3
 80075b4:	89bb      	ldrh	r3, [r7, #12]
 80075b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075c6:	b29b      	uxth	r3, r3
 80075c8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80075ca:	2300      	movs	r3, #0
}
 80075cc:	4618      	mov	r0, r3
 80075ce:	3714      	adds	r7, #20
 80075d0:	46bd      	mov	sp, r7
 80075d2:	bc80      	pop	{r7}
 80075d4:	4770      	bx	lr

080075d6 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80075d6:	b480      	push	{r7}
 80075d8:	b087      	sub	sp, #28
 80075da:	af00      	add	r7, sp, #0
 80075dc:	6078      	str	r0, [r7, #4]
 80075de:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	7b1b      	ldrb	r3, [r3, #12]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	f040 809d 	bne.w	8007724 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	785b      	ldrb	r3, [r3, #1]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d04c      	beq.n	800768c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80075f2:	687a      	ldr	r2, [r7, #4]
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	781b      	ldrb	r3, [r3, #0]
 80075f8:	009b      	lsls	r3, r3, #2
 80075fa:	4413      	add	r3, r2
 80075fc:	881b      	ldrh	r3, [r3, #0]
 80075fe:	82fb      	strh	r3, [r7, #22]
 8007600:	8afb      	ldrh	r3, [r7, #22]
 8007602:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007606:	2b00      	cmp	r3, #0
 8007608:	d01b      	beq.n	8007642 <USB_EPClearStall+0x6c>
 800760a:	687a      	ldr	r2, [r7, #4]
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	781b      	ldrb	r3, [r3, #0]
 8007610:	009b      	lsls	r3, r3, #2
 8007612:	4413      	add	r3, r2
 8007614:	881b      	ldrh	r3, [r3, #0]
 8007616:	b29b      	uxth	r3, r3
 8007618:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800761c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007620:	82bb      	strh	r3, [r7, #20]
 8007622:	687a      	ldr	r2, [r7, #4]
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	781b      	ldrb	r3, [r3, #0]
 8007628:	009b      	lsls	r3, r3, #2
 800762a:	441a      	add	r2, r3
 800762c:	8abb      	ldrh	r3, [r7, #20]
 800762e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007632:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007636:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800763a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800763e:	b29b      	uxth	r3, r3
 8007640:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	78db      	ldrb	r3, [r3, #3]
 8007646:	2b01      	cmp	r3, #1
 8007648:	d06c      	beq.n	8007724 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800764a:	687a      	ldr	r2, [r7, #4]
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	781b      	ldrb	r3, [r3, #0]
 8007650:	009b      	lsls	r3, r3, #2
 8007652:	4413      	add	r3, r2
 8007654:	881b      	ldrh	r3, [r3, #0]
 8007656:	b29b      	uxth	r3, r3
 8007658:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800765c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007660:	827b      	strh	r3, [r7, #18]
 8007662:	8a7b      	ldrh	r3, [r7, #18]
 8007664:	f083 0320 	eor.w	r3, r3, #32
 8007668:	827b      	strh	r3, [r7, #18]
 800766a:	687a      	ldr	r2, [r7, #4]
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	781b      	ldrb	r3, [r3, #0]
 8007670:	009b      	lsls	r3, r3, #2
 8007672:	441a      	add	r2, r3
 8007674:	8a7b      	ldrh	r3, [r7, #18]
 8007676:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800767a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800767e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007682:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007686:	b29b      	uxth	r3, r3
 8007688:	8013      	strh	r3, [r2, #0]
 800768a:	e04b      	b.n	8007724 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800768c:	687a      	ldr	r2, [r7, #4]
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	781b      	ldrb	r3, [r3, #0]
 8007692:	009b      	lsls	r3, r3, #2
 8007694:	4413      	add	r3, r2
 8007696:	881b      	ldrh	r3, [r3, #0]
 8007698:	823b      	strh	r3, [r7, #16]
 800769a:	8a3b      	ldrh	r3, [r7, #16]
 800769c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d01b      	beq.n	80076dc <USB_EPClearStall+0x106>
 80076a4:	687a      	ldr	r2, [r7, #4]
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	781b      	ldrb	r3, [r3, #0]
 80076aa:	009b      	lsls	r3, r3, #2
 80076ac:	4413      	add	r3, r2
 80076ae:	881b      	ldrh	r3, [r3, #0]
 80076b0:	b29b      	uxth	r3, r3
 80076b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076ba:	81fb      	strh	r3, [r7, #14]
 80076bc:	687a      	ldr	r2, [r7, #4]
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	781b      	ldrb	r3, [r3, #0]
 80076c2:	009b      	lsls	r3, r3, #2
 80076c4:	441a      	add	r2, r3
 80076c6:	89fb      	ldrh	r3, [r7, #14]
 80076c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80076d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076d8:	b29b      	uxth	r3, r3
 80076da:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80076dc:	687a      	ldr	r2, [r7, #4]
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	781b      	ldrb	r3, [r3, #0]
 80076e2:	009b      	lsls	r3, r3, #2
 80076e4:	4413      	add	r3, r2
 80076e6:	881b      	ldrh	r3, [r3, #0]
 80076e8:	b29b      	uxth	r3, r3
 80076ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80076ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076f2:	81bb      	strh	r3, [r7, #12]
 80076f4:	89bb      	ldrh	r3, [r7, #12]
 80076f6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80076fa:	81bb      	strh	r3, [r7, #12]
 80076fc:	89bb      	ldrh	r3, [r7, #12]
 80076fe:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007702:	81bb      	strh	r3, [r7, #12]
 8007704:	687a      	ldr	r2, [r7, #4]
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	781b      	ldrb	r3, [r3, #0]
 800770a:	009b      	lsls	r3, r3, #2
 800770c:	441a      	add	r2, r3
 800770e:	89bb      	ldrh	r3, [r7, #12]
 8007710:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007714:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007718:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800771c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007720:	b29b      	uxth	r3, r3
 8007722:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007724:	2300      	movs	r3, #0
}
 8007726:	4618      	mov	r0, r3
 8007728:	371c      	adds	r7, #28
 800772a:	46bd      	mov	sp, r7
 800772c:	bc80      	pop	{r7}
 800772e:	4770      	bx	lr

08007730 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007730:	b480      	push	{r7}
 8007732:	b083      	sub	sp, #12
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
 8007738:	460b      	mov	r3, r1
 800773a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800773c:	78fb      	ldrb	r3, [r7, #3]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d103      	bne.n	800774a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2280      	movs	r2, #128	; 0x80
 8007746:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800774a:	2300      	movs	r3, #0
}
 800774c:	4618      	mov	r0, r3
 800774e:	370c      	adds	r7, #12
 8007750:	46bd      	mov	sp, r7
 8007752:	bc80      	pop	{r7}
 8007754:	4770      	bx	lr

08007756 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007756:	b480      	push	{r7}
 8007758:	b083      	sub	sp, #12
 800775a:	af00      	add	r7, sp, #0
 800775c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800775e:	2300      	movs	r3, #0
}
 8007760:	4618      	mov	r0, r3
 8007762:	370c      	adds	r7, #12
 8007764:	46bd      	mov	sp, r7
 8007766:	bc80      	pop	{r7}
 8007768:	4770      	bx	lr

0800776a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800776a:	b480      	push	{r7}
 800776c:	b083      	sub	sp, #12
 800776e:	af00      	add	r7, sp, #0
 8007770:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007772:	2300      	movs	r3, #0
}
 8007774:	4618      	mov	r0, r3
 8007776:	370c      	adds	r7, #12
 8007778:	46bd      	mov	sp, r7
 800777a:	bc80      	pop	{r7}
 800777c:	4770      	bx	lr

0800777e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800777e:	b480      	push	{r7}
 8007780:	b085      	sub	sp, #20
 8007782:	af00      	add	r7, sp, #0
 8007784:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800778c:	b29b      	uxth	r3, r3
 800778e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007790:	68fb      	ldr	r3, [r7, #12]
}
 8007792:	4618      	mov	r0, r3
 8007794:	3714      	adds	r7, #20
 8007796:	46bd      	mov	sp, r7
 8007798:	bc80      	pop	{r7}
 800779a:	4770      	bx	lr

0800779c <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800779c:	b480      	push	{r7}
 800779e:	b083      	sub	sp, #12
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
 80077a4:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80077a6:	2300      	movs	r3, #0
}
 80077a8:	4618      	mov	r0, r3
 80077aa:	370c      	adds	r7, #12
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bc80      	pop	{r7}
 80077b0:	4770      	bx	lr

080077b2 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80077b2:	b480      	push	{r7}
 80077b4:	b08d      	sub	sp, #52	; 0x34
 80077b6:	af00      	add	r7, sp, #0
 80077b8:	60f8      	str	r0, [r7, #12]
 80077ba:	60b9      	str	r1, [r7, #8]
 80077bc:	4611      	mov	r1, r2
 80077be:	461a      	mov	r2, r3
 80077c0:	460b      	mov	r3, r1
 80077c2:	80fb      	strh	r3, [r7, #6]
 80077c4:	4613      	mov	r3, r2
 80077c6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80077c8:	88bb      	ldrh	r3, [r7, #4]
 80077ca:	3301      	adds	r3, #1
 80077cc:	085b      	lsrs	r3, r3, #1
 80077ce:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80077d8:	88fb      	ldrh	r3, [r7, #6]
 80077da:	005a      	lsls	r2, r3, #1
 80077dc:	69fb      	ldr	r3, [r7, #28]
 80077de:	4413      	add	r3, r2
 80077e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80077e4:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80077e6:	6a3b      	ldr	r3, [r7, #32]
 80077e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80077ea:	e01e      	b.n	800782a <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80077ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ee:	781b      	ldrb	r3, [r3, #0]
 80077f0:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80077f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f4:	3301      	adds	r3, #1
 80077f6:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80077f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077fa:	781b      	ldrb	r3, [r3, #0]
 80077fc:	b29b      	uxth	r3, r3
 80077fe:	021b      	lsls	r3, r3, #8
 8007800:	b29b      	uxth	r3, r3
 8007802:	461a      	mov	r2, r3
 8007804:	69bb      	ldr	r3, [r7, #24]
 8007806:	4313      	orrs	r3, r2
 8007808:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800780a:	697b      	ldr	r3, [r7, #20]
 800780c:	b29a      	uxth	r2, r3
 800780e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007810:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007814:	3302      	adds	r3, #2
 8007816:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8007818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800781a:	3302      	adds	r3, #2
 800781c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800781e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007820:	3301      	adds	r3, #1
 8007822:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8007824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007826:	3b01      	subs	r3, #1
 8007828:	62fb      	str	r3, [r7, #44]	; 0x2c
 800782a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800782c:	2b00      	cmp	r3, #0
 800782e:	d1dd      	bne.n	80077ec <USB_WritePMA+0x3a>
  }
}
 8007830:	bf00      	nop
 8007832:	3734      	adds	r7, #52	; 0x34
 8007834:	46bd      	mov	sp, r7
 8007836:	bc80      	pop	{r7}
 8007838:	4770      	bx	lr

0800783a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800783a:	b480      	push	{r7}
 800783c:	b08b      	sub	sp, #44	; 0x2c
 800783e:	af00      	add	r7, sp, #0
 8007840:	60f8      	str	r0, [r7, #12]
 8007842:	60b9      	str	r1, [r7, #8]
 8007844:	4611      	mov	r1, r2
 8007846:	461a      	mov	r2, r3
 8007848:	460b      	mov	r3, r1
 800784a:	80fb      	strh	r3, [r7, #6]
 800784c:	4613      	mov	r3, r2
 800784e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007850:	88bb      	ldrh	r3, [r7, #4]
 8007852:	085b      	lsrs	r3, r3, #1
 8007854:	b29b      	uxth	r3, r3
 8007856:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007860:	88fb      	ldrh	r3, [r7, #6]
 8007862:	005a      	lsls	r2, r3, #1
 8007864:	697b      	ldr	r3, [r7, #20]
 8007866:	4413      	add	r3, r2
 8007868:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800786c:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800786e:	69bb      	ldr	r3, [r7, #24]
 8007870:	627b      	str	r3, [r7, #36]	; 0x24
 8007872:	e01b      	b.n	80078ac <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8007874:	6a3b      	ldr	r3, [r7, #32]
 8007876:	881b      	ldrh	r3, [r3, #0]
 8007878:	b29b      	uxth	r3, r3
 800787a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800787c:	6a3b      	ldr	r3, [r7, #32]
 800787e:	3302      	adds	r3, #2
 8007880:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007882:	693b      	ldr	r3, [r7, #16]
 8007884:	b2da      	uxtb	r2, r3
 8007886:	69fb      	ldr	r3, [r7, #28]
 8007888:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800788a:	69fb      	ldr	r3, [r7, #28]
 800788c:	3301      	adds	r3, #1
 800788e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8007890:	693b      	ldr	r3, [r7, #16]
 8007892:	0a1b      	lsrs	r3, r3, #8
 8007894:	b2da      	uxtb	r2, r3
 8007896:	69fb      	ldr	r3, [r7, #28]
 8007898:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800789a:	69fb      	ldr	r3, [r7, #28]
 800789c:	3301      	adds	r3, #1
 800789e:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80078a0:	6a3b      	ldr	r3, [r7, #32]
 80078a2:	3302      	adds	r3, #2
 80078a4:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80078a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a8:	3b01      	subs	r3, #1
 80078aa:	627b      	str	r3, [r7, #36]	; 0x24
 80078ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d1e0      	bne.n	8007874 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80078b2:	88bb      	ldrh	r3, [r7, #4]
 80078b4:	f003 0301 	and.w	r3, r3, #1
 80078b8:	b29b      	uxth	r3, r3
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d007      	beq.n	80078ce <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80078be:	6a3b      	ldr	r3, [r7, #32]
 80078c0:	881b      	ldrh	r3, [r3, #0]
 80078c2:	b29b      	uxth	r3, r3
 80078c4:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80078c6:	693b      	ldr	r3, [r7, #16]
 80078c8:	b2da      	uxtb	r2, r3
 80078ca:	69fb      	ldr	r3, [r7, #28]
 80078cc:	701a      	strb	r2, [r3, #0]
  }
}
 80078ce:	bf00      	nop
 80078d0:	372c      	adds	r7, #44	; 0x2c
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bc80      	pop	{r7}
 80078d6:	4770      	bx	lr

080078d8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b084      	sub	sp, #16
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
 80078e0:	460b      	mov	r3, r1
 80078e2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80078e4:	2300      	movs	r3, #0
 80078e6:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	7c1b      	ldrb	r3, [r3, #16]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d115      	bne.n	800791c <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80078f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80078f4:	2202      	movs	r2, #2
 80078f6:	2181      	movs	r1, #129	; 0x81
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f003 f85a 	bl	800a9b2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2201      	movs	r2, #1
 8007902:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007904:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007908:	2202      	movs	r2, #2
 800790a:	2101      	movs	r1, #1
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f003 f850 	bl	800a9b2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2201      	movs	r2, #1
 8007916:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800791a:	e012      	b.n	8007942 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800791c:	2340      	movs	r3, #64	; 0x40
 800791e:	2202      	movs	r2, #2
 8007920:	2181      	movs	r1, #129	; 0x81
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f003 f845 	bl	800a9b2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2201      	movs	r2, #1
 800792c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800792e:	2340      	movs	r3, #64	; 0x40
 8007930:	2202      	movs	r2, #2
 8007932:	2101      	movs	r1, #1
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	f003 f83c 	bl	800a9b2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2201      	movs	r2, #1
 800793e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007942:	2308      	movs	r3, #8
 8007944:	2203      	movs	r2, #3
 8007946:	2182      	movs	r1, #130	; 0x82
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f003 f832 	bl	800a9b2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2201      	movs	r2, #1
 8007952:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007954:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007958:	f003 f952 	bl	800ac00 <USBD_static_malloc>
 800795c:	4602      	mov	r2, r0
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800796a:	2b00      	cmp	r3, #0
 800796c:	d102      	bne.n	8007974 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800796e:	2301      	movs	r3, #1
 8007970:	73fb      	strb	r3, [r7, #15]
 8007972:	e026      	b.n	80079c2 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800797a:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	2200      	movs	r2, #0
 800798a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	2200      	movs	r2, #0
 8007992:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	7c1b      	ldrb	r3, [r3, #16]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d109      	bne.n	80079b2 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80079a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80079a8:	2101      	movs	r1, #1
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	f003 f8f2 	bl	800ab94 <USBD_LL_PrepareReceive>
 80079b0:	e007      	b.n	80079c2 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80079b8:	2340      	movs	r3, #64	; 0x40
 80079ba:	2101      	movs	r1, #1
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f003 f8e9 	bl	800ab94 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80079c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80079c4:	4618      	mov	r0, r3
 80079c6:	3710      	adds	r7, #16
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd80      	pop	{r7, pc}

080079cc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b084      	sub	sp, #16
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
 80079d4:	460b      	mov	r3, r1
 80079d6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80079d8:	2300      	movs	r3, #0
 80079da:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80079dc:	2181      	movs	r1, #129	; 0x81
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f003 f80d 	bl	800a9fe <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2200      	movs	r2, #0
 80079e8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80079ea:	2101      	movs	r1, #1
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f003 f806 	bl	800a9fe <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2200      	movs	r2, #0
 80079f6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80079fa:	2182      	movs	r1, #130	; 0x82
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f002 fffe 	bl	800a9fe <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2200      	movs	r2, #0
 8007a06:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d00e      	beq.n	8007a30 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a18:	685b      	ldr	r3, [r3, #4]
 8007a1a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a22:	4618      	mov	r0, r3
 8007a24:	f003 f8f8 	bl	800ac18 <USBD_static_free>
    pdev->pClassData = NULL;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8007a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a32:	4618      	mov	r0, r3
 8007a34:	3710      	adds	r7, #16
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}

08007a3a <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007a3a:	b580      	push	{r7, lr}
 8007a3c:	b086      	sub	sp, #24
 8007a3e:	af00      	add	r7, sp, #0
 8007a40:	6078      	str	r0, [r7, #4]
 8007a42:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a4a:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007a50:	2300      	movs	r3, #0
 8007a52:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8007a54:	2300      	movs	r3, #0
 8007a56:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	781b      	ldrb	r3, [r3, #0]
 8007a5c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d039      	beq.n	8007ad8 <USBD_CDC_Setup+0x9e>
 8007a64:	2b20      	cmp	r3, #32
 8007a66:	d17c      	bne.n	8007b62 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	88db      	ldrh	r3, [r3, #6]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d029      	beq.n	8007ac4 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	781b      	ldrb	r3, [r3, #0]
 8007a74:	b25b      	sxtb	r3, r3
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	da11      	bge.n	8007a9e <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a80:	689b      	ldr	r3, [r3, #8]
 8007a82:	683a      	ldr	r2, [r7, #0]
 8007a84:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8007a86:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007a88:	683a      	ldr	r2, [r7, #0]
 8007a8a:	88d2      	ldrh	r2, [r2, #6]
 8007a8c:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007a8e:	6939      	ldr	r1, [r7, #16]
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	88db      	ldrh	r3, [r3, #6]
 8007a94:	461a      	mov	r2, r3
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	f001 f9fa 	bl	8008e90 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8007a9c:	e068      	b.n	8007b70 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	785a      	ldrb	r2, [r3, #1]
 8007aa2:	693b      	ldr	r3, [r7, #16]
 8007aa4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	88db      	ldrh	r3, [r3, #6]
 8007aac:	b2da      	uxtb	r2, r3
 8007aae:	693b      	ldr	r3, [r7, #16]
 8007ab0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007ab4:	6939      	ldr	r1, [r7, #16]
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	88db      	ldrh	r3, [r3, #6]
 8007aba:	461a      	mov	r2, r3
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f001 fa15 	bl	8008eec <USBD_CtlPrepareRx>
      break;
 8007ac2:	e055      	b.n	8007b70 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007aca:	689b      	ldr	r3, [r3, #8]
 8007acc:	683a      	ldr	r2, [r7, #0]
 8007ace:	7850      	ldrb	r0, [r2, #1]
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	6839      	ldr	r1, [r7, #0]
 8007ad4:	4798      	blx	r3
      break;
 8007ad6:	e04b      	b.n	8007b70 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	785b      	ldrb	r3, [r3, #1]
 8007adc:	2b0a      	cmp	r3, #10
 8007ade:	d017      	beq.n	8007b10 <USBD_CDC_Setup+0xd6>
 8007ae0:	2b0b      	cmp	r3, #11
 8007ae2:	d029      	beq.n	8007b38 <USBD_CDC_Setup+0xfe>
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d133      	bne.n	8007b50 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007aee:	2b03      	cmp	r3, #3
 8007af0:	d107      	bne.n	8007b02 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007af2:	f107 030c 	add.w	r3, r7, #12
 8007af6:	2202      	movs	r2, #2
 8007af8:	4619      	mov	r1, r3
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f001 f9c8 	bl	8008e90 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007b00:	e02e      	b.n	8007b60 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8007b02:	6839      	ldr	r1, [r7, #0]
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	f001 f959 	bl	8008dbc <USBD_CtlError>
            ret = USBD_FAIL;
 8007b0a:	2302      	movs	r3, #2
 8007b0c:	75fb      	strb	r3, [r7, #23]
          break;
 8007b0e:	e027      	b.n	8007b60 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b16:	2b03      	cmp	r3, #3
 8007b18:	d107      	bne.n	8007b2a <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8007b1a:	f107 030f 	add.w	r3, r7, #15
 8007b1e:	2201      	movs	r2, #1
 8007b20:	4619      	mov	r1, r3
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	f001 f9b4 	bl	8008e90 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007b28:	e01a      	b.n	8007b60 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8007b2a:	6839      	ldr	r1, [r7, #0]
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f001 f945 	bl	8008dbc <USBD_CtlError>
            ret = USBD_FAIL;
 8007b32:	2302      	movs	r3, #2
 8007b34:	75fb      	strb	r3, [r7, #23]
          break;
 8007b36:	e013      	b.n	8007b60 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b3e:	2b03      	cmp	r3, #3
 8007b40:	d00d      	beq.n	8007b5e <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8007b42:	6839      	ldr	r1, [r7, #0]
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	f001 f939 	bl	8008dbc <USBD_CtlError>
            ret = USBD_FAIL;
 8007b4a:	2302      	movs	r3, #2
 8007b4c:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007b4e:	e006      	b.n	8007b5e <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8007b50:	6839      	ldr	r1, [r7, #0]
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f001 f932 	bl	8008dbc <USBD_CtlError>
          ret = USBD_FAIL;
 8007b58:	2302      	movs	r3, #2
 8007b5a:	75fb      	strb	r3, [r7, #23]
          break;
 8007b5c:	e000      	b.n	8007b60 <USBD_CDC_Setup+0x126>
          break;
 8007b5e:	bf00      	nop
      }
      break;
 8007b60:	e006      	b.n	8007b70 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8007b62:	6839      	ldr	r1, [r7, #0]
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f001 f929 	bl	8008dbc <USBD_CtlError>
      ret = USBD_FAIL;
 8007b6a:	2302      	movs	r3, #2
 8007b6c:	75fb      	strb	r3, [r7, #23]
      break;
 8007b6e:	bf00      	nop
  }

  return ret;
 8007b70:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b72:	4618      	mov	r0, r3
 8007b74:	3718      	adds	r7, #24
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}

08007b7a <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007b7a:	b580      	push	{r7, lr}
 8007b7c:	b084      	sub	sp, #16
 8007b7e:	af00      	add	r7, sp, #0
 8007b80:	6078      	str	r0, [r7, #4]
 8007b82:	460b      	mov	r3, r1
 8007b84:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b8c:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007b94:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d03a      	beq.n	8007c16 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007ba0:	78fa      	ldrb	r2, [r7, #3]
 8007ba2:	6879      	ldr	r1, [r7, #4]
 8007ba4:	4613      	mov	r3, r2
 8007ba6:	009b      	lsls	r3, r3, #2
 8007ba8:	4413      	add	r3, r2
 8007baa:	009b      	lsls	r3, r3, #2
 8007bac:	440b      	add	r3, r1
 8007bae:	331c      	adds	r3, #28
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d029      	beq.n	8007c0a <USBD_CDC_DataIn+0x90>
 8007bb6:	78fa      	ldrb	r2, [r7, #3]
 8007bb8:	6879      	ldr	r1, [r7, #4]
 8007bba:	4613      	mov	r3, r2
 8007bbc:	009b      	lsls	r3, r3, #2
 8007bbe:	4413      	add	r3, r2
 8007bc0:	009b      	lsls	r3, r3, #2
 8007bc2:	440b      	add	r3, r1
 8007bc4:	331c      	adds	r3, #28
 8007bc6:	681a      	ldr	r2, [r3, #0]
 8007bc8:	78f9      	ldrb	r1, [r7, #3]
 8007bca:	68b8      	ldr	r0, [r7, #8]
 8007bcc:	460b      	mov	r3, r1
 8007bce:	009b      	lsls	r3, r3, #2
 8007bd0:	440b      	add	r3, r1
 8007bd2:	00db      	lsls	r3, r3, #3
 8007bd4:	4403      	add	r3, r0
 8007bd6:	3338      	adds	r3, #56	; 0x38
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	fbb2 f1f3 	udiv	r1, r2, r3
 8007bde:	fb03 f301 	mul.w	r3, r3, r1
 8007be2:	1ad3      	subs	r3, r2, r3
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d110      	bne.n	8007c0a <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8007be8:	78fa      	ldrb	r2, [r7, #3]
 8007bea:	6879      	ldr	r1, [r7, #4]
 8007bec:	4613      	mov	r3, r2
 8007bee:	009b      	lsls	r3, r3, #2
 8007bf0:	4413      	add	r3, r2
 8007bf2:	009b      	lsls	r3, r3, #2
 8007bf4:	440b      	add	r3, r1
 8007bf6:	331c      	adds	r3, #28
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007bfc:	78f9      	ldrb	r1, [r7, #3]
 8007bfe:	2300      	movs	r3, #0
 8007c00:	2200      	movs	r2, #0
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	f002 ffa3 	bl	800ab4e <USBD_LL_Transmit>
 8007c08:	e003      	b.n	8007c12 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8007c12:	2300      	movs	r3, #0
 8007c14:	e000      	b.n	8007c18 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8007c16:	2302      	movs	r3, #2
  }
}
 8007c18:	4618      	mov	r0, r3
 8007c1a:	3710      	adds	r7, #16
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	bd80      	pop	{r7, pc}

08007c20 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b084      	sub	sp, #16
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
 8007c28:	460b      	mov	r3, r1
 8007c2a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c32:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007c34:	78fb      	ldrb	r3, [r7, #3]
 8007c36:	4619      	mov	r1, r3
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	f002 ffce 	bl	800abda <USBD_LL_GetRxDataSize>
 8007c3e:	4602      	mov	r2, r0
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d00d      	beq.n	8007c6c <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c56:	68db      	ldr	r3, [r3, #12]
 8007c58:	68fa      	ldr	r2, [r7, #12]
 8007c5a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007c5e:	68fa      	ldr	r2, [r7, #12]
 8007c60:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007c64:	4611      	mov	r1, r2
 8007c66:	4798      	blx	r3

    return USBD_OK;
 8007c68:	2300      	movs	r3, #0
 8007c6a:	e000      	b.n	8007c6e <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8007c6c:	2302      	movs	r3, #2
  }
}
 8007c6e:	4618      	mov	r0, r3
 8007c70:	3710      	adds	r7, #16
 8007c72:	46bd      	mov	sp, r7
 8007c74:	bd80      	pop	{r7, pc}

08007c76 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007c76:	b580      	push	{r7, lr}
 8007c78:	b084      	sub	sp, #16
 8007c7a:	af00      	add	r7, sp, #0
 8007c7c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c84:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d015      	beq.n	8007cbc <USBD_CDC_EP0_RxReady+0x46>
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007c96:	2bff      	cmp	r3, #255	; 0xff
 8007c98:	d010      	beq.n	8007cbc <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ca0:	689b      	ldr	r3, [r3, #8]
 8007ca2:	68fa      	ldr	r2, [r7, #12]
 8007ca4:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8007ca8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007caa:	68fa      	ldr	r2, [r7, #12]
 8007cac:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007cb0:	b292      	uxth	r2, r2
 8007cb2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	22ff      	movs	r2, #255	; 0xff
 8007cb8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8007cbc:	2300      	movs	r3, #0
}
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	3710      	adds	r7, #16
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}
	...

08007cc8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007cc8:	b480      	push	{r7}
 8007cca:	b083      	sub	sp, #12
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2243      	movs	r2, #67	; 0x43
 8007cd4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8007cd6:	4b03      	ldr	r3, [pc, #12]	; (8007ce4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007cd8:	4618      	mov	r0, r3
 8007cda:	370c      	adds	r7, #12
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bc80      	pop	{r7}
 8007ce0:	4770      	bx	lr
 8007ce2:	bf00      	nop
 8007ce4:	20000094 	.word	0x20000094

08007ce8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007ce8:	b480      	push	{r7}
 8007cea:	b083      	sub	sp, #12
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2243      	movs	r2, #67	; 0x43
 8007cf4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8007cf6:	4b03      	ldr	r3, [pc, #12]	; (8007d04 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	370c      	adds	r7, #12
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	bc80      	pop	{r7}
 8007d00:	4770      	bx	lr
 8007d02:	bf00      	nop
 8007d04:	20000050 	.word	0x20000050

08007d08 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007d08:	b480      	push	{r7}
 8007d0a:	b083      	sub	sp, #12
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2243      	movs	r2, #67	; 0x43
 8007d14:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8007d16:	4b03      	ldr	r3, [pc, #12]	; (8007d24 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007d18:	4618      	mov	r0, r3
 8007d1a:	370c      	adds	r7, #12
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	bc80      	pop	{r7}
 8007d20:	4770      	bx	lr
 8007d22:	bf00      	nop
 8007d24:	200000d8 	.word	0x200000d8

08007d28 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007d28:	b480      	push	{r7}
 8007d2a:	b083      	sub	sp, #12
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	220a      	movs	r2, #10
 8007d34:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8007d36:	4b03      	ldr	r3, [pc, #12]	; (8007d44 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007d38:	4618      	mov	r0, r3
 8007d3a:	370c      	adds	r7, #12
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	bc80      	pop	{r7}
 8007d40:	4770      	bx	lr
 8007d42:	bf00      	nop
 8007d44:	2000000c 	.word	0x2000000c

08007d48 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8007d48:	b480      	push	{r7}
 8007d4a:	b085      	sub	sp, #20
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
 8007d50:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007d52:	2302      	movs	r3, #2
 8007d54:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d005      	beq.n	8007d68 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	683a      	ldr	r2, [r7, #0]
 8007d60:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8007d64:	2300      	movs	r3, #0
 8007d66:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007d68:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	3714      	adds	r7, #20
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	bc80      	pop	{r7}
 8007d72:	4770      	bx	lr

08007d74 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8007d74:	b480      	push	{r7}
 8007d76:	b087      	sub	sp, #28
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	60f8      	str	r0, [r7, #12]
 8007d7c:	60b9      	str	r1, [r7, #8]
 8007d7e:	4613      	mov	r3, r2
 8007d80:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d88:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007d8a:	697b      	ldr	r3, [r7, #20]
 8007d8c:	68ba      	ldr	r2, [r7, #8]
 8007d8e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007d92:	88fa      	ldrh	r2, [r7, #6]
 8007d94:	697b      	ldr	r3, [r7, #20]
 8007d96:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8007d9a:	2300      	movs	r3, #0
}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	371c      	adds	r7, #28
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bc80      	pop	{r7}
 8007da4:	4770      	bx	lr

08007da6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8007da6:	b480      	push	{r7}
 8007da8:	b085      	sub	sp, #20
 8007daa:	af00      	add	r7, sp, #0
 8007dac:	6078      	str	r0, [r7, #4]
 8007dae:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007db6:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	683a      	ldr	r2, [r7, #0]
 8007dbc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8007dc0:	2300      	movs	r3, #0
}
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	3714      	adds	r7, #20
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	bc80      	pop	{r7}
 8007dca:	4770      	bx	lr

08007dcc <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b084      	sub	sp, #16
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dda:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d01c      	beq.n	8007e20 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d115      	bne.n	8007e1c <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	2201      	movs	r2, #1
 8007df4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007e0e:	b29b      	uxth	r3, r3
 8007e10:	2181      	movs	r1, #129	; 0x81
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f002 fe9b 	bl	800ab4e <USBD_LL_Transmit>

      return USBD_OK;
 8007e18:	2300      	movs	r3, #0
 8007e1a:	e002      	b.n	8007e22 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8007e1c:	2301      	movs	r3, #1
 8007e1e:	e000      	b.n	8007e22 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8007e20:	2302      	movs	r3, #2
  }
}
 8007e22:	4618      	mov	r0, r3
 8007e24:	3710      	adds	r7, #16
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bd80      	pop	{r7, pc}

08007e2a <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007e2a:	b580      	push	{r7, lr}
 8007e2c:	b084      	sub	sp, #16
 8007e2e:	af00      	add	r7, sp, #0
 8007e30:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e38:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d017      	beq.n	8007e74 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	7c1b      	ldrb	r3, [r3, #16]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d109      	bne.n	8007e60 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007e52:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007e56:	2101      	movs	r1, #1
 8007e58:	6878      	ldr	r0, [r7, #4]
 8007e5a:	f002 fe9b 	bl	800ab94 <USBD_LL_PrepareReceive>
 8007e5e:	e007      	b.n	8007e70 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007e66:	2340      	movs	r3, #64	; 0x40
 8007e68:	2101      	movs	r1, #1
 8007e6a:	6878      	ldr	r0, [r7, #4]
 8007e6c:	f002 fe92 	bl	800ab94 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007e70:	2300      	movs	r3, #0
 8007e72:	e000      	b.n	8007e76 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8007e74:	2302      	movs	r3, #2
  }
}
 8007e76:	4618      	mov	r0, r3
 8007e78:	3710      	adds	r7, #16
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}

08007e7e <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007e7e:	b580      	push	{r7, lr}
 8007e80:	b084      	sub	sp, #16
 8007e82:	af00      	add	r7, sp, #0
 8007e84:	60f8      	str	r0, [r7, #12]
 8007e86:	60b9      	str	r1, [r7, #8]
 8007e88:	4613      	mov	r3, r2
 8007e8a:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d101      	bne.n	8007e96 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007e92:	2302      	movs	r3, #2
 8007e94:	e01a      	b.n	8007ecc <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d003      	beq.n	8007ea8 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d003      	beq.n	8007eb6 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	68ba      	ldr	r2, [r7, #8]
 8007eb2:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	2201      	movs	r2, #1
 8007eba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	79fa      	ldrb	r2, [r7, #7]
 8007ec2:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007ec4:	68f8      	ldr	r0, [r7, #12]
 8007ec6:	f002 fcff 	bl	800a8c8 <USBD_LL_Init>

  return USBD_OK;
 8007eca:	2300      	movs	r3, #0
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	3710      	adds	r7, #16
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bd80      	pop	{r7, pc}

08007ed4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b085      	sub	sp, #20
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
 8007edc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007ede:	2300      	movs	r3, #0
 8007ee0:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d006      	beq.n	8007ef6 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	683a      	ldr	r2, [r7, #0]
 8007eec:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	73fb      	strb	r3, [r7, #15]
 8007ef4:	e001      	b.n	8007efa <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007ef6:	2302      	movs	r3, #2
 8007ef8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007efa:	7bfb      	ldrb	r3, [r7, #15]
}
 8007efc:	4618      	mov	r0, r3
 8007efe:	3714      	adds	r7, #20
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bc80      	pop	{r7}
 8007f04:	4770      	bx	lr

08007f06 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007f06:	b580      	push	{r7, lr}
 8007f08:	b082      	sub	sp, #8
 8007f0a:	af00      	add	r7, sp, #0
 8007f0c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	f002 fd34 	bl	800a97c <USBD_LL_Start>

  return USBD_OK;
 8007f14:	2300      	movs	r3, #0
}
 8007f16:	4618      	mov	r0, r3
 8007f18:	3708      	adds	r7, #8
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bd80      	pop	{r7, pc}

08007f1e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007f1e:	b480      	push	{r7}
 8007f20:	b083      	sub	sp, #12
 8007f22:	af00      	add	r7, sp, #0
 8007f24:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007f26:	2300      	movs	r3, #0
}
 8007f28:	4618      	mov	r0, r3
 8007f2a:	370c      	adds	r7, #12
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	bc80      	pop	{r7}
 8007f30:	4770      	bx	lr

08007f32 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007f32:	b580      	push	{r7, lr}
 8007f34:	b084      	sub	sp, #16
 8007f36:	af00      	add	r7, sp, #0
 8007f38:	6078      	str	r0, [r7, #4]
 8007f3a:	460b      	mov	r3, r1
 8007f3c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007f3e:	2302      	movs	r3, #2
 8007f40:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d00c      	beq.n	8007f66 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	78fa      	ldrb	r2, [r7, #3]
 8007f56:	4611      	mov	r1, r2
 8007f58:	6878      	ldr	r0, [r7, #4]
 8007f5a:	4798      	blx	r3
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d101      	bne.n	8007f66 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007f62:	2300      	movs	r3, #0
 8007f64:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007f66:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f68:	4618      	mov	r0, r3
 8007f6a:	3710      	adds	r7, #16
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	bd80      	pop	{r7, pc}

08007f70 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b082      	sub	sp, #8
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
 8007f78:	460b      	mov	r3, r1
 8007f7a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f82:	685b      	ldr	r3, [r3, #4]
 8007f84:	78fa      	ldrb	r2, [r7, #3]
 8007f86:	4611      	mov	r1, r2
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	4798      	blx	r3

  return USBD_OK;
 8007f8c:	2300      	movs	r3, #0
}
 8007f8e:	4618      	mov	r0, r3
 8007f90:	3708      	adds	r7, #8
 8007f92:	46bd      	mov	sp, r7
 8007f94:	bd80      	pop	{r7, pc}

08007f96 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007f96:	b580      	push	{r7, lr}
 8007f98:	b082      	sub	sp, #8
 8007f9a:	af00      	add	r7, sp, #0
 8007f9c:	6078      	str	r0, [r7, #4]
 8007f9e:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007fa6:	6839      	ldr	r1, [r7, #0]
 8007fa8:	4618      	mov	r0, r3
 8007faa:	f000 fecb 	bl	8008d44 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2201      	movs	r2, #1
 8007fb2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007fbc:	461a      	mov	r2, r3
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007fca:	f003 031f 	and.w	r3, r3, #31
 8007fce:	2b01      	cmp	r3, #1
 8007fd0:	d00c      	beq.n	8007fec <USBD_LL_SetupStage+0x56>
 8007fd2:	2b01      	cmp	r3, #1
 8007fd4:	d302      	bcc.n	8007fdc <USBD_LL_SetupStage+0x46>
 8007fd6:	2b02      	cmp	r3, #2
 8007fd8:	d010      	beq.n	8007ffc <USBD_LL_SetupStage+0x66>
 8007fda:	e017      	b.n	800800c <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007fe2:	4619      	mov	r1, r3
 8007fe4:	6878      	ldr	r0, [r7, #4]
 8007fe6:	f000 f9cb 	bl	8008380 <USBD_StdDevReq>
      break;
 8007fea:	e01a      	b.n	8008022 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007ff2:	4619      	mov	r1, r3
 8007ff4:	6878      	ldr	r0, [r7, #4]
 8007ff6:	f000 fa2d 	bl	8008454 <USBD_StdItfReq>
      break;
 8007ffa:	e012      	b.n	8008022 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008002:	4619      	mov	r1, r3
 8008004:	6878      	ldr	r0, [r7, #4]
 8008006:	f000 fa6b 	bl	80084e0 <USBD_StdEPReq>
      break;
 800800a:	e00a      	b.n	8008022 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008012:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008016:	b2db      	uxtb	r3, r3
 8008018:	4619      	mov	r1, r3
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f002 fd0e 	bl	800aa3c <USBD_LL_StallEP>
      break;
 8008020:	bf00      	nop
  }

  return USBD_OK;
 8008022:	2300      	movs	r3, #0
}
 8008024:	4618      	mov	r0, r3
 8008026:	3708      	adds	r7, #8
 8008028:	46bd      	mov	sp, r7
 800802a:	bd80      	pop	{r7, pc}

0800802c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b086      	sub	sp, #24
 8008030:	af00      	add	r7, sp, #0
 8008032:	60f8      	str	r0, [r7, #12]
 8008034:	460b      	mov	r3, r1
 8008036:	607a      	str	r2, [r7, #4]
 8008038:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800803a:	7afb      	ldrb	r3, [r7, #11]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d14b      	bne.n	80080d8 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008046:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800804e:	2b03      	cmp	r3, #3
 8008050:	d134      	bne.n	80080bc <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8008052:	697b      	ldr	r3, [r7, #20]
 8008054:	68da      	ldr	r2, [r3, #12]
 8008056:	697b      	ldr	r3, [r7, #20]
 8008058:	691b      	ldr	r3, [r3, #16]
 800805a:	429a      	cmp	r2, r3
 800805c:	d919      	bls.n	8008092 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800805e:	697b      	ldr	r3, [r7, #20]
 8008060:	68da      	ldr	r2, [r3, #12]
 8008062:	697b      	ldr	r3, [r7, #20]
 8008064:	691b      	ldr	r3, [r3, #16]
 8008066:	1ad2      	subs	r2, r2, r3
 8008068:	697b      	ldr	r3, [r7, #20]
 800806a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800806c:	697b      	ldr	r3, [r7, #20]
 800806e:	68da      	ldr	r2, [r3, #12]
 8008070:	697b      	ldr	r3, [r7, #20]
 8008072:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008074:	429a      	cmp	r2, r3
 8008076:	d203      	bcs.n	8008080 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008078:	697b      	ldr	r3, [r7, #20]
 800807a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800807c:	b29b      	uxth	r3, r3
 800807e:	e002      	b.n	8008086 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008080:	697b      	ldr	r3, [r7, #20]
 8008082:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008084:	b29b      	uxth	r3, r3
 8008086:	461a      	mov	r2, r3
 8008088:	6879      	ldr	r1, [r7, #4]
 800808a:	68f8      	ldr	r0, [r7, #12]
 800808c:	f000 ff4c 	bl	8008f28 <USBD_CtlContinueRx>
 8008090:	e038      	b.n	8008104 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008098:	691b      	ldr	r3, [r3, #16]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d00a      	beq.n	80080b4 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80080a4:	2b03      	cmp	r3, #3
 80080a6:	d105      	bne.n	80080b4 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080ae:	691b      	ldr	r3, [r3, #16]
 80080b0:	68f8      	ldr	r0, [r7, #12]
 80080b2:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80080b4:	68f8      	ldr	r0, [r7, #12]
 80080b6:	f000 ff49 	bl	8008f4c <USBD_CtlSendStatus>
 80080ba:	e023      	b.n	8008104 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80080c2:	2b05      	cmp	r3, #5
 80080c4:	d11e      	bne.n	8008104 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	2200      	movs	r2, #0
 80080ca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80080ce:	2100      	movs	r1, #0
 80080d0:	68f8      	ldr	r0, [r7, #12]
 80080d2:	f002 fcb3 	bl	800aa3c <USBD_LL_StallEP>
 80080d6:	e015      	b.n	8008104 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080de:	699b      	ldr	r3, [r3, #24]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d00d      	beq.n	8008100 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80080ea:	2b03      	cmp	r3, #3
 80080ec:	d108      	bne.n	8008100 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080f4:	699b      	ldr	r3, [r3, #24]
 80080f6:	7afa      	ldrb	r2, [r7, #11]
 80080f8:	4611      	mov	r1, r2
 80080fa:	68f8      	ldr	r0, [r7, #12]
 80080fc:	4798      	blx	r3
 80080fe:	e001      	b.n	8008104 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008100:	2302      	movs	r3, #2
 8008102:	e000      	b.n	8008106 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8008104:	2300      	movs	r3, #0
}
 8008106:	4618      	mov	r0, r3
 8008108:	3718      	adds	r7, #24
 800810a:	46bd      	mov	sp, r7
 800810c:	bd80      	pop	{r7, pc}

0800810e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800810e:	b580      	push	{r7, lr}
 8008110:	b086      	sub	sp, #24
 8008112:	af00      	add	r7, sp, #0
 8008114:	60f8      	str	r0, [r7, #12]
 8008116:	460b      	mov	r3, r1
 8008118:	607a      	str	r2, [r7, #4]
 800811a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800811c:	7afb      	ldrb	r3, [r7, #11]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d17f      	bne.n	8008222 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	3314      	adds	r3, #20
 8008126:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800812e:	2b02      	cmp	r3, #2
 8008130:	d15c      	bne.n	80081ec <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8008132:	697b      	ldr	r3, [r7, #20]
 8008134:	68da      	ldr	r2, [r3, #12]
 8008136:	697b      	ldr	r3, [r7, #20]
 8008138:	691b      	ldr	r3, [r3, #16]
 800813a:	429a      	cmp	r2, r3
 800813c:	d915      	bls.n	800816a <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800813e:	697b      	ldr	r3, [r7, #20]
 8008140:	68da      	ldr	r2, [r3, #12]
 8008142:	697b      	ldr	r3, [r7, #20]
 8008144:	691b      	ldr	r3, [r3, #16]
 8008146:	1ad2      	subs	r2, r2, r3
 8008148:	697b      	ldr	r3, [r7, #20]
 800814a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800814c:	697b      	ldr	r3, [r7, #20]
 800814e:	68db      	ldr	r3, [r3, #12]
 8008150:	b29b      	uxth	r3, r3
 8008152:	461a      	mov	r2, r3
 8008154:	6879      	ldr	r1, [r7, #4]
 8008156:	68f8      	ldr	r0, [r7, #12]
 8008158:	f000 feb6 	bl	8008ec8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800815c:	2300      	movs	r3, #0
 800815e:	2200      	movs	r2, #0
 8008160:	2100      	movs	r1, #0
 8008162:	68f8      	ldr	r0, [r7, #12]
 8008164:	f002 fd16 	bl	800ab94 <USBD_LL_PrepareReceive>
 8008168:	e04e      	b.n	8008208 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800816a:	697b      	ldr	r3, [r7, #20]
 800816c:	689b      	ldr	r3, [r3, #8]
 800816e:	697a      	ldr	r2, [r7, #20]
 8008170:	6912      	ldr	r2, [r2, #16]
 8008172:	fbb3 f1f2 	udiv	r1, r3, r2
 8008176:	fb02 f201 	mul.w	r2, r2, r1
 800817a:	1a9b      	subs	r3, r3, r2
 800817c:	2b00      	cmp	r3, #0
 800817e:	d11c      	bne.n	80081ba <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8008180:	697b      	ldr	r3, [r7, #20]
 8008182:	689a      	ldr	r2, [r3, #8]
 8008184:	697b      	ldr	r3, [r7, #20]
 8008186:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008188:	429a      	cmp	r2, r3
 800818a:	d316      	bcc.n	80081ba <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800818c:	697b      	ldr	r3, [r7, #20]
 800818e:	689a      	ldr	r2, [r3, #8]
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008196:	429a      	cmp	r2, r3
 8008198:	d20f      	bcs.n	80081ba <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800819a:	2200      	movs	r2, #0
 800819c:	2100      	movs	r1, #0
 800819e:	68f8      	ldr	r0, [r7, #12]
 80081a0:	f000 fe92 	bl	8008ec8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	2200      	movs	r2, #0
 80081a8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80081ac:	2300      	movs	r3, #0
 80081ae:	2200      	movs	r2, #0
 80081b0:	2100      	movs	r1, #0
 80081b2:	68f8      	ldr	r0, [r7, #12]
 80081b4:	f002 fcee 	bl	800ab94 <USBD_LL_PrepareReceive>
 80081b8:	e026      	b.n	8008208 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081c0:	68db      	ldr	r3, [r3, #12]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d00a      	beq.n	80081dc <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80081cc:	2b03      	cmp	r3, #3
 80081ce:	d105      	bne.n	80081dc <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081d6:	68db      	ldr	r3, [r3, #12]
 80081d8:	68f8      	ldr	r0, [r7, #12]
 80081da:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80081dc:	2180      	movs	r1, #128	; 0x80
 80081de:	68f8      	ldr	r0, [r7, #12]
 80081e0:	f002 fc2c 	bl	800aa3c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80081e4:	68f8      	ldr	r0, [r7, #12]
 80081e6:	f000 fec4 	bl	8008f72 <USBD_CtlReceiveStatus>
 80081ea:	e00d      	b.n	8008208 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80081f2:	2b04      	cmp	r3, #4
 80081f4:	d004      	beq.n	8008200 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d103      	bne.n	8008208 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008200:	2180      	movs	r1, #128	; 0x80
 8008202:	68f8      	ldr	r0, [r7, #12]
 8008204:	f002 fc1a 	bl	800aa3c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800820e:	2b01      	cmp	r3, #1
 8008210:	d11d      	bne.n	800824e <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8008212:	68f8      	ldr	r0, [r7, #12]
 8008214:	f7ff fe83 	bl	8007f1e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	2200      	movs	r2, #0
 800821c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008220:	e015      	b.n	800824e <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008228:	695b      	ldr	r3, [r3, #20]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d00d      	beq.n	800824a <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008234:	2b03      	cmp	r3, #3
 8008236:	d108      	bne.n	800824a <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800823e:	695b      	ldr	r3, [r3, #20]
 8008240:	7afa      	ldrb	r2, [r7, #11]
 8008242:	4611      	mov	r1, r2
 8008244:	68f8      	ldr	r0, [r7, #12]
 8008246:	4798      	blx	r3
 8008248:	e001      	b.n	800824e <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800824a:	2302      	movs	r3, #2
 800824c:	e000      	b.n	8008250 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800824e:	2300      	movs	r3, #0
}
 8008250:	4618      	mov	r0, r3
 8008252:	3718      	adds	r7, #24
 8008254:	46bd      	mov	sp, r7
 8008256:	bd80      	pop	{r7, pc}

08008258 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b082      	sub	sp, #8
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008260:	2340      	movs	r3, #64	; 0x40
 8008262:	2200      	movs	r2, #0
 8008264:	2100      	movs	r1, #0
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	f002 fba3 	bl	800a9b2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2201      	movs	r2, #1
 8008270:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2240      	movs	r2, #64	; 0x40
 8008278:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800827c:	2340      	movs	r3, #64	; 0x40
 800827e:	2200      	movs	r2, #0
 8008280:	2180      	movs	r1, #128	; 0x80
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f002 fb95 	bl	800a9b2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2201      	movs	r2, #1
 800828c:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2240      	movs	r2, #64	; 0x40
 8008292:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2201      	movs	r2, #1
 8008298:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2200      	movs	r2, #0
 80082a0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2200      	movs	r2, #0
 80082a8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	2200      	movs	r2, #0
 80082ae:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d009      	beq.n	80082d0 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082c2:	685b      	ldr	r3, [r3, #4]
 80082c4:	687a      	ldr	r2, [r7, #4]
 80082c6:	6852      	ldr	r2, [r2, #4]
 80082c8:	b2d2      	uxtb	r2, r2
 80082ca:	4611      	mov	r1, r2
 80082cc:	6878      	ldr	r0, [r7, #4]
 80082ce:	4798      	blx	r3
  }

  return USBD_OK;
 80082d0:	2300      	movs	r3, #0
}
 80082d2:	4618      	mov	r0, r3
 80082d4:	3708      	adds	r7, #8
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bd80      	pop	{r7, pc}

080082da <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80082da:	b480      	push	{r7}
 80082dc:	b083      	sub	sp, #12
 80082de:	af00      	add	r7, sp, #0
 80082e0:	6078      	str	r0, [r7, #4]
 80082e2:	460b      	mov	r3, r1
 80082e4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	78fa      	ldrb	r2, [r7, #3]
 80082ea:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80082ec:	2300      	movs	r3, #0
}
 80082ee:	4618      	mov	r0, r3
 80082f0:	370c      	adds	r7, #12
 80082f2:	46bd      	mov	sp, r7
 80082f4:	bc80      	pop	{r7}
 80082f6:	4770      	bx	lr

080082f8 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80082f8:	b480      	push	{r7}
 80082fa:	b083      	sub	sp, #12
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2204      	movs	r2, #4
 8008310:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008314:	2300      	movs	r3, #0
}
 8008316:	4618      	mov	r0, r3
 8008318:	370c      	adds	r7, #12
 800831a:	46bd      	mov	sp, r7
 800831c:	bc80      	pop	{r7}
 800831e:	4770      	bx	lr

08008320 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008320:	b480      	push	{r7}
 8008322:	b083      	sub	sp, #12
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800832e:	2b04      	cmp	r3, #4
 8008330:	d105      	bne.n	800833e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800833e:	2300      	movs	r3, #0
}
 8008340:	4618      	mov	r0, r3
 8008342:	370c      	adds	r7, #12
 8008344:	46bd      	mov	sp, r7
 8008346:	bc80      	pop	{r7}
 8008348:	4770      	bx	lr

0800834a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800834a:	b580      	push	{r7, lr}
 800834c:	b082      	sub	sp, #8
 800834e:	af00      	add	r7, sp, #0
 8008350:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008358:	2b03      	cmp	r3, #3
 800835a:	d10b      	bne.n	8008374 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008362:	69db      	ldr	r3, [r3, #28]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d005      	beq.n	8008374 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800836e:	69db      	ldr	r3, [r3, #28]
 8008370:	6878      	ldr	r0, [r7, #4]
 8008372:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008374:	2300      	movs	r3, #0
}
 8008376:	4618      	mov	r0, r3
 8008378:	3708      	adds	r7, #8
 800837a:	46bd      	mov	sp, r7
 800837c:	bd80      	pop	{r7, pc}
	...

08008380 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b084      	sub	sp, #16
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
 8008388:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800838a:	2300      	movs	r3, #0
 800838c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	781b      	ldrb	r3, [r3, #0]
 8008392:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008396:	2b20      	cmp	r3, #32
 8008398:	d004      	beq.n	80083a4 <USBD_StdDevReq+0x24>
 800839a:	2b40      	cmp	r3, #64	; 0x40
 800839c:	d002      	beq.n	80083a4 <USBD_StdDevReq+0x24>
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d008      	beq.n	80083b4 <USBD_StdDevReq+0x34>
 80083a2:	e04c      	b.n	800843e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083aa:	689b      	ldr	r3, [r3, #8]
 80083ac:	6839      	ldr	r1, [r7, #0]
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	4798      	blx	r3
      break;
 80083b2:	e049      	b.n	8008448 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	785b      	ldrb	r3, [r3, #1]
 80083b8:	2b09      	cmp	r3, #9
 80083ba:	d83a      	bhi.n	8008432 <USBD_StdDevReq+0xb2>
 80083bc:	a201      	add	r2, pc, #4	; (adr r2, 80083c4 <USBD_StdDevReq+0x44>)
 80083be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083c2:	bf00      	nop
 80083c4:	08008415 	.word	0x08008415
 80083c8:	08008429 	.word	0x08008429
 80083cc:	08008433 	.word	0x08008433
 80083d0:	0800841f 	.word	0x0800841f
 80083d4:	08008433 	.word	0x08008433
 80083d8:	080083f7 	.word	0x080083f7
 80083dc:	080083ed 	.word	0x080083ed
 80083e0:	08008433 	.word	0x08008433
 80083e4:	0800840b 	.word	0x0800840b
 80083e8:	08008401 	.word	0x08008401
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80083ec:	6839      	ldr	r1, [r7, #0]
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	f000 f9d4 	bl	800879c <USBD_GetDescriptor>
          break;
 80083f4:	e022      	b.n	800843c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80083f6:	6839      	ldr	r1, [r7, #0]
 80083f8:	6878      	ldr	r0, [r7, #4]
 80083fa:	f000 fb37 	bl	8008a6c <USBD_SetAddress>
          break;
 80083fe:	e01d      	b.n	800843c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008400:	6839      	ldr	r1, [r7, #0]
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f000 fb74 	bl	8008af0 <USBD_SetConfig>
          break;
 8008408:	e018      	b.n	800843c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800840a:	6839      	ldr	r1, [r7, #0]
 800840c:	6878      	ldr	r0, [r7, #4]
 800840e:	f000 fbfd 	bl	8008c0c <USBD_GetConfig>
          break;
 8008412:	e013      	b.n	800843c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008414:	6839      	ldr	r1, [r7, #0]
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	f000 fc2c 	bl	8008c74 <USBD_GetStatus>
          break;
 800841c:	e00e      	b.n	800843c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800841e:	6839      	ldr	r1, [r7, #0]
 8008420:	6878      	ldr	r0, [r7, #4]
 8008422:	f000 fc5a 	bl	8008cda <USBD_SetFeature>
          break;
 8008426:	e009      	b.n	800843c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008428:	6839      	ldr	r1, [r7, #0]
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	f000 fc69 	bl	8008d02 <USBD_ClrFeature>
          break;
 8008430:	e004      	b.n	800843c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8008432:	6839      	ldr	r1, [r7, #0]
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f000 fcc1 	bl	8008dbc <USBD_CtlError>
          break;
 800843a:	bf00      	nop
      }
      break;
 800843c:	e004      	b.n	8008448 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800843e:	6839      	ldr	r1, [r7, #0]
 8008440:	6878      	ldr	r0, [r7, #4]
 8008442:	f000 fcbb 	bl	8008dbc <USBD_CtlError>
      break;
 8008446:	bf00      	nop
  }

  return ret;
 8008448:	7bfb      	ldrb	r3, [r7, #15]
}
 800844a:	4618      	mov	r0, r3
 800844c:	3710      	adds	r7, #16
 800844e:	46bd      	mov	sp, r7
 8008450:	bd80      	pop	{r7, pc}
 8008452:	bf00      	nop

08008454 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b084      	sub	sp, #16
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
 800845c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800845e:	2300      	movs	r3, #0
 8008460:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	781b      	ldrb	r3, [r3, #0]
 8008466:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800846a:	2b20      	cmp	r3, #32
 800846c:	d003      	beq.n	8008476 <USBD_StdItfReq+0x22>
 800846e:	2b40      	cmp	r3, #64	; 0x40
 8008470:	d001      	beq.n	8008476 <USBD_StdItfReq+0x22>
 8008472:	2b00      	cmp	r3, #0
 8008474:	d12a      	bne.n	80084cc <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800847c:	3b01      	subs	r3, #1
 800847e:	2b02      	cmp	r3, #2
 8008480:	d81d      	bhi.n	80084be <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	889b      	ldrh	r3, [r3, #4]
 8008486:	b2db      	uxtb	r3, r3
 8008488:	2b01      	cmp	r3, #1
 800848a:	d813      	bhi.n	80084b4 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008492:	689b      	ldr	r3, [r3, #8]
 8008494:	6839      	ldr	r1, [r7, #0]
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	4798      	blx	r3
 800849a:	4603      	mov	r3, r0
 800849c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	88db      	ldrh	r3, [r3, #6]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d110      	bne.n	80084c8 <USBD_StdItfReq+0x74>
 80084a6:	7bfb      	ldrb	r3, [r7, #15]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d10d      	bne.n	80084c8 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 80084ac:	6878      	ldr	r0, [r7, #4]
 80084ae:	f000 fd4d 	bl	8008f4c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80084b2:	e009      	b.n	80084c8 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 80084b4:	6839      	ldr	r1, [r7, #0]
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f000 fc80 	bl	8008dbc <USBD_CtlError>
          break;
 80084bc:	e004      	b.n	80084c8 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 80084be:	6839      	ldr	r1, [r7, #0]
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	f000 fc7b 	bl	8008dbc <USBD_CtlError>
          break;
 80084c6:	e000      	b.n	80084ca <USBD_StdItfReq+0x76>
          break;
 80084c8:	bf00      	nop
      }
      break;
 80084ca:	e004      	b.n	80084d6 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 80084cc:	6839      	ldr	r1, [r7, #0]
 80084ce:	6878      	ldr	r0, [r7, #4]
 80084d0:	f000 fc74 	bl	8008dbc <USBD_CtlError>
      break;
 80084d4:	bf00      	nop
  }

  return USBD_OK;
 80084d6:	2300      	movs	r3, #0
}
 80084d8:	4618      	mov	r0, r3
 80084da:	3710      	adds	r7, #16
 80084dc:	46bd      	mov	sp, r7
 80084de:	bd80      	pop	{r7, pc}

080084e0 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b084      	sub	sp, #16
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
 80084e8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80084ea:	2300      	movs	r3, #0
 80084ec:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	889b      	ldrh	r3, [r3, #4]
 80084f2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	781b      	ldrb	r3, [r3, #0]
 80084f8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80084fc:	2b20      	cmp	r3, #32
 80084fe:	d004      	beq.n	800850a <USBD_StdEPReq+0x2a>
 8008500:	2b40      	cmp	r3, #64	; 0x40
 8008502:	d002      	beq.n	800850a <USBD_StdEPReq+0x2a>
 8008504:	2b00      	cmp	r3, #0
 8008506:	d008      	beq.n	800851a <USBD_StdEPReq+0x3a>
 8008508:	e13d      	b.n	8008786 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008510:	689b      	ldr	r3, [r3, #8]
 8008512:	6839      	ldr	r1, [r7, #0]
 8008514:	6878      	ldr	r0, [r7, #4]
 8008516:	4798      	blx	r3
      break;
 8008518:	e13a      	b.n	8008790 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	781b      	ldrb	r3, [r3, #0]
 800851e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008522:	2b20      	cmp	r3, #32
 8008524:	d10a      	bne.n	800853c <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800852c:	689b      	ldr	r3, [r3, #8]
 800852e:	6839      	ldr	r1, [r7, #0]
 8008530:	6878      	ldr	r0, [r7, #4]
 8008532:	4798      	blx	r3
 8008534:	4603      	mov	r3, r0
 8008536:	73fb      	strb	r3, [r7, #15]

        return ret;
 8008538:	7bfb      	ldrb	r3, [r7, #15]
 800853a:	e12a      	b.n	8008792 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	785b      	ldrb	r3, [r3, #1]
 8008540:	2b01      	cmp	r3, #1
 8008542:	d03e      	beq.n	80085c2 <USBD_StdEPReq+0xe2>
 8008544:	2b03      	cmp	r3, #3
 8008546:	d002      	beq.n	800854e <USBD_StdEPReq+0x6e>
 8008548:	2b00      	cmp	r3, #0
 800854a:	d070      	beq.n	800862e <USBD_StdEPReq+0x14e>
 800854c:	e115      	b.n	800877a <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008554:	2b02      	cmp	r3, #2
 8008556:	d002      	beq.n	800855e <USBD_StdEPReq+0x7e>
 8008558:	2b03      	cmp	r3, #3
 800855a:	d015      	beq.n	8008588 <USBD_StdEPReq+0xa8>
 800855c:	e02b      	b.n	80085b6 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800855e:	7bbb      	ldrb	r3, [r7, #14]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d00c      	beq.n	800857e <USBD_StdEPReq+0x9e>
 8008564:	7bbb      	ldrb	r3, [r7, #14]
 8008566:	2b80      	cmp	r3, #128	; 0x80
 8008568:	d009      	beq.n	800857e <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800856a:	7bbb      	ldrb	r3, [r7, #14]
 800856c:	4619      	mov	r1, r3
 800856e:	6878      	ldr	r0, [r7, #4]
 8008570:	f002 fa64 	bl	800aa3c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008574:	2180      	movs	r1, #128	; 0x80
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f002 fa60 	bl	800aa3c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800857c:	e020      	b.n	80085c0 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 800857e:	6839      	ldr	r1, [r7, #0]
 8008580:	6878      	ldr	r0, [r7, #4]
 8008582:	f000 fc1b 	bl	8008dbc <USBD_CtlError>
              break;
 8008586:	e01b      	b.n	80085c0 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	885b      	ldrh	r3, [r3, #2]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d10e      	bne.n	80085ae <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8008590:	7bbb      	ldrb	r3, [r7, #14]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d00b      	beq.n	80085ae <USBD_StdEPReq+0xce>
 8008596:	7bbb      	ldrb	r3, [r7, #14]
 8008598:	2b80      	cmp	r3, #128	; 0x80
 800859a:	d008      	beq.n	80085ae <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	88db      	ldrh	r3, [r3, #6]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d104      	bne.n	80085ae <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80085a4:	7bbb      	ldrb	r3, [r7, #14]
 80085a6:	4619      	mov	r1, r3
 80085a8:	6878      	ldr	r0, [r7, #4]
 80085aa:	f002 fa47 	bl	800aa3c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	f000 fccc 	bl	8008f4c <USBD_CtlSendStatus>

              break;
 80085b4:	e004      	b.n	80085c0 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 80085b6:	6839      	ldr	r1, [r7, #0]
 80085b8:	6878      	ldr	r0, [r7, #4]
 80085ba:	f000 fbff 	bl	8008dbc <USBD_CtlError>
              break;
 80085be:	bf00      	nop
          }
          break;
 80085c0:	e0e0      	b.n	8008784 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085c8:	2b02      	cmp	r3, #2
 80085ca:	d002      	beq.n	80085d2 <USBD_StdEPReq+0xf2>
 80085cc:	2b03      	cmp	r3, #3
 80085ce:	d015      	beq.n	80085fc <USBD_StdEPReq+0x11c>
 80085d0:	e026      	b.n	8008620 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80085d2:	7bbb      	ldrb	r3, [r7, #14]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d00c      	beq.n	80085f2 <USBD_StdEPReq+0x112>
 80085d8:	7bbb      	ldrb	r3, [r7, #14]
 80085da:	2b80      	cmp	r3, #128	; 0x80
 80085dc:	d009      	beq.n	80085f2 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80085de:	7bbb      	ldrb	r3, [r7, #14]
 80085e0:	4619      	mov	r1, r3
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	f002 fa2a 	bl	800aa3c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80085e8:	2180      	movs	r1, #128	; 0x80
 80085ea:	6878      	ldr	r0, [r7, #4]
 80085ec:	f002 fa26 	bl	800aa3c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80085f0:	e01c      	b.n	800862c <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 80085f2:	6839      	ldr	r1, [r7, #0]
 80085f4:	6878      	ldr	r0, [r7, #4]
 80085f6:	f000 fbe1 	bl	8008dbc <USBD_CtlError>
              break;
 80085fa:	e017      	b.n	800862c <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	885b      	ldrh	r3, [r3, #2]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d112      	bne.n	800862a <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008604:	7bbb      	ldrb	r3, [r7, #14]
 8008606:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800860a:	2b00      	cmp	r3, #0
 800860c:	d004      	beq.n	8008618 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800860e:	7bbb      	ldrb	r3, [r7, #14]
 8008610:	4619      	mov	r1, r3
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	f002 fa31 	bl	800aa7a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008618:	6878      	ldr	r0, [r7, #4]
 800861a:	f000 fc97 	bl	8008f4c <USBD_CtlSendStatus>
              }
              break;
 800861e:	e004      	b.n	800862a <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8008620:	6839      	ldr	r1, [r7, #0]
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f000 fbca 	bl	8008dbc <USBD_CtlError>
              break;
 8008628:	e000      	b.n	800862c <USBD_StdEPReq+0x14c>
              break;
 800862a:	bf00      	nop
          }
          break;
 800862c:	e0aa      	b.n	8008784 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008634:	2b02      	cmp	r3, #2
 8008636:	d002      	beq.n	800863e <USBD_StdEPReq+0x15e>
 8008638:	2b03      	cmp	r3, #3
 800863a:	d032      	beq.n	80086a2 <USBD_StdEPReq+0x1c2>
 800863c:	e097      	b.n	800876e <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800863e:	7bbb      	ldrb	r3, [r7, #14]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d007      	beq.n	8008654 <USBD_StdEPReq+0x174>
 8008644:	7bbb      	ldrb	r3, [r7, #14]
 8008646:	2b80      	cmp	r3, #128	; 0x80
 8008648:	d004      	beq.n	8008654 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 800864a:	6839      	ldr	r1, [r7, #0]
 800864c:	6878      	ldr	r0, [r7, #4]
 800864e:	f000 fbb5 	bl	8008dbc <USBD_CtlError>
                break;
 8008652:	e091      	b.n	8008778 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008654:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008658:	2b00      	cmp	r3, #0
 800865a:	da0b      	bge.n	8008674 <USBD_StdEPReq+0x194>
 800865c:	7bbb      	ldrb	r3, [r7, #14]
 800865e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008662:	4613      	mov	r3, r2
 8008664:	009b      	lsls	r3, r3, #2
 8008666:	4413      	add	r3, r2
 8008668:	009b      	lsls	r3, r3, #2
 800866a:	3310      	adds	r3, #16
 800866c:	687a      	ldr	r2, [r7, #4]
 800866e:	4413      	add	r3, r2
 8008670:	3304      	adds	r3, #4
 8008672:	e00b      	b.n	800868c <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008674:	7bbb      	ldrb	r3, [r7, #14]
 8008676:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800867a:	4613      	mov	r3, r2
 800867c:	009b      	lsls	r3, r3, #2
 800867e:	4413      	add	r3, r2
 8008680:	009b      	lsls	r3, r3, #2
 8008682:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008686:	687a      	ldr	r2, [r7, #4]
 8008688:	4413      	add	r3, r2
 800868a:	3304      	adds	r3, #4
 800868c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800868e:	68bb      	ldr	r3, [r7, #8]
 8008690:	2200      	movs	r2, #0
 8008692:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008694:	68bb      	ldr	r3, [r7, #8]
 8008696:	2202      	movs	r2, #2
 8008698:	4619      	mov	r1, r3
 800869a:	6878      	ldr	r0, [r7, #4]
 800869c:	f000 fbf8 	bl	8008e90 <USBD_CtlSendData>
              break;
 80086a0:	e06a      	b.n	8008778 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80086a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	da11      	bge.n	80086ce <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80086aa:	7bbb      	ldrb	r3, [r7, #14]
 80086ac:	f003 020f 	and.w	r2, r3, #15
 80086b0:	6879      	ldr	r1, [r7, #4]
 80086b2:	4613      	mov	r3, r2
 80086b4:	009b      	lsls	r3, r3, #2
 80086b6:	4413      	add	r3, r2
 80086b8:	009b      	lsls	r3, r3, #2
 80086ba:	440b      	add	r3, r1
 80086bc:	3318      	adds	r3, #24
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d117      	bne.n	80086f4 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 80086c4:	6839      	ldr	r1, [r7, #0]
 80086c6:	6878      	ldr	r0, [r7, #4]
 80086c8:	f000 fb78 	bl	8008dbc <USBD_CtlError>
                  break;
 80086cc:	e054      	b.n	8008778 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80086ce:	7bbb      	ldrb	r3, [r7, #14]
 80086d0:	f003 020f 	and.w	r2, r3, #15
 80086d4:	6879      	ldr	r1, [r7, #4]
 80086d6:	4613      	mov	r3, r2
 80086d8:	009b      	lsls	r3, r3, #2
 80086da:	4413      	add	r3, r2
 80086dc:	009b      	lsls	r3, r3, #2
 80086de:	440b      	add	r3, r1
 80086e0:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d104      	bne.n	80086f4 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 80086ea:	6839      	ldr	r1, [r7, #0]
 80086ec:	6878      	ldr	r0, [r7, #4]
 80086ee:	f000 fb65 	bl	8008dbc <USBD_CtlError>
                  break;
 80086f2:	e041      	b.n	8008778 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80086f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	da0b      	bge.n	8008714 <USBD_StdEPReq+0x234>
 80086fc:	7bbb      	ldrb	r3, [r7, #14]
 80086fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008702:	4613      	mov	r3, r2
 8008704:	009b      	lsls	r3, r3, #2
 8008706:	4413      	add	r3, r2
 8008708:	009b      	lsls	r3, r3, #2
 800870a:	3310      	adds	r3, #16
 800870c:	687a      	ldr	r2, [r7, #4]
 800870e:	4413      	add	r3, r2
 8008710:	3304      	adds	r3, #4
 8008712:	e00b      	b.n	800872c <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008714:	7bbb      	ldrb	r3, [r7, #14]
 8008716:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800871a:	4613      	mov	r3, r2
 800871c:	009b      	lsls	r3, r3, #2
 800871e:	4413      	add	r3, r2
 8008720:	009b      	lsls	r3, r3, #2
 8008722:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008726:	687a      	ldr	r2, [r7, #4]
 8008728:	4413      	add	r3, r2
 800872a:	3304      	adds	r3, #4
 800872c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800872e:	7bbb      	ldrb	r3, [r7, #14]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d002      	beq.n	800873a <USBD_StdEPReq+0x25a>
 8008734:	7bbb      	ldrb	r3, [r7, #14]
 8008736:	2b80      	cmp	r3, #128	; 0x80
 8008738:	d103      	bne.n	8008742 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 800873a:	68bb      	ldr	r3, [r7, #8]
 800873c:	2200      	movs	r2, #0
 800873e:	601a      	str	r2, [r3, #0]
 8008740:	e00e      	b.n	8008760 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008742:	7bbb      	ldrb	r3, [r7, #14]
 8008744:	4619      	mov	r1, r3
 8008746:	6878      	ldr	r0, [r7, #4]
 8008748:	f002 f9b6 	bl	800aab8 <USBD_LL_IsStallEP>
 800874c:	4603      	mov	r3, r0
 800874e:	2b00      	cmp	r3, #0
 8008750:	d003      	beq.n	800875a <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8008752:	68bb      	ldr	r3, [r7, #8]
 8008754:	2201      	movs	r2, #1
 8008756:	601a      	str	r2, [r3, #0]
 8008758:	e002      	b.n	8008760 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 800875a:	68bb      	ldr	r3, [r7, #8]
 800875c:	2200      	movs	r2, #0
 800875e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008760:	68bb      	ldr	r3, [r7, #8]
 8008762:	2202      	movs	r2, #2
 8008764:	4619      	mov	r1, r3
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f000 fb92 	bl	8008e90 <USBD_CtlSendData>
              break;
 800876c:	e004      	b.n	8008778 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 800876e:	6839      	ldr	r1, [r7, #0]
 8008770:	6878      	ldr	r0, [r7, #4]
 8008772:	f000 fb23 	bl	8008dbc <USBD_CtlError>
              break;
 8008776:	bf00      	nop
          }
          break;
 8008778:	e004      	b.n	8008784 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 800877a:	6839      	ldr	r1, [r7, #0]
 800877c:	6878      	ldr	r0, [r7, #4]
 800877e:	f000 fb1d 	bl	8008dbc <USBD_CtlError>
          break;
 8008782:	bf00      	nop
      }
      break;
 8008784:	e004      	b.n	8008790 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8008786:	6839      	ldr	r1, [r7, #0]
 8008788:	6878      	ldr	r0, [r7, #4]
 800878a:	f000 fb17 	bl	8008dbc <USBD_CtlError>
      break;
 800878e:	bf00      	nop
  }

  return ret;
 8008790:	7bfb      	ldrb	r3, [r7, #15]
}
 8008792:	4618      	mov	r0, r3
 8008794:	3710      	adds	r7, #16
 8008796:	46bd      	mov	sp, r7
 8008798:	bd80      	pop	{r7, pc}
	...

0800879c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800879c:	b580      	push	{r7, lr}
 800879e:	b084      	sub	sp, #16
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
 80087a4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80087a6:	2300      	movs	r3, #0
 80087a8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80087aa:	2300      	movs	r3, #0
 80087ac:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80087ae:	2300      	movs	r3, #0
 80087b0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	885b      	ldrh	r3, [r3, #2]
 80087b6:	0a1b      	lsrs	r3, r3, #8
 80087b8:	b29b      	uxth	r3, r3
 80087ba:	3b01      	subs	r3, #1
 80087bc:	2b06      	cmp	r3, #6
 80087be:	f200 8128 	bhi.w	8008a12 <USBD_GetDescriptor+0x276>
 80087c2:	a201      	add	r2, pc, #4	; (adr r2, 80087c8 <USBD_GetDescriptor+0x2c>)
 80087c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087c8:	080087e5 	.word	0x080087e5
 80087cc:	080087fd 	.word	0x080087fd
 80087d0:	0800883d 	.word	0x0800883d
 80087d4:	08008a13 	.word	0x08008a13
 80087d8:	08008a13 	.word	0x08008a13
 80087dc:	080089b3 	.word	0x080089b3
 80087e0:	080089df 	.word	0x080089df
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	687a      	ldr	r2, [r7, #4]
 80087ee:	7c12      	ldrb	r2, [r2, #16]
 80087f0:	f107 0108 	add.w	r1, r7, #8
 80087f4:	4610      	mov	r0, r2
 80087f6:	4798      	blx	r3
 80087f8:	60f8      	str	r0, [r7, #12]
      break;
 80087fa:	e112      	b.n	8008a22 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	7c1b      	ldrb	r3, [r3, #16]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d10d      	bne.n	8008820 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800880a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800880c:	f107 0208 	add.w	r2, r7, #8
 8008810:	4610      	mov	r0, r2
 8008812:	4798      	blx	r3
 8008814:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	3301      	adds	r3, #1
 800881a:	2202      	movs	r2, #2
 800881c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800881e:	e100      	b.n	8008a22 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008828:	f107 0208 	add.w	r2, r7, #8
 800882c:	4610      	mov	r0, r2
 800882e:	4798      	blx	r3
 8008830:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	3301      	adds	r3, #1
 8008836:	2202      	movs	r2, #2
 8008838:	701a      	strb	r2, [r3, #0]
      break;
 800883a:	e0f2      	b.n	8008a22 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	885b      	ldrh	r3, [r3, #2]
 8008840:	b2db      	uxtb	r3, r3
 8008842:	2b05      	cmp	r3, #5
 8008844:	f200 80ac 	bhi.w	80089a0 <USBD_GetDescriptor+0x204>
 8008848:	a201      	add	r2, pc, #4	; (adr r2, 8008850 <USBD_GetDescriptor+0xb4>)
 800884a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800884e:	bf00      	nop
 8008850:	08008869 	.word	0x08008869
 8008854:	0800889d 	.word	0x0800889d
 8008858:	080088d1 	.word	0x080088d1
 800885c:	08008905 	.word	0x08008905
 8008860:	08008939 	.word	0x08008939
 8008864:	0800896d 	.word	0x0800896d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800886e:	685b      	ldr	r3, [r3, #4]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d00b      	beq.n	800888c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800887a:	685b      	ldr	r3, [r3, #4]
 800887c:	687a      	ldr	r2, [r7, #4]
 800887e:	7c12      	ldrb	r2, [r2, #16]
 8008880:	f107 0108 	add.w	r1, r7, #8
 8008884:	4610      	mov	r0, r2
 8008886:	4798      	blx	r3
 8008888:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800888a:	e091      	b.n	80089b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800888c:	6839      	ldr	r1, [r7, #0]
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	f000 fa94 	bl	8008dbc <USBD_CtlError>
            err++;
 8008894:	7afb      	ldrb	r3, [r7, #11]
 8008896:	3301      	adds	r3, #1
 8008898:	72fb      	strb	r3, [r7, #11]
          break;
 800889a:	e089      	b.n	80089b0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80088a2:	689b      	ldr	r3, [r3, #8]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d00b      	beq.n	80088c0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80088ae:	689b      	ldr	r3, [r3, #8]
 80088b0:	687a      	ldr	r2, [r7, #4]
 80088b2:	7c12      	ldrb	r2, [r2, #16]
 80088b4:	f107 0108 	add.w	r1, r7, #8
 80088b8:	4610      	mov	r0, r2
 80088ba:	4798      	blx	r3
 80088bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80088be:	e077      	b.n	80089b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80088c0:	6839      	ldr	r1, [r7, #0]
 80088c2:	6878      	ldr	r0, [r7, #4]
 80088c4:	f000 fa7a 	bl	8008dbc <USBD_CtlError>
            err++;
 80088c8:	7afb      	ldrb	r3, [r7, #11]
 80088ca:	3301      	adds	r3, #1
 80088cc:	72fb      	strb	r3, [r7, #11]
          break;
 80088ce:	e06f      	b.n	80089b0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80088d6:	68db      	ldr	r3, [r3, #12]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d00b      	beq.n	80088f4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80088e2:	68db      	ldr	r3, [r3, #12]
 80088e4:	687a      	ldr	r2, [r7, #4]
 80088e6:	7c12      	ldrb	r2, [r2, #16]
 80088e8:	f107 0108 	add.w	r1, r7, #8
 80088ec:	4610      	mov	r0, r2
 80088ee:	4798      	blx	r3
 80088f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80088f2:	e05d      	b.n	80089b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80088f4:	6839      	ldr	r1, [r7, #0]
 80088f6:	6878      	ldr	r0, [r7, #4]
 80088f8:	f000 fa60 	bl	8008dbc <USBD_CtlError>
            err++;
 80088fc:	7afb      	ldrb	r3, [r7, #11]
 80088fe:	3301      	adds	r3, #1
 8008900:	72fb      	strb	r3, [r7, #11]
          break;
 8008902:	e055      	b.n	80089b0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800890a:	691b      	ldr	r3, [r3, #16]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d00b      	beq.n	8008928 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008916:	691b      	ldr	r3, [r3, #16]
 8008918:	687a      	ldr	r2, [r7, #4]
 800891a:	7c12      	ldrb	r2, [r2, #16]
 800891c:	f107 0108 	add.w	r1, r7, #8
 8008920:	4610      	mov	r0, r2
 8008922:	4798      	blx	r3
 8008924:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008926:	e043      	b.n	80089b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008928:	6839      	ldr	r1, [r7, #0]
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f000 fa46 	bl	8008dbc <USBD_CtlError>
            err++;
 8008930:	7afb      	ldrb	r3, [r7, #11]
 8008932:	3301      	adds	r3, #1
 8008934:	72fb      	strb	r3, [r7, #11]
          break;
 8008936:	e03b      	b.n	80089b0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800893e:	695b      	ldr	r3, [r3, #20]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d00b      	beq.n	800895c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800894a:	695b      	ldr	r3, [r3, #20]
 800894c:	687a      	ldr	r2, [r7, #4]
 800894e:	7c12      	ldrb	r2, [r2, #16]
 8008950:	f107 0108 	add.w	r1, r7, #8
 8008954:	4610      	mov	r0, r2
 8008956:	4798      	blx	r3
 8008958:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800895a:	e029      	b.n	80089b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800895c:	6839      	ldr	r1, [r7, #0]
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	f000 fa2c 	bl	8008dbc <USBD_CtlError>
            err++;
 8008964:	7afb      	ldrb	r3, [r7, #11]
 8008966:	3301      	adds	r3, #1
 8008968:	72fb      	strb	r3, [r7, #11]
          break;
 800896a:	e021      	b.n	80089b0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008972:	699b      	ldr	r3, [r3, #24]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d00b      	beq.n	8008990 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800897e:	699b      	ldr	r3, [r3, #24]
 8008980:	687a      	ldr	r2, [r7, #4]
 8008982:	7c12      	ldrb	r2, [r2, #16]
 8008984:	f107 0108 	add.w	r1, r7, #8
 8008988:	4610      	mov	r0, r2
 800898a:	4798      	blx	r3
 800898c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800898e:	e00f      	b.n	80089b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008990:	6839      	ldr	r1, [r7, #0]
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	f000 fa12 	bl	8008dbc <USBD_CtlError>
            err++;
 8008998:	7afb      	ldrb	r3, [r7, #11]
 800899a:	3301      	adds	r3, #1
 800899c:	72fb      	strb	r3, [r7, #11]
          break;
 800899e:	e007      	b.n	80089b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80089a0:	6839      	ldr	r1, [r7, #0]
 80089a2:	6878      	ldr	r0, [r7, #4]
 80089a4:	f000 fa0a 	bl	8008dbc <USBD_CtlError>
          err++;
 80089a8:	7afb      	ldrb	r3, [r7, #11]
 80089aa:	3301      	adds	r3, #1
 80089ac:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80089ae:	e038      	b.n	8008a22 <USBD_GetDescriptor+0x286>
 80089b0:	e037      	b.n	8008a22 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	7c1b      	ldrb	r3, [r3, #16]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d109      	bne.n	80089ce <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089c2:	f107 0208 	add.w	r2, r7, #8
 80089c6:	4610      	mov	r0, r2
 80089c8:	4798      	blx	r3
 80089ca:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80089cc:	e029      	b.n	8008a22 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80089ce:	6839      	ldr	r1, [r7, #0]
 80089d0:	6878      	ldr	r0, [r7, #4]
 80089d2:	f000 f9f3 	bl	8008dbc <USBD_CtlError>
        err++;
 80089d6:	7afb      	ldrb	r3, [r7, #11]
 80089d8:	3301      	adds	r3, #1
 80089da:	72fb      	strb	r3, [r7, #11]
      break;
 80089dc:	e021      	b.n	8008a22 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	7c1b      	ldrb	r3, [r3, #16]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d10d      	bne.n	8008a02 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089ee:	f107 0208 	add.w	r2, r7, #8
 80089f2:	4610      	mov	r0, r2
 80089f4:	4798      	blx	r3
 80089f6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	3301      	adds	r3, #1
 80089fc:	2207      	movs	r2, #7
 80089fe:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a00:	e00f      	b.n	8008a22 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008a02:	6839      	ldr	r1, [r7, #0]
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	f000 f9d9 	bl	8008dbc <USBD_CtlError>
        err++;
 8008a0a:	7afb      	ldrb	r3, [r7, #11]
 8008a0c:	3301      	adds	r3, #1
 8008a0e:	72fb      	strb	r3, [r7, #11]
      break;
 8008a10:	e007      	b.n	8008a22 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008a12:	6839      	ldr	r1, [r7, #0]
 8008a14:	6878      	ldr	r0, [r7, #4]
 8008a16:	f000 f9d1 	bl	8008dbc <USBD_CtlError>
      err++;
 8008a1a:	7afb      	ldrb	r3, [r7, #11]
 8008a1c:	3301      	adds	r3, #1
 8008a1e:	72fb      	strb	r3, [r7, #11]
      break;
 8008a20:	bf00      	nop
  }

  if (err != 0U)
 8008a22:	7afb      	ldrb	r3, [r7, #11]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d11c      	bne.n	8008a62 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008a28:	893b      	ldrh	r3, [r7, #8]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d011      	beq.n	8008a52 <USBD_GetDescriptor+0x2b6>
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	88db      	ldrh	r3, [r3, #6]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d00d      	beq.n	8008a52 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	88da      	ldrh	r2, [r3, #6]
 8008a3a:	893b      	ldrh	r3, [r7, #8]
 8008a3c:	4293      	cmp	r3, r2
 8008a3e:	bf28      	it	cs
 8008a40:	4613      	movcs	r3, r2
 8008a42:	b29b      	uxth	r3, r3
 8008a44:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008a46:	893b      	ldrh	r3, [r7, #8]
 8008a48:	461a      	mov	r2, r3
 8008a4a:	68f9      	ldr	r1, [r7, #12]
 8008a4c:	6878      	ldr	r0, [r7, #4]
 8008a4e:	f000 fa1f 	bl	8008e90 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	88db      	ldrh	r3, [r3, #6]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d104      	bne.n	8008a64 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8008a5a:	6878      	ldr	r0, [r7, #4]
 8008a5c:	f000 fa76 	bl	8008f4c <USBD_CtlSendStatus>
 8008a60:	e000      	b.n	8008a64 <USBD_GetDescriptor+0x2c8>
    return;
 8008a62:	bf00      	nop
    }
  }
}
 8008a64:	3710      	adds	r7, #16
 8008a66:	46bd      	mov	sp, r7
 8008a68:	bd80      	pop	{r7, pc}
 8008a6a:	bf00      	nop

08008a6c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b084      	sub	sp, #16
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
 8008a74:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	889b      	ldrh	r3, [r3, #4]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d130      	bne.n	8008ae0 <USBD_SetAddress+0x74>
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	88db      	ldrh	r3, [r3, #6]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d12c      	bne.n	8008ae0 <USBD_SetAddress+0x74>
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	885b      	ldrh	r3, [r3, #2]
 8008a8a:	2b7f      	cmp	r3, #127	; 0x7f
 8008a8c:	d828      	bhi.n	8008ae0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	885b      	ldrh	r3, [r3, #2]
 8008a92:	b2db      	uxtb	r3, r3
 8008a94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a98:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008aa0:	2b03      	cmp	r3, #3
 8008aa2:	d104      	bne.n	8008aae <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008aa4:	6839      	ldr	r1, [r7, #0]
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	f000 f988 	bl	8008dbc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008aac:	e01c      	b.n	8008ae8 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	7bfa      	ldrb	r2, [r7, #15]
 8008ab2:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008ab6:	7bfb      	ldrb	r3, [r7, #15]
 8008ab8:	4619      	mov	r1, r3
 8008aba:	6878      	ldr	r0, [r7, #4]
 8008abc:	f002 f828 	bl	800ab10 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008ac0:	6878      	ldr	r0, [r7, #4]
 8008ac2:	f000 fa43 	bl	8008f4c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008ac6:	7bfb      	ldrb	r3, [r7, #15]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d004      	beq.n	8008ad6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	2202      	movs	r2, #2
 8008ad0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ad4:	e008      	b.n	8008ae8 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2201      	movs	r2, #1
 8008ada:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ade:	e003      	b.n	8008ae8 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008ae0:	6839      	ldr	r1, [r7, #0]
 8008ae2:	6878      	ldr	r0, [r7, #4]
 8008ae4:	f000 f96a 	bl	8008dbc <USBD_CtlError>
  }
}
 8008ae8:	bf00      	nop
 8008aea:	3710      	adds	r7, #16
 8008aec:	46bd      	mov	sp, r7
 8008aee:	bd80      	pop	{r7, pc}

08008af0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b082      	sub	sp, #8
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
 8008af8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	885b      	ldrh	r3, [r3, #2]
 8008afe:	b2da      	uxtb	r2, r3
 8008b00:	4b41      	ldr	r3, [pc, #260]	; (8008c08 <USBD_SetConfig+0x118>)
 8008b02:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008b04:	4b40      	ldr	r3, [pc, #256]	; (8008c08 <USBD_SetConfig+0x118>)
 8008b06:	781b      	ldrb	r3, [r3, #0]
 8008b08:	2b01      	cmp	r3, #1
 8008b0a:	d904      	bls.n	8008b16 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008b0c:	6839      	ldr	r1, [r7, #0]
 8008b0e:	6878      	ldr	r0, [r7, #4]
 8008b10:	f000 f954 	bl	8008dbc <USBD_CtlError>
 8008b14:	e075      	b.n	8008c02 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b1c:	2b02      	cmp	r3, #2
 8008b1e:	d002      	beq.n	8008b26 <USBD_SetConfig+0x36>
 8008b20:	2b03      	cmp	r3, #3
 8008b22:	d023      	beq.n	8008b6c <USBD_SetConfig+0x7c>
 8008b24:	e062      	b.n	8008bec <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008b26:	4b38      	ldr	r3, [pc, #224]	; (8008c08 <USBD_SetConfig+0x118>)
 8008b28:	781b      	ldrb	r3, [r3, #0]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d01a      	beq.n	8008b64 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8008b2e:	4b36      	ldr	r3, [pc, #216]	; (8008c08 <USBD_SetConfig+0x118>)
 8008b30:	781b      	ldrb	r3, [r3, #0]
 8008b32:	461a      	mov	r2, r3
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2203      	movs	r2, #3
 8008b3c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008b40:	4b31      	ldr	r3, [pc, #196]	; (8008c08 <USBD_SetConfig+0x118>)
 8008b42:	781b      	ldrb	r3, [r3, #0]
 8008b44:	4619      	mov	r1, r3
 8008b46:	6878      	ldr	r0, [r7, #4]
 8008b48:	f7ff f9f3 	bl	8007f32 <USBD_SetClassConfig>
 8008b4c:	4603      	mov	r3, r0
 8008b4e:	2b02      	cmp	r3, #2
 8008b50:	d104      	bne.n	8008b5c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8008b52:	6839      	ldr	r1, [r7, #0]
 8008b54:	6878      	ldr	r0, [r7, #4]
 8008b56:	f000 f931 	bl	8008dbc <USBD_CtlError>
            return;
 8008b5a:	e052      	b.n	8008c02 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008b5c:	6878      	ldr	r0, [r7, #4]
 8008b5e:	f000 f9f5 	bl	8008f4c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008b62:	e04e      	b.n	8008c02 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008b64:	6878      	ldr	r0, [r7, #4]
 8008b66:	f000 f9f1 	bl	8008f4c <USBD_CtlSendStatus>
        break;
 8008b6a:	e04a      	b.n	8008c02 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008b6c:	4b26      	ldr	r3, [pc, #152]	; (8008c08 <USBD_SetConfig+0x118>)
 8008b6e:	781b      	ldrb	r3, [r3, #0]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d112      	bne.n	8008b9a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2202      	movs	r2, #2
 8008b78:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8008b7c:	4b22      	ldr	r3, [pc, #136]	; (8008c08 <USBD_SetConfig+0x118>)
 8008b7e:	781b      	ldrb	r3, [r3, #0]
 8008b80:	461a      	mov	r2, r3
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8008b86:	4b20      	ldr	r3, [pc, #128]	; (8008c08 <USBD_SetConfig+0x118>)
 8008b88:	781b      	ldrb	r3, [r3, #0]
 8008b8a:	4619      	mov	r1, r3
 8008b8c:	6878      	ldr	r0, [r7, #4]
 8008b8e:	f7ff f9ef 	bl	8007f70 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	f000 f9da 	bl	8008f4c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008b98:	e033      	b.n	8008c02 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8008b9a:	4b1b      	ldr	r3, [pc, #108]	; (8008c08 <USBD_SetConfig+0x118>)
 8008b9c:	781b      	ldrb	r3, [r3, #0]
 8008b9e:	461a      	mov	r2, r3
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	685b      	ldr	r3, [r3, #4]
 8008ba4:	429a      	cmp	r2, r3
 8008ba6:	d01d      	beq.n	8008be4 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	685b      	ldr	r3, [r3, #4]
 8008bac:	b2db      	uxtb	r3, r3
 8008bae:	4619      	mov	r1, r3
 8008bb0:	6878      	ldr	r0, [r7, #4]
 8008bb2:	f7ff f9dd 	bl	8007f70 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008bb6:	4b14      	ldr	r3, [pc, #80]	; (8008c08 <USBD_SetConfig+0x118>)
 8008bb8:	781b      	ldrb	r3, [r3, #0]
 8008bba:	461a      	mov	r2, r3
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008bc0:	4b11      	ldr	r3, [pc, #68]	; (8008c08 <USBD_SetConfig+0x118>)
 8008bc2:	781b      	ldrb	r3, [r3, #0]
 8008bc4:	4619      	mov	r1, r3
 8008bc6:	6878      	ldr	r0, [r7, #4]
 8008bc8:	f7ff f9b3 	bl	8007f32 <USBD_SetClassConfig>
 8008bcc:	4603      	mov	r3, r0
 8008bce:	2b02      	cmp	r3, #2
 8008bd0:	d104      	bne.n	8008bdc <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8008bd2:	6839      	ldr	r1, [r7, #0]
 8008bd4:	6878      	ldr	r0, [r7, #4]
 8008bd6:	f000 f8f1 	bl	8008dbc <USBD_CtlError>
            return;
 8008bda:	e012      	b.n	8008c02 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008bdc:	6878      	ldr	r0, [r7, #4]
 8008bde:	f000 f9b5 	bl	8008f4c <USBD_CtlSendStatus>
        break;
 8008be2:	e00e      	b.n	8008c02 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008be4:	6878      	ldr	r0, [r7, #4]
 8008be6:	f000 f9b1 	bl	8008f4c <USBD_CtlSendStatus>
        break;
 8008bea:	e00a      	b.n	8008c02 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008bec:	6839      	ldr	r1, [r7, #0]
 8008bee:	6878      	ldr	r0, [r7, #4]
 8008bf0:	f000 f8e4 	bl	8008dbc <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008bf4:	4b04      	ldr	r3, [pc, #16]	; (8008c08 <USBD_SetConfig+0x118>)
 8008bf6:	781b      	ldrb	r3, [r3, #0]
 8008bf8:	4619      	mov	r1, r3
 8008bfa:	6878      	ldr	r0, [r7, #4]
 8008bfc:	f7ff f9b8 	bl	8007f70 <USBD_ClrClassConfig>
        break;
 8008c00:	bf00      	nop
    }
  }
}
 8008c02:	3708      	adds	r7, #8
 8008c04:	46bd      	mov	sp, r7
 8008c06:	bd80      	pop	{r7, pc}
 8008c08:	200003f0 	.word	0x200003f0

08008c0c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b082      	sub	sp, #8
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
 8008c14:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	88db      	ldrh	r3, [r3, #6]
 8008c1a:	2b01      	cmp	r3, #1
 8008c1c:	d004      	beq.n	8008c28 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008c1e:	6839      	ldr	r1, [r7, #0]
 8008c20:	6878      	ldr	r0, [r7, #4]
 8008c22:	f000 f8cb 	bl	8008dbc <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008c26:	e021      	b.n	8008c6c <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c2e:	2b01      	cmp	r3, #1
 8008c30:	db17      	blt.n	8008c62 <USBD_GetConfig+0x56>
 8008c32:	2b02      	cmp	r3, #2
 8008c34:	dd02      	ble.n	8008c3c <USBD_GetConfig+0x30>
 8008c36:	2b03      	cmp	r3, #3
 8008c38:	d00b      	beq.n	8008c52 <USBD_GetConfig+0x46>
 8008c3a:	e012      	b.n	8008c62 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2200      	movs	r2, #0
 8008c40:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	3308      	adds	r3, #8
 8008c46:	2201      	movs	r2, #1
 8008c48:	4619      	mov	r1, r3
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	f000 f920 	bl	8008e90 <USBD_CtlSendData>
        break;
 8008c50:	e00c      	b.n	8008c6c <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	3304      	adds	r3, #4
 8008c56:	2201      	movs	r2, #1
 8008c58:	4619      	mov	r1, r3
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	f000 f918 	bl	8008e90 <USBD_CtlSendData>
        break;
 8008c60:	e004      	b.n	8008c6c <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8008c62:	6839      	ldr	r1, [r7, #0]
 8008c64:	6878      	ldr	r0, [r7, #4]
 8008c66:	f000 f8a9 	bl	8008dbc <USBD_CtlError>
        break;
 8008c6a:	bf00      	nop
}
 8008c6c:	bf00      	nop
 8008c6e:	3708      	adds	r7, #8
 8008c70:	46bd      	mov	sp, r7
 8008c72:	bd80      	pop	{r7, pc}

08008c74 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b082      	sub	sp, #8
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
 8008c7c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c84:	3b01      	subs	r3, #1
 8008c86:	2b02      	cmp	r3, #2
 8008c88:	d81e      	bhi.n	8008cc8 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	88db      	ldrh	r3, [r3, #6]
 8008c8e:	2b02      	cmp	r3, #2
 8008c90:	d004      	beq.n	8008c9c <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008c92:	6839      	ldr	r1, [r7, #0]
 8008c94:	6878      	ldr	r0, [r7, #4]
 8008c96:	f000 f891 	bl	8008dbc <USBD_CtlError>
        break;
 8008c9a:	e01a      	b.n	8008cd2 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2201      	movs	r2, #1
 8008ca0:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d005      	beq.n	8008cb8 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	68db      	ldr	r3, [r3, #12]
 8008cb0:	f043 0202 	orr.w	r2, r3, #2
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	330c      	adds	r3, #12
 8008cbc:	2202      	movs	r2, #2
 8008cbe:	4619      	mov	r1, r3
 8008cc0:	6878      	ldr	r0, [r7, #4]
 8008cc2:	f000 f8e5 	bl	8008e90 <USBD_CtlSendData>
      break;
 8008cc6:	e004      	b.n	8008cd2 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8008cc8:	6839      	ldr	r1, [r7, #0]
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f000 f876 	bl	8008dbc <USBD_CtlError>
      break;
 8008cd0:	bf00      	nop
  }
}
 8008cd2:	bf00      	nop
 8008cd4:	3708      	adds	r7, #8
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	bd80      	pop	{r7, pc}

08008cda <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008cda:	b580      	push	{r7, lr}
 8008cdc:	b082      	sub	sp, #8
 8008cde:	af00      	add	r7, sp, #0
 8008ce0:	6078      	str	r0, [r7, #4]
 8008ce2:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	885b      	ldrh	r3, [r3, #2]
 8008ce8:	2b01      	cmp	r3, #1
 8008cea:	d106      	bne.n	8008cfa <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2201      	movs	r2, #1
 8008cf0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8008cf4:	6878      	ldr	r0, [r7, #4]
 8008cf6:	f000 f929 	bl	8008f4c <USBD_CtlSendStatus>
  }
}
 8008cfa:	bf00      	nop
 8008cfc:	3708      	adds	r7, #8
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bd80      	pop	{r7, pc}

08008d02 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008d02:	b580      	push	{r7, lr}
 8008d04:	b082      	sub	sp, #8
 8008d06:	af00      	add	r7, sp, #0
 8008d08:	6078      	str	r0, [r7, #4]
 8008d0a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d12:	3b01      	subs	r3, #1
 8008d14:	2b02      	cmp	r3, #2
 8008d16:	d80b      	bhi.n	8008d30 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	885b      	ldrh	r3, [r3, #2]
 8008d1c:	2b01      	cmp	r3, #1
 8008d1e:	d10c      	bne.n	8008d3a <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2200      	movs	r2, #0
 8008d24:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8008d28:	6878      	ldr	r0, [r7, #4]
 8008d2a:	f000 f90f 	bl	8008f4c <USBD_CtlSendStatus>
      }
      break;
 8008d2e:	e004      	b.n	8008d3a <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008d30:	6839      	ldr	r1, [r7, #0]
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	f000 f842 	bl	8008dbc <USBD_CtlError>
      break;
 8008d38:	e000      	b.n	8008d3c <USBD_ClrFeature+0x3a>
      break;
 8008d3a:	bf00      	nop
  }
}
 8008d3c:	bf00      	nop
 8008d3e:	3708      	adds	r7, #8
 8008d40:	46bd      	mov	sp, r7
 8008d42:	bd80      	pop	{r7, pc}

08008d44 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008d44:	b480      	push	{r7}
 8008d46:	b083      	sub	sp, #12
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
 8008d4c:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	781a      	ldrb	r2, [r3, #0]
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	785a      	ldrb	r2, [r3, #1]
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	3302      	adds	r3, #2
 8008d62:	781b      	ldrb	r3, [r3, #0]
 8008d64:	b29a      	uxth	r2, r3
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	3303      	adds	r3, #3
 8008d6a:	781b      	ldrb	r3, [r3, #0]
 8008d6c:	b29b      	uxth	r3, r3
 8008d6e:	021b      	lsls	r3, r3, #8
 8008d70:	b29b      	uxth	r3, r3
 8008d72:	4413      	add	r3, r2
 8008d74:	b29a      	uxth	r2, r3
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	3304      	adds	r3, #4
 8008d7e:	781b      	ldrb	r3, [r3, #0]
 8008d80:	b29a      	uxth	r2, r3
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	3305      	adds	r3, #5
 8008d86:	781b      	ldrb	r3, [r3, #0]
 8008d88:	b29b      	uxth	r3, r3
 8008d8a:	021b      	lsls	r3, r3, #8
 8008d8c:	b29b      	uxth	r3, r3
 8008d8e:	4413      	add	r3, r2
 8008d90:	b29a      	uxth	r2, r3
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	3306      	adds	r3, #6
 8008d9a:	781b      	ldrb	r3, [r3, #0]
 8008d9c:	b29a      	uxth	r2, r3
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	3307      	adds	r3, #7
 8008da2:	781b      	ldrb	r3, [r3, #0]
 8008da4:	b29b      	uxth	r3, r3
 8008da6:	021b      	lsls	r3, r3, #8
 8008da8:	b29b      	uxth	r3, r3
 8008daa:	4413      	add	r3, r2
 8008dac:	b29a      	uxth	r2, r3
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	80da      	strh	r2, [r3, #6]

}
 8008db2:	bf00      	nop
 8008db4:	370c      	adds	r7, #12
 8008db6:	46bd      	mov	sp, r7
 8008db8:	bc80      	pop	{r7}
 8008dba:	4770      	bx	lr

08008dbc <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b082      	sub	sp, #8
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
 8008dc4:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008dc6:	2180      	movs	r1, #128	; 0x80
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	f001 fe37 	bl	800aa3c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008dce:	2100      	movs	r1, #0
 8008dd0:	6878      	ldr	r0, [r7, #4]
 8008dd2:	f001 fe33 	bl	800aa3c <USBD_LL_StallEP>
}
 8008dd6:	bf00      	nop
 8008dd8:	3708      	adds	r7, #8
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bd80      	pop	{r7, pc}

08008dde <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008dde:	b580      	push	{r7, lr}
 8008de0:	b086      	sub	sp, #24
 8008de2:	af00      	add	r7, sp, #0
 8008de4:	60f8      	str	r0, [r7, #12]
 8008de6:	60b9      	str	r1, [r7, #8]
 8008de8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008dea:	2300      	movs	r3, #0
 8008dec:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d032      	beq.n	8008e5a <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008df4:	68f8      	ldr	r0, [r7, #12]
 8008df6:	f000 f834 	bl	8008e62 <USBD_GetLen>
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	3301      	adds	r3, #1
 8008dfe:	b29b      	uxth	r3, r3
 8008e00:	005b      	lsls	r3, r3, #1
 8008e02:	b29a      	uxth	r2, r3
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008e08:	7dfb      	ldrb	r3, [r7, #23]
 8008e0a:	1c5a      	adds	r2, r3, #1
 8008e0c:	75fa      	strb	r2, [r7, #23]
 8008e0e:	461a      	mov	r2, r3
 8008e10:	68bb      	ldr	r3, [r7, #8]
 8008e12:	4413      	add	r3, r2
 8008e14:	687a      	ldr	r2, [r7, #4]
 8008e16:	7812      	ldrb	r2, [r2, #0]
 8008e18:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008e1a:	7dfb      	ldrb	r3, [r7, #23]
 8008e1c:	1c5a      	adds	r2, r3, #1
 8008e1e:	75fa      	strb	r2, [r7, #23]
 8008e20:	461a      	mov	r2, r3
 8008e22:	68bb      	ldr	r3, [r7, #8]
 8008e24:	4413      	add	r3, r2
 8008e26:	2203      	movs	r2, #3
 8008e28:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008e2a:	e012      	b.n	8008e52 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008e2c:	7dfb      	ldrb	r3, [r7, #23]
 8008e2e:	1c5a      	adds	r2, r3, #1
 8008e30:	75fa      	strb	r2, [r7, #23]
 8008e32:	461a      	mov	r2, r3
 8008e34:	68bb      	ldr	r3, [r7, #8]
 8008e36:	441a      	add	r2, r3
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	1c59      	adds	r1, r3, #1
 8008e3c:	60f9      	str	r1, [r7, #12]
 8008e3e:	781b      	ldrb	r3, [r3, #0]
 8008e40:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008e42:	7dfb      	ldrb	r3, [r7, #23]
 8008e44:	1c5a      	adds	r2, r3, #1
 8008e46:	75fa      	strb	r2, [r7, #23]
 8008e48:	461a      	mov	r2, r3
 8008e4a:	68bb      	ldr	r3, [r7, #8]
 8008e4c:	4413      	add	r3, r2
 8008e4e:	2200      	movs	r2, #0
 8008e50:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	781b      	ldrb	r3, [r3, #0]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d1e8      	bne.n	8008e2c <USBD_GetString+0x4e>
    }
  }
}
 8008e5a:	bf00      	nop
 8008e5c:	3718      	adds	r7, #24
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	bd80      	pop	{r7, pc}

08008e62 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008e62:	b480      	push	{r7}
 8008e64:	b085      	sub	sp, #20
 8008e66:	af00      	add	r7, sp, #0
 8008e68:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008e6e:	e005      	b.n	8008e7c <USBD_GetLen+0x1a>
  {
    len++;
 8008e70:	7bfb      	ldrb	r3, [r7, #15]
 8008e72:	3301      	adds	r3, #1
 8008e74:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	3301      	adds	r3, #1
 8008e7a:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	781b      	ldrb	r3, [r3, #0]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d1f5      	bne.n	8008e70 <USBD_GetLen+0xe>
  }

  return len;
 8008e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e86:	4618      	mov	r0, r3
 8008e88:	3714      	adds	r7, #20
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	bc80      	pop	{r7}
 8008e8e:	4770      	bx	lr

08008e90 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b084      	sub	sp, #16
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	60f8      	str	r0, [r7, #12]
 8008e98:	60b9      	str	r1, [r7, #8]
 8008e9a:	4613      	mov	r3, r2
 8008e9c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	2202      	movs	r2, #2
 8008ea2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008ea6:	88fa      	ldrh	r2, [r7, #6]
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008eac:	88fa      	ldrh	r2, [r7, #6]
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008eb2:	88fb      	ldrh	r3, [r7, #6]
 8008eb4:	68ba      	ldr	r2, [r7, #8]
 8008eb6:	2100      	movs	r1, #0
 8008eb8:	68f8      	ldr	r0, [r7, #12]
 8008eba:	f001 fe48 	bl	800ab4e <USBD_LL_Transmit>

  return USBD_OK;
 8008ebe:	2300      	movs	r3, #0
}
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	3710      	adds	r7, #16
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	bd80      	pop	{r7, pc}

08008ec8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b084      	sub	sp, #16
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	60f8      	str	r0, [r7, #12]
 8008ed0:	60b9      	str	r1, [r7, #8]
 8008ed2:	4613      	mov	r3, r2
 8008ed4:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008ed6:	88fb      	ldrh	r3, [r7, #6]
 8008ed8:	68ba      	ldr	r2, [r7, #8]
 8008eda:	2100      	movs	r1, #0
 8008edc:	68f8      	ldr	r0, [r7, #12]
 8008ede:	f001 fe36 	bl	800ab4e <USBD_LL_Transmit>

  return USBD_OK;
 8008ee2:	2300      	movs	r3, #0
}
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	3710      	adds	r7, #16
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	bd80      	pop	{r7, pc}

08008eec <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b084      	sub	sp, #16
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	60f8      	str	r0, [r7, #12]
 8008ef4:	60b9      	str	r1, [r7, #8]
 8008ef6:	4613      	mov	r3, r2
 8008ef8:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	2203      	movs	r2, #3
 8008efe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008f02:	88fa      	ldrh	r2, [r7, #6]
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8008f0a:	88fa      	ldrh	r2, [r7, #6]
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008f12:	88fb      	ldrh	r3, [r7, #6]
 8008f14:	68ba      	ldr	r2, [r7, #8]
 8008f16:	2100      	movs	r1, #0
 8008f18:	68f8      	ldr	r0, [r7, #12]
 8008f1a:	f001 fe3b 	bl	800ab94 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008f1e:	2300      	movs	r3, #0
}
 8008f20:	4618      	mov	r0, r3
 8008f22:	3710      	adds	r7, #16
 8008f24:	46bd      	mov	sp, r7
 8008f26:	bd80      	pop	{r7, pc}

08008f28 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b084      	sub	sp, #16
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	60f8      	str	r0, [r7, #12]
 8008f30:	60b9      	str	r1, [r7, #8]
 8008f32:	4613      	mov	r3, r2
 8008f34:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008f36:	88fb      	ldrh	r3, [r7, #6]
 8008f38:	68ba      	ldr	r2, [r7, #8]
 8008f3a:	2100      	movs	r1, #0
 8008f3c:	68f8      	ldr	r0, [r7, #12]
 8008f3e:	f001 fe29 	bl	800ab94 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008f42:	2300      	movs	r3, #0
}
 8008f44:	4618      	mov	r0, r3
 8008f46:	3710      	adds	r7, #16
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	bd80      	pop	{r7, pc}

08008f4c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b082      	sub	sp, #8
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2204      	movs	r2, #4
 8008f58:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	2200      	movs	r2, #0
 8008f60:	2100      	movs	r1, #0
 8008f62:	6878      	ldr	r0, [r7, #4]
 8008f64:	f001 fdf3 	bl	800ab4e <USBD_LL_Transmit>

  return USBD_OK;
 8008f68:	2300      	movs	r3, #0
}
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	3708      	adds	r7, #8
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	bd80      	pop	{r7, pc}

08008f72 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008f72:	b580      	push	{r7, lr}
 8008f74:	b082      	sub	sp, #8
 8008f76:	af00      	add	r7, sp, #0
 8008f78:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	2205      	movs	r2, #5
 8008f7e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008f82:	2300      	movs	r3, #0
 8008f84:	2200      	movs	r2, #0
 8008f86:	2100      	movs	r1, #0
 8008f88:	6878      	ldr	r0, [r7, #4]
 8008f8a:	f001 fe03 	bl	800ab94 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008f8e:	2300      	movs	r3, #0
}
 8008f90:	4618      	mov	r0, r3
 8008f92:	3708      	adds	r7, #8
 8008f94:	46bd      	mov	sp, r7
 8008f96:	bd80      	pop	{r7, pc}

08008f98 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8008f98:	b480      	push	{r7}
 8008f9a:	b085      	sub	sp, #20
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	4603      	mov	r3, r0
 8008fa0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8008fa6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008faa:	2b84      	cmp	r3, #132	; 0x84
 8008fac:	d005      	beq.n	8008fba <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8008fae:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	4413      	add	r3, r2
 8008fb6:	3303      	adds	r3, #3
 8008fb8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8008fba:	68fb      	ldr	r3, [r7, #12]
}
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	3714      	adds	r7, #20
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	bc80      	pop	{r7}
 8008fc4:	4770      	bx	lr

08008fc6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008fc6:	b580      	push	{r7, lr}
 8008fc8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8008fca:	f000 fe45 	bl	8009c58 <vTaskStartScheduler>
  
  return osOK;
 8008fce:	2300      	movs	r3, #0
}
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	bd80      	pop	{r7, pc}

08008fd4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008fd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008fd6:	b089      	sub	sp, #36	; 0x24
 8008fd8:	af04      	add	r7, sp, #16
 8008fda:	6078      	str	r0, [r7, #4]
 8008fdc:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	695b      	ldr	r3, [r3, #20]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d020      	beq.n	8009028 <osThreadCreate+0x54>
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	699b      	ldr	r3, [r3, #24]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d01c      	beq.n	8009028 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	685c      	ldr	r4, [r3, #4]
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681d      	ldr	r5, [r3, #0]
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	691e      	ldr	r6, [r3, #16]
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009000:	4618      	mov	r0, r3
 8009002:	f7ff ffc9 	bl	8008f98 <makeFreeRtosPriority>
 8009006:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	695b      	ldr	r3, [r3, #20]
 800900c:	687a      	ldr	r2, [r7, #4]
 800900e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009010:	9202      	str	r2, [sp, #8]
 8009012:	9301      	str	r3, [sp, #4]
 8009014:	9100      	str	r1, [sp, #0]
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	4632      	mov	r2, r6
 800901a:	4629      	mov	r1, r5
 800901c:	4620      	mov	r0, r4
 800901e:	f000 fc61 	bl	80098e4 <xTaskCreateStatic>
 8009022:	4603      	mov	r3, r0
 8009024:	60fb      	str	r3, [r7, #12]
 8009026:	e01c      	b.n	8009062 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	685c      	ldr	r4, [r3, #4]
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009034:	b29e      	uxth	r6, r3
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800903c:	4618      	mov	r0, r3
 800903e:	f7ff ffab 	bl	8008f98 <makeFreeRtosPriority>
 8009042:	4602      	mov	r2, r0
 8009044:	f107 030c 	add.w	r3, r7, #12
 8009048:	9301      	str	r3, [sp, #4]
 800904a:	9200      	str	r2, [sp, #0]
 800904c:	683b      	ldr	r3, [r7, #0]
 800904e:	4632      	mov	r2, r6
 8009050:	4629      	mov	r1, r5
 8009052:	4620      	mov	r0, r4
 8009054:	f000 fc9f 	bl	8009996 <xTaskCreate>
 8009058:	4603      	mov	r3, r0
 800905a:	2b01      	cmp	r3, #1
 800905c:	d001      	beq.n	8009062 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800905e:	2300      	movs	r3, #0
 8009060:	e000      	b.n	8009064 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8009062:	68fb      	ldr	r3, [r7, #12]
}
 8009064:	4618      	mov	r0, r3
 8009066:	3714      	adds	r7, #20
 8009068:	46bd      	mov	sp, r7
 800906a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800906c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b084      	sub	sp, #16
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d001      	beq.n	8009082 <osDelay+0x16>
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	e000      	b.n	8009084 <osDelay+0x18>
 8009082:	2301      	movs	r3, #1
 8009084:	4618      	mov	r0, r3
 8009086:	f000 fdb3 	bl	8009bf0 <vTaskDelay>
  
  return osOK;
 800908a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800908c:	4618      	mov	r0, r3
 800908e:	3710      	adds	r7, #16
 8009090:	46bd      	mov	sp, r7
 8009092:	bd80      	pop	{r7, pc}

08009094 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009094:	b480      	push	{r7}
 8009096:	b083      	sub	sp, #12
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	f103 0208 	add.w	r2, r3, #8
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	f04f 32ff 	mov.w	r2, #4294967295
 80090ac:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	f103 0208 	add.w	r2, r3, #8
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	f103 0208 	add.w	r2, r3, #8
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2200      	movs	r2, #0
 80090c6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80090c8:	bf00      	nop
 80090ca:	370c      	adds	r7, #12
 80090cc:	46bd      	mov	sp, r7
 80090ce:	bc80      	pop	{r7}
 80090d0:	4770      	bx	lr

080090d2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80090d2:	b480      	push	{r7}
 80090d4:	b083      	sub	sp, #12
 80090d6:	af00      	add	r7, sp, #0
 80090d8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	2200      	movs	r2, #0
 80090de:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80090e0:	bf00      	nop
 80090e2:	370c      	adds	r7, #12
 80090e4:	46bd      	mov	sp, r7
 80090e6:	bc80      	pop	{r7}
 80090e8:	4770      	bx	lr

080090ea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80090ea:	b480      	push	{r7}
 80090ec:	b085      	sub	sp, #20
 80090ee:	af00      	add	r7, sp, #0
 80090f0:	6078      	str	r0, [r7, #4]
 80090f2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	685b      	ldr	r3, [r3, #4]
 80090f8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	68fa      	ldr	r2, [r7, #12]
 80090fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	689a      	ldr	r2, [r3, #8]
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	689b      	ldr	r3, [r3, #8]
 800910c:	683a      	ldr	r2, [r7, #0]
 800910e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	683a      	ldr	r2, [r7, #0]
 8009114:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8009116:	683b      	ldr	r3, [r7, #0]
 8009118:	687a      	ldr	r2, [r7, #4]
 800911a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	1c5a      	adds	r2, r3, #1
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	601a      	str	r2, [r3, #0]
}
 8009126:	bf00      	nop
 8009128:	3714      	adds	r7, #20
 800912a:	46bd      	mov	sp, r7
 800912c:	bc80      	pop	{r7}
 800912e:	4770      	bx	lr

08009130 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009130:	b480      	push	{r7}
 8009132:	b085      	sub	sp, #20
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
 8009138:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800913a:	683b      	ldr	r3, [r7, #0]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009146:	d103      	bne.n	8009150 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	691b      	ldr	r3, [r3, #16]
 800914c:	60fb      	str	r3, [r7, #12]
 800914e:	e00c      	b.n	800916a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	3308      	adds	r3, #8
 8009154:	60fb      	str	r3, [r7, #12]
 8009156:	e002      	b.n	800915e <vListInsert+0x2e>
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	685b      	ldr	r3, [r3, #4]
 800915c:	60fb      	str	r3, [r7, #12]
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	685b      	ldr	r3, [r3, #4]
 8009162:	681a      	ldr	r2, [r3, #0]
 8009164:	68bb      	ldr	r3, [r7, #8]
 8009166:	429a      	cmp	r2, r3
 8009168:	d9f6      	bls.n	8009158 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	685a      	ldr	r2, [r3, #4]
 800916e:	683b      	ldr	r3, [r7, #0]
 8009170:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009172:	683b      	ldr	r3, [r7, #0]
 8009174:	685b      	ldr	r3, [r3, #4]
 8009176:	683a      	ldr	r2, [r7, #0]
 8009178:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	68fa      	ldr	r2, [r7, #12]
 800917e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	683a      	ldr	r2, [r7, #0]
 8009184:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	687a      	ldr	r2, [r7, #4]
 800918a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	1c5a      	adds	r2, r3, #1
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	601a      	str	r2, [r3, #0]
}
 8009196:	bf00      	nop
 8009198:	3714      	adds	r7, #20
 800919a:	46bd      	mov	sp, r7
 800919c:	bc80      	pop	{r7}
 800919e:	4770      	bx	lr

080091a0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80091a0:	b480      	push	{r7}
 80091a2:	b085      	sub	sp, #20
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	691b      	ldr	r3, [r3, #16]
 80091ac:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	685b      	ldr	r3, [r3, #4]
 80091b2:	687a      	ldr	r2, [r7, #4]
 80091b4:	6892      	ldr	r2, [r2, #8]
 80091b6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	689b      	ldr	r3, [r3, #8]
 80091bc:	687a      	ldr	r2, [r7, #4]
 80091be:	6852      	ldr	r2, [r2, #4]
 80091c0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	685a      	ldr	r2, [r3, #4]
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	429a      	cmp	r2, r3
 80091ca:	d103      	bne.n	80091d4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	689a      	ldr	r2, [r3, #8]
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2200      	movs	r2, #0
 80091d8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	1e5a      	subs	r2, r3, #1
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	681b      	ldr	r3, [r3, #0]
}
 80091e8:	4618      	mov	r0, r3
 80091ea:	3714      	adds	r7, #20
 80091ec:	46bd      	mov	sp, r7
 80091ee:	bc80      	pop	{r7}
 80091f0:	4770      	bx	lr
	...

080091f4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80091f4:	b480      	push	{r7}
 80091f6:	b085      	sub	sp, #20
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	60f8      	str	r0, [r7, #12]
 80091fc:	60b9      	str	r1, [r7, #8]
 80091fe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	3b04      	subs	r3, #4
 8009204:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800920c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	3b04      	subs	r3, #4
 8009212:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009214:	68bb      	ldr	r3, [r7, #8]
 8009216:	f023 0201 	bic.w	r2, r3, #1
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	3b04      	subs	r3, #4
 8009222:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009224:	4a08      	ldr	r2, [pc, #32]	; (8009248 <pxPortInitialiseStack+0x54>)
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	3b14      	subs	r3, #20
 800922e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009230:	687a      	ldr	r2, [r7, #4]
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	3b20      	subs	r3, #32
 800923a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800923c:	68fb      	ldr	r3, [r7, #12]
}
 800923e:	4618      	mov	r0, r3
 8009240:	3714      	adds	r7, #20
 8009242:	46bd      	mov	sp, r7
 8009244:	bc80      	pop	{r7}
 8009246:	4770      	bx	lr
 8009248:	0800924d 	.word	0x0800924d

0800924c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800924c:	b480      	push	{r7}
 800924e:	b085      	sub	sp, #20
 8009250:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8009252:	2300      	movs	r3, #0
 8009254:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009256:	4b10      	ldr	r3, [pc, #64]	; (8009298 <prvTaskExitError+0x4c>)
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800925e:	d009      	beq.n	8009274 <prvTaskExitError+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009264:	f383 8811 	msr	BASEPRI, r3
 8009268:	f3bf 8f6f 	isb	sy
 800926c:	f3bf 8f4f 	dsb	sy
 8009270:	60fb      	str	r3, [r7, #12]
 8009272:	e7fe      	b.n	8009272 <prvTaskExitError+0x26>
 8009274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009278:	f383 8811 	msr	BASEPRI, r3
 800927c:	f3bf 8f6f 	isb	sy
 8009280:	f3bf 8f4f 	dsb	sy
 8009284:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009286:	bf00      	nop
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d0fc      	beq.n	8009288 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800928e:	bf00      	nop
 8009290:	3714      	adds	r7, #20
 8009292:	46bd      	mov	sp, r7
 8009294:	bc80      	pop	{r7}
 8009296:	4770      	bx	lr
 8009298:	2000011c 	.word	0x2000011c
 800929c:	00000000 	.word	0x00000000

080092a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80092a0:	4b07      	ldr	r3, [pc, #28]	; (80092c0 <pxCurrentTCBConst2>)
 80092a2:	6819      	ldr	r1, [r3, #0]
 80092a4:	6808      	ldr	r0, [r1, #0]
 80092a6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80092aa:	f380 8809 	msr	PSP, r0
 80092ae:	f3bf 8f6f 	isb	sy
 80092b2:	f04f 0000 	mov.w	r0, #0
 80092b6:	f380 8811 	msr	BASEPRI, r0
 80092ba:	f04e 0e0d 	orr.w	lr, lr, #13
 80092be:	4770      	bx	lr

080092c0 <pxCurrentTCBConst2>:
 80092c0:	20001010 	.word	0x20001010
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80092c4:	bf00      	nop
 80092c6:	bf00      	nop

080092c8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80092c8:	4806      	ldr	r0, [pc, #24]	; (80092e4 <prvPortStartFirstTask+0x1c>)
 80092ca:	6800      	ldr	r0, [r0, #0]
 80092cc:	6800      	ldr	r0, [r0, #0]
 80092ce:	f380 8808 	msr	MSP, r0
 80092d2:	b662      	cpsie	i
 80092d4:	b661      	cpsie	f
 80092d6:	f3bf 8f4f 	dsb	sy
 80092da:	f3bf 8f6f 	isb	sy
 80092de:	df00      	svc	0
 80092e0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80092e2:	bf00      	nop
 80092e4:	e000ed08 	.word	0xe000ed08

080092e8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b084      	sub	sp, #16
 80092ec:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80092ee:	4b31      	ldr	r3, [pc, #196]	; (80093b4 <xPortStartScheduler+0xcc>)
 80092f0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	781b      	ldrb	r3, [r3, #0]
 80092f6:	b2db      	uxtb	r3, r3
 80092f8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	22ff      	movs	r2, #255	; 0xff
 80092fe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	781b      	ldrb	r3, [r3, #0]
 8009304:	b2db      	uxtb	r3, r3
 8009306:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009308:	78fb      	ldrb	r3, [r7, #3]
 800930a:	b2db      	uxtb	r3, r3
 800930c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009310:	b2da      	uxtb	r2, r3
 8009312:	4b29      	ldr	r3, [pc, #164]	; (80093b8 <xPortStartScheduler+0xd0>)
 8009314:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009316:	4b29      	ldr	r3, [pc, #164]	; (80093bc <xPortStartScheduler+0xd4>)
 8009318:	2207      	movs	r2, #7
 800931a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800931c:	e009      	b.n	8009332 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800931e:	4b27      	ldr	r3, [pc, #156]	; (80093bc <xPortStartScheduler+0xd4>)
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	3b01      	subs	r3, #1
 8009324:	4a25      	ldr	r2, [pc, #148]	; (80093bc <xPortStartScheduler+0xd4>)
 8009326:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009328:	78fb      	ldrb	r3, [r7, #3]
 800932a:	b2db      	uxtb	r3, r3
 800932c:	005b      	lsls	r3, r3, #1
 800932e:	b2db      	uxtb	r3, r3
 8009330:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009332:	78fb      	ldrb	r3, [r7, #3]
 8009334:	b2db      	uxtb	r3, r3
 8009336:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800933a:	2b80      	cmp	r3, #128	; 0x80
 800933c:	d0ef      	beq.n	800931e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800933e:	4b1f      	ldr	r3, [pc, #124]	; (80093bc <xPortStartScheduler+0xd4>)
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	f1c3 0307 	rsb	r3, r3, #7
 8009346:	2b04      	cmp	r3, #4
 8009348:	d009      	beq.n	800935e <xPortStartScheduler+0x76>
 800934a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800934e:	f383 8811 	msr	BASEPRI, r3
 8009352:	f3bf 8f6f 	isb	sy
 8009356:	f3bf 8f4f 	dsb	sy
 800935a:	60bb      	str	r3, [r7, #8]
 800935c:	e7fe      	b.n	800935c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800935e:	4b17      	ldr	r3, [pc, #92]	; (80093bc <xPortStartScheduler+0xd4>)
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	021b      	lsls	r3, r3, #8
 8009364:	4a15      	ldr	r2, [pc, #84]	; (80093bc <xPortStartScheduler+0xd4>)
 8009366:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009368:	4b14      	ldr	r3, [pc, #80]	; (80093bc <xPortStartScheduler+0xd4>)
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009370:	4a12      	ldr	r2, [pc, #72]	; (80093bc <xPortStartScheduler+0xd4>)
 8009372:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	b2da      	uxtb	r2, r3
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800937c:	4a10      	ldr	r2, [pc, #64]	; (80093c0 <xPortStartScheduler+0xd8>)
 800937e:	4b10      	ldr	r3, [pc, #64]	; (80093c0 <xPortStartScheduler+0xd8>)
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009386:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009388:	4a0d      	ldr	r2, [pc, #52]	; (80093c0 <xPortStartScheduler+0xd8>)
 800938a:	4b0d      	ldr	r3, [pc, #52]	; (80093c0 <xPortStartScheduler+0xd8>)
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009392:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009394:	f000 f8b0 	bl	80094f8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009398:	4b0a      	ldr	r3, [pc, #40]	; (80093c4 <xPortStartScheduler+0xdc>)
 800939a:	2200      	movs	r2, #0
 800939c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800939e:	f7ff ff93 	bl	80092c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80093a2:	f000 fe1d 	bl	8009fe0 <vTaskSwitchContext>
	prvTaskExitError();
 80093a6:	f7ff ff51 	bl	800924c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80093aa:	2300      	movs	r3, #0
}
 80093ac:	4618      	mov	r0, r3
 80093ae:	3710      	adds	r7, #16
 80093b0:	46bd      	mov	sp, r7
 80093b2:	bd80      	pop	{r7, pc}
 80093b4:	e000e400 	.word	0xe000e400
 80093b8:	200003f1 	.word	0x200003f1
 80093bc:	200003f4 	.word	0x200003f4
 80093c0:	e000ed20 	.word	0xe000ed20
 80093c4:	2000011c 	.word	0x2000011c

080093c8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80093c8:	b480      	push	{r7}
 80093ca:	b083      	sub	sp, #12
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093d2:	f383 8811 	msr	BASEPRI, r3
 80093d6:	f3bf 8f6f 	isb	sy
 80093da:	f3bf 8f4f 	dsb	sy
 80093de:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80093e0:	4b0e      	ldr	r3, [pc, #56]	; (800941c <vPortEnterCritical+0x54>)
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	3301      	adds	r3, #1
 80093e6:	4a0d      	ldr	r2, [pc, #52]	; (800941c <vPortEnterCritical+0x54>)
 80093e8:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80093ea:	4b0c      	ldr	r3, [pc, #48]	; (800941c <vPortEnterCritical+0x54>)
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	2b01      	cmp	r3, #1
 80093f0:	d10e      	bne.n	8009410 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80093f2:	4b0b      	ldr	r3, [pc, #44]	; (8009420 <vPortEnterCritical+0x58>)
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	b2db      	uxtb	r3, r3
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d009      	beq.n	8009410 <vPortEnterCritical+0x48>
 80093fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009400:	f383 8811 	msr	BASEPRI, r3
 8009404:	f3bf 8f6f 	isb	sy
 8009408:	f3bf 8f4f 	dsb	sy
 800940c:	603b      	str	r3, [r7, #0]
 800940e:	e7fe      	b.n	800940e <vPortEnterCritical+0x46>
	}
}
 8009410:	bf00      	nop
 8009412:	370c      	adds	r7, #12
 8009414:	46bd      	mov	sp, r7
 8009416:	bc80      	pop	{r7}
 8009418:	4770      	bx	lr
 800941a:	bf00      	nop
 800941c:	2000011c 	.word	0x2000011c
 8009420:	e000ed04 	.word	0xe000ed04

08009424 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009424:	b480      	push	{r7}
 8009426:	b083      	sub	sp, #12
 8009428:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800942a:	4b10      	ldr	r3, [pc, #64]	; (800946c <vPortExitCritical+0x48>)
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d109      	bne.n	8009446 <vPortExitCritical+0x22>
 8009432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009436:	f383 8811 	msr	BASEPRI, r3
 800943a:	f3bf 8f6f 	isb	sy
 800943e:	f3bf 8f4f 	dsb	sy
 8009442:	607b      	str	r3, [r7, #4]
 8009444:	e7fe      	b.n	8009444 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8009446:	4b09      	ldr	r3, [pc, #36]	; (800946c <vPortExitCritical+0x48>)
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	3b01      	subs	r3, #1
 800944c:	4a07      	ldr	r2, [pc, #28]	; (800946c <vPortExitCritical+0x48>)
 800944e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009450:	4b06      	ldr	r3, [pc, #24]	; (800946c <vPortExitCritical+0x48>)
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d104      	bne.n	8009462 <vPortExitCritical+0x3e>
 8009458:	2300      	movs	r3, #0
 800945a:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8009462:	bf00      	nop
 8009464:	370c      	adds	r7, #12
 8009466:	46bd      	mov	sp, r7
 8009468:	bc80      	pop	{r7}
 800946a:	4770      	bx	lr
 800946c:	2000011c 	.word	0x2000011c

08009470 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009470:	f3ef 8009 	mrs	r0, PSP
 8009474:	f3bf 8f6f 	isb	sy
 8009478:	4b0d      	ldr	r3, [pc, #52]	; (80094b0 <pxCurrentTCBConst>)
 800947a:	681a      	ldr	r2, [r3, #0]
 800947c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009480:	6010      	str	r0, [r2, #0]
 8009482:	e92d 4008 	stmdb	sp!, {r3, lr}
 8009486:	f04f 0050 	mov.w	r0, #80	; 0x50
 800948a:	f380 8811 	msr	BASEPRI, r0
 800948e:	f000 fda7 	bl	8009fe0 <vTaskSwitchContext>
 8009492:	f04f 0000 	mov.w	r0, #0
 8009496:	f380 8811 	msr	BASEPRI, r0
 800949a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800949e:	6819      	ldr	r1, [r3, #0]
 80094a0:	6808      	ldr	r0, [r1, #0]
 80094a2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80094a6:	f380 8809 	msr	PSP, r0
 80094aa:	f3bf 8f6f 	isb	sy
 80094ae:	4770      	bx	lr

080094b0 <pxCurrentTCBConst>:
 80094b0:	20001010 	.word	0x20001010
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80094b4:	bf00      	nop
 80094b6:	bf00      	nop

080094b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b082      	sub	sp, #8
 80094bc:	af00      	add	r7, sp, #0
	__asm volatile
 80094be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094c2:	f383 8811 	msr	BASEPRI, r3
 80094c6:	f3bf 8f6f 	isb	sy
 80094ca:	f3bf 8f4f 	dsb	sy
 80094ce:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80094d0:	f000 fcca 	bl	8009e68 <xTaskIncrementTick>
 80094d4:	4603      	mov	r3, r0
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d003      	beq.n	80094e2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80094da:	4b06      	ldr	r3, [pc, #24]	; (80094f4 <SysTick_Handler+0x3c>)
 80094dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094e0:	601a      	str	r2, [r3, #0]
 80094e2:	2300      	movs	r3, #0
 80094e4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80094e6:	683b      	ldr	r3, [r7, #0]
 80094e8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80094ec:	bf00      	nop
 80094ee:	3708      	adds	r7, #8
 80094f0:	46bd      	mov	sp, r7
 80094f2:	bd80      	pop	{r7, pc}
 80094f4:	e000ed04 	.word	0xe000ed04

080094f8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80094f8:	b480      	push	{r7}
 80094fa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80094fc:	4b0a      	ldr	r3, [pc, #40]	; (8009528 <vPortSetupTimerInterrupt+0x30>)
 80094fe:	2200      	movs	r2, #0
 8009500:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009502:	4b0a      	ldr	r3, [pc, #40]	; (800952c <vPortSetupTimerInterrupt+0x34>)
 8009504:	2200      	movs	r2, #0
 8009506:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009508:	4a09      	ldr	r2, [pc, #36]	; (8009530 <vPortSetupTimerInterrupt+0x38>)
 800950a:	4b0a      	ldr	r3, [pc, #40]	; (8009534 <vPortSetupTimerInterrupt+0x3c>)
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	490a      	ldr	r1, [pc, #40]	; (8009538 <vPortSetupTimerInterrupt+0x40>)
 8009510:	fba1 1303 	umull	r1, r3, r1, r3
 8009514:	099b      	lsrs	r3, r3, #6
 8009516:	3b01      	subs	r3, #1
 8009518:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800951a:	4b03      	ldr	r3, [pc, #12]	; (8009528 <vPortSetupTimerInterrupt+0x30>)
 800951c:	2207      	movs	r2, #7
 800951e:	601a      	str	r2, [r3, #0]
}
 8009520:	bf00      	nop
 8009522:	46bd      	mov	sp, r7
 8009524:	bc80      	pop	{r7}
 8009526:	4770      	bx	lr
 8009528:	e000e010 	.word	0xe000e010
 800952c:	e000e018 	.word	0xe000e018
 8009530:	e000e014 	.word	0xe000e014
 8009534:	20000000 	.word	0x20000000
 8009538:	10624dd3 	.word	0x10624dd3

0800953c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b08a      	sub	sp, #40	; 0x28
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009544:	2300      	movs	r3, #0
 8009546:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009548:	f000 fbe4 	bl	8009d14 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800954c:	4b57      	ldr	r3, [pc, #348]	; (80096ac <pvPortMalloc+0x170>)
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d101      	bne.n	8009558 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009554:	f000 f90c 	bl	8009770 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009558:	4b55      	ldr	r3, [pc, #340]	; (80096b0 <pvPortMalloc+0x174>)
 800955a:	681a      	ldr	r2, [r3, #0]
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	4013      	ands	r3, r2
 8009560:	2b00      	cmp	r3, #0
 8009562:	f040 808c 	bne.w	800967e <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d01c      	beq.n	80095a6 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800956c:	2208      	movs	r2, #8
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	4413      	add	r3, r2
 8009572:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	f003 0307 	and.w	r3, r3, #7
 800957a:	2b00      	cmp	r3, #0
 800957c:	d013      	beq.n	80095a6 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	f023 0307 	bic.w	r3, r3, #7
 8009584:	3308      	adds	r3, #8
 8009586:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	f003 0307 	and.w	r3, r3, #7
 800958e:	2b00      	cmp	r3, #0
 8009590:	d009      	beq.n	80095a6 <pvPortMalloc+0x6a>
	__asm volatile
 8009592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009596:	f383 8811 	msr	BASEPRI, r3
 800959a:	f3bf 8f6f 	isb	sy
 800959e:	f3bf 8f4f 	dsb	sy
 80095a2:	617b      	str	r3, [r7, #20]
 80095a4:	e7fe      	b.n	80095a4 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d068      	beq.n	800967e <pvPortMalloc+0x142>
 80095ac:	4b41      	ldr	r3, [pc, #260]	; (80096b4 <pvPortMalloc+0x178>)
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	687a      	ldr	r2, [r7, #4]
 80095b2:	429a      	cmp	r2, r3
 80095b4:	d863      	bhi.n	800967e <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80095b6:	4b40      	ldr	r3, [pc, #256]	; (80096b8 <pvPortMalloc+0x17c>)
 80095b8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80095ba:	4b3f      	ldr	r3, [pc, #252]	; (80096b8 <pvPortMalloc+0x17c>)
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80095c0:	e004      	b.n	80095cc <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80095c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095c4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80095c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80095cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ce:	685a      	ldr	r2, [r3, #4]
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	429a      	cmp	r2, r3
 80095d4:	d203      	bcs.n	80095de <pvPortMalloc+0xa2>
 80095d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d1f1      	bne.n	80095c2 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80095de:	4b33      	ldr	r3, [pc, #204]	; (80096ac <pvPortMalloc+0x170>)
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095e4:	429a      	cmp	r2, r3
 80095e6:	d04a      	beq.n	800967e <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80095e8:	6a3b      	ldr	r3, [r7, #32]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	2208      	movs	r2, #8
 80095ee:	4413      	add	r3, r2
 80095f0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80095f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095f4:	681a      	ldr	r2, [r3, #0]
 80095f6:	6a3b      	ldr	r3, [r7, #32]
 80095f8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80095fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095fc:	685a      	ldr	r2, [r3, #4]
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	1ad2      	subs	r2, r2, r3
 8009602:	2308      	movs	r3, #8
 8009604:	005b      	lsls	r3, r3, #1
 8009606:	429a      	cmp	r2, r3
 8009608:	d91e      	bls.n	8009648 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800960a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	4413      	add	r3, r2
 8009610:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009612:	69bb      	ldr	r3, [r7, #24]
 8009614:	f003 0307 	and.w	r3, r3, #7
 8009618:	2b00      	cmp	r3, #0
 800961a:	d009      	beq.n	8009630 <pvPortMalloc+0xf4>
 800961c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009620:	f383 8811 	msr	BASEPRI, r3
 8009624:	f3bf 8f6f 	isb	sy
 8009628:	f3bf 8f4f 	dsb	sy
 800962c:	613b      	str	r3, [r7, #16]
 800962e:	e7fe      	b.n	800962e <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009632:	685a      	ldr	r2, [r3, #4]
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	1ad2      	subs	r2, r2, r3
 8009638:	69bb      	ldr	r3, [r7, #24]
 800963a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800963c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800963e:	687a      	ldr	r2, [r7, #4]
 8009640:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009642:	69b8      	ldr	r0, [r7, #24]
 8009644:	f000 f8f6 	bl	8009834 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009648:	4b1a      	ldr	r3, [pc, #104]	; (80096b4 <pvPortMalloc+0x178>)
 800964a:	681a      	ldr	r2, [r3, #0]
 800964c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800964e:	685b      	ldr	r3, [r3, #4]
 8009650:	1ad3      	subs	r3, r2, r3
 8009652:	4a18      	ldr	r2, [pc, #96]	; (80096b4 <pvPortMalloc+0x178>)
 8009654:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009656:	4b17      	ldr	r3, [pc, #92]	; (80096b4 <pvPortMalloc+0x178>)
 8009658:	681a      	ldr	r2, [r3, #0]
 800965a:	4b18      	ldr	r3, [pc, #96]	; (80096bc <pvPortMalloc+0x180>)
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	429a      	cmp	r2, r3
 8009660:	d203      	bcs.n	800966a <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009662:	4b14      	ldr	r3, [pc, #80]	; (80096b4 <pvPortMalloc+0x178>)
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	4a15      	ldr	r2, [pc, #84]	; (80096bc <pvPortMalloc+0x180>)
 8009668:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800966a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800966c:	685a      	ldr	r2, [r3, #4]
 800966e:	4b10      	ldr	r3, [pc, #64]	; (80096b0 <pvPortMalloc+0x174>)
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	431a      	orrs	r2, r3
 8009674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009676:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800967a:	2200      	movs	r2, #0
 800967c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800967e:	f000 fb57 	bl	8009d30 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009682:	69fb      	ldr	r3, [r7, #28]
 8009684:	f003 0307 	and.w	r3, r3, #7
 8009688:	2b00      	cmp	r3, #0
 800968a:	d009      	beq.n	80096a0 <pvPortMalloc+0x164>
 800968c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009690:	f383 8811 	msr	BASEPRI, r3
 8009694:	f3bf 8f6f 	isb	sy
 8009698:	f3bf 8f4f 	dsb	sy
 800969c:	60fb      	str	r3, [r7, #12]
 800969e:	e7fe      	b.n	800969e <pvPortMalloc+0x162>
	return pvReturn;
 80096a0:	69fb      	ldr	r3, [r7, #28]
}
 80096a2:	4618      	mov	r0, r3
 80096a4:	3728      	adds	r7, #40	; 0x28
 80096a6:	46bd      	mov	sp, r7
 80096a8:	bd80      	pop	{r7, pc}
 80096aa:	bf00      	nop
 80096ac:	20001000 	.word	0x20001000
 80096b0:	2000100c 	.word	0x2000100c
 80096b4:	20001004 	.word	0x20001004
 80096b8:	20000ff8 	.word	0x20000ff8
 80096bc:	20001008 	.word	0x20001008

080096c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b086      	sub	sp, #24
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d046      	beq.n	8009760 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80096d2:	2308      	movs	r3, #8
 80096d4:	425b      	negs	r3, r3
 80096d6:	697a      	ldr	r2, [r7, #20]
 80096d8:	4413      	add	r3, r2
 80096da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80096dc:	697b      	ldr	r3, [r7, #20]
 80096de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80096e0:	693b      	ldr	r3, [r7, #16]
 80096e2:	685a      	ldr	r2, [r3, #4]
 80096e4:	4b20      	ldr	r3, [pc, #128]	; (8009768 <vPortFree+0xa8>)
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	4013      	ands	r3, r2
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d109      	bne.n	8009702 <vPortFree+0x42>
 80096ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096f2:	f383 8811 	msr	BASEPRI, r3
 80096f6:	f3bf 8f6f 	isb	sy
 80096fa:	f3bf 8f4f 	dsb	sy
 80096fe:	60fb      	str	r3, [r7, #12]
 8009700:	e7fe      	b.n	8009700 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009702:	693b      	ldr	r3, [r7, #16]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d009      	beq.n	800971e <vPortFree+0x5e>
 800970a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800970e:	f383 8811 	msr	BASEPRI, r3
 8009712:	f3bf 8f6f 	isb	sy
 8009716:	f3bf 8f4f 	dsb	sy
 800971a:	60bb      	str	r3, [r7, #8]
 800971c:	e7fe      	b.n	800971c <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800971e:	693b      	ldr	r3, [r7, #16]
 8009720:	685a      	ldr	r2, [r3, #4]
 8009722:	4b11      	ldr	r3, [pc, #68]	; (8009768 <vPortFree+0xa8>)
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	4013      	ands	r3, r2
 8009728:	2b00      	cmp	r3, #0
 800972a:	d019      	beq.n	8009760 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800972c:	693b      	ldr	r3, [r7, #16]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d115      	bne.n	8009760 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009734:	693b      	ldr	r3, [r7, #16]
 8009736:	685a      	ldr	r2, [r3, #4]
 8009738:	4b0b      	ldr	r3, [pc, #44]	; (8009768 <vPortFree+0xa8>)
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	43db      	mvns	r3, r3
 800973e:	401a      	ands	r2, r3
 8009740:	693b      	ldr	r3, [r7, #16]
 8009742:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009744:	f000 fae6 	bl	8009d14 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009748:	693b      	ldr	r3, [r7, #16]
 800974a:	685a      	ldr	r2, [r3, #4]
 800974c:	4b07      	ldr	r3, [pc, #28]	; (800976c <vPortFree+0xac>)
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	4413      	add	r3, r2
 8009752:	4a06      	ldr	r2, [pc, #24]	; (800976c <vPortFree+0xac>)
 8009754:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009756:	6938      	ldr	r0, [r7, #16]
 8009758:	f000 f86c 	bl	8009834 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800975c:	f000 fae8 	bl	8009d30 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009760:	bf00      	nop
 8009762:	3718      	adds	r7, #24
 8009764:	46bd      	mov	sp, r7
 8009766:	bd80      	pop	{r7, pc}
 8009768:	2000100c 	.word	0x2000100c
 800976c:	20001004 	.word	0x20001004

08009770 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009770:	b480      	push	{r7}
 8009772:	b085      	sub	sp, #20
 8009774:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009776:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800977a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800977c:	4b27      	ldr	r3, [pc, #156]	; (800981c <prvHeapInit+0xac>)
 800977e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	f003 0307 	and.w	r3, r3, #7
 8009786:	2b00      	cmp	r3, #0
 8009788:	d00c      	beq.n	80097a4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	3307      	adds	r3, #7
 800978e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	f023 0307 	bic.w	r3, r3, #7
 8009796:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009798:	68ba      	ldr	r2, [r7, #8]
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	1ad3      	subs	r3, r2, r3
 800979e:	4a1f      	ldr	r2, [pc, #124]	; (800981c <prvHeapInit+0xac>)
 80097a0:	4413      	add	r3, r2
 80097a2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80097a8:	4a1d      	ldr	r2, [pc, #116]	; (8009820 <prvHeapInit+0xb0>)
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80097ae:	4b1c      	ldr	r3, [pc, #112]	; (8009820 <prvHeapInit+0xb0>)
 80097b0:	2200      	movs	r2, #0
 80097b2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80097b4:	687a      	ldr	r2, [r7, #4]
 80097b6:	68bb      	ldr	r3, [r7, #8]
 80097b8:	4413      	add	r3, r2
 80097ba:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80097bc:	2208      	movs	r2, #8
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	1a9b      	subs	r3, r3, r2
 80097c2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	f023 0307 	bic.w	r3, r3, #7
 80097ca:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	4a15      	ldr	r2, [pc, #84]	; (8009824 <prvHeapInit+0xb4>)
 80097d0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80097d2:	4b14      	ldr	r3, [pc, #80]	; (8009824 <prvHeapInit+0xb4>)
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	2200      	movs	r2, #0
 80097d8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80097da:	4b12      	ldr	r3, [pc, #72]	; (8009824 <prvHeapInit+0xb4>)
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	2200      	movs	r2, #0
 80097e0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80097e6:	683b      	ldr	r3, [r7, #0]
 80097e8:	68fa      	ldr	r2, [r7, #12]
 80097ea:	1ad2      	subs	r2, r2, r3
 80097ec:	683b      	ldr	r3, [r7, #0]
 80097ee:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80097f0:	4b0c      	ldr	r3, [pc, #48]	; (8009824 <prvHeapInit+0xb4>)
 80097f2:	681a      	ldr	r2, [r3, #0]
 80097f4:	683b      	ldr	r3, [r7, #0]
 80097f6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80097f8:	683b      	ldr	r3, [r7, #0]
 80097fa:	685b      	ldr	r3, [r3, #4]
 80097fc:	4a0a      	ldr	r2, [pc, #40]	; (8009828 <prvHeapInit+0xb8>)
 80097fe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009800:	683b      	ldr	r3, [r7, #0]
 8009802:	685b      	ldr	r3, [r3, #4]
 8009804:	4a09      	ldr	r2, [pc, #36]	; (800982c <prvHeapInit+0xbc>)
 8009806:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009808:	4b09      	ldr	r3, [pc, #36]	; (8009830 <prvHeapInit+0xc0>)
 800980a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800980e:	601a      	str	r2, [r3, #0]
}
 8009810:	bf00      	nop
 8009812:	3714      	adds	r7, #20
 8009814:	46bd      	mov	sp, r7
 8009816:	bc80      	pop	{r7}
 8009818:	4770      	bx	lr
 800981a:	bf00      	nop
 800981c:	200003f8 	.word	0x200003f8
 8009820:	20000ff8 	.word	0x20000ff8
 8009824:	20001000 	.word	0x20001000
 8009828:	20001008 	.word	0x20001008
 800982c:	20001004 	.word	0x20001004
 8009830:	2000100c 	.word	0x2000100c

08009834 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009834:	b480      	push	{r7}
 8009836:	b085      	sub	sp, #20
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800983c:	4b27      	ldr	r3, [pc, #156]	; (80098dc <prvInsertBlockIntoFreeList+0xa8>)
 800983e:	60fb      	str	r3, [r7, #12]
 8009840:	e002      	b.n	8009848 <prvInsertBlockIntoFreeList+0x14>
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	60fb      	str	r3, [r7, #12]
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	681a      	ldr	r2, [r3, #0]
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	429a      	cmp	r2, r3
 8009850:	d3f7      	bcc.n	8009842 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	685b      	ldr	r3, [r3, #4]
 800985a:	68ba      	ldr	r2, [r7, #8]
 800985c:	441a      	add	r2, r3
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	429a      	cmp	r2, r3
 8009862:	d108      	bne.n	8009876 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	685a      	ldr	r2, [r3, #4]
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	685b      	ldr	r3, [r3, #4]
 800986c:	441a      	add	r2, r3
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	685b      	ldr	r3, [r3, #4]
 800987e:	68ba      	ldr	r2, [r7, #8]
 8009880:	441a      	add	r2, r3
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	429a      	cmp	r2, r3
 8009888:	d118      	bne.n	80098bc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	681a      	ldr	r2, [r3, #0]
 800988e:	4b14      	ldr	r3, [pc, #80]	; (80098e0 <prvInsertBlockIntoFreeList+0xac>)
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	429a      	cmp	r2, r3
 8009894:	d00d      	beq.n	80098b2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	685a      	ldr	r2, [r3, #4]
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	685b      	ldr	r3, [r3, #4]
 80098a0:	441a      	add	r2, r3
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	681a      	ldr	r2, [r3, #0]
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	601a      	str	r2, [r3, #0]
 80098b0:	e008      	b.n	80098c4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80098b2:	4b0b      	ldr	r3, [pc, #44]	; (80098e0 <prvInsertBlockIntoFreeList+0xac>)
 80098b4:	681a      	ldr	r2, [r3, #0]
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	601a      	str	r2, [r3, #0]
 80098ba:	e003      	b.n	80098c4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	681a      	ldr	r2, [r3, #0]
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80098c4:	68fa      	ldr	r2, [r7, #12]
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	429a      	cmp	r2, r3
 80098ca:	d002      	beq.n	80098d2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	687a      	ldr	r2, [r7, #4]
 80098d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80098d2:	bf00      	nop
 80098d4:	3714      	adds	r7, #20
 80098d6:	46bd      	mov	sp, r7
 80098d8:	bc80      	pop	{r7}
 80098da:	4770      	bx	lr
 80098dc:	20000ff8 	.word	0x20000ff8
 80098e0:	20001000 	.word	0x20001000

080098e4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b08e      	sub	sp, #56	; 0x38
 80098e8:	af04      	add	r7, sp, #16
 80098ea:	60f8      	str	r0, [r7, #12]
 80098ec:	60b9      	str	r1, [r7, #8]
 80098ee:	607a      	str	r2, [r7, #4]
 80098f0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80098f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d109      	bne.n	800990c <xTaskCreateStatic+0x28>
 80098f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098fc:	f383 8811 	msr	BASEPRI, r3
 8009900:	f3bf 8f6f 	isb	sy
 8009904:	f3bf 8f4f 	dsb	sy
 8009908:	623b      	str	r3, [r7, #32]
 800990a:	e7fe      	b.n	800990a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800990c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800990e:	2b00      	cmp	r3, #0
 8009910:	d109      	bne.n	8009926 <xTaskCreateStatic+0x42>
 8009912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009916:	f383 8811 	msr	BASEPRI, r3
 800991a:	f3bf 8f6f 	isb	sy
 800991e:	f3bf 8f4f 	dsb	sy
 8009922:	61fb      	str	r3, [r7, #28]
 8009924:	e7fe      	b.n	8009924 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009926:	2354      	movs	r3, #84	; 0x54
 8009928:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800992a:	693b      	ldr	r3, [r7, #16]
 800992c:	2b54      	cmp	r3, #84	; 0x54
 800992e:	d009      	beq.n	8009944 <xTaskCreateStatic+0x60>
 8009930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009934:	f383 8811 	msr	BASEPRI, r3
 8009938:	f3bf 8f6f 	isb	sy
 800993c:	f3bf 8f4f 	dsb	sy
 8009940:	61bb      	str	r3, [r7, #24]
 8009942:	e7fe      	b.n	8009942 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009946:	2b00      	cmp	r3, #0
 8009948:	d01e      	beq.n	8009988 <xTaskCreateStatic+0xa4>
 800994a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800994c:	2b00      	cmp	r3, #0
 800994e:	d01b      	beq.n	8009988 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009952:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009956:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009958:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800995a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800995c:	2202      	movs	r2, #2
 800995e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009962:	2300      	movs	r3, #0
 8009964:	9303      	str	r3, [sp, #12]
 8009966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009968:	9302      	str	r3, [sp, #8]
 800996a:	f107 0314 	add.w	r3, r7, #20
 800996e:	9301      	str	r3, [sp, #4]
 8009970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009972:	9300      	str	r3, [sp, #0]
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	687a      	ldr	r2, [r7, #4]
 8009978:	68b9      	ldr	r1, [r7, #8]
 800997a:	68f8      	ldr	r0, [r7, #12]
 800997c:	f000 f850 	bl	8009a20 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009980:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009982:	f000 f8cb 	bl	8009b1c <prvAddNewTaskToReadyList>
 8009986:	e001      	b.n	800998c <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8009988:	2300      	movs	r3, #0
 800998a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800998c:	697b      	ldr	r3, [r7, #20]
	}
 800998e:	4618      	mov	r0, r3
 8009990:	3728      	adds	r7, #40	; 0x28
 8009992:	46bd      	mov	sp, r7
 8009994:	bd80      	pop	{r7, pc}

08009996 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009996:	b580      	push	{r7, lr}
 8009998:	b08c      	sub	sp, #48	; 0x30
 800999a:	af04      	add	r7, sp, #16
 800999c:	60f8      	str	r0, [r7, #12]
 800999e:	60b9      	str	r1, [r7, #8]
 80099a0:	603b      	str	r3, [r7, #0]
 80099a2:	4613      	mov	r3, r2
 80099a4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80099a6:	88fb      	ldrh	r3, [r7, #6]
 80099a8:	009b      	lsls	r3, r3, #2
 80099aa:	4618      	mov	r0, r3
 80099ac:	f7ff fdc6 	bl	800953c <pvPortMalloc>
 80099b0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80099b2:	697b      	ldr	r3, [r7, #20]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d00e      	beq.n	80099d6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80099b8:	2054      	movs	r0, #84	; 0x54
 80099ba:	f7ff fdbf 	bl	800953c <pvPortMalloc>
 80099be:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80099c0:	69fb      	ldr	r3, [r7, #28]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d003      	beq.n	80099ce <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80099c6:	69fb      	ldr	r3, [r7, #28]
 80099c8:	697a      	ldr	r2, [r7, #20]
 80099ca:	631a      	str	r2, [r3, #48]	; 0x30
 80099cc:	e005      	b.n	80099da <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80099ce:	6978      	ldr	r0, [r7, #20]
 80099d0:	f7ff fe76 	bl	80096c0 <vPortFree>
 80099d4:	e001      	b.n	80099da <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80099d6:	2300      	movs	r3, #0
 80099d8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80099da:	69fb      	ldr	r3, [r7, #28]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d017      	beq.n	8009a10 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80099e0:	69fb      	ldr	r3, [r7, #28]
 80099e2:	2200      	movs	r2, #0
 80099e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80099e8:	88fa      	ldrh	r2, [r7, #6]
 80099ea:	2300      	movs	r3, #0
 80099ec:	9303      	str	r3, [sp, #12]
 80099ee:	69fb      	ldr	r3, [r7, #28]
 80099f0:	9302      	str	r3, [sp, #8]
 80099f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099f4:	9301      	str	r3, [sp, #4]
 80099f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099f8:	9300      	str	r3, [sp, #0]
 80099fa:	683b      	ldr	r3, [r7, #0]
 80099fc:	68b9      	ldr	r1, [r7, #8]
 80099fe:	68f8      	ldr	r0, [r7, #12]
 8009a00:	f000 f80e 	bl	8009a20 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009a04:	69f8      	ldr	r0, [r7, #28]
 8009a06:	f000 f889 	bl	8009b1c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009a0a:	2301      	movs	r3, #1
 8009a0c:	61bb      	str	r3, [r7, #24]
 8009a0e:	e002      	b.n	8009a16 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009a10:	f04f 33ff 	mov.w	r3, #4294967295
 8009a14:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009a16:	69bb      	ldr	r3, [r7, #24]
	}
 8009a18:	4618      	mov	r0, r3
 8009a1a:	3720      	adds	r7, #32
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	bd80      	pop	{r7, pc}

08009a20 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b088      	sub	sp, #32
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	60f8      	str	r0, [r7, #12]
 8009a28:	60b9      	str	r1, [r7, #8]
 8009a2a:	607a      	str	r2, [r7, #4]
 8009a2c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8009a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009a38:	3b01      	subs	r3, #1
 8009a3a:	009b      	lsls	r3, r3, #2
 8009a3c:	4413      	add	r3, r2
 8009a3e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8009a40:	69bb      	ldr	r3, [r7, #24]
 8009a42:	f023 0307 	bic.w	r3, r3, #7
 8009a46:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009a48:	69bb      	ldr	r3, [r7, #24]
 8009a4a:	f003 0307 	and.w	r3, r3, #7
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d009      	beq.n	8009a66 <prvInitialiseNewTask+0x46>
 8009a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a56:	f383 8811 	msr	BASEPRI, r3
 8009a5a:	f3bf 8f6f 	isb	sy
 8009a5e:	f3bf 8f4f 	dsb	sy
 8009a62:	617b      	str	r3, [r7, #20]
 8009a64:	e7fe      	b.n	8009a64 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009a66:	2300      	movs	r3, #0
 8009a68:	61fb      	str	r3, [r7, #28]
 8009a6a:	e012      	b.n	8009a92 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009a6c:	68ba      	ldr	r2, [r7, #8]
 8009a6e:	69fb      	ldr	r3, [r7, #28]
 8009a70:	4413      	add	r3, r2
 8009a72:	7819      	ldrb	r1, [r3, #0]
 8009a74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a76:	69fb      	ldr	r3, [r7, #28]
 8009a78:	4413      	add	r3, r2
 8009a7a:	3334      	adds	r3, #52	; 0x34
 8009a7c:	460a      	mov	r2, r1
 8009a7e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8009a80:	68ba      	ldr	r2, [r7, #8]
 8009a82:	69fb      	ldr	r3, [r7, #28]
 8009a84:	4413      	add	r3, r2
 8009a86:	781b      	ldrb	r3, [r3, #0]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d006      	beq.n	8009a9a <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009a8c:	69fb      	ldr	r3, [r7, #28]
 8009a8e:	3301      	adds	r3, #1
 8009a90:	61fb      	str	r3, [r7, #28]
 8009a92:	69fb      	ldr	r3, [r7, #28]
 8009a94:	2b0f      	cmp	r3, #15
 8009a96:	d9e9      	bls.n	8009a6c <prvInitialiseNewTask+0x4c>
 8009a98:	e000      	b.n	8009a9c <prvInitialiseNewTask+0x7c>
		{
			break;
 8009a9a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aa6:	2b06      	cmp	r3, #6
 8009aa8:	d901      	bls.n	8009aae <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009aaa:	2306      	movs	r3, #6
 8009aac:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ab0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009ab2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ab6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009ab8:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8009aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009abc:	2200      	movs	r2, #0
 8009abe:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ac2:	3304      	adds	r3, #4
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	f7ff fb04 	bl	80090d2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009acc:	3318      	adds	r3, #24
 8009ace:	4618      	mov	r0, r3
 8009ad0:	f7ff faff 	bl	80090d2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ad6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ad8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009adc:	f1c3 0207 	rsb	r2, r3, #7
 8009ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ae2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ae6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ae8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aec:	2200      	movs	r2, #0
 8009aee:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009af2:	2200      	movs	r2, #0
 8009af4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009af8:	683a      	ldr	r2, [r7, #0]
 8009afa:	68f9      	ldr	r1, [r7, #12]
 8009afc:	69b8      	ldr	r0, [r7, #24]
 8009afe:	f7ff fb79 	bl	80091f4 <pxPortInitialiseStack>
 8009b02:	4602      	mov	r2, r0
 8009b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b06:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8009b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d002      	beq.n	8009b14 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b12:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009b14:	bf00      	nop
 8009b16:	3720      	adds	r7, #32
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	bd80      	pop	{r7, pc}

08009b1c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	b082      	sub	sp, #8
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009b24:	f7ff fc50 	bl	80093c8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009b28:	4b2a      	ldr	r3, [pc, #168]	; (8009bd4 <prvAddNewTaskToReadyList+0xb8>)
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	3301      	adds	r3, #1
 8009b2e:	4a29      	ldr	r2, [pc, #164]	; (8009bd4 <prvAddNewTaskToReadyList+0xb8>)
 8009b30:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009b32:	4b29      	ldr	r3, [pc, #164]	; (8009bd8 <prvAddNewTaskToReadyList+0xbc>)
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d109      	bne.n	8009b4e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009b3a:	4a27      	ldr	r2, [pc, #156]	; (8009bd8 <prvAddNewTaskToReadyList+0xbc>)
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009b40:	4b24      	ldr	r3, [pc, #144]	; (8009bd4 <prvAddNewTaskToReadyList+0xb8>)
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	2b01      	cmp	r3, #1
 8009b46:	d110      	bne.n	8009b6a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009b48:	f000 fabc 	bl	800a0c4 <prvInitialiseTaskLists>
 8009b4c:	e00d      	b.n	8009b6a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009b4e:	4b23      	ldr	r3, [pc, #140]	; (8009bdc <prvAddNewTaskToReadyList+0xc0>)
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d109      	bne.n	8009b6a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009b56:	4b20      	ldr	r3, [pc, #128]	; (8009bd8 <prvAddNewTaskToReadyList+0xbc>)
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b60:	429a      	cmp	r2, r3
 8009b62:	d802      	bhi.n	8009b6a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009b64:	4a1c      	ldr	r2, [pc, #112]	; (8009bd8 <prvAddNewTaskToReadyList+0xbc>)
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009b6a:	4b1d      	ldr	r3, [pc, #116]	; (8009be0 <prvAddNewTaskToReadyList+0xc4>)
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	3301      	adds	r3, #1
 8009b70:	4a1b      	ldr	r2, [pc, #108]	; (8009be0 <prvAddNewTaskToReadyList+0xc4>)
 8009b72:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b78:	2201      	movs	r2, #1
 8009b7a:	409a      	lsls	r2, r3
 8009b7c:	4b19      	ldr	r3, [pc, #100]	; (8009be4 <prvAddNewTaskToReadyList+0xc8>)
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	4313      	orrs	r3, r2
 8009b82:	4a18      	ldr	r2, [pc, #96]	; (8009be4 <prvAddNewTaskToReadyList+0xc8>)
 8009b84:	6013      	str	r3, [r2, #0]
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b8a:	4613      	mov	r3, r2
 8009b8c:	009b      	lsls	r3, r3, #2
 8009b8e:	4413      	add	r3, r2
 8009b90:	009b      	lsls	r3, r3, #2
 8009b92:	4a15      	ldr	r2, [pc, #84]	; (8009be8 <prvAddNewTaskToReadyList+0xcc>)
 8009b94:	441a      	add	r2, r3
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	3304      	adds	r3, #4
 8009b9a:	4619      	mov	r1, r3
 8009b9c:	4610      	mov	r0, r2
 8009b9e:	f7ff faa4 	bl	80090ea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009ba2:	f7ff fc3f 	bl	8009424 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009ba6:	4b0d      	ldr	r3, [pc, #52]	; (8009bdc <prvAddNewTaskToReadyList+0xc0>)
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d00e      	beq.n	8009bcc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009bae:	4b0a      	ldr	r3, [pc, #40]	; (8009bd8 <prvAddNewTaskToReadyList+0xbc>)
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bb8:	429a      	cmp	r2, r3
 8009bba:	d207      	bcs.n	8009bcc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009bbc:	4b0b      	ldr	r3, [pc, #44]	; (8009bec <prvAddNewTaskToReadyList+0xd0>)
 8009bbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009bc2:	601a      	str	r2, [r3, #0]
 8009bc4:	f3bf 8f4f 	dsb	sy
 8009bc8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009bcc:	bf00      	nop
 8009bce:	3708      	adds	r7, #8
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	bd80      	pop	{r7, pc}
 8009bd4:	20001110 	.word	0x20001110
 8009bd8:	20001010 	.word	0x20001010
 8009bdc:	2000111c 	.word	0x2000111c
 8009be0:	2000112c 	.word	0x2000112c
 8009be4:	20001118 	.word	0x20001118
 8009be8:	20001014 	.word	0x20001014
 8009bec:	e000ed04 	.word	0xe000ed04

08009bf0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b084      	sub	sp, #16
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d016      	beq.n	8009c30 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009c02:	4b13      	ldr	r3, [pc, #76]	; (8009c50 <vTaskDelay+0x60>)
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d009      	beq.n	8009c1e <vTaskDelay+0x2e>
 8009c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c0e:	f383 8811 	msr	BASEPRI, r3
 8009c12:	f3bf 8f6f 	isb	sy
 8009c16:	f3bf 8f4f 	dsb	sy
 8009c1a:	60bb      	str	r3, [r7, #8]
 8009c1c:	e7fe      	b.n	8009c1c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8009c1e:	f000 f879 	bl	8009d14 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009c22:	2100      	movs	r1, #0
 8009c24:	6878      	ldr	r0, [r7, #4]
 8009c26:	f000 fb0b 	bl	800a240 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009c2a:	f000 f881 	bl	8009d30 <xTaskResumeAll>
 8009c2e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d107      	bne.n	8009c46 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8009c36:	4b07      	ldr	r3, [pc, #28]	; (8009c54 <vTaskDelay+0x64>)
 8009c38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c3c:	601a      	str	r2, [r3, #0]
 8009c3e:	f3bf 8f4f 	dsb	sy
 8009c42:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009c46:	bf00      	nop
 8009c48:	3710      	adds	r7, #16
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	bd80      	pop	{r7, pc}
 8009c4e:	bf00      	nop
 8009c50:	20001138 	.word	0x20001138
 8009c54:	e000ed04 	.word	0xe000ed04

08009c58 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b08a      	sub	sp, #40	; 0x28
 8009c5c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009c5e:	2300      	movs	r3, #0
 8009c60:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009c62:	2300      	movs	r3, #0
 8009c64:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009c66:	463a      	mov	r2, r7
 8009c68:	1d39      	adds	r1, r7, #4
 8009c6a:	f107 0308 	add.w	r3, r7, #8
 8009c6e:	4618      	mov	r0, r3
 8009c70:	f7f6 faa4 	bl	80001bc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009c74:	6839      	ldr	r1, [r7, #0]
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	68ba      	ldr	r2, [r7, #8]
 8009c7a:	9202      	str	r2, [sp, #8]
 8009c7c:	9301      	str	r3, [sp, #4]
 8009c7e:	2300      	movs	r3, #0
 8009c80:	9300      	str	r3, [sp, #0]
 8009c82:	2300      	movs	r3, #0
 8009c84:	460a      	mov	r2, r1
 8009c86:	491d      	ldr	r1, [pc, #116]	; (8009cfc <vTaskStartScheduler+0xa4>)
 8009c88:	481d      	ldr	r0, [pc, #116]	; (8009d00 <vTaskStartScheduler+0xa8>)
 8009c8a:	f7ff fe2b 	bl	80098e4 <xTaskCreateStatic>
 8009c8e:	4602      	mov	r2, r0
 8009c90:	4b1c      	ldr	r3, [pc, #112]	; (8009d04 <vTaskStartScheduler+0xac>)
 8009c92:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009c94:	4b1b      	ldr	r3, [pc, #108]	; (8009d04 <vTaskStartScheduler+0xac>)
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d002      	beq.n	8009ca2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009c9c:	2301      	movs	r3, #1
 8009c9e:	617b      	str	r3, [r7, #20]
 8009ca0:	e001      	b.n	8009ca6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009ca6:	697b      	ldr	r3, [r7, #20]
 8009ca8:	2b01      	cmp	r3, #1
 8009caa:	d115      	bne.n	8009cd8 <vTaskStartScheduler+0x80>
 8009cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cb0:	f383 8811 	msr	BASEPRI, r3
 8009cb4:	f3bf 8f6f 	isb	sy
 8009cb8:	f3bf 8f4f 	dsb	sy
 8009cbc:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009cbe:	4b12      	ldr	r3, [pc, #72]	; (8009d08 <vTaskStartScheduler+0xb0>)
 8009cc0:	f04f 32ff 	mov.w	r2, #4294967295
 8009cc4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009cc6:	4b11      	ldr	r3, [pc, #68]	; (8009d0c <vTaskStartScheduler+0xb4>)
 8009cc8:	2201      	movs	r2, #1
 8009cca:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8009ccc:	4b10      	ldr	r3, [pc, #64]	; (8009d10 <vTaskStartScheduler+0xb8>)
 8009cce:	2200      	movs	r2, #0
 8009cd0:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009cd2:	f7ff fb09 	bl	80092e8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009cd6:	e00d      	b.n	8009cf4 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009cd8:	697b      	ldr	r3, [r7, #20]
 8009cda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cde:	d109      	bne.n	8009cf4 <vTaskStartScheduler+0x9c>
 8009ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ce4:	f383 8811 	msr	BASEPRI, r3
 8009ce8:	f3bf 8f6f 	isb	sy
 8009cec:	f3bf 8f4f 	dsb	sy
 8009cf0:	60fb      	str	r3, [r7, #12]
 8009cf2:	e7fe      	b.n	8009cf2 <vTaskStartScheduler+0x9a>
}
 8009cf4:	bf00      	nop
 8009cf6:	3718      	adds	r7, #24
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	bd80      	pop	{r7, pc}
 8009cfc:	0800b188 	.word	0x0800b188
 8009d00:	0800a095 	.word	0x0800a095
 8009d04:	20001134 	.word	0x20001134
 8009d08:	20001130 	.word	0x20001130
 8009d0c:	2000111c 	.word	0x2000111c
 8009d10:	20001114 	.word	0x20001114

08009d14 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009d14:	b480      	push	{r7}
 8009d16:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009d18:	4b04      	ldr	r3, [pc, #16]	; (8009d2c <vTaskSuspendAll+0x18>)
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	3301      	adds	r3, #1
 8009d1e:	4a03      	ldr	r2, [pc, #12]	; (8009d2c <vTaskSuspendAll+0x18>)
 8009d20:	6013      	str	r3, [r2, #0]
}
 8009d22:	bf00      	nop
 8009d24:	46bd      	mov	sp, r7
 8009d26:	bc80      	pop	{r7}
 8009d28:	4770      	bx	lr
 8009d2a:	bf00      	nop
 8009d2c:	20001138 	.word	0x20001138

08009d30 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b084      	sub	sp, #16
 8009d34:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009d36:	2300      	movs	r3, #0
 8009d38:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009d3e:	4b41      	ldr	r3, [pc, #260]	; (8009e44 <xTaskResumeAll+0x114>)
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d109      	bne.n	8009d5a <xTaskResumeAll+0x2a>
 8009d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d4a:	f383 8811 	msr	BASEPRI, r3
 8009d4e:	f3bf 8f6f 	isb	sy
 8009d52:	f3bf 8f4f 	dsb	sy
 8009d56:	603b      	str	r3, [r7, #0]
 8009d58:	e7fe      	b.n	8009d58 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009d5a:	f7ff fb35 	bl	80093c8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009d5e:	4b39      	ldr	r3, [pc, #228]	; (8009e44 <xTaskResumeAll+0x114>)
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	3b01      	subs	r3, #1
 8009d64:	4a37      	ldr	r2, [pc, #220]	; (8009e44 <xTaskResumeAll+0x114>)
 8009d66:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009d68:	4b36      	ldr	r3, [pc, #216]	; (8009e44 <xTaskResumeAll+0x114>)
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d161      	bne.n	8009e34 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009d70:	4b35      	ldr	r3, [pc, #212]	; (8009e48 <xTaskResumeAll+0x118>)
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d05d      	beq.n	8009e34 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009d78:	e02e      	b.n	8009dd8 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8009d7a:	4b34      	ldr	r3, [pc, #208]	; (8009e4c <xTaskResumeAll+0x11c>)
 8009d7c:	68db      	ldr	r3, [r3, #12]
 8009d7e:	68db      	ldr	r3, [r3, #12]
 8009d80:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	3318      	adds	r3, #24
 8009d86:	4618      	mov	r0, r3
 8009d88:	f7ff fa0a 	bl	80091a0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	3304      	adds	r3, #4
 8009d90:	4618      	mov	r0, r3
 8009d92:	f7ff fa05 	bl	80091a0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d9a:	2201      	movs	r2, #1
 8009d9c:	409a      	lsls	r2, r3
 8009d9e:	4b2c      	ldr	r3, [pc, #176]	; (8009e50 <xTaskResumeAll+0x120>)
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	4313      	orrs	r3, r2
 8009da4:	4a2a      	ldr	r2, [pc, #168]	; (8009e50 <xTaskResumeAll+0x120>)
 8009da6:	6013      	str	r3, [r2, #0]
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009dac:	4613      	mov	r3, r2
 8009dae:	009b      	lsls	r3, r3, #2
 8009db0:	4413      	add	r3, r2
 8009db2:	009b      	lsls	r3, r3, #2
 8009db4:	4a27      	ldr	r2, [pc, #156]	; (8009e54 <xTaskResumeAll+0x124>)
 8009db6:	441a      	add	r2, r3
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	3304      	adds	r3, #4
 8009dbc:	4619      	mov	r1, r3
 8009dbe:	4610      	mov	r0, r2
 8009dc0:	f7ff f993 	bl	80090ea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009dc8:	4b23      	ldr	r3, [pc, #140]	; (8009e58 <xTaskResumeAll+0x128>)
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dce:	429a      	cmp	r2, r3
 8009dd0:	d302      	bcc.n	8009dd8 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8009dd2:	4b22      	ldr	r3, [pc, #136]	; (8009e5c <xTaskResumeAll+0x12c>)
 8009dd4:	2201      	movs	r2, #1
 8009dd6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009dd8:	4b1c      	ldr	r3, [pc, #112]	; (8009e4c <xTaskResumeAll+0x11c>)
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d1cc      	bne.n	8009d7a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d001      	beq.n	8009dea <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009de6:	f000 fa07 	bl	800a1f8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009dea:	4b1d      	ldr	r3, [pc, #116]	; (8009e60 <xTaskResumeAll+0x130>)
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d010      	beq.n	8009e18 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009df6:	f000 f837 	bl	8009e68 <xTaskIncrementTick>
 8009dfa:	4603      	mov	r3, r0
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d002      	beq.n	8009e06 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8009e00:	4b16      	ldr	r3, [pc, #88]	; (8009e5c <xTaskResumeAll+0x12c>)
 8009e02:	2201      	movs	r2, #1
 8009e04:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	3b01      	subs	r3, #1
 8009e0a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d1f1      	bne.n	8009df6 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8009e12:	4b13      	ldr	r3, [pc, #76]	; (8009e60 <xTaskResumeAll+0x130>)
 8009e14:	2200      	movs	r2, #0
 8009e16:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009e18:	4b10      	ldr	r3, [pc, #64]	; (8009e5c <xTaskResumeAll+0x12c>)
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d009      	beq.n	8009e34 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009e20:	2301      	movs	r3, #1
 8009e22:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009e24:	4b0f      	ldr	r3, [pc, #60]	; (8009e64 <xTaskResumeAll+0x134>)
 8009e26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e2a:	601a      	str	r2, [r3, #0]
 8009e2c:	f3bf 8f4f 	dsb	sy
 8009e30:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009e34:	f7ff faf6 	bl	8009424 <vPortExitCritical>

	return xAlreadyYielded;
 8009e38:	68bb      	ldr	r3, [r7, #8]
}
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	3710      	adds	r7, #16
 8009e3e:	46bd      	mov	sp, r7
 8009e40:	bd80      	pop	{r7, pc}
 8009e42:	bf00      	nop
 8009e44:	20001138 	.word	0x20001138
 8009e48:	20001110 	.word	0x20001110
 8009e4c:	200010d0 	.word	0x200010d0
 8009e50:	20001118 	.word	0x20001118
 8009e54:	20001014 	.word	0x20001014
 8009e58:	20001010 	.word	0x20001010
 8009e5c:	20001124 	.word	0x20001124
 8009e60:	20001120 	.word	0x20001120
 8009e64:	e000ed04 	.word	0xe000ed04

08009e68 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b086      	sub	sp, #24
 8009e6c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009e6e:	2300      	movs	r3, #0
 8009e70:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009e72:	4b50      	ldr	r3, [pc, #320]	; (8009fb4 <xTaskIncrementTick+0x14c>)
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	f040 808c 	bne.w	8009f94 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009e7c:	4b4e      	ldr	r3, [pc, #312]	; (8009fb8 <xTaskIncrementTick+0x150>)
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	3301      	adds	r3, #1
 8009e82:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009e84:	4a4c      	ldr	r2, [pc, #304]	; (8009fb8 <xTaskIncrementTick+0x150>)
 8009e86:	693b      	ldr	r3, [r7, #16]
 8009e88:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009e8a:	693b      	ldr	r3, [r7, #16]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d11f      	bne.n	8009ed0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8009e90:	4b4a      	ldr	r3, [pc, #296]	; (8009fbc <xTaskIncrementTick+0x154>)
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d009      	beq.n	8009eae <xTaskIncrementTick+0x46>
 8009e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e9e:	f383 8811 	msr	BASEPRI, r3
 8009ea2:	f3bf 8f6f 	isb	sy
 8009ea6:	f3bf 8f4f 	dsb	sy
 8009eaa:	603b      	str	r3, [r7, #0]
 8009eac:	e7fe      	b.n	8009eac <xTaskIncrementTick+0x44>
 8009eae:	4b43      	ldr	r3, [pc, #268]	; (8009fbc <xTaskIncrementTick+0x154>)
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	60fb      	str	r3, [r7, #12]
 8009eb4:	4b42      	ldr	r3, [pc, #264]	; (8009fc0 <xTaskIncrementTick+0x158>)
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	4a40      	ldr	r2, [pc, #256]	; (8009fbc <xTaskIncrementTick+0x154>)
 8009eba:	6013      	str	r3, [r2, #0]
 8009ebc:	4a40      	ldr	r2, [pc, #256]	; (8009fc0 <xTaskIncrementTick+0x158>)
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	6013      	str	r3, [r2, #0]
 8009ec2:	4b40      	ldr	r3, [pc, #256]	; (8009fc4 <xTaskIncrementTick+0x15c>)
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	3301      	adds	r3, #1
 8009ec8:	4a3e      	ldr	r2, [pc, #248]	; (8009fc4 <xTaskIncrementTick+0x15c>)
 8009eca:	6013      	str	r3, [r2, #0]
 8009ecc:	f000 f994 	bl	800a1f8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009ed0:	4b3d      	ldr	r3, [pc, #244]	; (8009fc8 <xTaskIncrementTick+0x160>)
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	693a      	ldr	r2, [r7, #16]
 8009ed6:	429a      	cmp	r2, r3
 8009ed8:	d34d      	bcc.n	8009f76 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009eda:	4b38      	ldr	r3, [pc, #224]	; (8009fbc <xTaskIncrementTick+0x154>)
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d101      	bne.n	8009ee8 <xTaskIncrementTick+0x80>
 8009ee4:	2301      	movs	r3, #1
 8009ee6:	e000      	b.n	8009eea <xTaskIncrementTick+0x82>
 8009ee8:	2300      	movs	r3, #0
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d004      	beq.n	8009ef8 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009eee:	4b36      	ldr	r3, [pc, #216]	; (8009fc8 <xTaskIncrementTick+0x160>)
 8009ef0:	f04f 32ff 	mov.w	r2, #4294967295
 8009ef4:	601a      	str	r2, [r3, #0]
					break;
 8009ef6:	e03e      	b.n	8009f76 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009ef8:	4b30      	ldr	r3, [pc, #192]	; (8009fbc <xTaskIncrementTick+0x154>)
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	68db      	ldr	r3, [r3, #12]
 8009efe:	68db      	ldr	r3, [r3, #12]
 8009f00:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009f02:	68bb      	ldr	r3, [r7, #8]
 8009f04:	685b      	ldr	r3, [r3, #4]
 8009f06:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009f08:	693a      	ldr	r2, [r7, #16]
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	429a      	cmp	r2, r3
 8009f0e:	d203      	bcs.n	8009f18 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009f10:	4a2d      	ldr	r2, [pc, #180]	; (8009fc8 <xTaskIncrementTick+0x160>)
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	6013      	str	r3, [r2, #0]
						break;
 8009f16:	e02e      	b.n	8009f76 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009f18:	68bb      	ldr	r3, [r7, #8]
 8009f1a:	3304      	adds	r3, #4
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	f7ff f93f 	bl	80091a0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009f22:	68bb      	ldr	r3, [r7, #8]
 8009f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d004      	beq.n	8009f34 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009f2a:	68bb      	ldr	r3, [r7, #8]
 8009f2c:	3318      	adds	r3, #24
 8009f2e:	4618      	mov	r0, r3
 8009f30:	f7ff f936 	bl	80091a0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009f34:	68bb      	ldr	r3, [r7, #8]
 8009f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f38:	2201      	movs	r2, #1
 8009f3a:	409a      	lsls	r2, r3
 8009f3c:	4b23      	ldr	r3, [pc, #140]	; (8009fcc <xTaskIncrementTick+0x164>)
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	4313      	orrs	r3, r2
 8009f42:	4a22      	ldr	r2, [pc, #136]	; (8009fcc <xTaskIncrementTick+0x164>)
 8009f44:	6013      	str	r3, [r2, #0]
 8009f46:	68bb      	ldr	r3, [r7, #8]
 8009f48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f4a:	4613      	mov	r3, r2
 8009f4c:	009b      	lsls	r3, r3, #2
 8009f4e:	4413      	add	r3, r2
 8009f50:	009b      	lsls	r3, r3, #2
 8009f52:	4a1f      	ldr	r2, [pc, #124]	; (8009fd0 <xTaskIncrementTick+0x168>)
 8009f54:	441a      	add	r2, r3
 8009f56:	68bb      	ldr	r3, [r7, #8]
 8009f58:	3304      	adds	r3, #4
 8009f5a:	4619      	mov	r1, r3
 8009f5c:	4610      	mov	r0, r2
 8009f5e:	f7ff f8c4 	bl	80090ea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009f62:	68bb      	ldr	r3, [r7, #8]
 8009f64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f66:	4b1b      	ldr	r3, [pc, #108]	; (8009fd4 <xTaskIncrementTick+0x16c>)
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f6c:	429a      	cmp	r2, r3
 8009f6e:	d3b4      	bcc.n	8009eda <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8009f70:	2301      	movs	r3, #1
 8009f72:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009f74:	e7b1      	b.n	8009eda <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009f76:	4b17      	ldr	r3, [pc, #92]	; (8009fd4 <xTaskIncrementTick+0x16c>)
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f7c:	4914      	ldr	r1, [pc, #80]	; (8009fd0 <xTaskIncrementTick+0x168>)
 8009f7e:	4613      	mov	r3, r2
 8009f80:	009b      	lsls	r3, r3, #2
 8009f82:	4413      	add	r3, r2
 8009f84:	009b      	lsls	r3, r3, #2
 8009f86:	440b      	add	r3, r1
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	2b01      	cmp	r3, #1
 8009f8c:	d907      	bls.n	8009f9e <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8009f8e:	2301      	movs	r3, #1
 8009f90:	617b      	str	r3, [r7, #20]
 8009f92:	e004      	b.n	8009f9e <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009f94:	4b10      	ldr	r3, [pc, #64]	; (8009fd8 <xTaskIncrementTick+0x170>)
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	3301      	adds	r3, #1
 8009f9a:	4a0f      	ldr	r2, [pc, #60]	; (8009fd8 <xTaskIncrementTick+0x170>)
 8009f9c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009f9e:	4b0f      	ldr	r3, [pc, #60]	; (8009fdc <xTaskIncrementTick+0x174>)
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d001      	beq.n	8009faa <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8009fa6:	2301      	movs	r3, #1
 8009fa8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009faa:	697b      	ldr	r3, [r7, #20]
}
 8009fac:	4618      	mov	r0, r3
 8009fae:	3718      	adds	r7, #24
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	bd80      	pop	{r7, pc}
 8009fb4:	20001138 	.word	0x20001138
 8009fb8:	20001114 	.word	0x20001114
 8009fbc:	200010c8 	.word	0x200010c8
 8009fc0:	200010cc 	.word	0x200010cc
 8009fc4:	20001128 	.word	0x20001128
 8009fc8:	20001130 	.word	0x20001130
 8009fcc:	20001118 	.word	0x20001118
 8009fd0:	20001014 	.word	0x20001014
 8009fd4:	20001010 	.word	0x20001010
 8009fd8:	20001120 	.word	0x20001120
 8009fdc:	20001124 	.word	0x20001124

08009fe0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009fe0:	b480      	push	{r7}
 8009fe2:	b087      	sub	sp, #28
 8009fe4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009fe6:	4b26      	ldr	r3, [pc, #152]	; (800a080 <vTaskSwitchContext+0xa0>)
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d003      	beq.n	8009ff6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009fee:	4b25      	ldr	r3, [pc, #148]	; (800a084 <vTaskSwitchContext+0xa4>)
 8009ff0:	2201      	movs	r2, #1
 8009ff2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009ff4:	e03e      	b.n	800a074 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8009ff6:	4b23      	ldr	r3, [pc, #140]	; (800a084 <vTaskSwitchContext+0xa4>)
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8009ffc:	4b22      	ldr	r3, [pc, #136]	; (800a088 <vTaskSwitchContext+0xa8>)
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	fab3 f383 	clz	r3, r3
 800a008:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800a00a:	7afb      	ldrb	r3, [r7, #11]
 800a00c:	f1c3 031f 	rsb	r3, r3, #31
 800a010:	617b      	str	r3, [r7, #20]
 800a012:	491e      	ldr	r1, [pc, #120]	; (800a08c <vTaskSwitchContext+0xac>)
 800a014:	697a      	ldr	r2, [r7, #20]
 800a016:	4613      	mov	r3, r2
 800a018:	009b      	lsls	r3, r3, #2
 800a01a:	4413      	add	r3, r2
 800a01c:	009b      	lsls	r3, r3, #2
 800a01e:	440b      	add	r3, r1
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d109      	bne.n	800a03a <vTaskSwitchContext+0x5a>
	__asm volatile
 800a026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a02a:	f383 8811 	msr	BASEPRI, r3
 800a02e:	f3bf 8f6f 	isb	sy
 800a032:	f3bf 8f4f 	dsb	sy
 800a036:	607b      	str	r3, [r7, #4]
 800a038:	e7fe      	b.n	800a038 <vTaskSwitchContext+0x58>
 800a03a:	697a      	ldr	r2, [r7, #20]
 800a03c:	4613      	mov	r3, r2
 800a03e:	009b      	lsls	r3, r3, #2
 800a040:	4413      	add	r3, r2
 800a042:	009b      	lsls	r3, r3, #2
 800a044:	4a11      	ldr	r2, [pc, #68]	; (800a08c <vTaskSwitchContext+0xac>)
 800a046:	4413      	add	r3, r2
 800a048:	613b      	str	r3, [r7, #16]
 800a04a:	693b      	ldr	r3, [r7, #16]
 800a04c:	685b      	ldr	r3, [r3, #4]
 800a04e:	685a      	ldr	r2, [r3, #4]
 800a050:	693b      	ldr	r3, [r7, #16]
 800a052:	605a      	str	r2, [r3, #4]
 800a054:	693b      	ldr	r3, [r7, #16]
 800a056:	685a      	ldr	r2, [r3, #4]
 800a058:	693b      	ldr	r3, [r7, #16]
 800a05a:	3308      	adds	r3, #8
 800a05c:	429a      	cmp	r2, r3
 800a05e:	d104      	bne.n	800a06a <vTaskSwitchContext+0x8a>
 800a060:	693b      	ldr	r3, [r7, #16]
 800a062:	685b      	ldr	r3, [r3, #4]
 800a064:	685a      	ldr	r2, [r3, #4]
 800a066:	693b      	ldr	r3, [r7, #16]
 800a068:	605a      	str	r2, [r3, #4]
 800a06a:	693b      	ldr	r3, [r7, #16]
 800a06c:	685b      	ldr	r3, [r3, #4]
 800a06e:	68db      	ldr	r3, [r3, #12]
 800a070:	4a07      	ldr	r2, [pc, #28]	; (800a090 <vTaskSwitchContext+0xb0>)
 800a072:	6013      	str	r3, [r2, #0]
}
 800a074:	bf00      	nop
 800a076:	371c      	adds	r7, #28
 800a078:	46bd      	mov	sp, r7
 800a07a:	bc80      	pop	{r7}
 800a07c:	4770      	bx	lr
 800a07e:	bf00      	nop
 800a080:	20001138 	.word	0x20001138
 800a084:	20001124 	.word	0x20001124
 800a088:	20001118 	.word	0x20001118
 800a08c:	20001014 	.word	0x20001014
 800a090:	20001010 	.word	0x20001010

0800a094 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b082      	sub	sp, #8
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a09c:	f000 f852 	bl	800a144 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a0a0:	4b06      	ldr	r3, [pc, #24]	; (800a0bc <prvIdleTask+0x28>)
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	2b01      	cmp	r3, #1
 800a0a6:	d9f9      	bls.n	800a09c <prvIdleTask+0x8>
			{
				taskYIELD();
 800a0a8:	4b05      	ldr	r3, [pc, #20]	; (800a0c0 <prvIdleTask+0x2c>)
 800a0aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0ae:	601a      	str	r2, [r3, #0]
 800a0b0:	f3bf 8f4f 	dsb	sy
 800a0b4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a0b8:	e7f0      	b.n	800a09c <prvIdleTask+0x8>
 800a0ba:	bf00      	nop
 800a0bc:	20001014 	.word	0x20001014
 800a0c0:	e000ed04 	.word	0xe000ed04

0800a0c4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b082      	sub	sp, #8
 800a0c8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	607b      	str	r3, [r7, #4]
 800a0ce:	e00c      	b.n	800a0ea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a0d0:	687a      	ldr	r2, [r7, #4]
 800a0d2:	4613      	mov	r3, r2
 800a0d4:	009b      	lsls	r3, r3, #2
 800a0d6:	4413      	add	r3, r2
 800a0d8:	009b      	lsls	r3, r3, #2
 800a0da:	4a12      	ldr	r2, [pc, #72]	; (800a124 <prvInitialiseTaskLists+0x60>)
 800a0dc:	4413      	add	r3, r2
 800a0de:	4618      	mov	r0, r3
 800a0e0:	f7fe ffd8 	bl	8009094 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	3301      	adds	r3, #1
 800a0e8:	607b      	str	r3, [r7, #4]
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	2b06      	cmp	r3, #6
 800a0ee:	d9ef      	bls.n	800a0d0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a0f0:	480d      	ldr	r0, [pc, #52]	; (800a128 <prvInitialiseTaskLists+0x64>)
 800a0f2:	f7fe ffcf 	bl	8009094 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a0f6:	480d      	ldr	r0, [pc, #52]	; (800a12c <prvInitialiseTaskLists+0x68>)
 800a0f8:	f7fe ffcc 	bl	8009094 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a0fc:	480c      	ldr	r0, [pc, #48]	; (800a130 <prvInitialiseTaskLists+0x6c>)
 800a0fe:	f7fe ffc9 	bl	8009094 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a102:	480c      	ldr	r0, [pc, #48]	; (800a134 <prvInitialiseTaskLists+0x70>)
 800a104:	f7fe ffc6 	bl	8009094 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a108:	480b      	ldr	r0, [pc, #44]	; (800a138 <prvInitialiseTaskLists+0x74>)
 800a10a:	f7fe ffc3 	bl	8009094 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a10e:	4b0b      	ldr	r3, [pc, #44]	; (800a13c <prvInitialiseTaskLists+0x78>)
 800a110:	4a05      	ldr	r2, [pc, #20]	; (800a128 <prvInitialiseTaskLists+0x64>)
 800a112:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a114:	4b0a      	ldr	r3, [pc, #40]	; (800a140 <prvInitialiseTaskLists+0x7c>)
 800a116:	4a05      	ldr	r2, [pc, #20]	; (800a12c <prvInitialiseTaskLists+0x68>)
 800a118:	601a      	str	r2, [r3, #0]
}
 800a11a:	bf00      	nop
 800a11c:	3708      	adds	r7, #8
 800a11e:	46bd      	mov	sp, r7
 800a120:	bd80      	pop	{r7, pc}
 800a122:	bf00      	nop
 800a124:	20001014 	.word	0x20001014
 800a128:	200010a0 	.word	0x200010a0
 800a12c:	200010b4 	.word	0x200010b4
 800a130:	200010d0 	.word	0x200010d0
 800a134:	200010e4 	.word	0x200010e4
 800a138:	200010fc 	.word	0x200010fc
 800a13c:	200010c8 	.word	0x200010c8
 800a140:	200010cc 	.word	0x200010cc

0800a144 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a144:	b580      	push	{r7, lr}
 800a146:	b082      	sub	sp, #8
 800a148:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a14a:	e019      	b.n	800a180 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a14c:	f7ff f93c 	bl	80093c8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800a150:	4b0f      	ldr	r3, [pc, #60]	; (800a190 <prvCheckTasksWaitingTermination+0x4c>)
 800a152:	68db      	ldr	r3, [r3, #12]
 800a154:	68db      	ldr	r3, [r3, #12]
 800a156:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	3304      	adds	r3, #4
 800a15c:	4618      	mov	r0, r3
 800a15e:	f7ff f81f 	bl	80091a0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a162:	4b0c      	ldr	r3, [pc, #48]	; (800a194 <prvCheckTasksWaitingTermination+0x50>)
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	3b01      	subs	r3, #1
 800a168:	4a0a      	ldr	r2, [pc, #40]	; (800a194 <prvCheckTasksWaitingTermination+0x50>)
 800a16a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a16c:	4b0a      	ldr	r3, [pc, #40]	; (800a198 <prvCheckTasksWaitingTermination+0x54>)
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	3b01      	subs	r3, #1
 800a172:	4a09      	ldr	r2, [pc, #36]	; (800a198 <prvCheckTasksWaitingTermination+0x54>)
 800a174:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a176:	f7ff f955 	bl	8009424 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a17a:	6878      	ldr	r0, [r7, #4]
 800a17c:	f000 f80e 	bl	800a19c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a180:	4b05      	ldr	r3, [pc, #20]	; (800a198 <prvCheckTasksWaitingTermination+0x54>)
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	2b00      	cmp	r3, #0
 800a186:	d1e1      	bne.n	800a14c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a188:	bf00      	nop
 800a18a:	3708      	adds	r7, #8
 800a18c:	46bd      	mov	sp, r7
 800a18e:	bd80      	pop	{r7, pc}
 800a190:	200010e4 	.word	0x200010e4
 800a194:	20001110 	.word	0x20001110
 800a198:	200010f8 	.word	0x200010f8

0800a19c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a19c:	b580      	push	{r7, lr}
 800a19e:	b084      	sub	sp, #16
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d108      	bne.n	800a1c0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	f7ff fa84 	bl	80096c0 <vPortFree>
				vPortFree( pxTCB );
 800a1b8:	6878      	ldr	r0, [r7, #4]
 800a1ba:	f7ff fa81 	bl	80096c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a1be:	e017      	b.n	800a1f0 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a1c6:	2b01      	cmp	r3, #1
 800a1c8:	d103      	bne.n	800a1d2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a1ca:	6878      	ldr	r0, [r7, #4]
 800a1cc:	f7ff fa78 	bl	80096c0 <vPortFree>
	}
 800a1d0:	e00e      	b.n	800a1f0 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a1d8:	2b02      	cmp	r3, #2
 800a1da:	d009      	beq.n	800a1f0 <prvDeleteTCB+0x54>
 800a1dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1e0:	f383 8811 	msr	BASEPRI, r3
 800a1e4:	f3bf 8f6f 	isb	sy
 800a1e8:	f3bf 8f4f 	dsb	sy
 800a1ec:	60fb      	str	r3, [r7, #12]
 800a1ee:	e7fe      	b.n	800a1ee <prvDeleteTCB+0x52>
	}
 800a1f0:	bf00      	nop
 800a1f2:	3710      	adds	r7, #16
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	bd80      	pop	{r7, pc}

0800a1f8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a1f8:	b480      	push	{r7}
 800a1fa:	b083      	sub	sp, #12
 800a1fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a1fe:	4b0e      	ldr	r3, [pc, #56]	; (800a238 <prvResetNextTaskUnblockTime+0x40>)
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	2b00      	cmp	r3, #0
 800a206:	d101      	bne.n	800a20c <prvResetNextTaskUnblockTime+0x14>
 800a208:	2301      	movs	r3, #1
 800a20a:	e000      	b.n	800a20e <prvResetNextTaskUnblockTime+0x16>
 800a20c:	2300      	movs	r3, #0
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d004      	beq.n	800a21c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a212:	4b0a      	ldr	r3, [pc, #40]	; (800a23c <prvResetNextTaskUnblockTime+0x44>)
 800a214:	f04f 32ff 	mov.w	r2, #4294967295
 800a218:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a21a:	e008      	b.n	800a22e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800a21c:	4b06      	ldr	r3, [pc, #24]	; (800a238 <prvResetNextTaskUnblockTime+0x40>)
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	68db      	ldr	r3, [r3, #12]
 800a222:	68db      	ldr	r3, [r3, #12]
 800a224:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	685b      	ldr	r3, [r3, #4]
 800a22a:	4a04      	ldr	r2, [pc, #16]	; (800a23c <prvResetNextTaskUnblockTime+0x44>)
 800a22c:	6013      	str	r3, [r2, #0]
}
 800a22e:	bf00      	nop
 800a230:	370c      	adds	r7, #12
 800a232:	46bd      	mov	sp, r7
 800a234:	bc80      	pop	{r7}
 800a236:	4770      	bx	lr
 800a238:	200010c8 	.word	0x200010c8
 800a23c:	20001130 	.word	0x20001130

0800a240 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a240:	b580      	push	{r7, lr}
 800a242:	b084      	sub	sp, #16
 800a244:	af00      	add	r7, sp, #0
 800a246:	6078      	str	r0, [r7, #4]
 800a248:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a24a:	4b29      	ldr	r3, [pc, #164]	; (800a2f0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a250:	4b28      	ldr	r3, [pc, #160]	; (800a2f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	3304      	adds	r3, #4
 800a256:	4618      	mov	r0, r3
 800a258:	f7fe ffa2 	bl	80091a0 <uxListRemove>
 800a25c:	4603      	mov	r3, r0
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d10b      	bne.n	800a27a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800a262:	4b24      	ldr	r3, [pc, #144]	; (800a2f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a268:	2201      	movs	r2, #1
 800a26a:	fa02 f303 	lsl.w	r3, r2, r3
 800a26e:	43da      	mvns	r2, r3
 800a270:	4b21      	ldr	r3, [pc, #132]	; (800a2f8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	4013      	ands	r3, r2
 800a276:	4a20      	ldr	r2, [pc, #128]	; (800a2f8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a278:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a280:	d10a      	bne.n	800a298 <prvAddCurrentTaskToDelayedList+0x58>
 800a282:	683b      	ldr	r3, [r7, #0]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d007      	beq.n	800a298 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a288:	4b1a      	ldr	r3, [pc, #104]	; (800a2f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	3304      	adds	r3, #4
 800a28e:	4619      	mov	r1, r3
 800a290:	481a      	ldr	r0, [pc, #104]	; (800a2fc <prvAddCurrentTaskToDelayedList+0xbc>)
 800a292:	f7fe ff2a 	bl	80090ea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a296:	e026      	b.n	800a2e6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a298:	68fa      	ldr	r2, [r7, #12]
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	4413      	add	r3, r2
 800a29e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a2a0:	4b14      	ldr	r3, [pc, #80]	; (800a2f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	68ba      	ldr	r2, [r7, #8]
 800a2a6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a2a8:	68ba      	ldr	r2, [r7, #8]
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	429a      	cmp	r2, r3
 800a2ae:	d209      	bcs.n	800a2c4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a2b0:	4b13      	ldr	r3, [pc, #76]	; (800a300 <prvAddCurrentTaskToDelayedList+0xc0>)
 800a2b2:	681a      	ldr	r2, [r3, #0]
 800a2b4:	4b0f      	ldr	r3, [pc, #60]	; (800a2f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	3304      	adds	r3, #4
 800a2ba:	4619      	mov	r1, r3
 800a2bc:	4610      	mov	r0, r2
 800a2be:	f7fe ff37 	bl	8009130 <vListInsert>
}
 800a2c2:	e010      	b.n	800a2e6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a2c4:	4b0f      	ldr	r3, [pc, #60]	; (800a304 <prvAddCurrentTaskToDelayedList+0xc4>)
 800a2c6:	681a      	ldr	r2, [r3, #0]
 800a2c8:	4b0a      	ldr	r3, [pc, #40]	; (800a2f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	3304      	adds	r3, #4
 800a2ce:	4619      	mov	r1, r3
 800a2d0:	4610      	mov	r0, r2
 800a2d2:	f7fe ff2d 	bl	8009130 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a2d6:	4b0c      	ldr	r3, [pc, #48]	; (800a308 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	68ba      	ldr	r2, [r7, #8]
 800a2dc:	429a      	cmp	r2, r3
 800a2de:	d202      	bcs.n	800a2e6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800a2e0:	4a09      	ldr	r2, [pc, #36]	; (800a308 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a2e2:	68bb      	ldr	r3, [r7, #8]
 800a2e4:	6013      	str	r3, [r2, #0]
}
 800a2e6:	bf00      	nop
 800a2e8:	3710      	adds	r7, #16
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	bd80      	pop	{r7, pc}
 800a2ee:	bf00      	nop
 800a2f0:	20001114 	.word	0x20001114
 800a2f4:	20001010 	.word	0x20001010
 800a2f8:	20001118 	.word	0x20001118
 800a2fc:	200010fc 	.word	0x200010fc
 800a300:	200010cc 	.word	0x200010cc
 800a304:	200010c8 	.word	0x200010c8
 800a308:	20001130 	.word	0x20001130

0800a30c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a30c:	b580      	push	{r7, lr}
 800a30e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a310:	2200      	movs	r2, #0
 800a312:	4912      	ldr	r1, [pc, #72]	; (800a35c <MX_USB_DEVICE_Init+0x50>)
 800a314:	4812      	ldr	r0, [pc, #72]	; (800a360 <MX_USB_DEVICE_Init+0x54>)
 800a316:	f7fd fdb2 	bl	8007e7e <USBD_Init>
 800a31a:	4603      	mov	r3, r0
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d001      	beq.n	800a324 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a320:	f7f6 f930 	bl	8000584 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a324:	490f      	ldr	r1, [pc, #60]	; (800a364 <MX_USB_DEVICE_Init+0x58>)
 800a326:	480e      	ldr	r0, [pc, #56]	; (800a360 <MX_USB_DEVICE_Init+0x54>)
 800a328:	f7fd fdd4 	bl	8007ed4 <USBD_RegisterClass>
 800a32c:	4603      	mov	r3, r0
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d001      	beq.n	800a336 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a332:	f7f6 f927 	bl	8000584 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a336:	490c      	ldr	r1, [pc, #48]	; (800a368 <MX_USB_DEVICE_Init+0x5c>)
 800a338:	4809      	ldr	r0, [pc, #36]	; (800a360 <MX_USB_DEVICE_Init+0x54>)
 800a33a:	f7fd fd05 	bl	8007d48 <USBD_CDC_RegisterInterface>
 800a33e:	4603      	mov	r3, r0
 800a340:	2b00      	cmp	r3, #0
 800a342:	d001      	beq.n	800a348 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a344:	f7f6 f91e 	bl	8000584 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a348:	4805      	ldr	r0, [pc, #20]	; (800a360 <MX_USB_DEVICE_Init+0x54>)
 800a34a:	f7fd fddc 	bl	8007f06 <USBD_Start>
 800a34e:	4603      	mov	r3, r0
 800a350:	2b00      	cmp	r3, #0
 800a352:	d001      	beq.n	800a358 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a354:	f7f6 f916 	bl	8000584 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a358:	bf00      	nop
 800a35a:	bd80      	pop	{r7, pc}
 800a35c:	20000130 	.word	0x20000130
 800a360:	200016ec 	.word	0x200016ec
 800a364:	20000018 	.word	0x20000018
 800a368:	20000120 	.word	0x20000120

0800a36c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a36c:	b580      	push	{r7, lr}
 800a36e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a370:	2200      	movs	r2, #0
 800a372:	4905      	ldr	r1, [pc, #20]	; (800a388 <CDC_Init_FS+0x1c>)
 800a374:	4805      	ldr	r0, [pc, #20]	; (800a38c <CDC_Init_FS+0x20>)
 800a376:	f7fd fcfd 	bl	8007d74 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a37a:	4905      	ldr	r1, [pc, #20]	; (800a390 <CDC_Init_FS+0x24>)
 800a37c:	4803      	ldr	r0, [pc, #12]	; (800a38c <CDC_Init_FS+0x20>)
 800a37e:	f7fd fd12 	bl	8007da6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a382:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a384:	4618      	mov	r0, r3
 800a386:	bd80      	pop	{r7, pc}
 800a388:	20001a14 	.word	0x20001a14
 800a38c:	200016ec 	.word	0x200016ec
 800a390:	200019b0 	.word	0x200019b0

0800a394 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a394:	b480      	push	{r7}
 800a396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a398:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a39a:	4618      	mov	r0, r3
 800a39c:	46bd      	mov	sp, r7
 800a39e:	bc80      	pop	{r7}
 800a3a0:	4770      	bx	lr
	...

0800a3a4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a3a4:	b480      	push	{r7}
 800a3a6:	b083      	sub	sp, #12
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	4603      	mov	r3, r0
 800a3ac:	6039      	str	r1, [r7, #0]
 800a3ae:	71fb      	strb	r3, [r7, #7]
 800a3b0:	4613      	mov	r3, r2
 800a3b2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a3b4:	79fb      	ldrb	r3, [r7, #7]
 800a3b6:	2b23      	cmp	r3, #35	; 0x23
 800a3b8:	d84a      	bhi.n	800a450 <CDC_Control_FS+0xac>
 800a3ba:	a201      	add	r2, pc, #4	; (adr r2, 800a3c0 <CDC_Control_FS+0x1c>)
 800a3bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3c0:	0800a451 	.word	0x0800a451
 800a3c4:	0800a451 	.word	0x0800a451
 800a3c8:	0800a451 	.word	0x0800a451
 800a3cc:	0800a451 	.word	0x0800a451
 800a3d0:	0800a451 	.word	0x0800a451
 800a3d4:	0800a451 	.word	0x0800a451
 800a3d8:	0800a451 	.word	0x0800a451
 800a3dc:	0800a451 	.word	0x0800a451
 800a3e0:	0800a451 	.word	0x0800a451
 800a3e4:	0800a451 	.word	0x0800a451
 800a3e8:	0800a451 	.word	0x0800a451
 800a3ec:	0800a451 	.word	0x0800a451
 800a3f0:	0800a451 	.word	0x0800a451
 800a3f4:	0800a451 	.word	0x0800a451
 800a3f8:	0800a451 	.word	0x0800a451
 800a3fc:	0800a451 	.word	0x0800a451
 800a400:	0800a451 	.word	0x0800a451
 800a404:	0800a451 	.word	0x0800a451
 800a408:	0800a451 	.word	0x0800a451
 800a40c:	0800a451 	.word	0x0800a451
 800a410:	0800a451 	.word	0x0800a451
 800a414:	0800a451 	.word	0x0800a451
 800a418:	0800a451 	.word	0x0800a451
 800a41c:	0800a451 	.word	0x0800a451
 800a420:	0800a451 	.word	0x0800a451
 800a424:	0800a451 	.word	0x0800a451
 800a428:	0800a451 	.word	0x0800a451
 800a42c:	0800a451 	.word	0x0800a451
 800a430:	0800a451 	.word	0x0800a451
 800a434:	0800a451 	.word	0x0800a451
 800a438:	0800a451 	.word	0x0800a451
 800a43c:	0800a451 	.word	0x0800a451
 800a440:	0800a451 	.word	0x0800a451
 800a444:	0800a451 	.word	0x0800a451
 800a448:	0800a451 	.word	0x0800a451
 800a44c:	0800a451 	.word	0x0800a451
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a450:	bf00      	nop
  }

  return (USBD_OK);
 800a452:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a454:	4618      	mov	r0, r3
 800a456:	370c      	adds	r7, #12
 800a458:	46bd      	mov	sp, r7
 800a45a:	bc80      	pop	{r7}
 800a45c:	4770      	bx	lr
 800a45e:	bf00      	nop

0800a460 <CDC_Receive_FS>:
int idx=0;
void ReadComand(char * Bufer,int Leng);


static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a460:	b580      	push	{r7, lr}
 800a462:	b082      	sub	sp, #8
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]
 800a468:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a46a:	6879      	ldr	r1, [r7, #4]
 800a46c:	4818      	ldr	r0, [pc, #96]	; (800a4d0 <CDC_Receive_FS+0x70>)
 800a46e:	f7fd fc9a 	bl	8007da6 <USBD_CDC_SetRxBuffer>



  if(Buf[0]=='\r'){
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	781b      	ldrb	r3, [r3, #0]
 800a476:	2b0d      	cmp	r3, #13
 800a478:	d112      	bne.n	800a4a0 <CDC_Receive_FS+0x40>
     BuferUsb[idx++]=Buf[0];
 800a47a:	4b16      	ldr	r3, [pc, #88]	; (800a4d4 <CDC_Receive_FS+0x74>)
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	1c5a      	adds	r2, r3, #1
 800a480:	4914      	ldr	r1, [pc, #80]	; (800a4d4 <CDC_Receive_FS+0x74>)
 800a482:	600a      	str	r2, [r1, #0]
 800a484:	687a      	ldr	r2, [r7, #4]
 800a486:	7811      	ldrb	r1, [r2, #0]
 800a488:	4a13      	ldr	r2, [pc, #76]	; (800a4d8 <CDC_Receive_FS+0x78>)
 800a48a:	54d1      	strb	r1, [r2, r3]
    ReadComand(BuferUsb,idx);
 800a48c:	4b11      	ldr	r3, [pc, #68]	; (800a4d4 <CDC_Receive_FS+0x74>)
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	4619      	mov	r1, r3
 800a492:	4811      	ldr	r0, [pc, #68]	; (800a4d8 <CDC_Receive_FS+0x78>)
 800a494:	f000 fc00 	bl	800ac98 <ReadComand>
     idx=0;
 800a498:	4b0e      	ldr	r3, [pc, #56]	; (800a4d4 <CDC_Receive_FS+0x74>)
 800a49a:	2200      	movs	r2, #0
 800a49c:	601a      	str	r2, [r3, #0]
 800a49e:	e00f      	b.n	800a4c0 <CDC_Receive_FS+0x60>

  }else{
      if(idx>=100){idx=0;}
 800a4a0:	4b0c      	ldr	r3, [pc, #48]	; (800a4d4 <CDC_Receive_FS+0x74>)
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	2b63      	cmp	r3, #99	; 0x63
 800a4a6:	dd02      	ble.n	800a4ae <CDC_Receive_FS+0x4e>
 800a4a8:	4b0a      	ldr	r3, [pc, #40]	; (800a4d4 <CDC_Receive_FS+0x74>)
 800a4aa:	2200      	movs	r2, #0
 800a4ac:	601a      	str	r2, [r3, #0]
      BuferUsb[idx++]=Buf[0];
 800a4ae:	4b09      	ldr	r3, [pc, #36]	; (800a4d4 <CDC_Receive_FS+0x74>)
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	1c5a      	adds	r2, r3, #1
 800a4b4:	4907      	ldr	r1, [pc, #28]	; (800a4d4 <CDC_Receive_FS+0x74>)
 800a4b6:	600a      	str	r2, [r1, #0]
 800a4b8:	687a      	ldr	r2, [r7, #4]
 800a4ba:	7811      	ldrb	r1, [r2, #0]
 800a4bc:	4a06      	ldr	r2, [pc, #24]	; (800a4d8 <CDC_Receive_FS+0x78>)
 800a4be:	54d1      	strb	r1, [r2, r3]

  }



  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a4c0:	4803      	ldr	r0, [pc, #12]	; (800a4d0 <CDC_Receive_FS+0x70>)
 800a4c2:	f7fd fcb2 	bl	8007e2a <USBD_CDC_ReceivePacket>


  return (USBD_OK);
 800a4c6:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	3708      	adds	r7, #8
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	bd80      	pop	{r7, pc}
 800a4d0:	200016ec 	.word	0x200016ec
 800a4d4:	200011a0 	.word	0x200011a0
 800a4d8:	2000113c 	.word	0x2000113c

0800a4dc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b084      	sub	sp, #16
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
 800a4e4:	460b      	mov	r3, r1
 800a4e6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a4ec:	4b0d      	ldr	r3, [pc, #52]	; (800a524 <CDC_Transmit_FS+0x48>)
 800a4ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4f2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a4f4:	68bb      	ldr	r3, [r7, #8]
 800a4f6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d001      	beq.n	800a502 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a4fe:	2301      	movs	r3, #1
 800a500:	e00b      	b.n	800a51a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a502:	887b      	ldrh	r3, [r7, #2]
 800a504:	461a      	mov	r2, r3
 800a506:	6879      	ldr	r1, [r7, #4]
 800a508:	4806      	ldr	r0, [pc, #24]	; (800a524 <CDC_Transmit_FS+0x48>)
 800a50a:	f7fd fc33 	bl	8007d74 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a50e:	4805      	ldr	r0, [pc, #20]	; (800a524 <CDC_Transmit_FS+0x48>)
 800a510:	f7fd fc5c 	bl	8007dcc <USBD_CDC_TransmitPacket>
 800a514:	4603      	mov	r3, r0
 800a516:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a518:	7bfb      	ldrb	r3, [r7, #15]
}
 800a51a:	4618      	mov	r0, r3
 800a51c:	3710      	adds	r7, #16
 800a51e:	46bd      	mov	sp, r7
 800a520:	bd80      	pop	{r7, pc}
 800a522:	bf00      	nop
 800a524:	200016ec 	.word	0x200016ec

0800a528 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a528:	b480      	push	{r7}
 800a52a:	b083      	sub	sp, #12
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	4603      	mov	r3, r0
 800a530:	6039      	str	r1, [r7, #0]
 800a532:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a534:	683b      	ldr	r3, [r7, #0]
 800a536:	2212      	movs	r2, #18
 800a538:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a53a:	4b03      	ldr	r3, [pc, #12]	; (800a548 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a53c:	4618      	mov	r0, r3
 800a53e:	370c      	adds	r7, #12
 800a540:	46bd      	mov	sp, r7
 800a542:	bc80      	pop	{r7}
 800a544:	4770      	bx	lr
 800a546:	bf00      	nop
 800a548:	2000014c 	.word	0x2000014c

0800a54c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a54c:	b480      	push	{r7}
 800a54e:	b083      	sub	sp, #12
 800a550:	af00      	add	r7, sp, #0
 800a552:	4603      	mov	r3, r0
 800a554:	6039      	str	r1, [r7, #0]
 800a556:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a558:	683b      	ldr	r3, [r7, #0]
 800a55a:	2204      	movs	r2, #4
 800a55c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a55e:	4b03      	ldr	r3, [pc, #12]	; (800a56c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a560:	4618      	mov	r0, r3
 800a562:	370c      	adds	r7, #12
 800a564:	46bd      	mov	sp, r7
 800a566:	bc80      	pop	{r7}
 800a568:	4770      	bx	lr
 800a56a:	bf00      	nop
 800a56c:	20000160 	.word	0x20000160

0800a570 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a570:	b580      	push	{r7, lr}
 800a572:	b082      	sub	sp, #8
 800a574:	af00      	add	r7, sp, #0
 800a576:	4603      	mov	r3, r0
 800a578:	6039      	str	r1, [r7, #0]
 800a57a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a57c:	79fb      	ldrb	r3, [r7, #7]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d105      	bne.n	800a58e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a582:	683a      	ldr	r2, [r7, #0]
 800a584:	4907      	ldr	r1, [pc, #28]	; (800a5a4 <USBD_FS_ProductStrDescriptor+0x34>)
 800a586:	4808      	ldr	r0, [pc, #32]	; (800a5a8 <USBD_FS_ProductStrDescriptor+0x38>)
 800a588:	f7fe fc29 	bl	8008dde <USBD_GetString>
 800a58c:	e004      	b.n	800a598 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a58e:	683a      	ldr	r2, [r7, #0]
 800a590:	4904      	ldr	r1, [pc, #16]	; (800a5a4 <USBD_FS_ProductStrDescriptor+0x34>)
 800a592:	4805      	ldr	r0, [pc, #20]	; (800a5a8 <USBD_FS_ProductStrDescriptor+0x38>)
 800a594:	f7fe fc23 	bl	8008dde <USBD_GetString>
  }
  return USBD_StrDesc;
 800a598:	4b02      	ldr	r3, [pc, #8]	; (800a5a4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a59a:	4618      	mov	r0, r3
 800a59c:	3708      	adds	r7, #8
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	bd80      	pop	{r7, pc}
 800a5a2:	bf00      	nop
 800a5a4:	20001a78 	.word	0x20001a78
 800a5a8:	0800b190 	.word	0x0800b190

0800a5ac <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b082      	sub	sp, #8
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	4603      	mov	r3, r0
 800a5b4:	6039      	str	r1, [r7, #0]
 800a5b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a5b8:	683a      	ldr	r2, [r7, #0]
 800a5ba:	4904      	ldr	r1, [pc, #16]	; (800a5cc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a5bc:	4804      	ldr	r0, [pc, #16]	; (800a5d0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a5be:	f7fe fc0e 	bl	8008dde <USBD_GetString>
  return USBD_StrDesc;
 800a5c2:	4b02      	ldr	r3, [pc, #8]	; (800a5cc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	3708      	adds	r7, #8
 800a5c8:	46bd      	mov	sp, r7
 800a5ca:	bd80      	pop	{r7, pc}
 800a5cc:	20001a78 	.word	0x20001a78
 800a5d0:	0800b198 	.word	0x0800b198

0800a5d4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b082      	sub	sp, #8
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	4603      	mov	r3, r0
 800a5dc:	6039      	str	r1, [r7, #0]
 800a5de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a5e0:	683b      	ldr	r3, [r7, #0]
 800a5e2:	221a      	movs	r2, #26
 800a5e4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a5e6:	f000 f843 	bl	800a670 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a5ea:	4b02      	ldr	r3, [pc, #8]	; (800a5f4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	3708      	adds	r7, #8
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	bd80      	pop	{r7, pc}
 800a5f4:	20000164 	.word	0x20000164

0800a5f8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	b082      	sub	sp, #8
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	4603      	mov	r3, r0
 800a600:	6039      	str	r1, [r7, #0]
 800a602:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a604:	79fb      	ldrb	r3, [r7, #7]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d105      	bne.n	800a616 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a60a:	683a      	ldr	r2, [r7, #0]
 800a60c:	4907      	ldr	r1, [pc, #28]	; (800a62c <USBD_FS_ConfigStrDescriptor+0x34>)
 800a60e:	4808      	ldr	r0, [pc, #32]	; (800a630 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a610:	f7fe fbe5 	bl	8008dde <USBD_GetString>
 800a614:	e004      	b.n	800a620 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a616:	683a      	ldr	r2, [r7, #0]
 800a618:	4904      	ldr	r1, [pc, #16]	; (800a62c <USBD_FS_ConfigStrDescriptor+0x34>)
 800a61a:	4805      	ldr	r0, [pc, #20]	; (800a630 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a61c:	f7fe fbdf 	bl	8008dde <USBD_GetString>
  }
  return USBD_StrDesc;
 800a620:	4b02      	ldr	r3, [pc, #8]	; (800a62c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a622:	4618      	mov	r0, r3
 800a624:	3708      	adds	r7, #8
 800a626:	46bd      	mov	sp, r7
 800a628:	bd80      	pop	{r7, pc}
 800a62a:	bf00      	nop
 800a62c:	20001a78 	.word	0x20001a78
 800a630:	0800b1ac 	.word	0x0800b1ac

0800a634 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a634:	b580      	push	{r7, lr}
 800a636:	b082      	sub	sp, #8
 800a638:	af00      	add	r7, sp, #0
 800a63a:	4603      	mov	r3, r0
 800a63c:	6039      	str	r1, [r7, #0]
 800a63e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a640:	79fb      	ldrb	r3, [r7, #7]
 800a642:	2b00      	cmp	r3, #0
 800a644:	d105      	bne.n	800a652 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a646:	683a      	ldr	r2, [r7, #0]
 800a648:	4907      	ldr	r1, [pc, #28]	; (800a668 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a64a:	4808      	ldr	r0, [pc, #32]	; (800a66c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a64c:	f7fe fbc7 	bl	8008dde <USBD_GetString>
 800a650:	e004      	b.n	800a65c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a652:	683a      	ldr	r2, [r7, #0]
 800a654:	4904      	ldr	r1, [pc, #16]	; (800a668 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a656:	4805      	ldr	r0, [pc, #20]	; (800a66c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a658:	f7fe fbc1 	bl	8008dde <USBD_GetString>
  }
  return USBD_StrDesc;
 800a65c:	4b02      	ldr	r3, [pc, #8]	; (800a668 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a65e:	4618      	mov	r0, r3
 800a660:	3708      	adds	r7, #8
 800a662:	46bd      	mov	sp, r7
 800a664:	bd80      	pop	{r7, pc}
 800a666:	bf00      	nop
 800a668:	20001a78 	.word	0x20001a78
 800a66c:	0800b1b8 	.word	0x0800b1b8

0800a670 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a670:	b580      	push	{r7, lr}
 800a672:	b084      	sub	sp, #16
 800a674:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a676:	4b0f      	ldr	r3, [pc, #60]	; (800a6b4 <Get_SerialNum+0x44>)
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a67c:	4b0e      	ldr	r3, [pc, #56]	; (800a6b8 <Get_SerialNum+0x48>)
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a682:	4b0e      	ldr	r3, [pc, #56]	; (800a6bc <Get_SerialNum+0x4c>)
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a688:	68fa      	ldr	r2, [r7, #12]
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	4413      	add	r3, r2
 800a68e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d009      	beq.n	800a6aa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a696:	2208      	movs	r2, #8
 800a698:	4909      	ldr	r1, [pc, #36]	; (800a6c0 <Get_SerialNum+0x50>)
 800a69a:	68f8      	ldr	r0, [r7, #12]
 800a69c:	f000 f814 	bl	800a6c8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a6a0:	2204      	movs	r2, #4
 800a6a2:	4908      	ldr	r1, [pc, #32]	; (800a6c4 <Get_SerialNum+0x54>)
 800a6a4:	68b8      	ldr	r0, [r7, #8]
 800a6a6:	f000 f80f 	bl	800a6c8 <IntToUnicode>
  }
}
 800a6aa:	bf00      	nop
 800a6ac:	3710      	adds	r7, #16
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	bd80      	pop	{r7, pc}
 800a6b2:	bf00      	nop
 800a6b4:	1ffff7e8 	.word	0x1ffff7e8
 800a6b8:	1ffff7ec 	.word	0x1ffff7ec
 800a6bc:	1ffff7f0 	.word	0x1ffff7f0
 800a6c0:	20000166 	.word	0x20000166
 800a6c4:	20000176 	.word	0x20000176

0800a6c8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a6c8:	b480      	push	{r7}
 800a6ca:	b087      	sub	sp, #28
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	60f8      	str	r0, [r7, #12]
 800a6d0:	60b9      	str	r1, [r7, #8]
 800a6d2:	4613      	mov	r3, r2
 800a6d4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a6da:	2300      	movs	r3, #0
 800a6dc:	75fb      	strb	r3, [r7, #23]
 800a6de:	e027      	b.n	800a730 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	0f1b      	lsrs	r3, r3, #28
 800a6e4:	2b09      	cmp	r3, #9
 800a6e6:	d80b      	bhi.n	800a700 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a6e8:	7dfb      	ldrb	r3, [r7, #23]
 800a6ea:	005b      	lsls	r3, r3, #1
 800a6ec:	461a      	mov	r2, r3
 800a6ee:	68bb      	ldr	r3, [r7, #8]
 800a6f0:	4413      	add	r3, r2
 800a6f2:	68fa      	ldr	r2, [r7, #12]
 800a6f4:	0f12      	lsrs	r2, r2, #28
 800a6f6:	b2d2      	uxtb	r2, r2
 800a6f8:	3230      	adds	r2, #48	; 0x30
 800a6fa:	b2d2      	uxtb	r2, r2
 800a6fc:	701a      	strb	r2, [r3, #0]
 800a6fe:	e00a      	b.n	800a716 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a700:	7dfb      	ldrb	r3, [r7, #23]
 800a702:	005b      	lsls	r3, r3, #1
 800a704:	461a      	mov	r2, r3
 800a706:	68bb      	ldr	r3, [r7, #8]
 800a708:	4413      	add	r3, r2
 800a70a:	68fa      	ldr	r2, [r7, #12]
 800a70c:	0f12      	lsrs	r2, r2, #28
 800a70e:	b2d2      	uxtb	r2, r2
 800a710:	3237      	adds	r2, #55	; 0x37
 800a712:	b2d2      	uxtb	r2, r2
 800a714:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	011b      	lsls	r3, r3, #4
 800a71a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a71c:	7dfb      	ldrb	r3, [r7, #23]
 800a71e:	005b      	lsls	r3, r3, #1
 800a720:	3301      	adds	r3, #1
 800a722:	68ba      	ldr	r2, [r7, #8]
 800a724:	4413      	add	r3, r2
 800a726:	2200      	movs	r2, #0
 800a728:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a72a:	7dfb      	ldrb	r3, [r7, #23]
 800a72c:	3301      	adds	r3, #1
 800a72e:	75fb      	strb	r3, [r7, #23]
 800a730:	7dfa      	ldrb	r2, [r7, #23]
 800a732:	79fb      	ldrb	r3, [r7, #7]
 800a734:	429a      	cmp	r2, r3
 800a736:	d3d3      	bcc.n	800a6e0 <IntToUnicode+0x18>
  }
}
 800a738:	bf00      	nop
 800a73a:	371c      	adds	r7, #28
 800a73c:	46bd      	mov	sp, r7
 800a73e:	bc80      	pop	{r7}
 800a740:	4770      	bx	lr
	...

0800a744 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a744:	b580      	push	{r7, lr}
 800a746:	b084      	sub	sp, #16
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	4a0d      	ldr	r2, [pc, #52]	; (800a788 <HAL_PCD_MspInit+0x44>)
 800a752:	4293      	cmp	r3, r2
 800a754:	d113      	bne.n	800a77e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a756:	4a0d      	ldr	r2, [pc, #52]	; (800a78c <HAL_PCD_MspInit+0x48>)
 800a758:	4b0c      	ldr	r3, [pc, #48]	; (800a78c <HAL_PCD_MspInit+0x48>)
 800a75a:	69db      	ldr	r3, [r3, #28]
 800a75c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a760:	61d3      	str	r3, [r2, #28]
 800a762:	4b0a      	ldr	r3, [pc, #40]	; (800a78c <HAL_PCD_MspInit+0x48>)
 800a764:	69db      	ldr	r3, [r3, #28]
 800a766:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a76a:	60fb      	str	r3, [r7, #12]
 800a76c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 800a76e:	2200      	movs	r2, #0
 800a770:	2105      	movs	r1, #5
 800a772:	2014      	movs	r0, #20
 800a774:	f7f6 faa0 	bl	8000cb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800a778:	2014      	movs	r0, #20
 800a77a:	f7f6 fac9 	bl	8000d10 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a77e:	bf00      	nop
 800a780:	3710      	adds	r7, #16
 800a782:	46bd      	mov	sp, r7
 800a784:	bd80      	pop	{r7, pc}
 800a786:	bf00      	nop
 800a788:	40005c00 	.word	0x40005c00
 800a78c:	40021000 	.word	0x40021000

0800a790 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a790:	b580      	push	{r7, lr}
 800a792:	b082      	sub	sp, #8
 800a794:	af00      	add	r7, sp, #0
 800a796:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800a7a4:	4619      	mov	r1, r3
 800a7a6:	4610      	mov	r0, r2
 800a7a8:	f7fd fbf5 	bl	8007f96 <USBD_LL_SetupStage>
}
 800a7ac:	bf00      	nop
 800a7ae:	3708      	adds	r7, #8
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	bd80      	pop	{r7, pc}

0800a7b4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b082      	sub	sp, #8
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]
 800a7bc:	460b      	mov	r3, r1
 800a7be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800a7c6:	78fa      	ldrb	r2, [r7, #3]
 800a7c8:	6879      	ldr	r1, [r7, #4]
 800a7ca:	4613      	mov	r3, r2
 800a7cc:	009b      	lsls	r3, r3, #2
 800a7ce:	4413      	add	r3, r2
 800a7d0:	00db      	lsls	r3, r3, #3
 800a7d2:	440b      	add	r3, r1
 800a7d4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800a7d8:	681a      	ldr	r2, [r3, #0]
 800a7da:	78fb      	ldrb	r3, [r7, #3]
 800a7dc:	4619      	mov	r1, r3
 800a7de:	f7fd fc25 	bl	800802c <USBD_LL_DataOutStage>
}
 800a7e2:	bf00      	nop
 800a7e4:	3708      	adds	r7, #8
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	bd80      	pop	{r7, pc}

0800a7ea <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7ea:	b580      	push	{r7, lr}
 800a7ec:	b082      	sub	sp, #8
 800a7ee:	af00      	add	r7, sp, #0
 800a7f0:	6078      	str	r0, [r7, #4]
 800a7f2:	460b      	mov	r3, r1
 800a7f4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800a7fc:	78fa      	ldrb	r2, [r7, #3]
 800a7fe:	6879      	ldr	r1, [r7, #4]
 800a800:	4613      	mov	r3, r2
 800a802:	009b      	lsls	r3, r3, #2
 800a804:	4413      	add	r3, r2
 800a806:	00db      	lsls	r3, r3, #3
 800a808:	440b      	add	r3, r1
 800a80a:	333c      	adds	r3, #60	; 0x3c
 800a80c:	681a      	ldr	r2, [r3, #0]
 800a80e:	78fb      	ldrb	r3, [r7, #3]
 800a810:	4619      	mov	r1, r3
 800a812:	f7fd fc7c 	bl	800810e <USBD_LL_DataInStage>
}
 800a816:	bf00      	nop
 800a818:	3708      	adds	r7, #8
 800a81a:	46bd      	mov	sp, r7
 800a81c:	bd80      	pop	{r7, pc}

0800a81e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a81e:	b580      	push	{r7, lr}
 800a820:	b082      	sub	sp, #8
 800a822:	af00      	add	r7, sp, #0
 800a824:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a82c:	4618      	mov	r0, r3
 800a82e:	f7fd fd8c 	bl	800834a <USBD_LL_SOF>
}
 800a832:	bf00      	nop
 800a834:	3708      	adds	r7, #8
 800a836:	46bd      	mov	sp, r7
 800a838:	bd80      	pop	{r7, pc}

0800a83a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a83a:	b580      	push	{r7, lr}
 800a83c:	b084      	sub	sp, #16
 800a83e:	af00      	add	r7, sp, #0
 800a840:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a842:	2301      	movs	r3, #1
 800a844:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	689b      	ldr	r3, [r3, #8]
 800a84a:	2b02      	cmp	r3, #2
 800a84c:	d001      	beq.n	800a852 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a84e:	f7f5 fe99 	bl	8000584 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a858:	7bfa      	ldrb	r2, [r7, #15]
 800a85a:	4611      	mov	r1, r2
 800a85c:	4618      	mov	r0, r3
 800a85e:	f7fd fd3c 	bl	80082da <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a868:	4618      	mov	r0, r3
 800a86a:	f7fd fcf5 	bl	8008258 <USBD_LL_Reset>
}
 800a86e:	bf00      	nop
 800a870:	3710      	adds	r7, #16
 800a872:	46bd      	mov	sp, r7
 800a874:	bd80      	pop	{r7, pc}
	...

0800a878 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	b082      	sub	sp, #8
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a886:	4618      	mov	r0, r3
 800a888:	f7fd fd36 	bl	80082f8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	699b      	ldr	r3, [r3, #24]
 800a890:	2b00      	cmp	r3, #0
 800a892:	d005      	beq.n	800a8a0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a894:	4a04      	ldr	r2, [pc, #16]	; (800a8a8 <HAL_PCD_SuspendCallback+0x30>)
 800a896:	4b04      	ldr	r3, [pc, #16]	; (800a8a8 <HAL_PCD_SuspendCallback+0x30>)
 800a898:	691b      	ldr	r3, [r3, #16]
 800a89a:	f043 0306 	orr.w	r3, r3, #6
 800a89e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a8a0:	bf00      	nop
 800a8a2:	3708      	adds	r7, #8
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	bd80      	pop	{r7, pc}
 800a8a8:	e000ed00 	.word	0xe000ed00

0800a8ac <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a8ac:	b580      	push	{r7, lr}
 800a8ae:	b082      	sub	sp, #8
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	f7fd fd30 	bl	8008320 <USBD_LL_Resume>
}
 800a8c0:	bf00      	nop
 800a8c2:	3708      	adds	r7, #8
 800a8c4:	46bd      	mov	sp, r7
 800a8c6:	bd80      	pop	{r7, pc}

0800a8c8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	b082      	sub	sp, #8
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800a8d0:	4a28      	ldr	r2, [pc, #160]	; (800a974 <USBD_LL_Init+0xac>)
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	4a26      	ldr	r2, [pc, #152]	; (800a974 <USBD_LL_Init+0xac>)
 800a8dc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800a8e0:	4b24      	ldr	r3, [pc, #144]	; (800a974 <USBD_LL_Init+0xac>)
 800a8e2:	4a25      	ldr	r2, [pc, #148]	; (800a978 <USBD_LL_Init+0xb0>)
 800a8e4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a8e6:	4b23      	ldr	r3, [pc, #140]	; (800a974 <USBD_LL_Init+0xac>)
 800a8e8:	2208      	movs	r2, #8
 800a8ea:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a8ec:	4b21      	ldr	r3, [pc, #132]	; (800a974 <USBD_LL_Init+0xac>)
 800a8ee:	2202      	movs	r2, #2
 800a8f0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a8f2:	4b20      	ldr	r3, [pc, #128]	; (800a974 <USBD_LL_Init+0xac>)
 800a8f4:	2200      	movs	r2, #0
 800a8f6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a8f8:	4b1e      	ldr	r3, [pc, #120]	; (800a974 <USBD_LL_Init+0xac>)
 800a8fa:	2200      	movs	r2, #0
 800a8fc:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a8fe:	4b1d      	ldr	r3, [pc, #116]	; (800a974 <USBD_LL_Init+0xac>)
 800a900:	2200      	movs	r2, #0
 800a902:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a904:	481b      	ldr	r0, [pc, #108]	; (800a974 <USBD_LL_Init+0xac>)
 800a906:	f7f6 ffeb 	bl	80018e0 <HAL_PCD_Init>
 800a90a:	4603      	mov	r3, r0
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d001      	beq.n	800a914 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800a910:	f7f5 fe38 	bl	8000584 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a91a:	2318      	movs	r3, #24
 800a91c:	2200      	movs	r2, #0
 800a91e:	2100      	movs	r1, #0
 800a920:	f7f8 fc8b 	bl	800323a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a92a:	2358      	movs	r3, #88	; 0x58
 800a92c:	2200      	movs	r2, #0
 800a92e:	2180      	movs	r1, #128	; 0x80
 800a930:	f7f8 fc83 	bl	800323a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a93a:	23c0      	movs	r3, #192	; 0xc0
 800a93c:	2200      	movs	r2, #0
 800a93e:	2181      	movs	r1, #129	; 0x81
 800a940:	f7f8 fc7b 	bl	800323a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a94a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800a94e:	2200      	movs	r2, #0
 800a950:	2101      	movs	r1, #1
 800a952:	f7f8 fc72 	bl	800323a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a95c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a960:	2200      	movs	r2, #0
 800a962:	2182      	movs	r1, #130	; 0x82
 800a964:	f7f8 fc69 	bl	800323a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800a968:	2300      	movs	r3, #0
}
 800a96a:	4618      	mov	r0, r3
 800a96c:	3708      	adds	r7, #8
 800a96e:	46bd      	mov	sp, r7
 800a970:	bd80      	pop	{r7, pc}
 800a972:	bf00      	nop
 800a974:	20001c78 	.word	0x20001c78
 800a978:	40005c00 	.word	0x40005c00

0800a97c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a97c:	b580      	push	{r7, lr}
 800a97e:	b084      	sub	sp, #16
 800a980:	af00      	add	r7, sp, #0
 800a982:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a984:	2300      	movs	r3, #0
 800a986:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a988:	2300      	movs	r3, #0
 800a98a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a992:	4618      	mov	r0, r3
 800a994:	f7f7 f8bc 	bl	8001b10 <HAL_PCD_Start>
 800a998:	4603      	mov	r3, r0
 800a99a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a99c:	7bfb      	ldrb	r3, [r7, #15]
 800a99e:	4618      	mov	r0, r3
 800a9a0:	f000 f94e 	bl	800ac40 <USBD_Get_USB_Status>
 800a9a4:	4603      	mov	r3, r0
 800a9a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a9a8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	3710      	adds	r7, #16
 800a9ae:	46bd      	mov	sp, r7
 800a9b0:	bd80      	pop	{r7, pc}

0800a9b2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a9b2:	b580      	push	{r7, lr}
 800a9b4:	b084      	sub	sp, #16
 800a9b6:	af00      	add	r7, sp, #0
 800a9b8:	6078      	str	r0, [r7, #4]
 800a9ba:	4608      	mov	r0, r1
 800a9bc:	4611      	mov	r1, r2
 800a9be:	461a      	mov	r2, r3
 800a9c0:	4603      	mov	r3, r0
 800a9c2:	70fb      	strb	r3, [r7, #3]
 800a9c4:	460b      	mov	r3, r1
 800a9c6:	70bb      	strb	r3, [r7, #2]
 800a9c8:	4613      	mov	r3, r2
 800a9ca:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a9da:	78bb      	ldrb	r3, [r7, #2]
 800a9dc:	883a      	ldrh	r2, [r7, #0]
 800a9de:	78f9      	ldrb	r1, [r7, #3]
 800a9e0:	f7f7 fa36 	bl	8001e50 <HAL_PCD_EP_Open>
 800a9e4:	4603      	mov	r3, r0
 800a9e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a9e8:	7bfb      	ldrb	r3, [r7, #15]
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	f000 f928 	bl	800ac40 <USBD_Get_USB_Status>
 800a9f0:	4603      	mov	r3, r0
 800a9f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a9f4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	3710      	adds	r7, #16
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	bd80      	pop	{r7, pc}

0800a9fe <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a9fe:	b580      	push	{r7, lr}
 800aa00:	b084      	sub	sp, #16
 800aa02:	af00      	add	r7, sp, #0
 800aa04:	6078      	str	r0, [r7, #4]
 800aa06:	460b      	mov	r3, r1
 800aa08:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa0e:	2300      	movs	r3, #0
 800aa10:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aa18:	78fa      	ldrb	r2, [r7, #3]
 800aa1a:	4611      	mov	r1, r2
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	f7f7 fa7d 	bl	8001f1c <HAL_PCD_EP_Close>
 800aa22:	4603      	mov	r3, r0
 800aa24:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa26:	7bfb      	ldrb	r3, [r7, #15]
 800aa28:	4618      	mov	r0, r3
 800aa2a:	f000 f909 	bl	800ac40 <USBD_Get_USB_Status>
 800aa2e:	4603      	mov	r3, r0
 800aa30:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa32:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa34:	4618      	mov	r0, r3
 800aa36:	3710      	adds	r7, #16
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	bd80      	pop	{r7, pc}

0800aa3c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aa3c:	b580      	push	{r7, lr}
 800aa3e:	b084      	sub	sp, #16
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	6078      	str	r0, [r7, #4]
 800aa44:	460b      	mov	r3, r1
 800aa46:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa48:	2300      	movs	r3, #0
 800aa4a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aa56:	78fa      	ldrb	r2, [r7, #3]
 800aa58:	4611      	mov	r1, r2
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	f7f7 fb3d 	bl	80020da <HAL_PCD_EP_SetStall>
 800aa60:	4603      	mov	r3, r0
 800aa62:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa64:	7bfb      	ldrb	r3, [r7, #15]
 800aa66:	4618      	mov	r0, r3
 800aa68:	f000 f8ea 	bl	800ac40 <USBD_Get_USB_Status>
 800aa6c:	4603      	mov	r3, r0
 800aa6e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa70:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa72:	4618      	mov	r0, r3
 800aa74:	3710      	adds	r7, #16
 800aa76:	46bd      	mov	sp, r7
 800aa78:	bd80      	pop	{r7, pc}

0800aa7a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aa7a:	b580      	push	{r7, lr}
 800aa7c:	b084      	sub	sp, #16
 800aa7e:	af00      	add	r7, sp, #0
 800aa80:	6078      	str	r0, [r7, #4]
 800aa82:	460b      	mov	r3, r1
 800aa84:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa86:	2300      	movs	r3, #0
 800aa88:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aa94:	78fa      	ldrb	r2, [r7, #3]
 800aa96:	4611      	mov	r1, r2
 800aa98:	4618      	mov	r0, r3
 800aa9a:	f7f7 fb7e 	bl	800219a <HAL_PCD_EP_ClrStall>
 800aa9e:	4603      	mov	r3, r0
 800aaa0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aaa2:	7bfb      	ldrb	r3, [r7, #15]
 800aaa4:	4618      	mov	r0, r3
 800aaa6:	f000 f8cb 	bl	800ac40 <USBD_Get_USB_Status>
 800aaaa:	4603      	mov	r3, r0
 800aaac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aaae:	7bbb      	ldrb	r3, [r7, #14]
}
 800aab0:	4618      	mov	r0, r3
 800aab2:	3710      	adds	r7, #16
 800aab4:	46bd      	mov	sp, r7
 800aab6:	bd80      	pop	{r7, pc}

0800aab8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aab8:	b480      	push	{r7}
 800aaba:	b085      	sub	sp, #20
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	6078      	str	r0, [r7, #4]
 800aac0:	460b      	mov	r3, r1
 800aac2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aaca:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800aacc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	da0c      	bge.n	800aaee <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800aad4:	78fb      	ldrb	r3, [r7, #3]
 800aad6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aada:	68f9      	ldr	r1, [r7, #12]
 800aadc:	1c5a      	adds	r2, r3, #1
 800aade:	4613      	mov	r3, r2
 800aae0:	009b      	lsls	r3, r3, #2
 800aae2:	4413      	add	r3, r2
 800aae4:	00db      	lsls	r3, r3, #3
 800aae6:	440b      	add	r3, r1
 800aae8:	3302      	adds	r3, #2
 800aaea:	781b      	ldrb	r3, [r3, #0]
 800aaec:	e00b      	b.n	800ab06 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800aaee:	78fb      	ldrb	r3, [r7, #3]
 800aaf0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aaf4:	68f9      	ldr	r1, [r7, #12]
 800aaf6:	4613      	mov	r3, r2
 800aaf8:	009b      	lsls	r3, r3, #2
 800aafa:	4413      	add	r3, r2
 800aafc:	00db      	lsls	r3, r3, #3
 800aafe:	440b      	add	r3, r1
 800ab00:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800ab04:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ab06:	4618      	mov	r0, r3
 800ab08:	3714      	adds	r7, #20
 800ab0a:	46bd      	mov	sp, r7
 800ab0c:	bc80      	pop	{r7}
 800ab0e:	4770      	bx	lr

0800ab10 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ab10:	b580      	push	{r7, lr}
 800ab12:	b084      	sub	sp, #16
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	6078      	str	r0, [r7, #4]
 800ab18:	460b      	mov	r3, r1
 800ab1a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab1c:	2300      	movs	r3, #0
 800ab1e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab20:	2300      	movs	r3, #0
 800ab22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ab2a:	78fa      	ldrb	r2, [r7, #3]
 800ab2c:	4611      	mov	r1, r2
 800ab2e:	4618      	mov	r0, r3
 800ab30:	f7f7 f969 	bl	8001e06 <HAL_PCD_SetAddress>
 800ab34:	4603      	mov	r3, r0
 800ab36:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab38:	7bfb      	ldrb	r3, [r7, #15]
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	f000 f880 	bl	800ac40 <USBD_Get_USB_Status>
 800ab40:	4603      	mov	r3, r0
 800ab42:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ab44:	7bbb      	ldrb	r3, [r7, #14]
}
 800ab46:	4618      	mov	r0, r3
 800ab48:	3710      	adds	r7, #16
 800ab4a:	46bd      	mov	sp, r7
 800ab4c:	bd80      	pop	{r7, pc}

0800ab4e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ab4e:	b580      	push	{r7, lr}
 800ab50:	b086      	sub	sp, #24
 800ab52:	af00      	add	r7, sp, #0
 800ab54:	60f8      	str	r0, [r7, #12]
 800ab56:	607a      	str	r2, [r7, #4]
 800ab58:	461a      	mov	r2, r3
 800ab5a:	460b      	mov	r3, r1
 800ab5c:	72fb      	strb	r3, [r7, #11]
 800ab5e:	4613      	mov	r3, r2
 800ab60:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab62:	2300      	movs	r3, #0
 800ab64:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab66:	2300      	movs	r3, #0
 800ab68:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ab70:	893b      	ldrh	r3, [r7, #8]
 800ab72:	7af9      	ldrb	r1, [r7, #11]
 800ab74:	687a      	ldr	r2, [r7, #4]
 800ab76:	f7f7 fa6d 	bl	8002054 <HAL_PCD_EP_Transmit>
 800ab7a:	4603      	mov	r3, r0
 800ab7c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab7e:	7dfb      	ldrb	r3, [r7, #23]
 800ab80:	4618      	mov	r0, r3
 800ab82:	f000 f85d 	bl	800ac40 <USBD_Get_USB_Status>
 800ab86:	4603      	mov	r3, r0
 800ab88:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ab8a:	7dbb      	ldrb	r3, [r7, #22]
}
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	3718      	adds	r7, #24
 800ab90:	46bd      	mov	sp, r7
 800ab92:	bd80      	pop	{r7, pc}

0800ab94 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	b086      	sub	sp, #24
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	60f8      	str	r0, [r7, #12]
 800ab9c:	607a      	str	r2, [r7, #4]
 800ab9e:	461a      	mov	r2, r3
 800aba0:	460b      	mov	r3, r1
 800aba2:	72fb      	strb	r3, [r7, #11]
 800aba4:	4613      	mov	r3, r2
 800aba6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aba8:	2300      	movs	r3, #0
 800abaa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800abac:	2300      	movs	r3, #0
 800abae:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800abb6:	893b      	ldrh	r3, [r7, #8]
 800abb8:	7af9      	ldrb	r1, [r7, #11]
 800abba:	687a      	ldr	r2, [r7, #4]
 800abbc:	f7f7 f9f6 	bl	8001fac <HAL_PCD_EP_Receive>
 800abc0:	4603      	mov	r3, r0
 800abc2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800abc4:	7dfb      	ldrb	r3, [r7, #23]
 800abc6:	4618      	mov	r0, r3
 800abc8:	f000 f83a 	bl	800ac40 <USBD_Get_USB_Status>
 800abcc:	4603      	mov	r3, r0
 800abce:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800abd0:	7dbb      	ldrb	r3, [r7, #22]
}
 800abd2:	4618      	mov	r0, r3
 800abd4:	3718      	adds	r7, #24
 800abd6:	46bd      	mov	sp, r7
 800abd8:	bd80      	pop	{r7, pc}

0800abda <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800abda:	b580      	push	{r7, lr}
 800abdc:	b082      	sub	sp, #8
 800abde:	af00      	add	r7, sp, #0
 800abe0:	6078      	str	r0, [r7, #4]
 800abe2:	460b      	mov	r3, r1
 800abe4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800abec:	78fa      	ldrb	r2, [r7, #3]
 800abee:	4611      	mov	r1, r2
 800abf0:	4618      	mov	r0, r3
 800abf2:	f7f7 fa18 	bl	8002026 <HAL_PCD_EP_GetRxCount>
 800abf6:	4603      	mov	r3, r0
}
 800abf8:	4618      	mov	r0, r3
 800abfa:	3708      	adds	r7, #8
 800abfc:	46bd      	mov	sp, r7
 800abfe:	bd80      	pop	{r7, pc}

0800ac00 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ac00:	b480      	push	{r7}
 800ac02:	b083      	sub	sp, #12
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ac08:	4b02      	ldr	r3, [pc, #8]	; (800ac14 <USBD_static_malloc+0x14>)
}
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	370c      	adds	r7, #12
 800ac0e:	46bd      	mov	sp, r7
 800ac10:	bc80      	pop	{r7}
 800ac12:	4770      	bx	lr
 800ac14:	200011a4 	.word	0x200011a4

0800ac18 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ac18:	b480      	push	{r7}
 800ac1a:	b083      	sub	sp, #12
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]

}
 800ac20:	bf00      	nop
 800ac22:	370c      	adds	r7, #12
 800ac24:	46bd      	mov	sp, r7
 800ac26:	bc80      	pop	{r7}
 800ac28:	4770      	bx	lr

0800ac2a <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac2a:	b480      	push	{r7}
 800ac2c:	b083      	sub	sp, #12
 800ac2e:	af00      	add	r7, sp, #0
 800ac30:	6078      	str	r0, [r7, #4]
 800ac32:	460b      	mov	r3, r1
 800ac34:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800ac36:	bf00      	nop
 800ac38:	370c      	adds	r7, #12
 800ac3a:	46bd      	mov	sp, r7
 800ac3c:	bc80      	pop	{r7}
 800ac3e:	4770      	bx	lr

0800ac40 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ac40:	b480      	push	{r7}
 800ac42:	b085      	sub	sp, #20
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	4603      	mov	r3, r0
 800ac48:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ac4e:	79fb      	ldrb	r3, [r7, #7]
 800ac50:	2b03      	cmp	r3, #3
 800ac52:	d817      	bhi.n	800ac84 <USBD_Get_USB_Status+0x44>
 800ac54:	a201      	add	r2, pc, #4	; (adr r2, 800ac5c <USBD_Get_USB_Status+0x1c>)
 800ac56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac5a:	bf00      	nop
 800ac5c:	0800ac6d 	.word	0x0800ac6d
 800ac60:	0800ac73 	.word	0x0800ac73
 800ac64:	0800ac79 	.word	0x0800ac79
 800ac68:	0800ac7f 	.word	0x0800ac7f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	73fb      	strb	r3, [r7, #15]
    break;
 800ac70:	e00b      	b.n	800ac8a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ac72:	2302      	movs	r3, #2
 800ac74:	73fb      	strb	r3, [r7, #15]
    break;
 800ac76:	e008      	b.n	800ac8a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ac78:	2301      	movs	r3, #1
 800ac7a:	73fb      	strb	r3, [r7, #15]
    break;
 800ac7c:	e005      	b.n	800ac8a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ac7e:	2302      	movs	r3, #2
 800ac80:	73fb      	strb	r3, [r7, #15]
    break;
 800ac82:	e002      	b.n	800ac8a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ac84:	2302      	movs	r3, #2
 800ac86:	73fb      	strb	r3, [r7, #15]
    break;
 800ac88:	bf00      	nop
  }
  return usb_status;
 800ac8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	3714      	adds	r7, #20
 800ac90:	46bd      	mov	sp, r7
 800ac92:	bc80      	pop	{r7}
 800ac94:	4770      	bx	lr
 800ac96:	bf00      	nop

0800ac98 <ReadComand>:





void ReadComand(char * Bufer,int Leng){
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	b082      	sub	sp, #8
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	6078      	str	r0, [r7, #4]
 800aca0:	6039      	str	r1, [r7, #0]


 /// HAL_UARTEx_ReceiveToIdle_DMA(&huart1 ,RxData,1);
	HAL_UARTEx_ReceiveToIdle_DMA(&huart1 ,RxData,ReceivSize);
 800aca2:	2332      	movs	r3, #50	; 0x32
 800aca4:	b29b      	uxth	r3, r3
 800aca6:	461a      	mov	r2, r3
 800aca8:	4907      	ldr	r1, [pc, #28]	; (800acc8 <ReadComand+0x30>)
 800acaa:	4808      	ldr	r0, [pc, #32]	; (800accc <ReadComand+0x34>)
 800acac:	f7f9 fdda 	bl	8004864 <HAL_UARTEx_ReceiveToIdle_DMA>
  HAL_UART_Transmit_DMA (&huart1  ,Bufer,Leng);
 800acb0:	683b      	ldr	r3, [r7, #0]
 800acb2:	b29b      	uxth	r3, r3
 800acb4:	461a      	mov	r2, r3
 800acb6:	6879      	ldr	r1, [r7, #4]
 800acb8:	4804      	ldr	r0, [pc, #16]	; (800accc <ReadComand+0x34>)
 800acba:	f7f9 fd67 	bl	800478c <HAL_UART_Transmit_DMA>

  //CDC_Transmit_FS(Bufer, Leng);



}
 800acbe:	bf00      	nop
 800acc0:	3708      	adds	r7, #8
 800acc2:	46bd      	mov	sp, r7
 800acc4:	bd80      	pop	{r7, pc}
 800acc6:	bf00      	nop
 800acc8:	200013c4 	.word	0x200013c4
 800accc:	20001660 	.word	0x20001660

0800acd0 <SendToUSB>:



static int SizeRxData;

void SendToUSB(void){
 800acd0:	b580      	push	{r7, lr}
 800acd2:	af00      	add	r7, sp, #0

  if((SizeRxData !=0) &&(statusDMA==0)){
 800acd4:	4b0c      	ldr	r3, [pc, #48]	; (800ad08 <SendToUSB+0x38>)
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d010      	beq.n	800acfe <SendToUSB+0x2e>
 800acdc:	4b0b      	ldr	r3, [pc, #44]	; (800ad0c <SendToUSB+0x3c>)
 800acde:	781b      	ldrb	r3, [r3, #0]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d10c      	bne.n	800acfe <SendToUSB+0x2e>
	  statusDMA=1;
 800ace4:	4b09      	ldr	r3, [pc, #36]	; (800ad0c <SendToUSB+0x3c>)
 800ace6:	2201      	movs	r2, #1
 800ace8:	701a      	strb	r2, [r3, #0]
      CDC_Transmit_FS(RxData,SizeRxData);
 800acea:	4b07      	ldr	r3, [pc, #28]	; (800ad08 <SendToUSB+0x38>)
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	b29b      	uxth	r3, r3
 800acf0:	4619      	mov	r1, r3
 800acf2:	4807      	ldr	r0, [pc, #28]	; (800ad10 <SendToUSB+0x40>)
 800acf4:	f7ff fbf2 	bl	800a4dc <CDC_Transmit_FS>
      SizeRxData=0;
 800acf8:	4b03      	ldr	r3, [pc, #12]	; (800ad08 <SendToUSB+0x38>)
 800acfa:	2200      	movs	r2, #0
 800acfc:	601a      	str	r2, [r3, #0]
  }
  statusDMA=0;
 800acfe:	4b03      	ldr	r3, [pc, #12]	; (800ad0c <SendToUSB+0x3c>)
 800ad00:	2200      	movs	r2, #0
 800ad02:	701a      	strb	r2, [r3, #0]

}
 800ad04:	bf00      	nop
 800ad06:	bd80      	pop	{r7, pc}
 800ad08:	200014f4 	.word	0x200014f4
 800ad0c:	200014f0 	.word	0x200014f0
 800ad10:	200013c4 	.word	0x200013c4

0800ad14 <HAL_UARTEx_RxEventCallback>:



 void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b09e      	sub	sp, #120	; 0x78
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
 800ad1c:	460b      	mov	r3, r1
 800ad1e:	807b      	strh	r3, [r7, #2]
      HAL_StatusTypeDef  error;
      unsigned char RxDataBuf[100];
      while (statusDMA==1);
 800ad20:	bf00      	nop
 800ad22:	4b3d      	ldr	r3, [pc, #244]	; (800ae18 <HAL_UARTEx_RxEventCallback+0x104>)
 800ad24:	781b      	ldrb	r3, [r3, #0]
 800ad26:	2b01      	cmp	r3, #1
 800ad28:	d0fb      	beq.n	800ad22 <HAL_UARTEx_RxEventCallback+0xe>
      statusDMA=1;
 800ad2a:	4b3b      	ldr	r3, [pc, #236]	; (800ae18 <HAL_UARTEx_RxEventCallback+0x104>)
 800ad2c:	2201      	movs	r2, #1
 800ad2e:	701a      	strb	r2, [r3, #0]
                error = HAL_UARTEx_ReceiveToIdle_DMA(&huart1 ,RxDataBuf,Size);
 800ad30:	887a      	ldrh	r2, [r7, #2]
 800ad32:	f107 030c 	add.w	r3, r7, #12
 800ad36:	4619      	mov	r1, r3
 800ad38:	4838      	ldr	r0, [pc, #224]	; (800ae1c <HAL_UARTEx_RxEventCallback+0x108>)
 800ad3a:	f7f9 fd93 	bl	8004864 <HAL_UARTEx_ReceiveToIdle_DMA>
 800ad3e:	4603      	mov	r3, r0
 800ad40:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

                                 if( error == HAL_OK){
 800ad44:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d122      	bne.n	800ad92 <HAL_UARTEx_RxEventCallback+0x7e>
                                  for (short var = 0;  var < Size; ) {
 800ad4c:	2300      	movs	r3, #0
 800ad4e:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 800ad52:	e018      	b.n	800ad86 <HAL_UARTEx_RxEventCallback+0x72>
                                	   if(SizeRxData>=300){break;}
 800ad54:	4b32      	ldr	r3, [pc, #200]	; (800ae20 <HAL_UARTEx_RxEventCallback+0x10c>)
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800ad5c:	da53      	bge.n	800ae06 <HAL_UARTEx_RxEventCallback+0xf2>
                                        RxData[SizeRxData++] =
 800ad5e:	4b30      	ldr	r3, [pc, #192]	; (800ae20 <HAL_UARTEx_RxEventCallback+0x10c>)
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	1c5a      	adds	r2, r3, #1
 800ad64:	492e      	ldr	r1, [pc, #184]	; (800ae20 <HAL_UARTEx_RxEventCallback+0x10c>)
 800ad66:	600a      	str	r2, [r1, #0]
                                        		RxDataBuf[var++];
 800ad68:	f9b7 1074 	ldrsh.w	r1, [r7, #116]	; 0x74
 800ad6c:	b28a      	uxth	r2, r1
 800ad6e:	3201      	adds	r2, #1
 800ad70:	b292      	uxth	r2, r2
 800ad72:	f8a7 2074 	strh.w	r2, [r7, #116]	; 0x74
 800ad76:	460a      	mov	r2, r1
 800ad78:	f107 0178 	add.w	r1, r7, #120	; 0x78
 800ad7c:	440a      	add	r2, r1
 800ad7e:	f812 1c6c 	ldrb.w	r1, [r2, #-108]
                                        RxData[SizeRxData++] =
 800ad82:	4a28      	ldr	r2, [pc, #160]	; (800ae24 <HAL_UARTEx_RxEventCallback+0x110>)
 800ad84:	54d1      	strb	r1, [r2, r3]
                                  for (short var = 0;  var < Size; ) {
 800ad86:	f9b7 2074 	ldrsh.w	r2, [r7, #116]	; 0x74
 800ad8a:	887b      	ldrh	r3, [r7, #2]
 800ad8c:	429a      	cmp	r2, r3
 800ad8e:	dbe1      	blt.n	800ad54 <HAL_UARTEx_RxEventCallback+0x40>
 800ad90:	e03a      	b.n	800ae08 <HAL_UARTEx_RxEventCallback+0xf4>



                                 }else{

                               if( error ==HAL_BUSY){
 800ad92:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800ad96:	2b02      	cmp	r3, #2
 800ad98:	d130      	bne.n	800adfc <HAL_UARTEx_RxEventCallback+0xe8>

                                 for (short var = 0;  var < Size;) {
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
 800ada0:	e018      	b.n	800add4 <HAL_UARTEx_RxEventCallback+0xc0>
                                	 if(SizeRxData>=300){break;}
 800ada2:	4b1f      	ldr	r3, [pc, #124]	; (800ae20 <HAL_UARTEx_RxEventCallback+0x10c>)
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800adaa:	da19      	bge.n	800ade0 <HAL_UARTEx_RxEventCallback+0xcc>
                                	 RxData[SizeRxData++] = RxDataBuf[var++];
 800adac:	4b1c      	ldr	r3, [pc, #112]	; (800ae20 <HAL_UARTEx_RxEventCallback+0x10c>)
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	1c5a      	adds	r2, r3, #1
 800adb2:	491b      	ldr	r1, [pc, #108]	; (800ae20 <HAL_UARTEx_RxEventCallback+0x10c>)
 800adb4:	600a      	str	r2, [r1, #0]
 800adb6:	f9b7 1072 	ldrsh.w	r1, [r7, #114]	; 0x72
 800adba:	b28a      	uxth	r2, r1
 800adbc:	3201      	adds	r2, #1
 800adbe:	b292      	uxth	r2, r2
 800adc0:	f8a7 2072 	strh.w	r2, [r7, #114]	; 0x72
 800adc4:	460a      	mov	r2, r1
 800adc6:	f107 0178 	add.w	r1, r7, #120	; 0x78
 800adca:	440a      	add	r2, r1
 800adcc:	f812 1c6c 	ldrb.w	r1, [r2, #-108]
 800add0:	4a14      	ldr	r2, [pc, #80]	; (800ae24 <HAL_UARTEx_RxEventCallback+0x110>)
 800add2:	54d1      	strb	r1, [r2, r3]
                                 for (short var = 0;  var < Size;) {
 800add4:	f9b7 2072 	ldrsh.w	r2, [r7, #114]	; 0x72
 800add8:	887b      	ldrh	r3, [r7, #2]
 800adda:	429a      	cmp	r2, r3
 800addc:	dbe1      	blt.n	800ada2 <HAL_UARTEx_RxEventCallback+0x8e>
 800adde:	e00d      	b.n	800adfc <HAL_UARTEx_RxEventCallback+0xe8>
                                	 if(SizeRxData>=300){break;}
 800ade0:	bf00      	nop
                                 }


                                 }
                                while( error !=HAL_OK){
 800ade2:	e00b      	b.n	800adfc <HAL_UARTEx_RxEventCallback+0xe8>
                                 MX_USART1_UART_Init();
 800ade4:	f7f5 fcdc 	bl	80007a0 <MX_USART1_UART_Init>
                                 error =  HAL_UARTEx_ReceiveToIdle_DMA(&huart1 ,RxData,ReceivSize);
 800ade8:	2332      	movs	r3, #50	; 0x32
 800adea:	b29b      	uxth	r3, r3
 800adec:	461a      	mov	r2, r3
 800adee:	490d      	ldr	r1, [pc, #52]	; (800ae24 <HAL_UARTEx_RxEventCallback+0x110>)
 800adf0:	480a      	ldr	r0, [pc, #40]	; (800ae1c <HAL_UARTEx_RxEventCallback+0x108>)
 800adf2:	f7f9 fd37 	bl	8004864 <HAL_UARTEx_ReceiveToIdle_DMA>
 800adf6:	4603      	mov	r3, r0
 800adf8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
                                while( error !=HAL_OK){
 800adfc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d1ef      	bne.n	800ade4 <HAL_UARTEx_RxEventCallback+0xd0>
 800ae04:	e000      	b.n	800ae08 <HAL_UARTEx_RxEventCallback+0xf4>
                                	   if(SizeRxData>=300){break;}
 800ae06:	bf00      	nop
                                // CDC_Transmit_FS(RxData,Size);
                                }}

                                 statusDMA=0;
 800ae08:	4b03      	ldr	r3, [pc, #12]	; (800ae18 <HAL_UARTEx_RxEventCallback+0x104>)
 800ae0a:	2200      	movs	r2, #0
 800ae0c:	701a      	strb	r2, [r3, #0]
}
 800ae0e:	bf00      	nop
 800ae10:	3778      	adds	r7, #120	; 0x78
 800ae12:	46bd      	mov	sp, r7
 800ae14:	bd80      	pop	{r7, pc}
 800ae16:	bf00      	nop
 800ae18:	200014f0 	.word	0x200014f0
 800ae1c:	20001660 	.word	0x20001660
 800ae20:	200014f4 	.word	0x200014f4
 800ae24:	200013c4 	.word	0x200013c4

0800ae28 <ReadUart>:


 HAL_StatusTypeDef  ReadUart(void){ return HAL_UARTEx_ReceiveToIdle_DMA(&huart1 ,RxData, ReceivSize);}
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	af00      	add	r7, sp, #0
 800ae2c:	2332      	movs	r3, #50	; 0x32
 800ae2e:	b29b      	uxth	r3, r3
 800ae30:	461a      	mov	r2, r3
 800ae32:	4903      	ldr	r1, [pc, #12]	; (800ae40 <ReadUart+0x18>)
 800ae34:	4803      	ldr	r0, [pc, #12]	; (800ae44 <ReadUart+0x1c>)
 800ae36:	f7f9 fd15 	bl	8004864 <HAL_UARTEx_ReceiveToIdle_DMA>
 800ae3a:	4603      	mov	r3, r0
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	bd80      	pop	{r7, pc}
 800ae40:	200013c4 	.word	0x200013c4
 800ae44:	20001660 	.word	0x20001660

0800ae48 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800ae48:	480c      	ldr	r0, [pc, #48]	; (800ae7c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800ae4a:	490d      	ldr	r1, [pc, #52]	; (800ae80 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800ae4c:	4a0d      	ldr	r2, [pc, #52]	; (800ae84 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800ae4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800ae50:	e002      	b.n	800ae58 <LoopCopyDataInit>

0800ae52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800ae52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800ae54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800ae56:	3304      	adds	r3, #4

0800ae58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800ae58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800ae5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800ae5c:	d3f9      	bcc.n	800ae52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800ae5e:	4a0a      	ldr	r2, [pc, #40]	; (800ae88 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800ae60:	4c0a      	ldr	r4, [pc, #40]	; (800ae8c <LoopFillZerobss+0x22>)
  movs r3, #0
 800ae62:	2300      	movs	r3, #0
  b LoopFillZerobss
 800ae64:	e001      	b.n	800ae6a <LoopFillZerobss>

0800ae66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800ae66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800ae68:	3204      	adds	r2, #4

0800ae6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800ae6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800ae6c:	d3fb      	bcc.n	800ae66 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800ae6e:	f7f5 fc8b 	bl	8000788 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800ae72:	f000 f80f 	bl	800ae94 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800ae76:	f7f5 faf9 	bl	800046c <main>
  bx lr
 800ae7a:	4770      	bx	lr
  ldr r0, =_sdata
 800ae7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800ae80:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 800ae84:	0800b1e8 	.word	0x0800b1e8
  ldr r2, =_sbss
 800ae88:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 800ae8c:	20001f64 	.word	0x20001f64

0800ae90 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800ae90:	e7fe      	b.n	800ae90 <ADC1_2_IRQHandler>
	...

0800ae94 <__libc_init_array>:
 800ae94:	b570      	push	{r4, r5, r6, lr}
 800ae96:	2500      	movs	r5, #0
 800ae98:	4e0c      	ldr	r6, [pc, #48]	; (800aecc <__libc_init_array+0x38>)
 800ae9a:	4c0d      	ldr	r4, [pc, #52]	; (800aed0 <__libc_init_array+0x3c>)
 800ae9c:	1ba4      	subs	r4, r4, r6
 800ae9e:	10a4      	asrs	r4, r4, #2
 800aea0:	42a5      	cmp	r5, r4
 800aea2:	d109      	bne.n	800aeb8 <__libc_init_array+0x24>
 800aea4:	f000 f822 	bl	800aeec <_init>
 800aea8:	2500      	movs	r5, #0
 800aeaa:	4e0a      	ldr	r6, [pc, #40]	; (800aed4 <__libc_init_array+0x40>)
 800aeac:	4c0a      	ldr	r4, [pc, #40]	; (800aed8 <__libc_init_array+0x44>)
 800aeae:	1ba4      	subs	r4, r4, r6
 800aeb0:	10a4      	asrs	r4, r4, #2
 800aeb2:	42a5      	cmp	r5, r4
 800aeb4:	d105      	bne.n	800aec2 <__libc_init_array+0x2e>
 800aeb6:	bd70      	pop	{r4, r5, r6, pc}
 800aeb8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800aebc:	4798      	blx	r3
 800aebe:	3501      	adds	r5, #1
 800aec0:	e7ee      	b.n	800aea0 <__libc_init_array+0xc>
 800aec2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800aec6:	4798      	blx	r3
 800aec8:	3501      	adds	r5, #1
 800aeca:	e7f2      	b.n	800aeb2 <__libc_init_array+0x1e>
 800aecc:	0800b1e0 	.word	0x0800b1e0
 800aed0:	0800b1e0 	.word	0x0800b1e0
 800aed4:	0800b1e0 	.word	0x0800b1e0
 800aed8:	0800b1e4 	.word	0x0800b1e4

0800aedc <memset>:
 800aedc:	4603      	mov	r3, r0
 800aede:	4402      	add	r2, r0
 800aee0:	4293      	cmp	r3, r2
 800aee2:	d100      	bne.n	800aee6 <memset+0xa>
 800aee4:	4770      	bx	lr
 800aee6:	f803 1b01 	strb.w	r1, [r3], #1
 800aeea:	e7f9      	b.n	800aee0 <memset+0x4>

0800aeec <_init>:
 800aeec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aeee:	bf00      	nop
 800aef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aef2:	bc08      	pop	{r3}
 800aef4:	469e      	mov	lr, r3
 800aef6:	4770      	bx	lr

0800aef8 <_fini>:
 800aef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aefa:	bf00      	nop
 800aefc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aefe:	bc08      	pop	{r3}
 800af00:	469e      	mov	lr, r3
 800af02:	4770      	bx	lr
