
TrekerSIM868.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b0f8  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a0  0800b208  0800b208  0001b208  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800b5a8  0800b5a8  0001b5a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800b5ac  0800b5ac  0001b5ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000018c  20000000  0800b5b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000208c  2000018c  0800b73c  0002018c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20002218  0800b73c  00022218  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002018c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00020039  00000000  00000000  000201b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00004a4c  00000000  00000000  000401ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001868  00000000  00000000  00044c40  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001658  00000000  00000000  000464a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000efa0  00000000  00000000  00047b00  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000072e7  00000000  00000000  00056aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0005dd87  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00006204  00000000  00000000  0005de04  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000018c 	.word	0x2000018c
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b1f0 	.word	0x0800b1f0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000190 	.word	0x20000190
 800014c:	0800b1f0 	.word	0x0800b1f0

08000150 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	b082      	sub	sp, #8
 8000154:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000156:	4a18      	ldr	r2, [pc, #96]	; (80001b8 <MX_DMA_Init+0x68>)
 8000158:	4b17      	ldr	r3, [pc, #92]	; (80001b8 <MX_DMA_Init+0x68>)
 800015a:	695b      	ldr	r3, [r3, #20]
 800015c:	f043 0301 	orr.w	r3, r3, #1
 8000160:	6153      	str	r3, [r2, #20]
 8000162:	4b15      	ldr	r3, [pc, #84]	; (80001b8 <MX_DMA_Init+0x68>)
 8000164:	695b      	ldr	r3, [r3, #20]
 8000166:	f003 0301 	and.w	r3, r3, #1
 800016a:	607b      	str	r3, [r7, #4]
 800016c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 800016e:	2200      	movs	r2, #0
 8000170:	2105      	movs	r1, #5
 8000172:	200e      	movs	r0, #14
 8000174:	f000 fd9a 	bl	8000cac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000178:	200e      	movs	r0, #14
 800017a:	f000 fdc3 	bl	8000d04 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 800017e:	2200      	movs	r2, #0
 8000180:	2105      	movs	r1, #5
 8000182:	200f      	movs	r0, #15
 8000184:	f000 fd92 	bl	8000cac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000188:	200f      	movs	r0, #15
 800018a:	f000 fdbb 	bl	8000d04 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 800018e:	2200      	movs	r2, #0
 8000190:	2105      	movs	r1, #5
 8000192:	2010      	movs	r0, #16
 8000194:	f000 fd8a 	bl	8000cac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000198:	2010      	movs	r0, #16
 800019a:	f000 fdb3 	bl	8000d04 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 800019e:	2200      	movs	r2, #0
 80001a0:	2105      	movs	r1, #5
 80001a2:	2011      	movs	r0, #17
 80001a4:	f000 fd82 	bl	8000cac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80001a8:	2011      	movs	r0, #17
 80001aa:	f000 fdab 	bl	8000d04 <HAL_NVIC_EnableIRQ>

}
 80001ae:	bf00      	nop
 80001b0:	3708      	adds	r7, #8
 80001b2:	46bd      	mov	sp, r7
 80001b4:	bd80      	pop	{r7, pc}
 80001b6:	bf00      	nop
 80001b8:	40021000 	.word	0x40021000

080001bc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80001bc:	b480      	push	{r7}
 80001be:	b085      	sub	sp, #20
 80001c0:	af00      	add	r7, sp, #0
 80001c2:	60f8      	str	r0, [r7, #12]
 80001c4:	60b9      	str	r1, [r7, #8]
 80001c6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80001c8:	68fb      	ldr	r3, [r7, #12]
 80001ca:	4a06      	ldr	r2, [pc, #24]	; (80001e4 <vApplicationGetIdleTaskMemory+0x28>)
 80001cc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80001ce:	68bb      	ldr	r3, [r7, #8]
 80001d0:	4a05      	ldr	r2, [pc, #20]	; (80001e8 <vApplicationGetIdleTaskMemory+0x2c>)
 80001d2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	2280      	movs	r2, #128	; 0x80
 80001d8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80001da:	bf00      	nop
 80001dc:	3714      	adds	r7, #20
 80001de:	46bd      	mov	sp, r7
 80001e0:	bc80      	pop	{r7}
 80001e2:	4770      	bx	lr
 80001e4:	200001a8 	.word	0x200001a8
 80001e8:	200001fc 	.word	0x200001fc

080001ec <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80001ec:	b5b0      	push	{r4, r5, r7, lr}
 80001ee:	b09c      	sub	sp, #112	; 0x70
 80001f0:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of GPS */
  osThreadDef(GPS, StartGPS, osPriorityNormal, 0, 128);
 80001f2:	4b27      	ldr	r3, [pc, #156]	; (8000290 <MX_FREERTOS_Init+0xa4>)
 80001f4:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80001f8:	461d      	mov	r5, r3
 80001fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001fe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000202:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  GPSHandle = osThreadCreate(osThread(GPS), NULL);
 8000206:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800020a:	2100      	movs	r1, #0
 800020c:	4618      	mov	r0, r3
 800020e:	f008 fedb 	bl	8008fc8 <osThreadCreate>
 8000212:	4602      	mov	r2, r0
 8000214:	4b1f      	ldr	r3, [pc, #124]	; (8000294 <MX_FREERTOS_Init+0xa8>)
 8000216:	601a      	str	r2, [r3, #0]

  /* definition and creation of GSM */
  osThreadDef(GSM, StartGSM, osPriorityIdle, 0, 128);
 8000218:	4b1f      	ldr	r3, [pc, #124]	; (8000298 <MX_FREERTOS_Init+0xac>)
 800021a:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800021e:	461d      	mov	r5, r3
 8000220:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000222:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000224:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000228:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  GSMHandle = osThreadCreate(osThread(GSM), NULL);
 800022c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000230:	2100      	movs	r1, #0
 8000232:	4618      	mov	r0, r3
 8000234:	f008 fec8 	bl	8008fc8 <osThreadCreate>
 8000238:	4602      	mov	r2, r0
 800023a:	4b18      	ldr	r3, [pc, #96]	; (800029c <MX_FREERTOS_Init+0xb0>)
 800023c:	601a      	str	r2, [r3, #0]

  /* definition and creation of Masage */
  osThreadDef(Masage, StartMasage, osPriorityIdle, 0, 128);
 800023e:	4b18      	ldr	r3, [pc, #96]	; (80002a0 <MX_FREERTOS_Init+0xb4>)
 8000240:	f107 041c 	add.w	r4, r7, #28
 8000244:	461d      	mov	r5, r3
 8000246:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000248:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800024a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800024e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  MasageHandle = osThreadCreate(osThread(Masage), NULL);
 8000252:	f107 031c 	add.w	r3, r7, #28
 8000256:	2100      	movs	r1, #0
 8000258:	4618      	mov	r0, r3
 800025a:	f008 feb5 	bl	8008fc8 <osThreadCreate>
 800025e:	4602      	mov	r2, r0
 8000260:	4b10      	ldr	r3, [pc, #64]	; (80002a4 <MX_FREERTOS_Init+0xb8>)
 8000262:	601a      	str	r2, [r3, #0]

  /* definition and creation of mySTATUS */
  osThreadDef(mySTATUS, StartSTATUS, osPriorityIdle, 0, 128);
 8000264:	4b10      	ldr	r3, [pc, #64]	; (80002a8 <MX_FREERTOS_Init+0xbc>)
 8000266:	463c      	mov	r4, r7
 8000268:	461d      	mov	r5, r3
 800026a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800026c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800026e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000272:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  mySTATUSHandle = osThreadCreate(osThread(mySTATUS), NULL);
 8000276:	463b      	mov	r3, r7
 8000278:	2100      	movs	r1, #0
 800027a:	4618      	mov	r0, r3
 800027c:	f008 fea4 	bl	8008fc8 <osThreadCreate>
 8000280:	4602      	mov	r2, r0
 8000282:	4b0a      	ldr	r3, [pc, #40]	; (80002ac <MX_FREERTOS_Init+0xc0>)
 8000284:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000286:	bf00      	nop
 8000288:	3770      	adds	r7, #112	; 0x70
 800028a:	46bd      	mov	sp, r7
 800028c:	bdb0      	pop	{r4, r5, r7, pc}
 800028e:	bf00      	nop
 8000290:	0800b20c 	.word	0x0800b20c
 8000294:	200016b0 	.word	0x200016b0
 8000298:	0800b22c 	.word	0x0800b22c
 800029c:	200016bc 	.word	0x200016bc
 80002a0:	0800b250 	.word	0x0800b250
 80002a4:	200016b8 	.word	0x200016b8
 80002a8:	0800b278 	.word	0x0800b278
 80002ac:	200016b4 	.word	0x200016b4

080002b0 <StartGPS>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartGPS */
void StartGPS(void const * argument)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b082      	sub	sp, #8
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80002b8:	f00a f820 	bl	800a2fc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartGPS */
  /* Infinite loop */
  for(;;)
  {
    osDelay(500);
 80002bc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002c0:	f008 fece 	bl	8009060 <osDelay>
    HAL_GPIO_WritePin(GPIOC, LED_WORK_Pin, GPIO_PIN_RESET);
 80002c4:	2200      	movs	r2, #0
 80002c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002ca:	4807      	ldr	r0, [pc, #28]	; (80002e8 <StartGPS+0x38>)
 80002cc:	f001 fad0 	bl	8001870 <HAL_GPIO_WritePin>
    osDelay(500);
 80002d0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002d4:	f008 fec4 	bl	8009060 <osDelay>
    HAL_GPIO_WritePin(GPIOC, LED_WORK_Pin, GPIO_PIN_SET);
 80002d8:	2201      	movs	r2, #1
 80002da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002de:	4802      	ldr	r0, [pc, #8]	; (80002e8 <StartGPS+0x38>)
 80002e0:	f001 fac6 	bl	8001870 <HAL_GPIO_WritePin>
    osDelay(500);
 80002e4:	e7ea      	b.n	80002bc <StartGPS+0xc>
 80002e6:	bf00      	nop
 80002e8:	40011000 	.word	0x40011000

080002ec <StartGSM>:
*/
/* USER CODE END Header_StartGSM */

    void ATcomand(char Comand);
void StartGSM(void const * argument)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b082      	sub	sp, #8
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartGSM */
  /* Infinite loop */
  for(;;){

   ATcomand(AT);
 80002f4:	2001      	movs	r0, #1
 80002f6:	f00a fda9 	bl	800ae4c <ATcomand>
   osDelay(2000);
 80002fa:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80002fe:	f008 feaf 	bl	8009060 <osDelay>
   ATcomand(AT);
 8000302:	e7f7      	b.n	80002f4 <StartGSM+0x8>

08000304 <StartMasage>:
*/
/* USER CODE END Header_StartMasage */
void SendToUSB(void);

void StartMasage(void const * argument)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b082      	sub	sp, #8
 8000308:	af00      	add	r7, sp, #0
 800030a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMasage */
  /* Infinite loop */
  for(;;)
  {
    osDelay(10);
 800030c:	200a      	movs	r0, #10
 800030e:	f008 fea7 	bl	8009060 <osDelay>
    SendToUSB();
 8000312:	f00a fcdf 	bl	800acd4 <SendToUSB>
    osDelay(10);
 8000316:	e7f9      	b.n	800030c <StartMasage+0x8>

08000318 <StartSTATUS>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSTATUS */
void StartSTATUS(void const * argument)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b082      	sub	sp, #8
 800031c:	af00      	add	r7, sp, #0
 800031e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSTATUS */
  /* Infinite loop */
  for(;;)
  {

      osDelay(500);
 8000320:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000324:	f008 fe9c 	bl	8009060 <osDelay>
      HAL_GPIO_WritePin(GPIOC, LED_WORK_Pin, GPIO_PIN_RESET);
 8000328:	2200      	movs	r2, #0
 800032a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800032e:	4807      	ldr	r0, [pc, #28]	; (800034c <StartSTATUS+0x34>)
 8000330:	f001 fa9e 	bl	8001870 <HAL_GPIO_WritePin>
      osDelay(500);
 8000334:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000338:	f008 fe92 	bl	8009060 <osDelay>
      HAL_GPIO_WritePin(GPIOC, LED_WORK_Pin, GPIO_PIN_SET);
 800033c:	2201      	movs	r2, #1
 800033e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000342:	4802      	ldr	r0, [pc, #8]	; (800034c <StartSTATUS+0x34>)
 8000344:	f001 fa94 	bl	8001870 <HAL_GPIO_WritePin>
      osDelay(500);
 8000348:	e7ea      	b.n	8000320 <StartSTATUS+0x8>
 800034a:	bf00      	nop
 800034c:	40011000 	.word	0x40011000

08000350 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b088      	sub	sp, #32
 8000354:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000356:	f107 0310 	add.w	r3, r7, #16
 800035a:	2200      	movs	r2, #0
 800035c:	601a      	str	r2, [r3, #0]
 800035e:	605a      	str	r2, [r3, #4]
 8000360:	609a      	str	r2, [r3, #8]
 8000362:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000364:	4a3e      	ldr	r2, [pc, #248]	; (8000460 <MX_GPIO_Init+0x110>)
 8000366:	4b3e      	ldr	r3, [pc, #248]	; (8000460 <MX_GPIO_Init+0x110>)
 8000368:	699b      	ldr	r3, [r3, #24]
 800036a:	f043 0310 	orr.w	r3, r3, #16
 800036e:	6193      	str	r3, [r2, #24]
 8000370:	4b3b      	ldr	r3, [pc, #236]	; (8000460 <MX_GPIO_Init+0x110>)
 8000372:	699b      	ldr	r3, [r3, #24]
 8000374:	f003 0310 	and.w	r3, r3, #16
 8000378:	60fb      	str	r3, [r7, #12]
 800037a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800037c:	4a38      	ldr	r2, [pc, #224]	; (8000460 <MX_GPIO_Init+0x110>)
 800037e:	4b38      	ldr	r3, [pc, #224]	; (8000460 <MX_GPIO_Init+0x110>)
 8000380:	699b      	ldr	r3, [r3, #24]
 8000382:	f043 0320 	orr.w	r3, r3, #32
 8000386:	6193      	str	r3, [r2, #24]
 8000388:	4b35      	ldr	r3, [pc, #212]	; (8000460 <MX_GPIO_Init+0x110>)
 800038a:	699b      	ldr	r3, [r3, #24]
 800038c:	f003 0320 	and.w	r3, r3, #32
 8000390:	60bb      	str	r3, [r7, #8]
 8000392:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000394:	4a32      	ldr	r2, [pc, #200]	; (8000460 <MX_GPIO_Init+0x110>)
 8000396:	4b32      	ldr	r3, [pc, #200]	; (8000460 <MX_GPIO_Init+0x110>)
 8000398:	699b      	ldr	r3, [r3, #24]
 800039a:	f043 0304 	orr.w	r3, r3, #4
 800039e:	6193      	str	r3, [r2, #24]
 80003a0:	4b2f      	ldr	r3, [pc, #188]	; (8000460 <MX_GPIO_Init+0x110>)
 80003a2:	699b      	ldr	r3, [r3, #24]
 80003a4:	f003 0304 	and.w	r3, r3, #4
 80003a8:	607b      	str	r3, [r7, #4]
 80003aa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003ac:	4a2c      	ldr	r2, [pc, #176]	; (8000460 <MX_GPIO_Init+0x110>)
 80003ae:	4b2c      	ldr	r3, [pc, #176]	; (8000460 <MX_GPIO_Init+0x110>)
 80003b0:	699b      	ldr	r3, [r3, #24]
 80003b2:	f043 0308 	orr.w	r3, r3, #8
 80003b6:	6193      	str	r3, [r2, #24]
 80003b8:	4b29      	ldr	r3, [pc, #164]	; (8000460 <MX_GPIO_Init+0x110>)
 80003ba:	699b      	ldr	r3, [r3, #24]
 80003bc:	f003 0308 	and.w	r3, r3, #8
 80003c0:	603b      	str	r3, [r7, #0]
 80003c2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_WORK_GPIO_Port, LED_WORK_Pin, GPIO_PIN_SET);
 80003c4:	2201      	movs	r2, #1
 80003c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003ca:	4826      	ldr	r0, [pc, #152]	; (8000464 <MX_GPIO_Init+0x114>)
 80003cc:	f001 fa50 	bl	8001870 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DTR_SlEEP_Pin|SIM_PWR_KEY_Pin|GNSS_EN_Pin|PWR_Sensor_Pin, GPIO_PIN_RESET);
 80003d0:	2200      	movs	r2, #0
 80003d2:	2172      	movs	r1, #114	; 0x72
 80003d4:	4824      	ldr	r0, [pc, #144]	; (8000468 <MX_GPIO_Init+0x118>)
 80003d6:	f001 fa4b 	bl	8001870 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_WORK_Pin;
 80003da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003e0:	2301      	movs	r3, #1
 80003e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003e4:	2300      	movs	r3, #0
 80003e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003e8:	2302      	movs	r3, #2
 80003ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_WORK_GPIO_Port, &GPIO_InitStruct);
 80003ec:	f107 0310 	add.w	r3, r7, #16
 80003f0:	4619      	mov	r1, r3
 80003f2:	481c      	ldr	r0, [pc, #112]	; (8000464 <MX_GPIO_Init+0x114>)
 80003f4:	f001 f802 	bl	80013fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80003f8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80003fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80003fe:	2303      	movs	r3, #3
 8000400:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000402:	f107 0310 	add.w	r3, r7, #16
 8000406:	4619      	mov	r1, r3
 8000408:	4816      	ldr	r0, [pc, #88]	; (8000464 <MX_GPIO_Init+0x114>)
 800040a:	f000 fff7 	bl	80013fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = DTR_SlEEP_Pin|SIM_PWR_KEY_Pin|GNSS_EN_Pin|PWR_Sensor_Pin;
 800040e:	2372      	movs	r3, #114	; 0x72
 8000410:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000412:	2301      	movs	r3, #1
 8000414:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000416:	2300      	movs	r3, #0
 8000418:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800041a:	2302      	movs	r3, #2
 800041c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800041e:	f107 0310 	add.w	r3, r7, #16
 8000422:	4619      	mov	r1, r3
 8000424:	4810      	ldr	r0, [pc, #64]	; (8000468 <MX_GPIO_Init+0x118>)
 8000426:	f000 ffe9 	bl	80013fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA7 PA8 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_15;
 800042a:	f248 1380 	movw	r3, #33152	; 0x8180
 800042e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000430:	2303      	movs	r3, #3
 8000432:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000434:	f107 0310 	add.w	r3, r7, #16
 8000438:	4619      	mov	r1, r3
 800043a:	480b      	ldr	r0, [pc, #44]	; (8000468 <MX_GPIO_Init+0x118>)
 800043c:	f000 ffde 	bl	80013fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB4 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000440:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 8000444:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000446:	2303      	movs	r3, #3
 8000448:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800044a:	f107 0310 	add.w	r3, r7, #16
 800044e:	4619      	mov	r1, r3
 8000450:	4806      	ldr	r0, [pc, #24]	; (800046c <MX_GPIO_Init+0x11c>)
 8000452:	f000 ffd3 	bl	80013fc <HAL_GPIO_Init>

}
 8000456:	bf00      	nop
 8000458:	3720      	adds	r7, #32
 800045a:	46bd      	mov	sp, r7
 800045c:	bd80      	pop	{r7, pc}
 800045e:	bf00      	nop
 8000460:	40021000 	.word	0x40021000
 8000464:	40011000 	.word	0x40011000
 8000468:	40010800 	.word	0x40010800
 800046c:	40010c00 	.word	0x40010c00

08000470 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000474:	f000 fb20 	bl	8000ab8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000478:	f000 f811 	bl	800049e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800047c:	f7ff ff68 	bl	8000350 <MX_GPIO_Init>
  MX_DMA_Init();
 8000480:	f7ff fe66 	bl	8000150 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000484:	f000 f986 	bl	8000794 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000488:	f000 f9ae 	bl	80007e8 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800048c:	f000 f97c 	bl	8000788 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_StatusTypeDef  ReadUart(void);
                    ReadUart();
 8000490:	f00a fccc 	bl	800ae2c <ReadUart>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000494:	f7ff feaa 	bl	80001ec <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000498:	f008 fd8f 	bl	8008fba <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800049c:	e7fe      	b.n	800049c <main+0x2c>

0800049e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800049e:	b580      	push	{r7, lr}
 80004a0:	b094      	sub	sp, #80	; 0x50
 80004a2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80004a8:	2228      	movs	r2, #40	; 0x28
 80004aa:	2100      	movs	r1, #0
 80004ac:	4618      	mov	r0, r3
 80004ae:	f00a fe97 	bl	800b1e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004b2:	f107 0314 	add.w	r3, r7, #20
 80004b6:	2200      	movs	r2, #0
 80004b8:	601a      	str	r2, [r3, #0]
 80004ba:	605a      	str	r2, [r3, #4]
 80004bc:	609a      	str	r2, [r3, #8]
 80004be:	60da      	str	r2, [r3, #12]
 80004c0:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004c2:	1d3b      	adds	r3, r7, #4
 80004c4:	2200      	movs	r2, #0
 80004c6:	601a      	str	r2, [r3, #0]
 80004c8:	605a      	str	r2, [r3, #4]
 80004ca:	609a      	str	r2, [r3, #8]
 80004cc:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80004ce:	2301      	movs	r3, #1
 80004d0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80004d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80004d8:	2300      	movs	r3, #0
 80004da:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004dc:	2301      	movs	r3, #1
 80004de:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004e0:	2302      	movs	r3, #2
 80004e2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80004e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004e8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80004ea:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80004ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80004f4:	4618      	mov	r0, r3
 80004f6:	f002 fedd 	bl	80032b4 <HAL_RCC_OscConfig>
 80004fa:	4603      	mov	r3, r0
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d001      	beq.n	8000504 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000500:	f000 f83a 	bl	8000578 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000504:	230f      	movs	r3, #15
 8000506:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000508:	2302      	movs	r3, #2
 800050a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800050c:	2300      	movs	r3, #0
 800050e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000510:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000514:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000516:	2300      	movs	r3, #0
 8000518:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800051a:	f107 0314 	add.w	r3, r7, #20
 800051e:	2101      	movs	r1, #1
 8000520:	4618      	mov	r0, r3
 8000522:	f003 fa37 	bl	8003994 <HAL_RCC_ClockConfig>
 8000526:	4603      	mov	r3, r0
 8000528:	2b00      	cmp	r3, #0
 800052a:	d001      	beq.n	8000530 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800052c:	f000 f824 	bl	8000578 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000530:	2310      	movs	r3, #16
 8000532:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000534:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000538:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800053a:	1d3b      	adds	r3, r7, #4
 800053c:	4618      	mov	r0, r3
 800053e:	f003 fcad 	bl	8003e9c <HAL_RCCEx_PeriphCLKConfig>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
 8000546:	d001      	beq.n	800054c <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000548:	f000 f816 	bl	8000578 <Error_Handler>
  }
}
 800054c:	bf00      	nop
 800054e:	3750      	adds	r7, #80	; 0x50
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}

08000554 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4a04      	ldr	r2, [pc, #16]	; (8000574 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000562:	4293      	cmp	r3, r2
 8000564:	d101      	bne.n	800056a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000566:	f000 fabd 	bl	8000ae4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800056a:	bf00      	nop
 800056c:	3708      	adds	r7, #8
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	40012c00 	.word	0x40012c00

08000578 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800057c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800057e:	e7fe      	b.n	800057e <Error_Handler+0x6>

08000580 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
 8000588:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 800058a:	bf00      	nop
 800058c:	370c      	adds	r7, #12
 800058e:	46bd      	mov	sp, r7
 8000590:	bc80      	pop	{r7}
 8000592:	4770      	bx	lr

08000594 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b084      	sub	sp, #16
 8000598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800059a:	4a18      	ldr	r2, [pc, #96]	; (80005fc <HAL_MspInit+0x68>)
 800059c:	4b17      	ldr	r3, [pc, #92]	; (80005fc <HAL_MspInit+0x68>)
 800059e:	699b      	ldr	r3, [r3, #24]
 80005a0:	f043 0301 	orr.w	r3, r3, #1
 80005a4:	6193      	str	r3, [r2, #24]
 80005a6:	4b15      	ldr	r3, [pc, #84]	; (80005fc <HAL_MspInit+0x68>)
 80005a8:	699b      	ldr	r3, [r3, #24]
 80005aa:	f003 0301 	and.w	r3, r3, #1
 80005ae:	60bb      	str	r3, [r7, #8]
 80005b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b2:	4a12      	ldr	r2, [pc, #72]	; (80005fc <HAL_MspInit+0x68>)
 80005b4:	4b11      	ldr	r3, [pc, #68]	; (80005fc <HAL_MspInit+0x68>)
 80005b6:	69db      	ldr	r3, [r3, #28]
 80005b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005bc:	61d3      	str	r3, [r2, #28]
 80005be:	4b0f      	ldr	r3, [pc, #60]	; (80005fc <HAL_MspInit+0x68>)
 80005c0:	69db      	ldr	r3, [r3, #28]
 80005c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005c6:	607b      	str	r3, [r7, #4]
 80005c8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80005ca:	2200      	movs	r2, #0
 80005cc:	210f      	movs	r1, #15
 80005ce:	f06f 0001 	mvn.w	r0, #1
 80005d2:	f000 fb6b 	bl	8000cac <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80005d6:	4b0a      	ldr	r3, [pc, #40]	; (8000600 <HAL_MspInit+0x6c>)
 80005d8:	685b      	ldr	r3, [r3, #4]
 80005da:	60fb      	str	r3, [r7, #12]
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80005e2:	60fb      	str	r3, [r7, #12]
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005ea:	60fb      	str	r3, [r7, #12]
 80005ec:	4a04      	ldr	r2, [pc, #16]	; (8000600 <HAL_MspInit+0x6c>)
 80005ee:	68fb      	ldr	r3, [r7, #12]
 80005f0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005f2:	bf00      	nop
 80005f4:	3710      	adds	r7, #16
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	40021000 	.word	0x40021000
 8000600:	40010000 	.word	0x40010000

08000604 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b08c      	sub	sp, #48	; 0x30
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800060c:	2300      	movs	r3, #0
 800060e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000610:	2300      	movs	r3, #0
 8000612:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8000614:	2200      	movs	r2, #0
 8000616:	6879      	ldr	r1, [r7, #4]
 8000618:	2019      	movs	r0, #25
 800061a:	f000 fb47 	bl	8000cac <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800061e:	2019      	movs	r0, #25
 8000620:	f000 fb70 	bl	8000d04 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000624:	4a1e      	ldr	r2, [pc, #120]	; (80006a0 <HAL_InitTick+0x9c>)
 8000626:	4b1e      	ldr	r3, [pc, #120]	; (80006a0 <HAL_InitTick+0x9c>)
 8000628:	699b      	ldr	r3, [r3, #24]
 800062a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800062e:	6193      	str	r3, [r2, #24]
 8000630:	4b1b      	ldr	r3, [pc, #108]	; (80006a0 <HAL_InitTick+0x9c>)
 8000632:	699b      	ldr	r3, [r3, #24]
 8000634:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000638:	60fb      	str	r3, [r7, #12]
 800063a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800063c:	f107 0210 	add.w	r2, r7, #16
 8000640:	f107 0314 	add.w	r3, r7, #20
 8000644:	4611      	mov	r1, r2
 8000646:	4618      	mov	r0, r3
 8000648:	f003 fbc8 	bl	8003ddc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800064c:	f003 fbb2 	bl	8003db4 <HAL_RCC_GetPCLK2Freq>
 8000650:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000654:	4a13      	ldr	r2, [pc, #76]	; (80006a4 <HAL_InitTick+0xa0>)
 8000656:	fba2 2303 	umull	r2, r3, r2, r3
 800065a:	0c9b      	lsrs	r3, r3, #18
 800065c:	3b01      	subs	r3, #1
 800065e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000660:	4b11      	ldr	r3, [pc, #68]	; (80006a8 <HAL_InitTick+0xa4>)
 8000662:	4a12      	ldr	r2, [pc, #72]	; (80006ac <HAL_InitTick+0xa8>)
 8000664:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000666:	4b10      	ldr	r3, [pc, #64]	; (80006a8 <HAL_InitTick+0xa4>)
 8000668:	f240 32e7 	movw	r2, #999	; 0x3e7
 800066c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800066e:	4a0e      	ldr	r2, [pc, #56]	; (80006a8 <HAL_InitTick+0xa4>)
 8000670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000672:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000674:	4b0c      	ldr	r3, [pc, #48]	; (80006a8 <HAL_InitTick+0xa4>)
 8000676:	2200      	movs	r2, #0
 8000678:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800067a:	4b0b      	ldr	r3, [pc, #44]	; (80006a8 <HAL_InitTick+0xa4>)
 800067c:	2200      	movs	r2, #0
 800067e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000680:	4809      	ldr	r0, [pc, #36]	; (80006a8 <HAL_InitTick+0xa4>)
 8000682:	f003 fd15 	bl	80040b0 <HAL_TIM_Base_Init>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d104      	bne.n	8000696 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800068c:	4806      	ldr	r0, [pc, #24]	; (80006a8 <HAL_InitTick+0xa4>)
 800068e:	f003 fdc3 	bl	8004218 <HAL_TIM_Base_Start_IT>
 8000692:	4603      	mov	r3, r0
 8000694:	e000      	b.n	8000698 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000696:	2301      	movs	r3, #1
}
 8000698:	4618      	mov	r0, r3
 800069a:	3730      	adds	r7, #48	; 0x30
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	40021000 	.word	0x40021000
 80006a4:	431bde83 	.word	0x431bde83
 80006a8:	200016c0 	.word	0x200016c0
 80006ac:	40012c00 	.word	0x40012c00

080006b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006b4:	e7fe      	b.n	80006b4 <NMI_Handler+0x4>

080006b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006b6:	b480      	push	{r7}
 80006b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006ba:	e7fe      	b.n	80006ba <HardFault_Handler+0x4>

080006bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006c0:	e7fe      	b.n	80006c0 <MemManage_Handler+0x4>

080006c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006c2:	b480      	push	{r7}
 80006c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006c6:	e7fe      	b.n	80006c6 <BusFault_Handler+0x4>

080006c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006cc:	e7fe      	b.n	80006cc <UsageFault_Handler+0x4>

080006ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006ce:	b480      	push	{r7}
 80006d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006d2:	bf00      	nop
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bc80      	pop	{r7}
 80006d8:	4770      	bx	lr
	...

080006dc <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80006e0:	4802      	ldr	r0, [pc, #8]	; (80006ec <DMA1_Channel4_IRQHandler+0x10>)
 80006e2:	f000 fd4b 	bl	800117c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80006e6:	bf00      	nop
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	2000174c 	.word	0x2000174c

080006f0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80006f4:	4802      	ldr	r0, [pc, #8]	; (8000700 <DMA1_Channel5_IRQHandler+0x10>)
 80006f6:	f000 fd41 	bl	800117c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80006fa:	bf00      	nop
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	20001790 	.word	0x20001790

08000704 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000708:	4802      	ldr	r0, [pc, #8]	; (8000714 <DMA1_Channel6_IRQHandler+0x10>)
 800070a:	f000 fd37 	bl	800117c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800070e:	bf00      	nop
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	20001708 	.word	0x20001708

08000718 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800071c:	4802      	ldr	r0, [pc, #8]	; (8000728 <DMA1_Channel7_IRQHandler+0x10>)
 800071e:	f000 fd2d 	bl	800117c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000722:	bf00      	nop
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	200017d4 	.word	0x200017d4

0800072c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000730:	4802      	ldr	r0, [pc, #8]	; (800073c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000732:	f001 fa0d 	bl	8001b50 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000736:	bf00      	nop
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	20001e30 	.word	0x20001e30

08000740 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000744:	4802      	ldr	r0, [pc, #8]	; (8000750 <TIM1_UP_IRQHandler+0x10>)
 8000746:	f003 fdd3 	bl	80042f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	200016c0 	.word	0x200016c0

08000754 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000758:	4802      	ldr	r0, [pc, #8]	; (8000764 <USART1_IRQHandler+0x10>)
 800075a:	f004 f8cd 	bl	80048f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800075e:	bf00      	nop
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	20001818 	.word	0x20001818

08000768 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800076c:	4802      	ldr	r0, [pc, #8]	; (8000778 <USART2_IRQHandler+0x10>)
 800076e:	f004 f8c3 	bl	80048f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000772:	bf00      	nop
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	2000185c 	.word	0x2000185c

0800077c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000780:	bf00      	nop
 8000782:	46bd      	mov	sp, r7
 8000784:	bc80      	pop	{r7}
 8000786:	4770      	bx	lr

08000788 <MX_TIM2_Init>:

/* USER CODE END 0 */

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM2_Init 1 */
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800078c:	bf00      	nop
 800078e:	46bd      	mov	sp, r7
 8000790:	bc80      	pop	{r7}
 8000792:	4770      	bx	lr

08000794 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000798:	4b11      	ldr	r3, [pc, #68]	; (80007e0 <MX_USART1_UART_Init+0x4c>)
 800079a:	4a12      	ldr	r2, [pc, #72]	; (80007e4 <MX_USART1_UART_Init+0x50>)
 800079c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800079e:	4b10      	ldr	r3, [pc, #64]	; (80007e0 <MX_USART1_UART_Init+0x4c>)
 80007a0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80007a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007a6:	4b0e      	ldr	r3, [pc, #56]	; (80007e0 <MX_USART1_UART_Init+0x4c>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007ac:	4b0c      	ldr	r3, [pc, #48]	; (80007e0 <MX_USART1_UART_Init+0x4c>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007b2:	4b0b      	ldr	r3, [pc, #44]	; (80007e0 <MX_USART1_UART_Init+0x4c>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007b8:	4b09      	ldr	r3, [pc, #36]	; (80007e0 <MX_USART1_UART_Init+0x4c>)
 80007ba:	220c      	movs	r2, #12
 80007bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007be:	4b08      	ldr	r3, [pc, #32]	; (80007e0 <MX_USART1_UART_Init+0x4c>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007c4:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <MX_USART1_UART_Init+0x4c>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007ca:	4805      	ldr	r0, [pc, #20]	; (80007e0 <MX_USART1_UART_Init+0x4c>)
 80007cc:	f003 ff30 	bl	8004630 <HAL_UART_Init>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80007d6:	f7ff fecf 	bl	8000578 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007da:	bf00      	nop
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	20001818 	.word	0x20001818
 80007e4:	40013800 	.word	0x40013800

080007e8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007ec:	4b11      	ldr	r3, [pc, #68]	; (8000834 <MX_USART2_UART_Init+0x4c>)
 80007ee:	4a12      	ldr	r2, [pc, #72]	; (8000838 <MX_USART2_UART_Init+0x50>)
 80007f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80007f2:	4b10      	ldr	r3, [pc, #64]	; (8000834 <MX_USART2_UART_Init+0x4c>)
 80007f4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80007f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007fa:	4b0e      	ldr	r3, [pc, #56]	; (8000834 <MX_USART2_UART_Init+0x4c>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000800:	4b0c      	ldr	r3, [pc, #48]	; (8000834 <MX_USART2_UART_Init+0x4c>)
 8000802:	2200      	movs	r2, #0
 8000804:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000806:	4b0b      	ldr	r3, [pc, #44]	; (8000834 <MX_USART2_UART_Init+0x4c>)
 8000808:	2200      	movs	r2, #0
 800080a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800080c:	4b09      	ldr	r3, [pc, #36]	; (8000834 <MX_USART2_UART_Init+0x4c>)
 800080e:	220c      	movs	r2, #12
 8000810:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000812:	4b08      	ldr	r3, [pc, #32]	; (8000834 <MX_USART2_UART_Init+0x4c>)
 8000814:	2200      	movs	r2, #0
 8000816:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000818:	4b06      	ldr	r3, [pc, #24]	; (8000834 <MX_USART2_UART_Init+0x4c>)
 800081a:	2200      	movs	r2, #0
 800081c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800081e:	4805      	ldr	r0, [pc, #20]	; (8000834 <MX_USART2_UART_Init+0x4c>)
 8000820:	f003 ff06 	bl	8004630 <HAL_UART_Init>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800082a:	f7ff fea5 	bl	8000578 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800082e:	bf00      	nop
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	2000185c 	.word	0x2000185c
 8000838:	40004400 	.word	0x40004400

0800083c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b08a      	sub	sp, #40	; 0x28
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000844:	f107 0318 	add.w	r3, r7, #24
 8000848:	2200      	movs	r2, #0
 800084a:	601a      	str	r2, [r3, #0]
 800084c:	605a      	str	r2, [r3, #4]
 800084e:	609a      	str	r2, [r3, #8]
 8000850:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4a8c      	ldr	r2, [pc, #560]	; (8000a88 <HAL_UART_MspInit+0x24c>)
 8000858:	4293      	cmp	r3, r2
 800085a:	f040 8087 	bne.w	800096c <HAL_UART_MspInit+0x130>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800085e:	4a8b      	ldr	r2, [pc, #556]	; (8000a8c <HAL_UART_MspInit+0x250>)
 8000860:	4b8a      	ldr	r3, [pc, #552]	; (8000a8c <HAL_UART_MspInit+0x250>)
 8000862:	699b      	ldr	r3, [r3, #24]
 8000864:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000868:	6193      	str	r3, [r2, #24]
 800086a:	4b88      	ldr	r3, [pc, #544]	; (8000a8c <HAL_UART_MspInit+0x250>)
 800086c:	699b      	ldr	r3, [r3, #24]
 800086e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000872:	617b      	str	r3, [r7, #20]
 8000874:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000876:	4a85      	ldr	r2, [pc, #532]	; (8000a8c <HAL_UART_MspInit+0x250>)
 8000878:	4b84      	ldr	r3, [pc, #528]	; (8000a8c <HAL_UART_MspInit+0x250>)
 800087a:	699b      	ldr	r3, [r3, #24]
 800087c:	f043 0304 	orr.w	r3, r3, #4
 8000880:	6193      	str	r3, [r2, #24]
 8000882:	4b82      	ldr	r3, [pc, #520]	; (8000a8c <HAL_UART_MspInit+0x250>)
 8000884:	699b      	ldr	r3, [r3, #24]
 8000886:	f003 0304 	and.w	r3, r3, #4
 800088a:	613b      	str	r3, [r7, #16]
 800088c:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800088e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000892:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000894:	2302      	movs	r3, #2
 8000896:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000898:	2303      	movs	r3, #3
 800089a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800089c:	f107 0318 	add.w	r3, r7, #24
 80008a0:	4619      	mov	r1, r3
 80008a2:	487b      	ldr	r0, [pc, #492]	; (8000a90 <HAL_UART_MspInit+0x254>)
 80008a4:	f000 fdaa 	bl	80013fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80008a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ae:	2300      	movs	r3, #0
 80008b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b2:	2300      	movs	r3, #0
 80008b4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b6:	f107 0318 	add.w	r3, r7, #24
 80008ba:	4619      	mov	r1, r3
 80008bc:	4874      	ldr	r0, [pc, #464]	; (8000a90 <HAL_UART_MspInit+0x254>)
 80008be:	f000 fd9d 	bl	80013fc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80008c2:	4b74      	ldr	r3, [pc, #464]	; (8000a94 <HAL_UART_MspInit+0x258>)
 80008c4:	4a74      	ldr	r2, [pc, #464]	; (8000a98 <HAL_UART_MspInit+0x25c>)
 80008c6:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008c8:	4b72      	ldr	r3, [pc, #456]	; (8000a94 <HAL_UART_MspInit+0x258>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008ce:	4b71      	ldr	r3, [pc, #452]	; (8000a94 <HAL_UART_MspInit+0x258>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80008d4:	4b6f      	ldr	r3, [pc, #444]	; (8000a94 <HAL_UART_MspInit+0x258>)
 80008d6:	2280      	movs	r2, #128	; 0x80
 80008d8:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80008da:	4b6e      	ldr	r3, [pc, #440]	; (8000a94 <HAL_UART_MspInit+0x258>)
 80008dc:	2200      	movs	r2, #0
 80008de:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80008e0:	4b6c      	ldr	r3, [pc, #432]	; (8000a94 <HAL_UART_MspInit+0x258>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80008e6:	4b6b      	ldr	r3, [pc, #428]	; (8000a94 <HAL_UART_MspInit+0x258>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80008ec:	4b69      	ldr	r3, [pc, #420]	; (8000a94 <HAL_UART_MspInit+0x258>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80008f2:	4868      	ldr	r0, [pc, #416]	; (8000a94 <HAL_UART_MspInit+0x258>)
 80008f4:	f000 fa1e 	bl	8000d34 <HAL_DMA_Init>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 80008fe:	f7ff fe3b 	bl	8000578 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	4a63      	ldr	r2, [pc, #396]	; (8000a94 <HAL_UART_MspInit+0x258>)
 8000906:	639a      	str	r2, [r3, #56]	; 0x38
 8000908:	4a62      	ldr	r2, [pc, #392]	; (8000a94 <HAL_UART_MspInit+0x258>)
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 800090e:	4b63      	ldr	r3, [pc, #396]	; (8000a9c <HAL_UART_MspInit+0x260>)
 8000910:	4a63      	ldr	r2, [pc, #396]	; (8000aa0 <HAL_UART_MspInit+0x264>)
 8000912:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000914:	4b61      	ldr	r3, [pc, #388]	; (8000a9c <HAL_UART_MspInit+0x260>)
 8000916:	2210      	movs	r2, #16
 8000918:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800091a:	4b60      	ldr	r3, [pc, #384]	; (8000a9c <HAL_UART_MspInit+0x260>)
 800091c:	2200      	movs	r2, #0
 800091e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000920:	4b5e      	ldr	r3, [pc, #376]	; (8000a9c <HAL_UART_MspInit+0x260>)
 8000922:	2280      	movs	r2, #128	; 0x80
 8000924:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000926:	4b5d      	ldr	r3, [pc, #372]	; (8000a9c <HAL_UART_MspInit+0x260>)
 8000928:	2200      	movs	r2, #0
 800092a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800092c:	4b5b      	ldr	r3, [pc, #364]	; (8000a9c <HAL_UART_MspInit+0x260>)
 800092e:	2200      	movs	r2, #0
 8000930:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000932:	4b5a      	ldr	r3, [pc, #360]	; (8000a9c <HAL_UART_MspInit+0x260>)
 8000934:	2200      	movs	r2, #0
 8000936:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000938:	4b58      	ldr	r3, [pc, #352]	; (8000a9c <HAL_UART_MspInit+0x260>)
 800093a:	2200      	movs	r2, #0
 800093c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800093e:	4857      	ldr	r0, [pc, #348]	; (8000a9c <HAL_UART_MspInit+0x260>)
 8000940:	f000 f9f8 	bl	8000d34 <HAL_DMA_Init>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 800094a:	f7ff fe15 	bl	8000578 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	4a52      	ldr	r2, [pc, #328]	; (8000a9c <HAL_UART_MspInit+0x260>)
 8000952:	635a      	str	r2, [r3, #52]	; 0x34
 8000954:	4a51      	ldr	r2, [pc, #324]	; (8000a9c <HAL_UART_MspInit+0x260>)
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800095a:	2200      	movs	r2, #0
 800095c:	2105      	movs	r1, #5
 800095e:	2025      	movs	r0, #37	; 0x25
 8000960:	f000 f9a4 	bl	8000cac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000964:	2025      	movs	r0, #37	; 0x25
 8000966:	f000 f9cd 	bl	8000d04 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800096a:	e089      	b.n	8000a80 <HAL_UART_MspInit+0x244>
  else if(uartHandle->Instance==USART2)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a4c      	ldr	r2, [pc, #304]	; (8000aa4 <HAL_UART_MspInit+0x268>)
 8000972:	4293      	cmp	r3, r2
 8000974:	f040 8084 	bne.w	8000a80 <HAL_UART_MspInit+0x244>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000978:	4a44      	ldr	r2, [pc, #272]	; (8000a8c <HAL_UART_MspInit+0x250>)
 800097a:	4b44      	ldr	r3, [pc, #272]	; (8000a8c <HAL_UART_MspInit+0x250>)
 800097c:	69db      	ldr	r3, [r3, #28]
 800097e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000982:	61d3      	str	r3, [r2, #28]
 8000984:	4b41      	ldr	r3, [pc, #260]	; (8000a8c <HAL_UART_MspInit+0x250>)
 8000986:	69db      	ldr	r3, [r3, #28]
 8000988:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800098c:	60fb      	str	r3, [r7, #12]
 800098e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000990:	4a3e      	ldr	r2, [pc, #248]	; (8000a8c <HAL_UART_MspInit+0x250>)
 8000992:	4b3e      	ldr	r3, [pc, #248]	; (8000a8c <HAL_UART_MspInit+0x250>)
 8000994:	699b      	ldr	r3, [r3, #24]
 8000996:	f043 0304 	orr.w	r3, r3, #4
 800099a:	6193      	str	r3, [r2, #24]
 800099c:	4b3b      	ldr	r3, [pc, #236]	; (8000a8c <HAL_UART_MspInit+0x250>)
 800099e:	699b      	ldr	r3, [r3, #24]
 80009a0:	f003 0304 	and.w	r3, r3, #4
 80009a4:	60bb      	str	r3, [r7, #8]
 80009a6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80009a8:	2304      	movs	r3, #4
 80009aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ac:	2302      	movs	r3, #2
 80009ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009b0:	2303      	movs	r3, #3
 80009b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b4:	f107 0318 	add.w	r3, r7, #24
 80009b8:	4619      	mov	r1, r3
 80009ba:	4835      	ldr	r0, [pc, #212]	; (8000a90 <HAL_UART_MspInit+0x254>)
 80009bc:	f000 fd1e 	bl	80013fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80009c0:	2308      	movs	r3, #8
 80009c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009c4:	2300      	movs	r3, #0
 80009c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c8:	2300      	movs	r3, #0
 80009ca:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009cc:	f107 0318 	add.w	r3, r7, #24
 80009d0:	4619      	mov	r1, r3
 80009d2:	482f      	ldr	r0, [pc, #188]	; (8000a90 <HAL_UART_MspInit+0x254>)
 80009d4:	f000 fd12 	bl	80013fc <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80009d8:	4b33      	ldr	r3, [pc, #204]	; (8000aa8 <HAL_UART_MspInit+0x26c>)
 80009da:	4a34      	ldr	r2, [pc, #208]	; (8000aac <HAL_UART_MspInit+0x270>)
 80009dc:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009de:	4b32      	ldr	r3, [pc, #200]	; (8000aa8 <HAL_UART_MspInit+0x26c>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009e4:	4b30      	ldr	r3, [pc, #192]	; (8000aa8 <HAL_UART_MspInit+0x26c>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80009ea:	4b2f      	ldr	r3, [pc, #188]	; (8000aa8 <HAL_UART_MspInit+0x26c>)
 80009ec:	2280      	movs	r2, #128	; 0x80
 80009ee:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80009f0:	4b2d      	ldr	r3, [pc, #180]	; (8000aa8 <HAL_UART_MspInit+0x26c>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80009f6:	4b2c      	ldr	r3, [pc, #176]	; (8000aa8 <HAL_UART_MspInit+0x26c>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80009fc:	4b2a      	ldr	r3, [pc, #168]	; (8000aa8 <HAL_UART_MspInit+0x26c>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000a02:	4b29      	ldr	r3, [pc, #164]	; (8000aa8 <HAL_UART_MspInit+0x26c>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000a08:	4827      	ldr	r0, [pc, #156]	; (8000aa8 <HAL_UART_MspInit+0x26c>)
 8000a0a:	f000 f993 	bl	8000d34 <HAL_DMA_Init>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <HAL_UART_MspInit+0x1dc>
      Error_Handler();
 8000a14:	f7ff fdb0 	bl	8000578 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	4a23      	ldr	r2, [pc, #140]	; (8000aa8 <HAL_UART_MspInit+0x26c>)
 8000a1c:	639a      	str	r2, [r3, #56]	; 0x38
 8000a1e:	4a22      	ldr	r2, [pc, #136]	; (8000aa8 <HAL_UART_MspInit+0x26c>)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8000a24:	4b22      	ldr	r3, [pc, #136]	; (8000ab0 <HAL_UART_MspInit+0x274>)
 8000a26:	4a23      	ldr	r2, [pc, #140]	; (8000ab4 <HAL_UART_MspInit+0x278>)
 8000a28:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a2a:	4b21      	ldr	r3, [pc, #132]	; (8000ab0 <HAL_UART_MspInit+0x274>)
 8000a2c:	2210      	movs	r2, #16
 8000a2e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a30:	4b1f      	ldr	r3, [pc, #124]	; (8000ab0 <HAL_UART_MspInit+0x274>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000a36:	4b1e      	ldr	r3, [pc, #120]	; (8000ab0 <HAL_UART_MspInit+0x274>)
 8000a38:	2280      	movs	r2, #128	; 0x80
 8000a3a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a3c:	4b1c      	ldr	r3, [pc, #112]	; (8000ab0 <HAL_UART_MspInit+0x274>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a42:	4b1b      	ldr	r3, [pc, #108]	; (8000ab0 <HAL_UART_MspInit+0x274>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000a48:	4b19      	ldr	r3, [pc, #100]	; (8000ab0 <HAL_UART_MspInit+0x274>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000a4e:	4b18      	ldr	r3, [pc, #96]	; (8000ab0 <HAL_UART_MspInit+0x274>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000a54:	4816      	ldr	r0, [pc, #88]	; (8000ab0 <HAL_UART_MspInit+0x274>)
 8000a56:	f000 f96d 	bl	8000d34 <HAL_DMA_Init>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <HAL_UART_MspInit+0x228>
      Error_Handler();
 8000a60:	f7ff fd8a 	bl	8000578 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	4a12      	ldr	r2, [pc, #72]	; (8000ab0 <HAL_UART_MspInit+0x274>)
 8000a68:	635a      	str	r2, [r3, #52]	; 0x34
 8000a6a:	4a11      	ldr	r2, [pc, #68]	; (8000ab0 <HAL_UART_MspInit+0x274>)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000a70:	2200      	movs	r2, #0
 8000a72:	2105      	movs	r1, #5
 8000a74:	2026      	movs	r0, #38	; 0x26
 8000a76:	f000 f919 	bl	8000cac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a7a:	2026      	movs	r0, #38	; 0x26
 8000a7c:	f000 f942 	bl	8000d04 <HAL_NVIC_EnableIRQ>
}
 8000a80:	bf00      	nop
 8000a82:	3728      	adds	r7, #40	; 0x28
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	40013800 	.word	0x40013800
 8000a8c:	40021000 	.word	0x40021000
 8000a90:	40010800 	.word	0x40010800
 8000a94:	20001790 	.word	0x20001790
 8000a98:	40020058 	.word	0x40020058
 8000a9c:	2000174c 	.word	0x2000174c
 8000aa0:	40020044 	.word	0x40020044
 8000aa4:	40004400 	.word	0x40004400
 8000aa8:	20001708 	.word	0x20001708
 8000aac:	4002006c 	.word	0x4002006c
 8000ab0:	200017d4 	.word	0x200017d4
 8000ab4:	40020080 	.word	0x40020080

08000ab8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000abc:	4a08      	ldr	r2, [pc, #32]	; (8000ae0 <HAL_Init+0x28>)
 8000abe:	4b08      	ldr	r3, [pc, #32]	; (8000ae0 <HAL_Init+0x28>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	f043 0310 	orr.w	r3, r3, #16
 8000ac6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ac8:	2003      	movs	r0, #3
 8000aca:	f000 f8cf 	bl	8000c6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ace:	200f      	movs	r0, #15
 8000ad0:	f7ff fd98 	bl	8000604 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ad4:	f7ff fd5e 	bl	8000594 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ad8:	2300      	movs	r3, #0
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	40022000 	.word	0x40022000

08000ae4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ae8:	4b05      	ldr	r3, [pc, #20]	; (8000b00 <HAL_IncTick+0x1c>)
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	461a      	mov	r2, r3
 8000aee:	4b05      	ldr	r3, [pc, #20]	; (8000b04 <HAL_IncTick+0x20>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	4413      	add	r3, r2
 8000af4:	4a03      	ldr	r2, [pc, #12]	; (8000b04 <HAL_IncTick+0x20>)
 8000af6:	6013      	str	r3, [r2, #0]
}
 8000af8:	bf00      	nop
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bc80      	pop	{r7}
 8000afe:	4770      	bx	lr
 8000b00:	20000008 	.word	0x20000008
 8000b04:	200018a0 	.word	0x200018a0

08000b08 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b0c:	4b02      	ldr	r3, [pc, #8]	; (8000b18 <HAL_GetTick+0x10>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bc80      	pop	{r7}
 8000b16:	4770      	bx	lr
 8000b18:	200018a0 	.word	0x200018a0

08000b1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b085      	sub	sp, #20
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	f003 0307 	and.w	r3, r3, #7
 8000b2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b2c:	4b0c      	ldr	r3, [pc, #48]	; (8000b60 <__NVIC_SetPriorityGrouping+0x44>)
 8000b2e:	68db      	ldr	r3, [r3, #12]
 8000b30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b32:	68ba      	ldr	r2, [r7, #8]
 8000b34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b38:	4013      	ands	r3, r2
 8000b3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b4e:	4a04      	ldr	r2, [pc, #16]	; (8000b60 <__NVIC_SetPriorityGrouping+0x44>)
 8000b50:	68bb      	ldr	r3, [r7, #8]
 8000b52:	60d3      	str	r3, [r2, #12]
}
 8000b54:	bf00      	nop
 8000b56:	3714      	adds	r7, #20
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bc80      	pop	{r7}
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	e000ed00 	.word	0xe000ed00

08000b64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b68:	4b04      	ldr	r3, [pc, #16]	; (8000b7c <__NVIC_GetPriorityGrouping+0x18>)
 8000b6a:	68db      	ldr	r3, [r3, #12]
 8000b6c:	0a1b      	lsrs	r3, r3, #8
 8000b6e:	f003 0307 	and.w	r3, r3, #7
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bc80      	pop	{r7}
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	e000ed00 	.word	0xe000ed00

08000b80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	4603      	mov	r3, r0
 8000b88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	db0b      	blt.n	8000baa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b92:	4908      	ldr	r1, [pc, #32]	; (8000bb4 <__NVIC_EnableIRQ+0x34>)
 8000b94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b98:	095b      	lsrs	r3, r3, #5
 8000b9a:	79fa      	ldrb	r2, [r7, #7]
 8000b9c:	f002 021f 	and.w	r2, r2, #31
 8000ba0:	2001      	movs	r0, #1
 8000ba2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ba6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000baa:	bf00      	nop
 8000bac:	370c      	adds	r7, #12
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bc80      	pop	{r7}
 8000bb2:	4770      	bx	lr
 8000bb4:	e000e100 	.word	0xe000e100

08000bb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	6039      	str	r1, [r7, #0]
 8000bc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	db0a      	blt.n	8000be2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bcc:	490d      	ldr	r1, [pc, #52]	; (8000c04 <__NVIC_SetPriority+0x4c>)
 8000bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd2:	683a      	ldr	r2, [r7, #0]
 8000bd4:	b2d2      	uxtb	r2, r2
 8000bd6:	0112      	lsls	r2, r2, #4
 8000bd8:	b2d2      	uxtb	r2, r2
 8000bda:	440b      	add	r3, r1
 8000bdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000be0:	e00a      	b.n	8000bf8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000be2:	4909      	ldr	r1, [pc, #36]	; (8000c08 <__NVIC_SetPriority+0x50>)
 8000be4:	79fb      	ldrb	r3, [r7, #7]
 8000be6:	f003 030f 	and.w	r3, r3, #15
 8000bea:	3b04      	subs	r3, #4
 8000bec:	683a      	ldr	r2, [r7, #0]
 8000bee:	b2d2      	uxtb	r2, r2
 8000bf0:	0112      	lsls	r2, r2, #4
 8000bf2:	b2d2      	uxtb	r2, r2
 8000bf4:	440b      	add	r3, r1
 8000bf6:	761a      	strb	r2, [r3, #24]
}
 8000bf8:	bf00      	nop
 8000bfa:	370c      	adds	r7, #12
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bc80      	pop	{r7}
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	e000e100 	.word	0xe000e100
 8000c08:	e000ed00 	.word	0xe000ed00

08000c0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b089      	sub	sp, #36	; 0x24
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	60f8      	str	r0, [r7, #12]
 8000c14:	60b9      	str	r1, [r7, #8]
 8000c16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	f003 0307 	and.w	r3, r3, #7
 8000c1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c20:	69fb      	ldr	r3, [r7, #28]
 8000c22:	f1c3 0307 	rsb	r3, r3, #7
 8000c26:	2b04      	cmp	r3, #4
 8000c28:	bf28      	it	cs
 8000c2a:	2304      	movcs	r3, #4
 8000c2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c2e:	69fb      	ldr	r3, [r7, #28]
 8000c30:	3304      	adds	r3, #4
 8000c32:	2b06      	cmp	r3, #6
 8000c34:	d902      	bls.n	8000c3c <NVIC_EncodePriority+0x30>
 8000c36:	69fb      	ldr	r3, [r7, #28]
 8000c38:	3b03      	subs	r3, #3
 8000c3a:	e000      	b.n	8000c3e <NVIC_EncodePriority+0x32>
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c40:	2201      	movs	r2, #1
 8000c42:	69bb      	ldr	r3, [r7, #24]
 8000c44:	fa02 f303 	lsl.w	r3, r2, r3
 8000c48:	1e5a      	subs	r2, r3, #1
 8000c4a:	68bb      	ldr	r3, [r7, #8]
 8000c4c:	401a      	ands	r2, r3
 8000c4e:	697b      	ldr	r3, [r7, #20]
 8000c50:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c52:	2101      	movs	r1, #1
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	fa01 f303 	lsl.w	r3, r1, r3
 8000c5a:	1e59      	subs	r1, r3, #1
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c60:	4313      	orrs	r3, r2
         );
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	3724      	adds	r7, #36	; 0x24
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bc80      	pop	{r7}
 8000c6a:	4770      	bx	lr

08000c6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	2b07      	cmp	r3, #7
 8000c78:	d00f      	beq.n	8000c9a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	2b06      	cmp	r3, #6
 8000c7e:	d00c      	beq.n	8000c9a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	2b05      	cmp	r3, #5
 8000c84:	d009      	beq.n	8000c9a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	2b04      	cmp	r3, #4
 8000c8a:	d006      	beq.n	8000c9a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	2b03      	cmp	r3, #3
 8000c90:	d003      	beq.n	8000c9a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000c92:	2192      	movs	r1, #146	; 0x92
 8000c94:	4804      	ldr	r0, [pc, #16]	; (8000ca8 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8000c96:	f7ff fc73 	bl	8000580 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c9a:	6878      	ldr	r0, [r7, #4]
 8000c9c:	f7ff ff3e 	bl	8000b1c <__NVIC_SetPriorityGrouping>
}
 8000ca0:	bf00      	nop
 8000ca2:	3708      	adds	r7, #8
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	0800b294 	.word	0x0800b294

08000cac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b086      	sub	sp, #24
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	60b9      	str	r1, [r7, #8]
 8000cb6:	607a      	str	r2, [r7, #4]
 8000cb8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	2b0f      	cmp	r3, #15
 8000cc2:	d903      	bls.n	8000ccc <HAL_NVIC_SetPriority+0x20>
 8000cc4:	21aa      	movs	r1, #170	; 0xaa
 8000cc6:	480e      	ldr	r0, [pc, #56]	; (8000d00 <HAL_NVIC_SetPriority+0x54>)
 8000cc8:	f7ff fc5a 	bl	8000580 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	2b0f      	cmp	r3, #15
 8000cd0:	d903      	bls.n	8000cda <HAL_NVIC_SetPriority+0x2e>
 8000cd2:	21ab      	movs	r1, #171	; 0xab
 8000cd4:	480a      	ldr	r0, [pc, #40]	; (8000d00 <HAL_NVIC_SetPriority+0x54>)
 8000cd6:	f7ff fc53 	bl	8000580 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cda:	f7ff ff43 	bl	8000b64 <__NVIC_GetPriorityGrouping>
 8000cde:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ce0:	687a      	ldr	r2, [r7, #4]
 8000ce2:	68b9      	ldr	r1, [r7, #8]
 8000ce4:	6978      	ldr	r0, [r7, #20]
 8000ce6:	f7ff ff91 	bl	8000c0c <NVIC_EncodePriority>
 8000cea:	4602      	mov	r2, r0
 8000cec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cf0:	4611      	mov	r1, r2
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f7ff ff60 	bl	8000bb8 <__NVIC_SetPriority>
}
 8000cf8:	bf00      	nop
 8000cfa:	3718      	adds	r7, #24
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	0800b294 	.word	0x0800b294

08000d04 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8000d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	da03      	bge.n	8000d1e <HAL_NVIC_EnableIRQ+0x1a>
 8000d16:	21be      	movs	r1, #190	; 0xbe
 8000d18:	4805      	ldr	r0, [pc, #20]	; (8000d30 <HAL_NVIC_EnableIRQ+0x2c>)
 8000d1a:	f7ff fc31 	bl	8000580 <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d22:	4618      	mov	r0, r3
 8000d24:	f7ff ff2c 	bl	8000b80 <__NVIC_EnableIRQ>
}
 8000d28:	bf00      	nop
 8000d2a:	3708      	adds	r7, #8
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	0800b294 	.word	0x0800b294

08000d34 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b084      	sub	sp, #16
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d101      	bne.n	8000d4a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000d46:	2301      	movs	r3, #1
 8000d48:	e0da      	b.n	8000f00 <HAL_DMA_Init+0x1cc>
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4a6e      	ldr	r2, [pc, #440]	; (8000f08 <HAL_DMA_Init+0x1d4>)
 8000d50:	4293      	cmp	r3, r2
 8000d52:	d021      	beq.n	8000d98 <HAL_DMA_Init+0x64>
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a6c      	ldr	r2, [pc, #432]	; (8000f0c <HAL_DMA_Init+0x1d8>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d01c      	beq.n	8000d98 <HAL_DMA_Init+0x64>
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4a6b      	ldr	r2, [pc, #428]	; (8000f10 <HAL_DMA_Init+0x1dc>)
 8000d64:	4293      	cmp	r3, r2
 8000d66:	d017      	beq.n	8000d98 <HAL_DMA_Init+0x64>
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a69      	ldr	r2, [pc, #420]	; (8000f14 <HAL_DMA_Init+0x1e0>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d012      	beq.n	8000d98 <HAL_DMA_Init+0x64>
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4a68      	ldr	r2, [pc, #416]	; (8000f18 <HAL_DMA_Init+0x1e4>)
 8000d78:	4293      	cmp	r3, r2
 8000d7a:	d00d      	beq.n	8000d98 <HAL_DMA_Init+0x64>
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a66      	ldr	r2, [pc, #408]	; (8000f1c <HAL_DMA_Init+0x1e8>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d008      	beq.n	8000d98 <HAL_DMA_Init+0x64>
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4a65      	ldr	r2, [pc, #404]	; (8000f20 <HAL_DMA_Init+0x1ec>)
 8000d8c:	4293      	cmp	r3, r2
 8000d8e:	d003      	beq.n	8000d98 <HAL_DMA_Init+0x64>
 8000d90:	219a      	movs	r1, #154	; 0x9a
 8000d92:	4864      	ldr	r0, [pc, #400]	; (8000f24 <HAL_DMA_Init+0x1f0>)
 8000d94:	f7ff fbf4 	bl	8000580 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d00c      	beq.n	8000dba <HAL_DMA_Init+0x86>
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	2b10      	cmp	r3, #16
 8000da6:	d008      	beq.n	8000dba <HAL_DMA_Init+0x86>
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000db0:	d003      	beq.n	8000dba <HAL_DMA_Init+0x86>
 8000db2:	219b      	movs	r1, #155	; 0x9b
 8000db4:	485b      	ldr	r0, [pc, #364]	; (8000f24 <HAL_DMA_Init+0x1f0>)
 8000db6:	f7ff fbe3 	bl	8000580 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	689b      	ldr	r3, [r3, #8]
 8000dbe:	2b40      	cmp	r3, #64	; 0x40
 8000dc0:	d007      	beq.n	8000dd2 <HAL_DMA_Init+0x9e>
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	689b      	ldr	r3, [r3, #8]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d003      	beq.n	8000dd2 <HAL_DMA_Init+0x9e>
 8000dca:	219c      	movs	r1, #156	; 0x9c
 8000dcc:	4855      	ldr	r0, [pc, #340]	; (8000f24 <HAL_DMA_Init+0x1f0>)
 8000dce:	f7ff fbd7 	bl	8000580 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	68db      	ldr	r3, [r3, #12]
 8000dd6:	2b80      	cmp	r3, #128	; 0x80
 8000dd8:	d007      	beq.n	8000dea <HAL_DMA_Init+0xb6>
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	68db      	ldr	r3, [r3, #12]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d003      	beq.n	8000dea <HAL_DMA_Init+0xb6>
 8000de2:	219d      	movs	r1, #157	; 0x9d
 8000de4:	484f      	ldr	r0, [pc, #316]	; (8000f24 <HAL_DMA_Init+0x1f0>)
 8000de6:	f7ff fbcb 	bl	8000580 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	691b      	ldr	r3, [r3, #16]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d00d      	beq.n	8000e0e <HAL_DMA_Init+0xda>
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	691b      	ldr	r3, [r3, #16]
 8000df6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000dfa:	d008      	beq.n	8000e0e <HAL_DMA_Init+0xda>
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	691b      	ldr	r3, [r3, #16]
 8000e00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e04:	d003      	beq.n	8000e0e <HAL_DMA_Init+0xda>
 8000e06:	219e      	movs	r1, #158	; 0x9e
 8000e08:	4846      	ldr	r0, [pc, #280]	; (8000f24 <HAL_DMA_Init+0x1f0>)
 8000e0a:	f7ff fbb9 	bl	8000580 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	695b      	ldr	r3, [r3, #20]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d00d      	beq.n	8000e32 <HAL_DMA_Init+0xfe>
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	695b      	ldr	r3, [r3, #20]
 8000e1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e1e:	d008      	beq.n	8000e32 <HAL_DMA_Init+0xfe>
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	695b      	ldr	r3, [r3, #20]
 8000e24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000e28:	d003      	beq.n	8000e32 <HAL_DMA_Init+0xfe>
 8000e2a:	219f      	movs	r1, #159	; 0x9f
 8000e2c:	483d      	ldr	r0, [pc, #244]	; (8000f24 <HAL_DMA_Init+0x1f0>)
 8000e2e:	f7ff fba7 	bl	8000580 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	699b      	ldr	r3, [r3, #24]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d007      	beq.n	8000e4a <HAL_DMA_Init+0x116>
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	699b      	ldr	r3, [r3, #24]
 8000e3e:	2b20      	cmp	r3, #32
 8000e40:	d003      	beq.n	8000e4a <HAL_DMA_Init+0x116>
 8000e42:	21a0      	movs	r1, #160	; 0xa0
 8000e44:	4837      	ldr	r0, [pc, #220]	; (8000f24 <HAL_DMA_Init+0x1f0>)
 8000e46:	f7ff fb9b 	bl	8000580 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	69db      	ldr	r3, [r3, #28]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d012      	beq.n	8000e78 <HAL_DMA_Init+0x144>
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	69db      	ldr	r3, [r3, #28]
 8000e56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000e5a:	d00d      	beq.n	8000e78 <HAL_DMA_Init+0x144>
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	69db      	ldr	r3, [r3, #28]
 8000e60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000e64:	d008      	beq.n	8000e78 <HAL_DMA_Init+0x144>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	69db      	ldr	r3, [r3, #28]
 8000e6a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8000e6e:	d003      	beq.n	8000e78 <HAL_DMA_Init+0x144>
 8000e70:	21a1      	movs	r1, #161	; 0xa1
 8000e72:	482c      	ldr	r0, [pc, #176]	; (8000f24 <HAL_DMA_Init+0x1f0>)
 8000e74:	f7ff fb84 	bl	8000580 <assert_failed>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	4b2a      	ldr	r3, [pc, #168]	; (8000f28 <HAL_DMA_Init+0x1f4>)
 8000e80:	4413      	add	r3, r2
 8000e82:	4a2a      	ldr	r2, [pc, #168]	; (8000f2c <HAL_DMA_Init+0x1f8>)
 8000e84:	fba2 2303 	umull	r2, r3, r2, r3
 8000e88:	091b      	lsrs	r3, r3, #4
 8000e8a:	009a      	lsls	r2, r3, #2
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	4a27      	ldr	r2, [pc, #156]	; (8000f30 <HAL_DMA_Init+0x1fc>)
 8000e94:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	2202      	movs	r2, #2
 8000e9a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000eac:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000eb0:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000eba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	68db      	ldr	r3, [r3, #12]
 8000ec0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ec6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	695b      	ldr	r3, [r3, #20]
 8000ecc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ed2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	69db      	ldr	r3, [r3, #28]
 8000ed8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000eda:	68fa      	ldr	r2, [r7, #12]
 8000edc:	4313      	orrs	r3, r2
 8000ede:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	68fa      	ldr	r2, [r7, #12]
 8000ee6:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2200      	movs	r2, #0
 8000eec:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2200      	movs	r2, #0
 8000efa:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000efe:	2300      	movs	r3, #0
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	3710      	adds	r7, #16
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	40020008 	.word	0x40020008
 8000f0c:	4002001c 	.word	0x4002001c
 8000f10:	40020030 	.word	0x40020030
 8000f14:	40020044 	.word	0x40020044
 8000f18:	40020058 	.word	0x40020058
 8000f1c:	4002006c 	.word	0x4002006c
 8000f20:	40020080 	.word	0x40020080
 8000f24:	0800b2d0 	.word	0x0800b2d0
 8000f28:	bffdfff8 	.word	0xbffdfff8
 8000f2c:	cccccccd 	.word	0xcccccccd
 8000f30:	40020000 	.word	0x40020000

08000f34 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b086      	sub	sp, #24
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	60f8      	str	r0, [r7, #12]
 8000f3c:	60b9      	str	r1, [r7, #8]
 8000f3e:	607a      	str	r2, [r7, #4]
 8000f40:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000f42:	2300      	movs	r3, #0
 8000f44:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d003      	beq.n	8000f54 <HAL_DMA_Start_IT+0x20>
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f52:	d304      	bcc.n	8000f5e <HAL_DMA_Start_IT+0x2a>
 8000f54:	f240 116f 	movw	r1, #367	; 0x16f
 8000f58:	482c      	ldr	r0, [pc, #176]	; (800100c <HAL_DMA_Start_IT+0xd8>)
 8000f5a:	f7ff fb11 	bl	8000580 <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdma);
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	d101      	bne.n	8000f6c <HAL_DMA_Start_IT+0x38>
 8000f68:	2302      	movs	r3, #2
 8000f6a:	e04a      	b.n	8001002 <HAL_DMA_Start_IT+0xce>
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	2201      	movs	r2, #1
 8000f70:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000f7a:	2b01      	cmp	r3, #1
 8000f7c:	d13a      	bne.n	8000ff4 <HAL_DMA_Start_IT+0xc0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	2202      	movs	r2, #2
 8000f82:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	2200      	movs	r2, #0
 8000f8a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	68fa      	ldr	r2, [r7, #12]
 8000f92:	6812      	ldr	r2, [r2, #0]
 8000f94:	6812      	ldr	r2, [r2, #0]
 8000f96:	f022 0201 	bic.w	r2, r2, #1
 8000f9a:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	687a      	ldr	r2, [r7, #4]
 8000fa0:	68b9      	ldr	r1, [r7, #8]
 8000fa2:	68f8      	ldr	r0, [r7, #12]
 8000fa4:	f000 f9fc 	bl	80013a0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d008      	beq.n	8000fc2 <HAL_DMA_Start_IT+0x8e>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	68fa      	ldr	r2, [r7, #12]
 8000fb6:	6812      	ldr	r2, [r2, #0]
 8000fb8:	6812      	ldr	r2, [r2, #0]
 8000fba:	f042 020e 	orr.w	r2, r2, #14
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	e00f      	b.n	8000fe2 <HAL_DMA_Start_IT+0xae>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	68fa      	ldr	r2, [r7, #12]
 8000fc8:	6812      	ldr	r2, [r2, #0]
 8000fca:	6812      	ldr	r2, [r2, #0]
 8000fcc:	f022 0204 	bic.w	r2, r2, #4
 8000fd0:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	68fa      	ldr	r2, [r7, #12]
 8000fd8:	6812      	ldr	r2, [r2, #0]
 8000fda:	6812      	ldr	r2, [r2, #0]
 8000fdc:	f042 020a 	orr.w	r2, r2, #10
 8000fe0:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	68fa      	ldr	r2, [r7, #12]
 8000fe8:	6812      	ldr	r2, [r2, #0]
 8000fea:	6812      	ldr	r2, [r2, #0]
 8000fec:	f042 0201 	orr.w	r2, r2, #1
 8000ff0:	601a      	str	r2, [r3, #0]
 8000ff2:	e005      	b.n	8001000 <HAL_DMA_Start_IT+0xcc>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001000:	7dfb      	ldrb	r3, [r7, #23]
}
 8001002:	4618      	mov	r0, r3
 8001004:	3718      	adds	r7, #24
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	0800b2d0 	.word	0x0800b2d0

08001010 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001010:	b480      	push	{r7}
 8001012:	b085      	sub	sp, #20
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001018:	2300      	movs	r3, #0
 800101a:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001022:	2b02      	cmp	r3, #2
 8001024:	d008      	beq.n	8001038 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2204      	movs	r2, #4
 800102a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2200      	movs	r2, #0
 8001030:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001034:	2301      	movs	r3, #1
 8001036:	e020      	b.n	800107a <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	687a      	ldr	r2, [r7, #4]
 800103e:	6812      	ldr	r2, [r2, #0]
 8001040:	6812      	ldr	r2, [r2, #0]
 8001042:	f022 020e 	bic.w	r2, r2, #14
 8001046:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	687a      	ldr	r2, [r7, #4]
 800104e:	6812      	ldr	r2, [r2, #0]
 8001050:	6812      	ldr	r2, [r2, #0]
 8001052:	f022 0201 	bic.w	r2, r2, #1
 8001056:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800105c:	687a      	ldr	r2, [r7, #4]
 800105e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001060:	2101      	movs	r1, #1
 8001062:	fa01 f202 	lsl.w	r2, r1, r2
 8001066:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2201      	movs	r2, #1
 800106c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2200      	movs	r2, #0
 8001074:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001078:	7bfb      	ldrb	r3, [r7, #15]
}
 800107a:	4618      	mov	r0, r3
 800107c:	3714      	adds	r7, #20
 800107e:	46bd      	mov	sp, r7
 8001080:	bc80      	pop	{r7}
 8001082:	4770      	bx	lr

08001084 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800108c:	2300      	movs	r3, #0
 800108e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001096:	2b02      	cmp	r3, #2
 8001098:	d005      	beq.n	80010a6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2204      	movs	r2, #4
 800109e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80010a0:	2301      	movs	r3, #1
 80010a2:	73fb      	strb	r3, [r7, #15]
 80010a4:	e057      	b.n	8001156 <HAL_DMA_Abort_IT+0xd2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	687a      	ldr	r2, [r7, #4]
 80010ac:	6812      	ldr	r2, [r2, #0]
 80010ae:	6812      	ldr	r2, [r2, #0]
 80010b0:	f022 020e 	bic.w	r2, r2, #14
 80010b4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	687a      	ldr	r2, [r7, #4]
 80010bc:	6812      	ldr	r2, [r2, #0]
 80010be:	6812      	ldr	r2, [r2, #0]
 80010c0:	f022 0201 	bic.w	r2, r2, #1
 80010c4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80010c6:	4a26      	ldr	r2, [pc, #152]	; (8001160 <HAL_DMA_Abort_IT+0xdc>)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4619      	mov	r1, r3
 80010ce:	4b25      	ldr	r3, [pc, #148]	; (8001164 <HAL_DMA_Abort_IT+0xe0>)
 80010d0:	4299      	cmp	r1, r3
 80010d2:	d02e      	beq.n	8001132 <HAL_DMA_Abort_IT+0xae>
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4619      	mov	r1, r3
 80010da:	4b23      	ldr	r3, [pc, #140]	; (8001168 <HAL_DMA_Abort_IT+0xe4>)
 80010dc:	4299      	cmp	r1, r3
 80010de:	d026      	beq.n	800112e <HAL_DMA_Abort_IT+0xaa>
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4619      	mov	r1, r3
 80010e6:	4b21      	ldr	r3, [pc, #132]	; (800116c <HAL_DMA_Abort_IT+0xe8>)
 80010e8:	4299      	cmp	r1, r3
 80010ea:	d01d      	beq.n	8001128 <HAL_DMA_Abort_IT+0xa4>
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4619      	mov	r1, r3
 80010f2:	4b1f      	ldr	r3, [pc, #124]	; (8001170 <HAL_DMA_Abort_IT+0xec>)
 80010f4:	4299      	cmp	r1, r3
 80010f6:	d014      	beq.n	8001122 <HAL_DMA_Abort_IT+0x9e>
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4619      	mov	r1, r3
 80010fe:	4b1d      	ldr	r3, [pc, #116]	; (8001174 <HAL_DMA_Abort_IT+0xf0>)
 8001100:	4299      	cmp	r1, r3
 8001102:	d00b      	beq.n	800111c <HAL_DMA_Abort_IT+0x98>
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4619      	mov	r1, r3
 800110a:	4b1b      	ldr	r3, [pc, #108]	; (8001178 <HAL_DMA_Abort_IT+0xf4>)
 800110c:	4299      	cmp	r1, r3
 800110e:	d102      	bne.n	8001116 <HAL_DMA_Abort_IT+0x92>
 8001110:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001114:	e00e      	b.n	8001134 <HAL_DMA_Abort_IT+0xb0>
 8001116:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800111a:	e00b      	b.n	8001134 <HAL_DMA_Abort_IT+0xb0>
 800111c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001120:	e008      	b.n	8001134 <HAL_DMA_Abort_IT+0xb0>
 8001122:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001126:	e005      	b.n	8001134 <HAL_DMA_Abort_IT+0xb0>
 8001128:	f44f 7380 	mov.w	r3, #256	; 0x100
 800112c:	e002      	b.n	8001134 <HAL_DMA_Abort_IT+0xb0>
 800112e:	2310      	movs	r3, #16
 8001130:	e000      	b.n	8001134 <HAL_DMA_Abort_IT+0xb0>
 8001132:	2301      	movs	r3, #1
 8001134:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2201      	movs	r2, #1
 800113a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2200      	movs	r2, #0
 8001142:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800114a:	2b00      	cmp	r3, #0
 800114c:	d003      	beq.n	8001156 <HAL_DMA_Abort_IT+0xd2>
    {
      hdma->XferAbortCallback(hdma);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	4798      	blx	r3
    } 
  }
  return status;
 8001156:	7bfb      	ldrb	r3, [r7, #15]
}
 8001158:	4618      	mov	r0, r3
 800115a:	3710      	adds	r7, #16
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	40020000 	.word	0x40020000
 8001164:	40020008 	.word	0x40020008
 8001168:	4002001c 	.word	0x4002001c
 800116c:	40020030 	.word	0x40020030
 8001170:	40020044 	.word	0x40020044
 8001174:	40020058 	.word	0x40020058
 8001178:	4002006c 	.word	0x4002006c

0800117c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001198:	2204      	movs	r2, #4
 800119a:	409a      	lsls	r2, r3
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	4013      	ands	r3, r2
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d055      	beq.n	8001250 <HAL_DMA_IRQHandler+0xd4>
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	f003 0304 	and.w	r3, r3, #4
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d050      	beq.n	8001250 <HAL_DMA_IRQHandler+0xd4>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f003 0320 	and.w	r3, r3, #32
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d107      	bne.n	80011cc <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	687a      	ldr	r2, [r7, #4]
 80011c2:	6812      	ldr	r2, [r2, #0]
 80011c4:	6812      	ldr	r2, [r2, #0]
 80011c6:	f022 0204 	bic.w	r2, r2, #4
 80011ca:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80011cc:	4a6d      	ldr	r2, [pc, #436]	; (8001384 <HAL_DMA_IRQHandler+0x208>)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4619      	mov	r1, r3
 80011d4:	4b6c      	ldr	r3, [pc, #432]	; (8001388 <HAL_DMA_IRQHandler+0x20c>)
 80011d6:	4299      	cmp	r1, r3
 80011d8:	d02e      	beq.n	8001238 <HAL_DMA_IRQHandler+0xbc>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4619      	mov	r1, r3
 80011e0:	4b6a      	ldr	r3, [pc, #424]	; (800138c <HAL_DMA_IRQHandler+0x210>)
 80011e2:	4299      	cmp	r1, r3
 80011e4:	d026      	beq.n	8001234 <HAL_DMA_IRQHandler+0xb8>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4619      	mov	r1, r3
 80011ec:	4b68      	ldr	r3, [pc, #416]	; (8001390 <HAL_DMA_IRQHandler+0x214>)
 80011ee:	4299      	cmp	r1, r3
 80011f0:	d01d      	beq.n	800122e <HAL_DMA_IRQHandler+0xb2>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4619      	mov	r1, r3
 80011f8:	4b66      	ldr	r3, [pc, #408]	; (8001394 <HAL_DMA_IRQHandler+0x218>)
 80011fa:	4299      	cmp	r1, r3
 80011fc:	d014      	beq.n	8001228 <HAL_DMA_IRQHandler+0xac>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4619      	mov	r1, r3
 8001204:	4b64      	ldr	r3, [pc, #400]	; (8001398 <HAL_DMA_IRQHandler+0x21c>)
 8001206:	4299      	cmp	r1, r3
 8001208:	d00b      	beq.n	8001222 <HAL_DMA_IRQHandler+0xa6>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4619      	mov	r1, r3
 8001210:	4b62      	ldr	r3, [pc, #392]	; (800139c <HAL_DMA_IRQHandler+0x220>)
 8001212:	4299      	cmp	r1, r3
 8001214:	d102      	bne.n	800121c <HAL_DMA_IRQHandler+0xa0>
 8001216:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800121a:	e00e      	b.n	800123a <HAL_DMA_IRQHandler+0xbe>
 800121c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001220:	e00b      	b.n	800123a <HAL_DMA_IRQHandler+0xbe>
 8001222:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001226:	e008      	b.n	800123a <HAL_DMA_IRQHandler+0xbe>
 8001228:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800122c:	e005      	b.n	800123a <HAL_DMA_IRQHandler+0xbe>
 800122e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001232:	e002      	b.n	800123a <HAL_DMA_IRQHandler+0xbe>
 8001234:	2340      	movs	r3, #64	; 0x40
 8001236:	e000      	b.n	800123a <HAL_DMA_IRQHandler+0xbe>
 8001238:	2304      	movs	r3, #4
 800123a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001240:	2b00      	cmp	r3, #0
 8001242:	f000 809a 	beq.w	800137a <HAL_DMA_IRQHandler+0x1fe>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800124e:	e094      	b.n	800137a <HAL_DMA_IRQHandler+0x1fe>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001254:	2202      	movs	r2, #2
 8001256:	409a      	lsls	r2, r3
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	4013      	ands	r3, r2
 800125c:	2b00      	cmp	r3, #0
 800125e:	d05c      	beq.n	800131a <HAL_DMA_IRQHandler+0x19e>
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	f003 0302 	and.w	r3, r3, #2
 8001266:	2b00      	cmp	r3, #0
 8001268:	d057      	beq.n	800131a <HAL_DMA_IRQHandler+0x19e>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f003 0320 	and.w	r3, r3, #32
 8001274:	2b00      	cmp	r3, #0
 8001276:	d10b      	bne.n	8001290 <HAL_DMA_IRQHandler+0x114>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	687a      	ldr	r2, [r7, #4]
 800127e:	6812      	ldr	r2, [r2, #0]
 8001280:	6812      	ldr	r2, [r2, #0]
 8001282:	f022 020a 	bic.w	r2, r2, #10
 8001286:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2201      	movs	r2, #1
 800128c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001290:	4a3c      	ldr	r2, [pc, #240]	; (8001384 <HAL_DMA_IRQHandler+0x208>)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4619      	mov	r1, r3
 8001298:	4b3b      	ldr	r3, [pc, #236]	; (8001388 <HAL_DMA_IRQHandler+0x20c>)
 800129a:	4299      	cmp	r1, r3
 800129c:	d02e      	beq.n	80012fc <HAL_DMA_IRQHandler+0x180>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4619      	mov	r1, r3
 80012a4:	4b39      	ldr	r3, [pc, #228]	; (800138c <HAL_DMA_IRQHandler+0x210>)
 80012a6:	4299      	cmp	r1, r3
 80012a8:	d026      	beq.n	80012f8 <HAL_DMA_IRQHandler+0x17c>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4619      	mov	r1, r3
 80012b0:	4b37      	ldr	r3, [pc, #220]	; (8001390 <HAL_DMA_IRQHandler+0x214>)
 80012b2:	4299      	cmp	r1, r3
 80012b4:	d01d      	beq.n	80012f2 <HAL_DMA_IRQHandler+0x176>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4619      	mov	r1, r3
 80012bc:	4b35      	ldr	r3, [pc, #212]	; (8001394 <HAL_DMA_IRQHandler+0x218>)
 80012be:	4299      	cmp	r1, r3
 80012c0:	d014      	beq.n	80012ec <HAL_DMA_IRQHandler+0x170>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4619      	mov	r1, r3
 80012c8:	4b33      	ldr	r3, [pc, #204]	; (8001398 <HAL_DMA_IRQHandler+0x21c>)
 80012ca:	4299      	cmp	r1, r3
 80012cc:	d00b      	beq.n	80012e6 <HAL_DMA_IRQHandler+0x16a>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4619      	mov	r1, r3
 80012d4:	4b31      	ldr	r3, [pc, #196]	; (800139c <HAL_DMA_IRQHandler+0x220>)
 80012d6:	4299      	cmp	r1, r3
 80012d8:	d102      	bne.n	80012e0 <HAL_DMA_IRQHandler+0x164>
 80012da:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80012de:	e00e      	b.n	80012fe <HAL_DMA_IRQHandler+0x182>
 80012e0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80012e4:	e00b      	b.n	80012fe <HAL_DMA_IRQHandler+0x182>
 80012e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012ea:	e008      	b.n	80012fe <HAL_DMA_IRQHandler+0x182>
 80012ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012f0:	e005      	b.n	80012fe <HAL_DMA_IRQHandler+0x182>
 80012f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012f6:	e002      	b.n	80012fe <HAL_DMA_IRQHandler+0x182>
 80012f8:	2320      	movs	r3, #32
 80012fa:	e000      	b.n	80012fe <HAL_DMA_IRQHandler+0x182>
 80012fc:	2302      	movs	r3, #2
 80012fe:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2200      	movs	r2, #0
 8001304:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800130c:	2b00      	cmp	r3, #0
 800130e:	d034      	beq.n	800137a <HAL_DMA_IRQHandler+0x1fe>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001318:	e02f      	b.n	800137a <HAL_DMA_IRQHandler+0x1fe>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131e:	2208      	movs	r2, #8
 8001320:	409a      	lsls	r2, r3
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	4013      	ands	r3, r2
 8001326:	2b00      	cmp	r3, #0
 8001328:	d028      	beq.n	800137c <HAL_DMA_IRQHandler+0x200>
 800132a:	68bb      	ldr	r3, [r7, #8]
 800132c:	f003 0308 	and.w	r3, r3, #8
 8001330:	2b00      	cmp	r3, #0
 8001332:	d023      	beq.n	800137c <HAL_DMA_IRQHandler+0x200>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	687a      	ldr	r2, [r7, #4]
 800133a:	6812      	ldr	r2, [r2, #0]
 800133c:	6812      	ldr	r2, [r2, #0]
 800133e:	f022 020e 	bic.w	r2, r2, #14
 8001342:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001348:	687a      	ldr	r2, [r7, #4]
 800134a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800134c:	2101      	movs	r1, #1
 800134e:	fa01 f202 	lsl.w	r2, r1, r2
 8001352:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2201      	movs	r2, #1
 8001358:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2201      	movs	r2, #1
 800135e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2200      	movs	r2, #0
 8001366:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136e:	2b00      	cmp	r3, #0
 8001370:	d004      	beq.n	800137c <HAL_DMA_IRQHandler+0x200>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001376:	6878      	ldr	r0, [r7, #4]
 8001378:	4798      	blx	r3
    }
  }
  return;
 800137a:	bf00      	nop
 800137c:	bf00      	nop
}
 800137e:	3710      	adds	r7, #16
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	40020000 	.word	0x40020000
 8001388:	40020008 	.word	0x40020008
 800138c:	4002001c 	.word	0x4002001c
 8001390:	40020030 	.word	0x40020030
 8001394:	40020044 	.word	0x40020044
 8001398:	40020058 	.word	0x40020058
 800139c:	4002006c 	.word	0x4002006c

080013a0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b085      	sub	sp, #20
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	60f8      	str	r0, [r7, #12]
 80013a8:	60b9      	str	r1, [r7, #8]
 80013aa:	607a      	str	r2, [r7, #4]
 80013ac:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013b2:	68fa      	ldr	r2, [r7, #12]
 80013b4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80013b6:	2101      	movs	r1, #1
 80013b8:	fa01 f202 	lsl.w	r2, r1, r2
 80013bc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	683a      	ldr	r2, [r7, #0]
 80013c4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	2b10      	cmp	r3, #16
 80013cc:	d108      	bne.n	80013e0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	687a      	ldr	r2, [r7, #4]
 80013d4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	68ba      	ldr	r2, [r7, #8]
 80013dc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80013de:	e007      	b.n	80013f0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	68ba      	ldr	r2, [r7, #8]
 80013e6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	687a      	ldr	r2, [r7, #4]
 80013ee:	60da      	str	r2, [r3, #12]
}
 80013f0:	bf00      	nop
 80013f2:	3714      	adds	r7, #20
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bc80      	pop	{r7}
 80013f8:	4770      	bx	lr
	...

080013fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b08a      	sub	sp, #40	; 0x28
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001406:	2300      	movs	r3, #0
 8001408:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800140a:	2300      	movs	r3, #0
 800140c:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset;       /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4a9c      	ldr	r2, [pc, #624]	; (8001684 <HAL_GPIO_Init+0x288>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d013      	beq.n	800143e <HAL_GPIO_Init+0x42>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4a9b      	ldr	r2, [pc, #620]	; (8001688 <HAL_GPIO_Init+0x28c>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d00f      	beq.n	800143e <HAL_GPIO_Init+0x42>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4a9a      	ldr	r2, [pc, #616]	; (800168c <HAL_GPIO_Init+0x290>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d00b      	beq.n	800143e <HAL_GPIO_Init+0x42>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4a99      	ldr	r2, [pc, #612]	; (8001690 <HAL_GPIO_Init+0x294>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d007      	beq.n	800143e <HAL_GPIO_Init+0x42>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4a98      	ldr	r2, [pc, #608]	; (8001694 <HAL_GPIO_Init+0x298>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d003      	beq.n	800143e <HAL_GPIO_Init+0x42>
 8001436:	21bd      	movs	r1, #189	; 0xbd
 8001438:	4897      	ldr	r0, [pc, #604]	; (8001698 <HAL_GPIO_Init+0x29c>)
 800143a:	f7ff f8a1 	bl	8000580 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	b29b      	uxth	r3, r3
 8001444:	2b00      	cmp	r3, #0
 8001446:	d005      	beq.n	8001454 <HAL_GPIO_Init+0x58>
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	0c1b      	lsrs	r3, r3, #16
 800144e:	041b      	lsls	r3, r3, #16
 8001450:	2b00      	cmp	r3, #0
 8001452:	d003      	beq.n	800145c <HAL_GPIO_Init+0x60>
 8001454:	21be      	movs	r1, #190	; 0xbe
 8001456:	4890      	ldr	r0, [pc, #576]	; (8001698 <HAL_GPIO_Init+0x29c>)
 8001458:	f7ff f892 	bl	8000580 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	2b00      	cmp	r3, #0
 8001462:	f000 81eb 	beq.w	800183c <HAL_GPIO_Init+0x440>
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	2b01      	cmp	r3, #1
 800146c:	f000 81e6 	beq.w	800183c <HAL_GPIO_Init+0x440>
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	2b11      	cmp	r3, #17
 8001476:	f000 81e1 	beq.w	800183c <HAL_GPIO_Init+0x440>
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	2b02      	cmp	r3, #2
 8001480:	f000 81dc 	beq.w	800183c <HAL_GPIO_Init+0x440>
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	2b12      	cmp	r3, #18
 800148a:	f000 81d7 	beq.w	800183c <HAL_GPIO_Init+0x440>
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	4a82      	ldr	r2, [pc, #520]	; (800169c <HAL_GPIO_Init+0x2a0>)
 8001494:	4293      	cmp	r3, r2
 8001496:	f000 81d1 	beq.w	800183c <HAL_GPIO_Init+0x440>
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	4a80      	ldr	r2, [pc, #512]	; (80016a0 <HAL_GPIO_Init+0x2a4>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	f000 81cb 	beq.w	800183c <HAL_GPIO_Init+0x440>
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	4a7e      	ldr	r2, [pc, #504]	; (80016a4 <HAL_GPIO_Init+0x2a8>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	f000 81c5 	beq.w	800183c <HAL_GPIO_Init+0x440>
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	4a7c      	ldr	r2, [pc, #496]	; (80016a8 <HAL_GPIO_Init+0x2ac>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	f000 81bf 	beq.w	800183c <HAL_GPIO_Init+0x440>
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	4a7a      	ldr	r2, [pc, #488]	; (80016ac <HAL_GPIO_Init+0x2b0>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	f000 81b9 	beq.w	800183c <HAL_GPIO_Init+0x440>
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	4a78      	ldr	r2, [pc, #480]	; (80016b0 <HAL_GPIO_Init+0x2b4>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	f000 81b3 	beq.w	800183c <HAL_GPIO_Init+0x440>
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	2b03      	cmp	r3, #3
 80014dc:	f000 81ae 	beq.w	800183c <HAL_GPIO_Init+0x440>
 80014e0:	21bf      	movs	r1, #191	; 0xbf
 80014e2:	486d      	ldr	r0, [pc, #436]	; (8001698 <HAL_GPIO_Init+0x29c>)
 80014e4:	f7ff f84c 	bl	8000580 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014e8:	e1a8      	b.n	800183c <HAL_GPIO_Init+0x440>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80014ea:	2201      	movs	r2, #1
 80014ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ee:	fa02 f303 	lsl.w	r3, r2, r3
 80014f2:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	4013      	ands	r3, r2
 80014fc:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80014fe:	69ba      	ldr	r2, [r7, #24]
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	429a      	cmp	r2, r3
 8001504:	f040 8197 	bne.w	8001836 <HAL_GPIO_Init+0x43a>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	4a5e      	ldr	r2, [pc, #376]	; (8001684 <HAL_GPIO_Init+0x288>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d013      	beq.n	8001538 <HAL_GPIO_Init+0x13c>
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	4a5d      	ldr	r2, [pc, #372]	; (8001688 <HAL_GPIO_Init+0x28c>)
 8001514:	4293      	cmp	r3, r2
 8001516:	d00f      	beq.n	8001538 <HAL_GPIO_Init+0x13c>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	4a5c      	ldr	r2, [pc, #368]	; (800168c <HAL_GPIO_Init+0x290>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d00b      	beq.n	8001538 <HAL_GPIO_Init+0x13c>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	4a5b      	ldr	r2, [pc, #364]	; (8001690 <HAL_GPIO_Init+0x294>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d007      	beq.n	8001538 <HAL_GPIO_Init+0x13c>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	4a5a      	ldr	r2, [pc, #360]	; (8001694 <HAL_GPIO_Init+0x298>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d003      	beq.n	8001538 <HAL_GPIO_Init+0x13c>
 8001530:	21cd      	movs	r1, #205	; 0xcd
 8001532:	4859      	ldr	r0, [pc, #356]	; (8001698 <HAL_GPIO_Init+0x29c>)
 8001534:	f7ff f824 	bl	8000580 <assert_failed>

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	2b12      	cmp	r3, #18
 800153e:	d065      	beq.n	800160c <HAL_GPIO_Init+0x210>
 8001540:	2b12      	cmp	r3, #18
 8001542:	d80e      	bhi.n	8001562 <HAL_GPIO_Init+0x166>
 8001544:	2b02      	cmp	r3, #2
 8001546:	d04c      	beq.n	80015e2 <HAL_GPIO_Init+0x1e6>
 8001548:	2b02      	cmp	r3, #2
 800154a:	d804      	bhi.n	8001556 <HAL_GPIO_Init+0x15a>
 800154c:	2b00      	cmp	r3, #0
 800154e:	d072      	beq.n	8001636 <HAL_GPIO_Init+0x23a>
 8001550:	2b01      	cmp	r3, #1
 8001552:	d01d      	beq.n	8001590 <HAL_GPIO_Init+0x194>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001554:	e0b1      	b.n	80016ba <HAL_GPIO_Init+0x2be>
      switch (GPIO_Init->Mode)
 8001556:	2b03      	cmp	r3, #3
 8001558:	f000 80ac 	beq.w	80016b4 <HAL_GPIO_Init+0x2b8>
 800155c:	2b11      	cmp	r3, #17
 800155e:	d02b      	beq.n	80015b8 <HAL_GPIO_Init+0x1bc>
          break;
 8001560:	e0ab      	b.n	80016ba <HAL_GPIO_Init+0x2be>
      switch (GPIO_Init->Mode)
 8001562:	4a4f      	ldr	r2, [pc, #316]	; (80016a0 <HAL_GPIO_Init+0x2a4>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d066      	beq.n	8001636 <HAL_GPIO_Init+0x23a>
 8001568:	4a4d      	ldr	r2, [pc, #308]	; (80016a0 <HAL_GPIO_Init+0x2a4>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d806      	bhi.n	800157c <HAL_GPIO_Init+0x180>
 800156e:	4a4b      	ldr	r2, [pc, #300]	; (800169c <HAL_GPIO_Init+0x2a0>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d060      	beq.n	8001636 <HAL_GPIO_Init+0x23a>
 8001574:	4a4c      	ldr	r2, [pc, #304]	; (80016a8 <HAL_GPIO_Init+0x2ac>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d05d      	beq.n	8001636 <HAL_GPIO_Init+0x23a>
          break;
 800157a:	e09e      	b.n	80016ba <HAL_GPIO_Init+0x2be>
      switch (GPIO_Init->Mode)
 800157c:	4a49      	ldr	r2, [pc, #292]	; (80016a4 <HAL_GPIO_Init+0x2a8>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d059      	beq.n	8001636 <HAL_GPIO_Init+0x23a>
 8001582:	4a4b      	ldr	r2, [pc, #300]	; (80016b0 <HAL_GPIO_Init+0x2b4>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d056      	beq.n	8001636 <HAL_GPIO_Init+0x23a>
 8001588:	4a48      	ldr	r2, [pc, #288]	; (80016ac <HAL_GPIO_Init+0x2b0>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d053      	beq.n	8001636 <HAL_GPIO_Init+0x23a>
          break;
 800158e:	e094      	b.n	80016ba <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	2b02      	cmp	r3, #2
 8001596:	d00b      	beq.n	80015b0 <HAL_GPIO_Init+0x1b4>
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	2b01      	cmp	r3, #1
 800159e:	d007      	beq.n	80015b0 <HAL_GPIO_Init+0x1b4>
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	2b03      	cmp	r3, #3
 80015a6:	d003      	beq.n	80015b0 <HAL_GPIO_Init+0x1b4>
 80015a8:	21d5      	movs	r1, #213	; 0xd5
 80015aa:	483b      	ldr	r0, [pc, #236]	; (8001698 <HAL_GPIO_Init+0x29c>)
 80015ac:	f7fe ffe8 	bl	8000580 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	68db      	ldr	r3, [r3, #12]
 80015b4:	623b      	str	r3, [r7, #32]
          break;
 80015b6:	e080      	b.n	80016ba <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	2b02      	cmp	r3, #2
 80015be:	d00b      	beq.n	80015d8 <HAL_GPIO_Init+0x1dc>
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	68db      	ldr	r3, [r3, #12]
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d007      	beq.n	80015d8 <HAL_GPIO_Init+0x1dc>
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	2b03      	cmp	r3, #3
 80015ce:	d003      	beq.n	80015d8 <HAL_GPIO_Init+0x1dc>
 80015d0:	21dc      	movs	r1, #220	; 0xdc
 80015d2:	4831      	ldr	r0, [pc, #196]	; (8001698 <HAL_GPIO_Init+0x29c>)
 80015d4:	f7fe ffd4 	bl	8000580 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	3304      	adds	r3, #4
 80015de:	623b      	str	r3, [r7, #32]
          break;
 80015e0:	e06b      	b.n	80016ba <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	68db      	ldr	r3, [r3, #12]
 80015e6:	2b02      	cmp	r3, #2
 80015e8:	d00b      	beq.n	8001602 <HAL_GPIO_Init+0x206>
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	68db      	ldr	r3, [r3, #12]
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	d007      	beq.n	8001602 <HAL_GPIO_Init+0x206>
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	68db      	ldr	r3, [r3, #12]
 80015f6:	2b03      	cmp	r3, #3
 80015f8:	d003      	beq.n	8001602 <HAL_GPIO_Init+0x206>
 80015fa:	21e3      	movs	r1, #227	; 0xe3
 80015fc:	4826      	ldr	r0, [pc, #152]	; (8001698 <HAL_GPIO_Init+0x29c>)
 80015fe:	f7fe ffbf 	bl	8000580 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	68db      	ldr	r3, [r3, #12]
 8001606:	3308      	adds	r3, #8
 8001608:	623b      	str	r3, [r7, #32]
          break;
 800160a:	e056      	b.n	80016ba <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	68db      	ldr	r3, [r3, #12]
 8001610:	2b02      	cmp	r3, #2
 8001612:	d00b      	beq.n	800162c <HAL_GPIO_Init+0x230>
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	2b01      	cmp	r3, #1
 800161a:	d007      	beq.n	800162c <HAL_GPIO_Init+0x230>
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	2b03      	cmp	r3, #3
 8001622:	d003      	beq.n	800162c <HAL_GPIO_Init+0x230>
 8001624:	21ea      	movs	r1, #234	; 0xea
 8001626:	481c      	ldr	r0, [pc, #112]	; (8001698 <HAL_GPIO_Init+0x29c>)
 8001628:	f7fe ffaa 	bl	8000580 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	330c      	adds	r3, #12
 8001632:	623b      	str	r3, [r7, #32]
          break;
 8001634:	e041      	b.n	80016ba <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d00b      	beq.n	8001656 <HAL_GPIO_Init+0x25a>
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	2b01      	cmp	r3, #1
 8001644:	d007      	beq.n	8001656 <HAL_GPIO_Init+0x25a>
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	2b02      	cmp	r3, #2
 800164c:	d003      	beq.n	8001656 <HAL_GPIO_Init+0x25a>
 800164e:	21f7      	movs	r1, #247	; 0xf7
 8001650:	4811      	ldr	r0, [pc, #68]	; (8001698 <HAL_GPIO_Init+0x29c>)
 8001652:	f7fe ff95 	bl	8000580 <assert_failed>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d102      	bne.n	8001664 <HAL_GPIO_Init+0x268>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800165e:	2304      	movs	r3, #4
 8001660:	623b      	str	r3, [r7, #32]
          break;
 8001662:	e02a      	b.n	80016ba <HAL_GPIO_Init+0x2be>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	2b01      	cmp	r3, #1
 800166a:	d105      	bne.n	8001678 <HAL_GPIO_Init+0x27c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800166c:	2308      	movs	r3, #8
 800166e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	69fa      	ldr	r2, [r7, #28]
 8001674:	611a      	str	r2, [r3, #16]
          break;
 8001676:	e020      	b.n	80016ba <HAL_GPIO_Init+0x2be>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001678:	2308      	movs	r3, #8
 800167a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	69fa      	ldr	r2, [r7, #28]
 8001680:	615a      	str	r2, [r3, #20]
          break;
 8001682:	e01a      	b.n	80016ba <HAL_GPIO_Init+0x2be>
 8001684:	40010800 	.word	0x40010800
 8001688:	40010c00 	.word	0x40010c00
 800168c:	40011000 	.word	0x40011000
 8001690:	40011400 	.word	0x40011400
 8001694:	40011800 	.word	0x40011800
 8001698:	0800b308 	.word	0x0800b308
 800169c:	10110000 	.word	0x10110000
 80016a0:	10210000 	.word	0x10210000
 80016a4:	10310000 	.word	0x10310000
 80016a8:	10120000 	.word	0x10120000
 80016ac:	10220000 	.word	0x10220000
 80016b0:	10320000 	.word	0x10320000
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80016b4:	2300      	movs	r3, #0
 80016b6:	623b      	str	r3, [r7, #32]
          break;
 80016b8:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80016ba:	69bb      	ldr	r3, [r7, #24]
 80016bc:	2bff      	cmp	r3, #255	; 0xff
 80016be:	d801      	bhi.n	80016c4 <HAL_GPIO_Init+0x2c8>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	e001      	b.n	80016c8 <HAL_GPIO_Init+0x2cc>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	3304      	adds	r3, #4
 80016c8:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80016ca:	69bb      	ldr	r3, [r7, #24]
 80016cc:	2bff      	cmp	r3, #255	; 0xff
 80016ce:	d802      	bhi.n	80016d6 <HAL_GPIO_Init+0x2da>
 80016d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	e002      	b.n	80016dc <HAL_GPIO_Init+0x2e0>
 80016d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d8:	3b08      	subs	r3, #8
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	210f      	movs	r1, #15
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	fa01 f303 	lsl.w	r3, r1, r3
 80016ea:	43db      	mvns	r3, r3
 80016ec:	401a      	ands	r2, r3
 80016ee:	6a39      	ldr	r1, [r7, #32]
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	fa01 f303 	lsl.w	r3, r1, r3
 80016f6:	431a      	orrs	r2, r3
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001704:	2b00      	cmp	r3, #0
 8001706:	f000 8096 	beq.w	8001836 <HAL_GPIO_Init+0x43a>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800170a:	4a52      	ldr	r2, [pc, #328]	; (8001854 <HAL_GPIO_Init+0x458>)
 800170c:	4b51      	ldr	r3, [pc, #324]	; (8001854 <HAL_GPIO_Init+0x458>)
 800170e:	699b      	ldr	r3, [r3, #24]
 8001710:	f043 0301 	orr.w	r3, r3, #1
 8001714:	6193      	str	r3, [r2, #24]
 8001716:	4b4f      	ldr	r3, [pc, #316]	; (8001854 <HAL_GPIO_Init+0x458>)
 8001718:	699b      	ldr	r3, [r3, #24]
 800171a:	f003 0301 	and.w	r3, r3, #1
 800171e:	60bb      	str	r3, [r7, #8]
 8001720:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001722:	4a4d      	ldr	r2, [pc, #308]	; (8001858 <HAL_GPIO_Init+0x45c>)
 8001724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001726:	089b      	lsrs	r3, r3, #2
 8001728:	3302      	adds	r3, #2
 800172a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800172e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001732:	f003 0303 	and.w	r3, r3, #3
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	220f      	movs	r2, #15
 800173a:	fa02 f303 	lsl.w	r3, r2, r3
 800173e:	43db      	mvns	r3, r3
 8001740:	68fa      	ldr	r2, [r7, #12]
 8001742:	4013      	ands	r3, r2
 8001744:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4a44      	ldr	r2, [pc, #272]	; (800185c <HAL_GPIO_Init+0x460>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d013      	beq.n	8001776 <HAL_GPIO_Init+0x37a>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4a43      	ldr	r2, [pc, #268]	; (8001860 <HAL_GPIO_Init+0x464>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d00d      	beq.n	8001772 <HAL_GPIO_Init+0x376>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4a42      	ldr	r2, [pc, #264]	; (8001864 <HAL_GPIO_Init+0x468>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d007      	beq.n	800176e <HAL_GPIO_Init+0x372>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4a41      	ldr	r2, [pc, #260]	; (8001868 <HAL_GPIO_Init+0x46c>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d101      	bne.n	800176a <HAL_GPIO_Init+0x36e>
 8001766:	2303      	movs	r3, #3
 8001768:	e006      	b.n	8001778 <HAL_GPIO_Init+0x37c>
 800176a:	2304      	movs	r3, #4
 800176c:	e004      	b.n	8001778 <HAL_GPIO_Init+0x37c>
 800176e:	2302      	movs	r3, #2
 8001770:	e002      	b.n	8001778 <HAL_GPIO_Init+0x37c>
 8001772:	2301      	movs	r3, #1
 8001774:	e000      	b.n	8001778 <HAL_GPIO_Init+0x37c>
 8001776:	2300      	movs	r3, #0
 8001778:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800177a:	f002 0203 	and.w	r2, r2, #3
 800177e:	0092      	lsls	r2, r2, #2
 8001780:	4093      	lsls	r3, r2
 8001782:	68fa      	ldr	r2, [r7, #12]
 8001784:	4313      	orrs	r3, r2
 8001786:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001788:	4933      	ldr	r1, [pc, #204]	; (8001858 <HAL_GPIO_Init+0x45c>)
 800178a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800178c:	089b      	lsrs	r3, r3, #2
 800178e:	3302      	adds	r3, #2
 8001790:	68fa      	ldr	r2, [r7, #12]
 8001792:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d006      	beq.n	80017b0 <HAL_GPIO_Init+0x3b4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80017a2:	4932      	ldr	r1, [pc, #200]	; (800186c <HAL_GPIO_Init+0x470>)
 80017a4:	4b31      	ldr	r3, [pc, #196]	; (800186c <HAL_GPIO_Init+0x470>)
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	69bb      	ldr	r3, [r7, #24]
 80017aa:	4313      	orrs	r3, r2
 80017ac:	600b      	str	r3, [r1, #0]
 80017ae:	e006      	b.n	80017be <HAL_GPIO_Init+0x3c2>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80017b0:	492e      	ldr	r1, [pc, #184]	; (800186c <HAL_GPIO_Init+0x470>)
 80017b2:	4b2e      	ldr	r3, [pc, #184]	; (800186c <HAL_GPIO_Init+0x470>)
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	69bb      	ldr	r3, [r7, #24]
 80017b8:	43db      	mvns	r3, r3
 80017ba:	4013      	ands	r3, r2
 80017bc:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d006      	beq.n	80017d8 <HAL_GPIO_Init+0x3dc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80017ca:	4928      	ldr	r1, [pc, #160]	; (800186c <HAL_GPIO_Init+0x470>)
 80017cc:	4b27      	ldr	r3, [pc, #156]	; (800186c <HAL_GPIO_Init+0x470>)
 80017ce:	685a      	ldr	r2, [r3, #4]
 80017d0:	69bb      	ldr	r3, [r7, #24]
 80017d2:	4313      	orrs	r3, r2
 80017d4:	604b      	str	r3, [r1, #4]
 80017d6:	e006      	b.n	80017e6 <HAL_GPIO_Init+0x3ea>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80017d8:	4924      	ldr	r1, [pc, #144]	; (800186c <HAL_GPIO_Init+0x470>)
 80017da:	4b24      	ldr	r3, [pc, #144]	; (800186c <HAL_GPIO_Init+0x470>)
 80017dc:	685a      	ldr	r2, [r3, #4]
 80017de:	69bb      	ldr	r3, [r7, #24]
 80017e0:	43db      	mvns	r3, r3
 80017e2:	4013      	ands	r3, r2
 80017e4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d006      	beq.n	8001800 <HAL_GPIO_Init+0x404>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80017f2:	491e      	ldr	r1, [pc, #120]	; (800186c <HAL_GPIO_Init+0x470>)
 80017f4:	4b1d      	ldr	r3, [pc, #116]	; (800186c <HAL_GPIO_Init+0x470>)
 80017f6:	689a      	ldr	r2, [r3, #8]
 80017f8:	69bb      	ldr	r3, [r7, #24]
 80017fa:	4313      	orrs	r3, r2
 80017fc:	608b      	str	r3, [r1, #8]
 80017fe:	e006      	b.n	800180e <HAL_GPIO_Init+0x412>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001800:	491a      	ldr	r1, [pc, #104]	; (800186c <HAL_GPIO_Init+0x470>)
 8001802:	4b1a      	ldr	r3, [pc, #104]	; (800186c <HAL_GPIO_Init+0x470>)
 8001804:	689a      	ldr	r2, [r3, #8]
 8001806:	69bb      	ldr	r3, [r7, #24]
 8001808:	43db      	mvns	r3, r3
 800180a:	4013      	ands	r3, r2
 800180c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001816:	2b00      	cmp	r3, #0
 8001818:	d006      	beq.n	8001828 <HAL_GPIO_Init+0x42c>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800181a:	4914      	ldr	r1, [pc, #80]	; (800186c <HAL_GPIO_Init+0x470>)
 800181c:	4b13      	ldr	r3, [pc, #76]	; (800186c <HAL_GPIO_Init+0x470>)
 800181e:	68da      	ldr	r2, [r3, #12]
 8001820:	69bb      	ldr	r3, [r7, #24]
 8001822:	4313      	orrs	r3, r2
 8001824:	60cb      	str	r3, [r1, #12]
 8001826:	e006      	b.n	8001836 <HAL_GPIO_Init+0x43a>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001828:	4910      	ldr	r1, [pc, #64]	; (800186c <HAL_GPIO_Init+0x470>)
 800182a:	4b10      	ldr	r3, [pc, #64]	; (800186c <HAL_GPIO_Init+0x470>)
 800182c:	68da      	ldr	r2, [r3, #12]
 800182e:	69bb      	ldr	r3, [r7, #24]
 8001830:	43db      	mvns	r3, r3
 8001832:	4013      	ands	r3, r2
 8001834:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001838:	3301      	adds	r3, #1
 800183a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001842:	fa22 f303 	lsr.w	r3, r2, r3
 8001846:	2b00      	cmp	r3, #0
 8001848:	f47f ae4f 	bne.w	80014ea <HAL_GPIO_Init+0xee>
  }
}
 800184c:	bf00      	nop
 800184e:	3728      	adds	r7, #40	; 0x28
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	40021000 	.word	0x40021000
 8001858:	40010000 	.word	0x40010000
 800185c:	40010800 	.word	0x40010800
 8001860:	40010c00 	.word	0x40010c00
 8001864:	40011000 	.word	0x40011000
 8001868:	40011400 	.word	0x40011400
 800186c:	40010400 	.word	0x40010400

08001870 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	460b      	mov	r3, r1
 800187a:	807b      	strh	r3, [r7, #2]
 800187c:	4613      	mov	r3, r2
 800187e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8001880:	887b      	ldrh	r3, [r7, #2]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d004      	beq.n	8001890 <HAL_GPIO_WritePin+0x20>
 8001886:	887b      	ldrh	r3, [r7, #2]
 8001888:	0c1b      	lsrs	r3, r3, #16
 800188a:	041b      	lsls	r3, r3, #16
 800188c:	2b00      	cmp	r3, #0
 800188e:	d004      	beq.n	800189a <HAL_GPIO_WritePin+0x2a>
 8001890:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8001894:	480e      	ldr	r0, [pc, #56]	; (80018d0 <HAL_GPIO_WritePin+0x60>)
 8001896:	f7fe fe73 	bl	8000580 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800189a:	787b      	ldrb	r3, [r7, #1]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d007      	beq.n	80018b0 <HAL_GPIO_WritePin+0x40>
 80018a0:	787b      	ldrb	r3, [r7, #1]
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d004      	beq.n	80018b0 <HAL_GPIO_WritePin+0x40>
 80018a6:	f240 11d5 	movw	r1, #469	; 0x1d5
 80018aa:	4809      	ldr	r0, [pc, #36]	; (80018d0 <HAL_GPIO_WritePin+0x60>)
 80018ac:	f7fe fe68 	bl	8000580 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 80018b0:	787b      	ldrb	r3, [r7, #1]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d003      	beq.n	80018be <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018b6:	887a      	ldrh	r2, [r7, #2]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80018bc:	e003      	b.n	80018c6 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80018be:	887b      	ldrh	r3, [r7, #2]
 80018c0:	041a      	lsls	r2, r3, #16
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	611a      	str	r2, [r3, #16]
}
 80018c6:	bf00      	nop
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	0800b308 	.word	0x0800b308

080018d4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80018d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018d6:	b08b      	sub	sp, #44	; 0x2c
 80018d8:	af06      	add	r7, sp, #24
 80018da:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d101      	bne.n	80018e6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e106      	b.n	8001af4 <HAL_PCD_Init+0x220>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a84      	ldr	r2, [pc, #528]	; (8001afc <HAL_PCD_Init+0x228>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d003      	beq.n	80018f8 <HAL_PCD_Init+0x24>
 80018f0:	218e      	movs	r1, #142	; 0x8e
 80018f2:	4883      	ldr	r0, [pc, #524]	; (8001b00 <HAL_PCD_Init+0x22c>)
 80018f4:	f7fe fe44 	bl	8000580 <assert_failed>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	2b00      	cmp	r3, #0
 8001902:	d106      	bne.n	8001912 <HAL_PCD_Init+0x3e>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2200      	movs	r2, #0
 8001908:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800190c:	6878      	ldr	r0, [r7, #4]
 800190e:	f008 ff11 	bl	800a734 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2203      	movs	r2, #3
 8001916:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4618      	mov	r0, r3
 8001920:	f003 fd66 	bl	80053f0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	603b      	str	r3, [r7, #0]
 800192a:	687e      	ldr	r6, [r7, #4]
 800192c:	466d      	mov	r5, sp
 800192e:	f106 0410 	add.w	r4, r6, #16
 8001932:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001934:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001936:	6823      	ldr	r3, [r4, #0]
 8001938:	602b      	str	r3, [r5, #0]
 800193a:	1d33      	adds	r3, r6, #4
 800193c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800193e:	6838      	ldr	r0, [r7, #0]
 8001940:	f003 fd30 	bl	80053a4 <USB_CoreInit>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d005      	beq.n	8001956 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2202      	movs	r2, #2
 800194e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e0ce      	b.n	8001af4 <HAL_PCD_Init+0x220>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	2100      	movs	r1, #0
 800195c:	4618      	mov	r0, r3
 800195e:	f003 fd61 	bl	8005424 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001962:	2300      	movs	r3, #0
 8001964:	73fb      	strb	r3, [r7, #15]
 8001966:	e04c      	b.n	8001a02 <HAL_PCD_Init+0x12e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001968:	7bfb      	ldrb	r3, [r7, #15]
 800196a:	6879      	ldr	r1, [r7, #4]
 800196c:	1c5a      	adds	r2, r3, #1
 800196e:	4613      	mov	r3, r2
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	4413      	add	r3, r2
 8001974:	00db      	lsls	r3, r3, #3
 8001976:	440b      	add	r3, r1
 8001978:	3301      	adds	r3, #1
 800197a:	2201      	movs	r2, #1
 800197c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800197e:	7bfb      	ldrb	r3, [r7, #15]
 8001980:	6879      	ldr	r1, [r7, #4]
 8001982:	1c5a      	adds	r2, r3, #1
 8001984:	4613      	mov	r3, r2
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	4413      	add	r3, r2
 800198a:	00db      	lsls	r3, r3, #3
 800198c:	440b      	add	r3, r1
 800198e:	7bfa      	ldrb	r2, [r7, #15]
 8001990:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001992:	7bfa      	ldrb	r2, [r7, #15]
 8001994:	7bfb      	ldrb	r3, [r7, #15]
 8001996:	b298      	uxth	r0, r3
 8001998:	6879      	ldr	r1, [r7, #4]
 800199a:	4613      	mov	r3, r2
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	4413      	add	r3, r2
 80019a0:	00db      	lsls	r3, r3, #3
 80019a2:	440b      	add	r3, r1
 80019a4:	3336      	adds	r3, #54	; 0x36
 80019a6:	4602      	mov	r2, r0
 80019a8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80019aa:	7bfb      	ldrb	r3, [r7, #15]
 80019ac:	6879      	ldr	r1, [r7, #4]
 80019ae:	1c5a      	adds	r2, r3, #1
 80019b0:	4613      	mov	r3, r2
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	4413      	add	r3, r2
 80019b6:	00db      	lsls	r3, r3, #3
 80019b8:	440b      	add	r3, r1
 80019ba:	3303      	adds	r3, #3
 80019bc:	2200      	movs	r2, #0
 80019be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80019c0:	7bfa      	ldrb	r2, [r7, #15]
 80019c2:	6879      	ldr	r1, [r7, #4]
 80019c4:	4613      	mov	r3, r2
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	4413      	add	r3, r2
 80019ca:	00db      	lsls	r3, r3, #3
 80019cc:	440b      	add	r3, r1
 80019ce:	3338      	adds	r3, #56	; 0x38
 80019d0:	2200      	movs	r2, #0
 80019d2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80019d4:	7bfa      	ldrb	r2, [r7, #15]
 80019d6:	6879      	ldr	r1, [r7, #4]
 80019d8:	4613      	mov	r3, r2
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	4413      	add	r3, r2
 80019de:	00db      	lsls	r3, r3, #3
 80019e0:	440b      	add	r3, r1
 80019e2:	333c      	adds	r3, #60	; 0x3c
 80019e4:	2200      	movs	r2, #0
 80019e6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80019e8:	7bfa      	ldrb	r2, [r7, #15]
 80019ea:	6879      	ldr	r1, [r7, #4]
 80019ec:	4613      	mov	r3, r2
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	4413      	add	r3, r2
 80019f2:	00db      	lsls	r3, r3, #3
 80019f4:	440b      	add	r3, r1
 80019f6:	3340      	adds	r3, #64	; 0x40
 80019f8:	2200      	movs	r2, #0
 80019fa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019fc:	7bfb      	ldrb	r3, [r7, #15]
 80019fe:	3301      	adds	r3, #1
 8001a00:	73fb      	strb	r3, [r7, #15]
 8001a02:	7bfa      	ldrb	r2, [r7, #15]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d3ad      	bcc.n	8001968 <HAL_PCD_Init+0x94>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	73fb      	strb	r3, [r7, #15]
 8001a10:	e044      	b.n	8001a9c <HAL_PCD_Init+0x1c8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001a12:	7bfa      	ldrb	r2, [r7, #15]
 8001a14:	6879      	ldr	r1, [r7, #4]
 8001a16:	4613      	mov	r3, r2
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	4413      	add	r3, r2
 8001a1c:	00db      	lsls	r3, r3, #3
 8001a1e:	440b      	add	r3, r1
 8001a20:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001a24:	2200      	movs	r2, #0
 8001a26:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001a28:	7bfa      	ldrb	r2, [r7, #15]
 8001a2a:	6879      	ldr	r1, [r7, #4]
 8001a2c:	4613      	mov	r3, r2
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	4413      	add	r3, r2
 8001a32:	00db      	lsls	r3, r3, #3
 8001a34:	440b      	add	r3, r1
 8001a36:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a3a:	7bfa      	ldrb	r2, [r7, #15]
 8001a3c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001a3e:	7bfa      	ldrb	r2, [r7, #15]
 8001a40:	6879      	ldr	r1, [r7, #4]
 8001a42:	4613      	mov	r3, r2
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	4413      	add	r3, r2
 8001a48:	00db      	lsls	r3, r3, #3
 8001a4a:	440b      	add	r3, r1
 8001a4c:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001a50:	2200      	movs	r2, #0
 8001a52:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001a54:	7bfa      	ldrb	r2, [r7, #15]
 8001a56:	6879      	ldr	r1, [r7, #4]
 8001a58:	4613      	mov	r3, r2
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	4413      	add	r3, r2
 8001a5e:	00db      	lsls	r3, r3, #3
 8001a60:	440b      	add	r3, r1
 8001a62:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001a66:	2200      	movs	r2, #0
 8001a68:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001a6a:	7bfa      	ldrb	r2, [r7, #15]
 8001a6c:	6879      	ldr	r1, [r7, #4]
 8001a6e:	4613      	mov	r3, r2
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	4413      	add	r3, r2
 8001a74:	00db      	lsls	r3, r3, #3
 8001a76:	440b      	add	r3, r1
 8001a78:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001a80:	7bfa      	ldrb	r2, [r7, #15]
 8001a82:	6879      	ldr	r1, [r7, #4]
 8001a84:	4613      	mov	r3, r2
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	4413      	add	r3, r2
 8001a8a:	00db      	lsls	r3, r3, #3
 8001a8c:	440b      	add	r3, r1
 8001a8e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001a92:	2200      	movs	r2, #0
 8001a94:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a96:	7bfb      	ldrb	r3, [r7, #15]
 8001a98:	3301      	adds	r3, #1
 8001a9a:	73fb      	strb	r3, [r7, #15]
 8001a9c:	7bfa      	ldrb	r2, [r7, #15]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	d3b5      	bcc.n	8001a12 <HAL_PCD_Init+0x13e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	603b      	str	r3, [r7, #0]
 8001aac:	687e      	ldr	r6, [r7, #4]
 8001aae:	466d      	mov	r5, sp
 8001ab0:	f106 0410 	add.w	r4, r6, #16
 8001ab4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ab6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ab8:	6823      	ldr	r3, [r4, #0]
 8001aba:	602b      	str	r3, [r5, #0]
 8001abc:	1d33      	adds	r3, r6, #4
 8001abe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ac0:	6838      	ldr	r0, [r7, #0]
 8001ac2:	f003 fcbb 	bl	800543c <USB_DevInit>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d005      	beq.n	8001ad8 <HAL_PCD_Init+0x204>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2202      	movs	r2, #2
 8001ad0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e00d      	b.n	8001af4 <HAL_PCD_Init+0x220>
  }

  hpcd->USB_Address = 0U;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2200      	movs	r2, #0
 8001adc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4618      	mov	r0, r3
 8001aee:	f005 fe36 	bl	800775e <USB_DevDisconnect>

  return HAL_OK;
 8001af2:	2300      	movs	r3, #0
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3714      	adds	r7, #20
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001afc:	40005c00 	.word	0x40005c00
 8001b00:	0800b344 	.word	0x0800b344

08001b04 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d101      	bne.n	8001b1a <HAL_PCD_Start+0x16>
 8001b16:	2302      	movs	r3, #2
 8001b18:	e016      	b.n	8001b48 <HAL_PCD_Start+0x44>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f003 fc4c 	bl	80053c4 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001b2c:	2101      	movs	r1, #1
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f009 f873 	bl	800ac1a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f005 fe06 	bl	800774a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2200      	movs	r2, #0
 8001b42:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001b46:	2300      	movs	r3, #0
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3708      	adds	r7, #8
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b088      	sub	sp, #32
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f005 fe08 	bl	8007772 <USB_ReadInterrupts>
 8001b62:	4603      	mov	r3, r0
 8001b64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b6c:	d102      	bne.n	8001b74 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f000 fb61 	bl	8002236 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f005 fdfa 	bl	8007772 <USB_ReadInterrupts>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b88:	d112      	bne.n	8001bb0 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	687a      	ldr	r2, [r7, #4]
 8001b90:	6812      	ldr	r2, [r2, #0]
 8001b92:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8001b96:	b292      	uxth	r2, r2
 8001b98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b9c:	b292      	uxth	r2, r2
 8001b9e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f008 fe41 	bl	800a82a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001ba8:	2100      	movs	r1, #0
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f000 f925 	bl	8001dfa <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f005 fddc 	bl	8007772 <USB_ReadInterrupts>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bc0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001bc4:	d10b      	bne.n	8001bde <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	687a      	ldr	r2, [r7, #4]
 8001bcc:	6812      	ldr	r2, [r2, #0]
 8001bce:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8001bd2:	b292      	uxth	r2, r2
 8001bd4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001bd8:	b292      	uxth	r2, r2
 8001bda:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4618      	mov	r0, r3
 8001be4:	f005 fdc5 	bl	8007772 <USB_ReadInterrupts>
 8001be8:	4603      	mov	r3, r0
 8001bea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001bee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001bf2:	d10b      	bne.n	8001c0c <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	6812      	ldr	r2, [r2, #0]
 8001bfc:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8001c00:	b292      	uxth	r2, r2
 8001c02:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001c06:	b292      	uxth	r2, r2
 8001c08:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4618      	mov	r0, r3
 8001c12:	f005 fdae 	bl	8007772 <USB_ReadInterrupts>
 8001c16:	4603      	mov	r3, r0
 8001c18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c20:	d126      	bne.n	8001c70 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	687a      	ldr	r2, [r7, #4]
 8001c28:	6812      	ldr	r2, [r2, #0]
 8001c2a:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8001c2e:	b292      	uxth	r2, r2
 8001c30:	f022 0204 	bic.w	r2, r2, #4
 8001c34:	b292      	uxth	r2, r2
 8001c36:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	687a      	ldr	r2, [r7, #4]
 8001c40:	6812      	ldr	r2, [r2, #0]
 8001c42:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8001c46:	b292      	uxth	r2, r2
 8001c48:	f022 0208 	bic.w	r2, r2, #8
 8001c4c:	b292      	uxth	r2, r2
 8001c4e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f008 fe22 	bl	800a89c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	687a      	ldr	r2, [r7, #4]
 8001c5e:	6812      	ldr	r2, [r2, #0]
 8001c60:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8001c64:	b292      	uxth	r2, r2
 8001c66:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001c6a:	b292      	uxth	r2, r2
 8001c6c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4618      	mov	r0, r3
 8001c76:	f005 fd7c 	bl	8007772 <USB_ReadInterrupts>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001c84:	f040 8084 	bne.w	8001d90 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8001c88:	2300      	movs	r3, #0
 8001c8a:	77fb      	strb	r3, [r7, #31]
 8001c8c:	e011      	b.n	8001cb2 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001c8e:	7ffb      	ldrb	r3, [r7, #31]
 8001c90:	687a      	ldr	r2, [r7, #4]
 8001c92:	6812      	ldr	r2, [r2, #0]
 8001c94:	4611      	mov	r1, r2
 8001c96:	7ffa      	ldrb	r2, [r7, #31]
 8001c98:	0092      	lsls	r2, r2, #2
 8001c9a:	440a      	add	r2, r1
 8001c9c:	8812      	ldrh	r2, [r2, #0]
 8001c9e:	b292      	uxth	r2, r2
 8001ca0:	005b      	lsls	r3, r3, #1
 8001ca2:	f107 0120 	add.w	r1, r7, #32
 8001ca6:	440b      	add	r3, r1
 8001ca8:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8001cac:	7ffb      	ldrb	r3, [r7, #31]
 8001cae:	3301      	adds	r3, #1
 8001cb0:	77fb      	strb	r3, [r7, #31]
 8001cb2:	7ffb      	ldrb	r3, [r7, #31]
 8001cb4:	2b07      	cmp	r3, #7
 8001cb6:	d9ea      	bls.n	8001c8e <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	687a      	ldr	r2, [r7, #4]
 8001cbe:	6812      	ldr	r2, [r2, #0]
 8001cc0:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8001cc4:	b292      	uxth	r2, r2
 8001cc6:	f042 0201 	orr.w	r2, r2, #1
 8001cca:	b292      	uxth	r2, r2
 8001ccc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	687a      	ldr	r2, [r7, #4]
 8001cd6:	6812      	ldr	r2, [r2, #0]
 8001cd8:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8001cdc:	b292      	uxth	r2, r2
 8001cde:	f022 0201 	bic.w	r2, r2, #1
 8001ce2:	b292      	uxth	r2, r2
 8001ce4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001ce8:	bf00      	nop
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d0f6      	beq.n	8001cea <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	6812      	ldr	r2, [r2, #0]
 8001d04:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8001d08:	b292      	uxth	r2, r2
 8001d0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d0e:	b292      	uxth	r2, r2
 8001d10:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001d14:	2300      	movs	r3, #0
 8001d16:	77fb      	strb	r3, [r7, #31]
 8001d18:	e010      	b.n	8001d3c <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	461a      	mov	r2, r3
 8001d20:	7ffb      	ldrb	r3, [r7, #31]
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	441a      	add	r2, r3
 8001d26:	7ffb      	ldrb	r3, [r7, #31]
 8001d28:	005b      	lsls	r3, r3, #1
 8001d2a:	f107 0120 	add.w	r1, r7, #32
 8001d2e:	440b      	add	r3, r1
 8001d30:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001d34:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001d36:	7ffb      	ldrb	r3, [r7, #31]
 8001d38:	3301      	adds	r3, #1
 8001d3a:	77fb      	strb	r3, [r7, #31]
 8001d3c:	7ffb      	ldrb	r3, [r7, #31]
 8001d3e:	2b07      	cmp	r3, #7
 8001d40:	d9eb      	bls.n	8001d1a <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	687a      	ldr	r2, [r7, #4]
 8001d48:	6812      	ldr	r2, [r2, #0]
 8001d4a:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8001d4e:	b292      	uxth	r2, r2
 8001d50:	f042 0208 	orr.w	r2, r2, #8
 8001d54:	b292      	uxth	r2, r2
 8001d56:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	687a      	ldr	r2, [r7, #4]
 8001d60:	6812      	ldr	r2, [r2, #0]
 8001d62:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8001d66:	b292      	uxth	r2, r2
 8001d68:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d6c:	b292      	uxth	r2, r2
 8001d6e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	6812      	ldr	r2, [r2, #0]
 8001d7a:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8001d7e:	b292      	uxth	r2, r2
 8001d80:	f042 0204 	orr.w	r2, r2, #4
 8001d84:	b292      	uxth	r2, r2
 8001d86:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f008 fd6c 	bl	800a868 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4618      	mov	r0, r3
 8001d96:	f005 fcec 	bl	8007772 <USB_ReadInterrupts>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001da0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001da4:	d10e      	bne.n	8001dc4 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	6812      	ldr	r2, [r2, #0]
 8001dae:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8001db2:	b292      	uxth	r2, r2
 8001db4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001db8:	b292      	uxth	r2, r2
 8001dba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f008 fd25 	bl	800a80e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f005 fcd2 	bl	8007772 <USB_ReadInterrupts>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001dd8:	d10b      	bne.n	8001df2 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	6812      	ldr	r2, [r2, #0]
 8001de2:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8001de6:	b292      	uxth	r2, r2
 8001de8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001dec:	b292      	uxth	r2, r2
 8001dee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001df2:	bf00      	nop
 8001df4:	3720      	adds	r7, #32
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}

08001dfa <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001dfa:	b580      	push	{r7, lr}
 8001dfc:	b082      	sub	sp, #8
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	6078      	str	r0, [r7, #4]
 8001e02:	460b      	mov	r3, r1
 8001e04:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d101      	bne.n	8001e14 <HAL_PCD_SetAddress+0x1a>
 8001e10:	2302      	movs	r3, #2
 8001e12:	e013      	b.n	8001e3c <HAL_PCD_SetAddress+0x42>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2201      	movs	r2, #1
 8001e18:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	78fa      	ldrb	r2, [r7, #3]
 8001e20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	78fa      	ldrb	r2, [r7, #3]
 8001e2a:	4611      	mov	r1, r2
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f005 fc79 	bl	8007724 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2200      	movs	r2, #0
 8001e36:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001e3a:	2300      	movs	r3, #0
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3708      	adds	r7, #8
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}

08001e44 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b084      	sub	sp, #16
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	4608      	mov	r0, r1
 8001e4e:	4611      	mov	r1, r2
 8001e50:	461a      	mov	r2, r3
 8001e52:	4603      	mov	r3, r0
 8001e54:	70fb      	strb	r3, [r7, #3]
 8001e56:	460b      	mov	r3, r1
 8001e58:	803b      	strh	r3, [r7, #0]
 8001e5a:	4613      	mov	r3, r2
 8001e5c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001e62:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	da0e      	bge.n	8001e88 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e6a:	78fb      	ldrb	r3, [r7, #3]
 8001e6c:	f003 0307 	and.w	r3, r3, #7
 8001e70:	1c5a      	adds	r2, r3, #1
 8001e72:	4613      	mov	r3, r2
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	4413      	add	r3, r2
 8001e78:	00db      	lsls	r3, r3, #3
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	4413      	add	r3, r2
 8001e7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2201      	movs	r2, #1
 8001e84:	705a      	strb	r2, [r3, #1]
 8001e86:	e00e      	b.n	8001ea6 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e88:	78fb      	ldrb	r3, [r7, #3]
 8001e8a:	f003 0207 	and.w	r2, r3, #7
 8001e8e:	4613      	mov	r3, r2
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	4413      	add	r3, r2
 8001e94:	00db      	lsls	r3, r3, #3
 8001e96:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001e9a:	687a      	ldr	r2, [r7, #4]
 8001e9c:	4413      	add	r3, r2
 8001e9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001ea6:	78fb      	ldrb	r3, [r7, #3]
 8001ea8:	f003 0307 	and.w	r3, r3, #7
 8001eac:	b2da      	uxtb	r2, r3
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001eb2:	883a      	ldrh	r2, [r7, #0]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	78ba      	ldrb	r2, [r7, #2]
 8001ebc:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	785b      	ldrb	r3, [r3, #1]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d004      	beq.n	8001ed0 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	b29a      	uxth	r2, r3
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001ed0:	78bb      	ldrb	r3, [r7, #2]
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d102      	bne.n	8001edc <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d101      	bne.n	8001eea <HAL_PCD_EP_Open+0xa6>
 8001ee6:	2302      	movs	r3, #2
 8001ee8:	e00e      	b.n	8001f08 <HAL_PCD_EP_Open+0xc4>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2201      	movs	r2, #1
 8001eee:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	68f9      	ldr	r1, [r7, #12]
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f003 fabf 	bl	800547c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2200      	movs	r2, #0
 8001f02:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001f06:	7afb      	ldrb	r3, [r7, #11]
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3710      	adds	r7, #16
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}

08001f10 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b084      	sub	sp, #16
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
 8001f18:	460b      	mov	r3, r1
 8001f1a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001f1c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	da0e      	bge.n	8001f42 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f24:	78fb      	ldrb	r3, [r7, #3]
 8001f26:	f003 0307 	and.w	r3, r3, #7
 8001f2a:	1c5a      	adds	r2, r3, #1
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	4413      	add	r3, r2
 8001f32:	00db      	lsls	r3, r3, #3
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	4413      	add	r3, r2
 8001f38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	705a      	strb	r2, [r3, #1]
 8001f40:	e00e      	b.n	8001f60 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f42:	78fb      	ldrb	r3, [r7, #3]
 8001f44:	f003 0207 	and.w	r2, r3, #7
 8001f48:	4613      	mov	r3, r2
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	4413      	add	r3, r2
 8001f4e:	00db      	lsls	r3, r3, #3
 8001f50:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001f54:	687a      	ldr	r2, [r7, #4]
 8001f56:	4413      	add	r3, r2
 8001f58:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001f60:	78fb      	ldrb	r3, [r7, #3]
 8001f62:	f003 0307 	and.w	r3, r3, #7
 8001f66:	b2da      	uxtb	r2, r3
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d101      	bne.n	8001f7a <HAL_PCD_EP_Close+0x6a>
 8001f76:	2302      	movs	r3, #2
 8001f78:	e00e      	b.n	8001f98 <HAL_PCD_EP_Close+0x88>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	68f9      	ldr	r1, [r7, #12]
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f003 fddb 	bl	8005b44 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2200      	movs	r2, #0
 8001f92:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001f96:	2300      	movs	r3, #0
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3710      	adds	r7, #16
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b086      	sub	sp, #24
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	60f8      	str	r0, [r7, #12]
 8001fa8:	607a      	str	r2, [r7, #4]
 8001faa:	603b      	str	r3, [r7, #0]
 8001fac:	460b      	mov	r3, r1
 8001fae:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fb0:	7afb      	ldrb	r3, [r7, #11]
 8001fb2:	f003 0207 	and.w	r2, r3, #7
 8001fb6:	4613      	mov	r3, r2
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	4413      	add	r3, r2
 8001fbc:	00db      	lsls	r3, r3, #3
 8001fbe:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001fc2:	68fa      	ldr	r2, [r7, #12]
 8001fc4:	4413      	add	r3, r2
 8001fc6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	687a      	ldr	r2, [r7, #4]
 8001fcc:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	683a      	ldr	r2, [r7, #0]
 8001fd2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fe0:	7afb      	ldrb	r3, [r7, #11]
 8001fe2:	f003 0307 	and.w	r3, r3, #7
 8001fe6:	b2da      	uxtb	r2, r3
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001fec:	7afb      	ldrb	r3, [r7, #11]
 8001fee:	f003 0307 	and.w	r3, r3, #7
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d106      	bne.n	8002004 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	6979      	ldr	r1, [r7, #20]
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f003 ff8d 	bl	8005f1c <USB_EPStartXfer>
 8002002:	e005      	b.n	8002010 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	6979      	ldr	r1, [r7, #20]
 800200a:	4618      	mov	r0, r3
 800200c:	f003 ff86 	bl	8005f1c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002010:	2300      	movs	r3, #0
}
 8002012:	4618      	mov	r0, r3
 8002014:	3718      	adds	r7, #24
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}

0800201a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800201a:	b480      	push	{r7}
 800201c:	b083      	sub	sp, #12
 800201e:	af00      	add	r7, sp, #0
 8002020:	6078      	str	r0, [r7, #4]
 8002022:	460b      	mov	r3, r1
 8002024:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002026:	78fb      	ldrb	r3, [r7, #3]
 8002028:	f003 0207 	and.w	r2, r3, #7
 800202c:	6879      	ldr	r1, [r7, #4]
 800202e:	4613      	mov	r3, r2
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	4413      	add	r3, r2
 8002034:	00db      	lsls	r3, r3, #3
 8002036:	440b      	add	r3, r1
 8002038:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800203c:	681b      	ldr	r3, [r3, #0]
}
 800203e:	4618      	mov	r0, r3
 8002040:	370c      	adds	r7, #12
 8002042:	46bd      	mov	sp, r7
 8002044:	bc80      	pop	{r7}
 8002046:	4770      	bx	lr

08002048 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b086      	sub	sp, #24
 800204c:	af00      	add	r7, sp, #0
 800204e:	60f8      	str	r0, [r7, #12]
 8002050:	607a      	str	r2, [r7, #4]
 8002052:	603b      	str	r3, [r7, #0]
 8002054:	460b      	mov	r3, r1
 8002056:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002058:	7afb      	ldrb	r3, [r7, #11]
 800205a:	f003 0307 	and.w	r3, r3, #7
 800205e:	1c5a      	adds	r2, r3, #1
 8002060:	4613      	mov	r3, r2
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	4413      	add	r3, r2
 8002066:	00db      	lsls	r3, r3, #3
 8002068:	68fa      	ldr	r2, [r7, #12]
 800206a:	4413      	add	r3, r2
 800206c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	687a      	ldr	r2, [r7, #4]
 8002072:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	683a      	ldr	r2, [r7, #0]
 8002078:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	2201      	movs	r2, #1
 800207e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	683a      	ldr	r2, [r7, #0]
 8002086:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	2200      	movs	r2, #0
 800208c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	2201      	movs	r2, #1
 8002092:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002094:	7afb      	ldrb	r3, [r7, #11]
 8002096:	f003 0307 	and.w	r3, r3, #7
 800209a:	b2da      	uxtb	r2, r3
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80020a0:	7afb      	ldrb	r3, [r7, #11]
 80020a2:	f003 0307 	and.w	r3, r3, #7
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d106      	bne.n	80020b8 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	6979      	ldr	r1, [r7, #20]
 80020b0:	4618      	mov	r0, r3
 80020b2:	f003 ff33 	bl	8005f1c <USB_EPStartXfer>
 80020b6:	e005      	b.n	80020c4 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	6979      	ldr	r1, [r7, #20]
 80020be:	4618      	mov	r0, r3
 80020c0:	f003 ff2c 	bl	8005f1c <USB_EPStartXfer>
  }

  return HAL_OK;
 80020c4:	2300      	movs	r3, #0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3718      	adds	r7, #24
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}

080020ce <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020ce:	b580      	push	{r7, lr}
 80020d0:	b084      	sub	sp, #16
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	6078      	str	r0, [r7, #4]
 80020d6:	460b      	mov	r3, r1
 80020d8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80020da:	78fb      	ldrb	r3, [r7, #3]
 80020dc:	f003 0207 	and.w	r2, r3, #7
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d901      	bls.n	80020ec <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e04c      	b.n	8002186 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80020ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	da0e      	bge.n	8002112 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020f4:	78fb      	ldrb	r3, [r7, #3]
 80020f6:	f003 0307 	and.w	r3, r3, #7
 80020fa:	1c5a      	adds	r2, r3, #1
 80020fc:	4613      	mov	r3, r2
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	4413      	add	r3, r2
 8002102:	00db      	lsls	r3, r3, #3
 8002104:	687a      	ldr	r2, [r7, #4]
 8002106:	4413      	add	r3, r2
 8002108:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2201      	movs	r2, #1
 800210e:	705a      	strb	r2, [r3, #1]
 8002110:	e00c      	b.n	800212c <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002112:	78fa      	ldrb	r2, [r7, #3]
 8002114:	4613      	mov	r3, r2
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	4413      	add	r3, r2
 800211a:	00db      	lsls	r3, r3, #3
 800211c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	4413      	add	r3, r2
 8002124:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	2200      	movs	r2, #0
 800212a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2201      	movs	r2, #1
 8002130:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002132:	78fb      	ldrb	r3, [r7, #3]
 8002134:	f003 0307 	and.w	r3, r3, #7
 8002138:	b2da      	uxtb	r2, r3
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002144:	2b01      	cmp	r3, #1
 8002146:	d101      	bne.n	800214c <HAL_PCD_EP_SetStall+0x7e>
 8002148:	2302      	movs	r3, #2
 800214a:	e01c      	b.n	8002186 <HAL_PCD_EP_SetStall+0xb8>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2201      	movs	r2, #1
 8002150:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	68f9      	ldr	r1, [r7, #12]
 800215a:	4618      	mov	r0, r3
 800215c:	f005 f9e5 	bl	800752a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002160:	78fb      	ldrb	r3, [r7, #3]
 8002162:	f003 0307 	and.w	r3, r3, #7
 8002166:	2b00      	cmp	r3, #0
 8002168:	d108      	bne.n	800217c <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8002174:	4619      	mov	r1, r3
 8002176:	4610      	mov	r0, r2
 8002178:	f005 fb0a 	bl	8007790 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2200      	movs	r2, #0
 8002180:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002184:	2300      	movs	r3, #0
}
 8002186:	4618      	mov	r0, r3
 8002188:	3710      	adds	r7, #16
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}

0800218e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800218e:	b580      	push	{r7, lr}
 8002190:	b084      	sub	sp, #16
 8002192:	af00      	add	r7, sp, #0
 8002194:	6078      	str	r0, [r7, #4]
 8002196:	460b      	mov	r3, r1
 8002198:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800219a:	78fb      	ldrb	r3, [r7, #3]
 800219c:	f003 020f 	and.w	r2, r3, #15
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d901      	bls.n	80021ac <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	e040      	b.n	800222e <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80021ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	da0e      	bge.n	80021d2 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021b4:	78fb      	ldrb	r3, [r7, #3]
 80021b6:	f003 0307 	and.w	r3, r3, #7
 80021ba:	1c5a      	adds	r2, r3, #1
 80021bc:	4613      	mov	r3, r2
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	4413      	add	r3, r2
 80021c2:	00db      	lsls	r3, r3, #3
 80021c4:	687a      	ldr	r2, [r7, #4]
 80021c6:	4413      	add	r3, r2
 80021c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2201      	movs	r2, #1
 80021ce:	705a      	strb	r2, [r3, #1]
 80021d0:	e00e      	b.n	80021f0 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021d2:	78fb      	ldrb	r3, [r7, #3]
 80021d4:	f003 0207 	and.w	r2, r3, #7
 80021d8:	4613      	mov	r3, r2
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	4413      	add	r3, r2
 80021de:	00db      	lsls	r3, r3, #3
 80021e0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80021e4:	687a      	ldr	r2, [r7, #4]
 80021e6:	4413      	add	r3, r2
 80021e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	2200      	movs	r2, #0
 80021ee:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2200      	movs	r2, #0
 80021f4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021f6:	78fb      	ldrb	r3, [r7, #3]
 80021f8:	f003 0307 	and.w	r3, r3, #7
 80021fc:	b2da      	uxtb	r2, r3
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002208:	2b01      	cmp	r3, #1
 800220a:	d101      	bne.n	8002210 <HAL_PCD_EP_ClrStall+0x82>
 800220c:	2302      	movs	r3, #2
 800220e:	e00e      	b.n	800222e <HAL_PCD_EP_ClrStall+0xa0>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2201      	movs	r2, #1
 8002214:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	68f9      	ldr	r1, [r7, #12]
 800221e:	4618      	mov	r0, r3
 8002220:	f005 f9d3 	bl	80075ca <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2200      	movs	r2, #0
 8002228:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800222c:	2300      	movs	r3, #0
}
 800222e:	4618      	mov	r0, r3
 8002230:	3710      	adds	r7, #16
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}

08002236 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002236:	b580      	push	{r7, lr}
 8002238:	b08e      	sub	sp, #56	; 0x38
 800223a:	af00      	add	r7, sp, #0
 800223c:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800223e:	e2ec      	b.n	800281a <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002248:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800224a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800224c:	b2db      	uxtb	r3, r3
 800224e:	f003 030f 	and.w	r3, r3, #15
 8002252:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8002256:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800225a:	2b00      	cmp	r3, #0
 800225c:	f040 8161 	bne.w	8002522 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002260:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002262:	f003 0310 	and.w	r3, r3, #16
 8002266:	2b00      	cmp	r3, #0
 8002268:	d152      	bne.n	8002310 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	881b      	ldrh	r3, [r3, #0]
 8002270:	b29b      	uxth	r3, r3
 8002272:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002276:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800227a:	857b      	strh	r3, [r7, #42]	; 0x2a
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002282:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002286:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800228a:	b29b      	uxth	r3, r3
 800228c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	3328      	adds	r3, #40	; 0x28
 8002292:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800229c:	b29b      	uxth	r3, r3
 800229e:	461a      	mov	r2, r3
 80022a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	00db      	lsls	r3, r3, #3
 80022a6:	4413      	add	r3, r2
 80022a8:	3302      	adds	r3, #2
 80022aa:	005b      	lsls	r3, r3, #1
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	6812      	ldr	r2, [r2, #0]
 80022b0:	4413      	add	r3, r2
 80022b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022b6:	881b      	ldrh	r3, [r3, #0]
 80022b8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80022bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022be:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80022c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c2:	695a      	ldr	r2, [r3, #20]
 80022c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c6:	69db      	ldr	r3, [r3, #28]
 80022c8:	441a      	add	r2, r3
 80022ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022cc:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80022ce:	2100      	movs	r1, #0
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	f008 fa82 	bl	800a7da <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	2b00      	cmp	r3, #0
 80022e0:	f000 829b 	beq.w	800281a <PCD_EP_ISR_Handler+0x5e4>
 80022e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e6:	699b      	ldr	r3, [r3, #24]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	f040 8296 	bne.w	800281a <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 80022f8:	b2d2      	uxtb	r2, r2
 80022fa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80022fe:	b2d2      	uxtb	r2, r2
 8002300:	b292      	uxth	r2, r2
 8002302:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2200      	movs	r2, #0
 800230a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800230e:	e284      	b.n	800281a <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002316:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	881b      	ldrh	r3, [r3, #0]
 800231e:	847b      	strh	r3, [r7, #34]	; 0x22

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002320:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002322:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002326:	2b00      	cmp	r3, #0
 8002328:	d034      	beq.n	8002394 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002332:	b29b      	uxth	r3, r3
 8002334:	461a      	mov	r2, r3
 8002336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	00db      	lsls	r3, r3, #3
 800233c:	4413      	add	r3, r2
 800233e:	3306      	adds	r3, #6
 8002340:	005b      	lsls	r3, r3, #1
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	6812      	ldr	r2, [r2, #0]
 8002346:	4413      	add	r3, r2
 8002348:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800234c:	881b      	ldrh	r3, [r3, #0]
 800234e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002354:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6818      	ldr	r0, [r3, #0]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002362:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002366:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002368:	b29b      	uxth	r3, r3
 800236a:	f005 fa60 	bl	800782e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	881b      	ldrh	r3, [r3, #0]
 8002374:	b29a      	uxth	r2, r3
 8002376:	f640 738f 	movw	r3, #3983	; 0xf8f
 800237a:	4013      	ands	r3, r2
 800237c:	843b      	strh	r3, [r7, #32]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	8c3a      	ldrh	r2, [r7, #32]
 8002384:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002388:	b292      	uxth	r2, r2
 800238a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	f008 f9f7 	bl	800a780 <HAL_PCD_SetupStageCallback>
 8002392:	e242      	b.n	800281a <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002394:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8002398:	2b00      	cmp	r3, #0
 800239a:	f280 823e 	bge.w	800281a <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	881b      	ldrh	r3, [r3, #0]
 80023a4:	b29a      	uxth	r2, r3
 80023a6:	f640 738f 	movw	r3, #3983	; 0xf8f
 80023aa:	4013      	ands	r3, r2
 80023ac:	83fb      	strh	r3, [r7, #30]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	8bfa      	ldrh	r2, [r7, #30]
 80023b4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80023b8:	b292      	uxth	r2, r2
 80023ba:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023c4:	b29b      	uxth	r3, r3
 80023c6:	461a      	mov	r2, r3
 80023c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	00db      	lsls	r3, r3, #3
 80023ce:	4413      	add	r3, r2
 80023d0:	3306      	adds	r3, #6
 80023d2:	005b      	lsls	r3, r3, #1
 80023d4:	687a      	ldr	r2, [r7, #4]
 80023d6:	6812      	ldr	r2, [r2, #0]
 80023d8:	4413      	add	r3, r2
 80023da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80023de:	881b      	ldrh	r3, [r3, #0]
 80023e0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80023e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e6:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80023e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ea:	69db      	ldr	r3, [r3, #28]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d019      	beq.n	8002424 <PCD_EP_ISR_Handler+0x1ee>
 80023f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f2:	695b      	ldr	r3, [r3, #20]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d015      	beq.n	8002424 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6818      	ldr	r0, [r3, #0]
 80023fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fe:	6959      	ldr	r1, [r3, #20]
 8002400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002402:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002406:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002408:	b29b      	uxth	r3, r3
 800240a:	f005 fa10 	bl	800782e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800240e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002410:	695a      	ldr	r2, [r3, #20]
 8002412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002414:	69db      	ldr	r3, [r3, #28]
 8002416:	441a      	add	r2, r3
 8002418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800241c:	2100      	movs	r1, #0
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f008 f9c0 	bl	800a7a4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	881b      	ldrh	r3, [r3, #0]
 800242a:	b29b      	uxth	r3, r3
 800242c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002430:	2b00      	cmp	r3, #0
 8002432:	f040 81f2 	bne.w	800281a <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	61bb      	str	r3, [r7, #24]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002444:	b29b      	uxth	r3, r3
 8002446:	461a      	mov	r2, r3
 8002448:	69bb      	ldr	r3, [r7, #24]
 800244a:	4413      	add	r3, r2
 800244c:	61bb      	str	r3, [r7, #24]
 800244e:	69bb      	ldr	r3, [r7, #24]
 8002450:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002454:	617b      	str	r3, [r7, #20]
 8002456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002458:	691b      	ldr	r3, [r3, #16]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d112      	bne.n	8002484 <PCD_EP_ISR_Handler+0x24e>
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	881b      	ldrh	r3, [r3, #0]
 8002462:	b29b      	uxth	r3, r3
 8002464:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002468:	b29a      	uxth	r2, r3
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	801a      	strh	r2, [r3, #0]
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	881b      	ldrh	r3, [r3, #0]
 8002472:	b29b      	uxth	r3, r3
 8002474:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002478:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800247c:	b29a      	uxth	r2, r3
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	801a      	strh	r2, [r3, #0]
 8002482:	e02f      	b.n	80024e4 <PCD_EP_ISR_Handler+0x2ae>
 8002484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002486:	691b      	ldr	r3, [r3, #16]
 8002488:	2b3e      	cmp	r3, #62	; 0x3e
 800248a:	d813      	bhi.n	80024b4 <PCD_EP_ISR_Handler+0x27e>
 800248c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248e:	691b      	ldr	r3, [r3, #16]
 8002490:	085b      	lsrs	r3, r3, #1
 8002492:	633b      	str	r3, [r7, #48]	; 0x30
 8002494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002496:	691b      	ldr	r3, [r3, #16]
 8002498:	f003 0301 	and.w	r3, r3, #1
 800249c:	2b00      	cmp	r3, #0
 800249e:	d002      	beq.n	80024a6 <PCD_EP_ISR_Handler+0x270>
 80024a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024a2:	3301      	adds	r3, #1
 80024a4:	633b      	str	r3, [r7, #48]	; 0x30
 80024a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	029b      	lsls	r3, r3, #10
 80024ac:	b29a      	uxth	r2, r3
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	801a      	strh	r2, [r3, #0]
 80024b2:	e017      	b.n	80024e4 <PCD_EP_ISR_Handler+0x2ae>
 80024b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b6:	691b      	ldr	r3, [r3, #16]
 80024b8:	095b      	lsrs	r3, r3, #5
 80024ba:	633b      	str	r3, [r7, #48]	; 0x30
 80024bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024be:	691b      	ldr	r3, [r3, #16]
 80024c0:	f003 031f 	and.w	r3, r3, #31
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d102      	bne.n	80024ce <PCD_EP_ISR_Handler+0x298>
 80024c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ca:	3b01      	subs	r3, #1
 80024cc:	633b      	str	r3, [r7, #48]	; 0x30
 80024ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024d0:	b29b      	uxth	r3, r3
 80024d2:	029b      	lsls	r3, r3, #10
 80024d4:	b29b      	uxth	r3, r3
 80024d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024de:	b29a      	uxth	r2, r3
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	881b      	ldrh	r3, [r3, #0]
 80024ea:	b29b      	uxth	r3, r3
 80024ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80024f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024f4:	827b      	strh	r3, [r7, #18]
 80024f6:	8a7b      	ldrh	r3, [r7, #18]
 80024f8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80024fc:	827b      	strh	r3, [r7, #18]
 80024fe:	8a7b      	ldrh	r3, [r7, #18]
 8002500:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002504:	827b      	strh	r3, [r7, #18]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	8a7b      	ldrh	r3, [r7, #18]
 800250c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002510:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002514:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002518:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800251c:	b29b      	uxth	r3, r3
 800251e:	8013      	strh	r3, [r2, #0]
 8002520:	e17b      	b.n	800281a <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	461a      	mov	r2, r3
 8002528:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	4413      	add	r3, r2
 8002530:	881b      	ldrh	r3, [r3, #0]
 8002532:	847b      	strh	r3, [r7, #34]	; 0x22

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002534:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8002538:	2b00      	cmp	r3, #0
 800253a:	f280 80ea 	bge.w	8002712 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	461a      	mov	r2, r3
 8002544:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	4413      	add	r3, r2
 800254c:	881b      	ldrh	r3, [r3, #0]
 800254e:	b29a      	uxth	r2, r3
 8002550:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002554:	4013      	ands	r3, r2
 8002556:	823b      	strh	r3, [r7, #16]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	461a      	mov	r2, r3
 800255e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	4413      	add	r3, r2
 8002566:	8a3a      	ldrh	r2, [r7, #16]
 8002568:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800256c:	b292      	uxth	r2, r2
 800256e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002570:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002574:	4613      	mov	r3, r2
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	4413      	add	r3, r2
 800257a:	00db      	lsls	r3, r3, #3
 800257c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002580:	687a      	ldr	r2, [r7, #4]
 8002582:	4413      	add	r3, r2
 8002584:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002588:	7b1b      	ldrb	r3, [r3, #12]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d122      	bne.n	80025d4 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002596:	b29b      	uxth	r3, r3
 8002598:	461a      	mov	r2, r3
 800259a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	00db      	lsls	r3, r3, #3
 80025a0:	4413      	add	r3, r2
 80025a2:	3306      	adds	r3, #6
 80025a4:	005b      	lsls	r3, r3, #1
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	6812      	ldr	r2, [r2, #0]
 80025aa:	4413      	add	r3, r2
 80025ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80025b0:	881b      	ldrh	r3, [r3, #0]
 80025b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025b6:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80025b8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	f000 8087 	beq.w	80026ce <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6818      	ldr	r0, [r3, #0]
 80025c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c6:	6959      	ldr	r1, [r3, #20]
 80025c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ca:	88da      	ldrh	r2, [r3, #6]
 80025cc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80025ce:	f005 f92e 	bl	800782e <USB_ReadPMA>
 80025d2:	e07c      	b.n	80026ce <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80025d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d6:	78db      	ldrb	r3, [r3, #3]
 80025d8:	2b02      	cmp	r3, #2
 80025da:	d108      	bne.n	80025ee <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80025dc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80025de:	461a      	mov	r2, r3
 80025e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f000 f927 	bl	8002836 <HAL_PCD_EP_DB_Receive>
 80025e8:	4603      	mov	r3, r0
 80025ea:	86fb      	strh	r3, [r7, #54]	; 0x36
 80025ec:	e06f      	b.n	80026ce <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	461a      	mov	r2, r3
 80025f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	4413      	add	r3, r2
 80025fc:	881b      	ldrh	r3, [r3, #0]
 80025fe:	b29b      	uxth	r3, r3
 8002600:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002604:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002608:	81fb      	strh	r3, [r7, #14]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	461a      	mov	r2, r3
 8002610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	441a      	add	r2, r3
 8002618:	89fb      	ldrh	r3, [r7, #14]
 800261a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800261e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002622:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002626:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800262a:	b29b      	uxth	r3, r3
 800262c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	461a      	mov	r2, r3
 8002634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	4413      	add	r3, r2
 800263c:	881b      	ldrh	r3, [r3, #0]
 800263e:	b29b      	uxth	r3, r3
 8002640:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002644:	2b00      	cmp	r3, #0
 8002646:	d021      	beq.n	800268c <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002650:	b29b      	uxth	r3, r3
 8002652:	461a      	mov	r2, r3
 8002654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	00db      	lsls	r3, r3, #3
 800265a:	4413      	add	r3, r2
 800265c:	3302      	adds	r3, #2
 800265e:	005b      	lsls	r3, r3, #1
 8002660:	687a      	ldr	r2, [r7, #4]
 8002662:	6812      	ldr	r2, [r2, #0]
 8002664:	4413      	add	r3, r2
 8002666:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800266a:	881b      	ldrh	r3, [r3, #0]
 800266c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002670:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002672:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002674:	2b00      	cmp	r3, #0
 8002676:	d02a      	beq.n	80026ce <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6818      	ldr	r0, [r3, #0]
 800267c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267e:	6959      	ldr	r1, [r3, #20]
 8002680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002682:	891a      	ldrh	r2, [r3, #8]
 8002684:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002686:	f005 f8d2 	bl	800782e <USB_ReadPMA>
 800268a:	e020      	b.n	80026ce <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002694:	b29b      	uxth	r3, r3
 8002696:	461a      	mov	r2, r3
 8002698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	00db      	lsls	r3, r3, #3
 800269e:	4413      	add	r3, r2
 80026a0:	3306      	adds	r3, #6
 80026a2:	005b      	lsls	r3, r3, #1
 80026a4:	687a      	ldr	r2, [r7, #4]
 80026a6:	6812      	ldr	r2, [r2, #0]
 80026a8:	4413      	add	r3, r2
 80026aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80026ae:	881b      	ldrh	r3, [r3, #0]
 80026b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026b4:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80026b6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d008      	beq.n	80026ce <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6818      	ldr	r0, [r3, #0]
 80026c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c2:	6959      	ldr	r1, [r3, #20]
 80026c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c6:	895a      	ldrh	r2, [r3, #10]
 80026c8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80026ca:	f005 f8b0 	bl	800782e <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80026ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d0:	69da      	ldr	r2, [r3, #28]
 80026d2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80026d4:	441a      	add	r2, r3
 80026d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80026da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026dc:	695a      	ldr	r2, [r3, #20]
 80026de:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80026e0:	441a      	add	r2, r3
 80026e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e4:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80026e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e8:	699b      	ldr	r3, [r3, #24]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d004      	beq.n	80026f8 <PCD_EP_ISR_Handler+0x4c2>
 80026ee:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80026f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f2:	691b      	ldr	r3, [r3, #16]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d206      	bcs.n	8002706 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80026f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	4619      	mov	r1, r3
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f008 f850 	bl	800a7a4 <HAL_PCD_DataOutStageCallback>
 8002704:	e005      	b.n	8002712 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800270c:	4618      	mov	r0, r3
 800270e:	f003 fc05 	bl	8005f1c <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002712:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002714:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002718:	2b00      	cmp	r3, #0
 800271a:	d07e      	beq.n	800281a <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 800271c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002720:	1c5a      	adds	r2, r3, #1
 8002722:	4613      	mov	r3, r2
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	4413      	add	r3, r2
 8002728:	00db      	lsls	r3, r3, #3
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	4413      	add	r3, r2
 800272e:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	461a      	mov	r2, r3
 8002736:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	4413      	add	r3, r2
 800273e:	881b      	ldrh	r3, [r3, #0]
 8002740:	b29b      	uxth	r3, r3
 8002742:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002746:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800274a:	81bb      	strh	r3, [r7, #12]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	461a      	mov	r2, r3
 8002752:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	441a      	add	r2, r3
 800275a:	89bb      	ldrh	r3, [r7, #12]
 800275c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002760:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002764:	b29b      	uxth	r3, r3
 8002766:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276a:	78db      	ldrb	r3, [r3, #3]
 800276c:	2b03      	cmp	r3, #3
 800276e:	d00c      	beq.n	800278a <PCD_EP_ISR_Handler+0x554>
 8002770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002772:	78db      	ldrb	r3, [r3, #3]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d008      	beq.n	800278a <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277a:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 800277c:	2b02      	cmp	r3, #2
 800277e:	d146      	bne.n	800280e <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002780:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002782:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002786:	2b00      	cmp	r3, #0
 8002788:	d141      	bne.n	800280e <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002792:	b29b      	uxth	r3, r3
 8002794:	461a      	mov	r2, r3
 8002796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	00db      	lsls	r3, r3, #3
 800279c:	4413      	add	r3, r2
 800279e:	3302      	adds	r3, #2
 80027a0:	005b      	lsls	r3, r3, #1
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	6812      	ldr	r2, [r2, #0]
 80027a6:	4413      	add	r3, r2
 80027a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80027ac:	881b      	ldrh	r3, [r3, #0]
 80027ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027b2:	817b      	strh	r3, [r7, #10]

          if (ep->xfer_len > TxByteNbre)
 80027b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b6:	699a      	ldr	r2, [r3, #24]
 80027b8:	897b      	ldrh	r3, [r7, #10]
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d906      	bls.n	80027cc <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 80027be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c0:	699a      	ldr	r2, [r3, #24]
 80027c2:	897b      	ldrh	r3, [r7, #10]
 80027c4:	1ad2      	subs	r2, r2, r3
 80027c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c8:	619a      	str	r2, [r3, #24]
 80027ca:	e002      	b.n	80027d2 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 80027cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ce:	2200      	movs	r2, #0
 80027d0:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80027d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d4:	699b      	ldr	r3, [r3, #24]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d106      	bne.n	80027e8 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80027da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	4619      	mov	r1, r3
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	f007 fffa 	bl	800a7da <HAL_PCD_DataInStageCallback>
 80027e6:	e018      	b.n	800281a <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80027e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ea:	695a      	ldr	r2, [r3, #20]
 80027ec:	897b      	ldrh	r3, [r7, #10]
 80027ee:	441a      	add	r2, r3
 80027f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f2:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80027f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f6:	69da      	ldr	r2, [r3, #28]
 80027f8:	897b      	ldrh	r3, [r7, #10]
 80027fa:	441a      	add	r2, r3
 80027fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fe:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002806:	4618      	mov	r0, r3
 8002808:	f003 fb88 	bl	8005f1c <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 800280c:	e005      	b.n	800281a <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800280e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002810:	461a      	mov	r2, r3
 8002812:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	f000 f91b 	bl	8002a50 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002822:	b29b      	uxth	r3, r3
 8002824:	b21b      	sxth	r3, r3
 8002826:	2b00      	cmp	r3, #0
 8002828:	f6ff ad0a 	blt.w	8002240 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800282c:	2300      	movs	r3, #0
}
 800282e:	4618      	mov	r0, r3
 8002830:	3738      	adds	r7, #56	; 0x38
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}

08002836 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002836:	b580      	push	{r7, lr}
 8002838:	b088      	sub	sp, #32
 800283a:	af00      	add	r7, sp, #0
 800283c:	60f8      	str	r0, [r7, #12]
 800283e:	60b9      	str	r1, [r7, #8]
 8002840:	4613      	mov	r3, r2
 8002842:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002844:	88fb      	ldrh	r3, [r7, #6]
 8002846:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d07e      	beq.n	800294c <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002856:	b29b      	uxth	r3, r3
 8002858:	461a      	mov	r2, r3
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	00db      	lsls	r3, r3, #3
 8002860:	4413      	add	r3, r2
 8002862:	3302      	adds	r3, #2
 8002864:	005b      	lsls	r3, r3, #1
 8002866:	68fa      	ldr	r2, [r7, #12]
 8002868:	6812      	ldr	r2, [r2, #0]
 800286a:	4413      	add	r3, r2
 800286c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002870:	881b      	ldrh	r3, [r3, #0]
 8002872:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002876:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= count)
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	699a      	ldr	r2, [r3, #24]
 800287c:	8bfb      	ldrh	r3, [r7, #30]
 800287e:	429a      	cmp	r2, r3
 8002880:	d306      	bcc.n	8002890 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	699a      	ldr	r2, [r3, #24]
 8002886:	8bfb      	ldrh	r3, [r7, #30]
 8002888:	1ad2      	subs	r2, r2, r3
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	619a      	str	r2, [r3, #24]
 800288e:	e002      	b.n	8002896 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	2200      	movs	r2, #0
 8002894:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	699b      	ldr	r3, [r3, #24]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d123      	bne.n	80028e6 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	461a      	mov	r2, r3
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	4413      	add	r3, r2
 80028ac:	881b      	ldrh	r3, [r3, #0]
 80028ae:	b29b      	uxth	r3, r3
 80028b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80028b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028b8:	83bb      	strh	r3, [r7, #28]
 80028ba:	8bbb      	ldrh	r3, [r7, #28]
 80028bc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80028c0:	83bb      	strh	r3, [r7, #28]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	461a      	mov	r2, r3
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	441a      	add	r2, r3
 80028d0:	8bbb      	ldrh	r3, [r7, #28]
 80028d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80028d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80028da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80028e6:	88fb      	ldrh	r3, [r7, #6]
 80028e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d01f      	beq.n	8002930 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	461a      	mov	r2, r3
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	4413      	add	r3, r2
 80028fe:	881b      	ldrh	r3, [r3, #0]
 8002900:	b29b      	uxth	r3, r3
 8002902:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002906:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800290a:	837b      	strh	r3, [r7, #26]
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	461a      	mov	r2, r3
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	441a      	add	r2, r3
 800291a:	8b7b      	ldrh	r3, [r7, #26]
 800291c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002920:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002924:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002928:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800292c:	b29b      	uxth	r3, r3
 800292e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002930:	8bfb      	ldrh	r3, [r7, #30]
 8002932:	2b00      	cmp	r3, #0
 8002934:	f000 8087 	beq.w	8002a46 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6818      	ldr	r0, [r3, #0]
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	6959      	ldr	r1, [r3, #20]
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	891a      	ldrh	r2, [r3, #8]
 8002944:	8bfb      	ldrh	r3, [r7, #30]
 8002946:	f004 ff72 	bl	800782e <USB_ReadPMA>
 800294a:	e07c      	b.n	8002a46 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002954:	b29b      	uxth	r3, r3
 8002956:	461a      	mov	r2, r3
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	00db      	lsls	r3, r3, #3
 800295e:	4413      	add	r3, r2
 8002960:	3306      	adds	r3, #6
 8002962:	005b      	lsls	r3, r3, #1
 8002964:	68fa      	ldr	r2, [r7, #12]
 8002966:	6812      	ldr	r2, [r2, #0]
 8002968:	4413      	add	r3, r2
 800296a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800296e:	881b      	ldrh	r3, [r3, #0]
 8002970:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002974:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= count)
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	699a      	ldr	r2, [r3, #24]
 800297a:	8bfb      	ldrh	r3, [r7, #30]
 800297c:	429a      	cmp	r2, r3
 800297e:	d306      	bcc.n	800298e <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	699a      	ldr	r2, [r3, #24]
 8002984:	8bfb      	ldrh	r3, [r7, #30]
 8002986:	1ad2      	subs	r2, r2, r3
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	619a      	str	r2, [r3, #24]
 800298c:	e002      	b.n	8002994 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	2200      	movs	r2, #0
 8002992:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	699b      	ldr	r3, [r3, #24]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d123      	bne.n	80029e4 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	461a      	mov	r2, r3
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	4413      	add	r3, r2
 80029aa:	881b      	ldrh	r3, [r3, #0]
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80029b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029b6:	833b      	strh	r3, [r7, #24]
 80029b8:	8b3b      	ldrh	r3, [r7, #24]
 80029ba:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80029be:	833b      	strh	r3, [r7, #24]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	461a      	mov	r2, r3
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	441a      	add	r2, r3
 80029ce:	8b3b      	ldrh	r3, [r7, #24]
 80029d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80029d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80029d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80029e4:	88fb      	ldrh	r3, [r7, #6]
 80029e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d11f      	bne.n	8002a2e <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	461a      	mov	r2, r3
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	4413      	add	r3, r2
 80029fc:	881b      	ldrh	r3, [r3, #0]
 80029fe:	b29b      	uxth	r3, r3
 8002a00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a08:	82fb      	strh	r3, [r7, #22]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	461a      	mov	r2, r3
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	441a      	add	r2, r3
 8002a18:	8afb      	ldrh	r3, [r7, #22]
 8002a1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a26:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002a2e:	8bfb      	ldrh	r3, [r7, #30]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d008      	beq.n	8002a46 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	6818      	ldr	r0, [r3, #0]
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	6959      	ldr	r1, [r3, #20]
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	895a      	ldrh	r2, [r3, #10]
 8002a40:	8bfb      	ldrh	r3, [r7, #30]
 8002a42:	f004 fef4 	bl	800782e <USB_ReadPMA>
    }
  }

  return count;
 8002a46:	8bfb      	ldrh	r3, [r7, #30]
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3720      	adds	r7, #32
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b0a4      	sub	sp, #144	; 0x90
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	60b9      	str	r1, [r7, #8]
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002a5e:	88fb      	ldrh	r3, [r7, #6]
 8002a60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	f000 81dd 	beq.w	8002e24 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	461a      	mov	r2, r3
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	781b      	ldrb	r3, [r3, #0]
 8002a7a:	00db      	lsls	r3, r3, #3
 8002a7c:	4413      	add	r3, r2
 8002a7e:	3302      	adds	r3, #2
 8002a80:	005b      	lsls	r3, r3, #1
 8002a82:	68fa      	ldr	r2, [r7, #12]
 8002a84:	6812      	ldr	r2, [r2, #0]
 8002a86:	4413      	add	r3, r2
 8002a88:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a8c:	881b      	ldrh	r3, [r3, #0]
 8002a8e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a92:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82

    if (ep->xfer_len > TxByteNbre)
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	699a      	ldr	r2, [r3, #24]
 8002a9a:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d907      	bls.n	8002ab2 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	699a      	ldr	r2, [r3, #24]
 8002aa6:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8002aaa:	1ad2      	subs	r2, r2, r3
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	619a      	str	r2, [r3, #24]
 8002ab0:	e002      	b.n	8002ab8 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	699b      	ldr	r3, [r3, #24]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	f040 80bb 	bne.w	8002c38 <HAL_PCD_EP_DB_Transmit+0x1e8>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	785b      	ldrb	r3, [r3, #1]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d126      	bne.n	8002b18 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	461a      	mov	r2, r3
 8002adc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002ade:	4413      	add	r3, r2
 8002ae0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	781b      	ldrb	r3, [r3, #0]
 8002ae6:	011a      	lsls	r2, r3, #4
 8002ae8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002aea:	4413      	add	r3, r2
 8002aec:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002af0:	67bb      	str	r3, [r7, #120]	; 0x78
 8002af2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002af4:	881b      	ldrh	r3, [r3, #0]
 8002af6:	b29b      	uxth	r3, r3
 8002af8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002afc:	b29a      	uxth	r2, r3
 8002afe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b00:	801a      	strh	r2, [r3, #0]
 8002b02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b04:	881b      	ldrh	r3, [r3, #0]
 8002b06:	b29b      	uxth	r3, r3
 8002b08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b10:	b29a      	uxth	r2, r3
 8002b12:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b14:	801a      	strh	r2, [r3, #0]
 8002b16:	e01a      	b.n	8002b4e <HAL_PCD_EP_DB_Transmit+0xfe>
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	785b      	ldrb	r3, [r3, #1]
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d116      	bne.n	8002b4e <HAL_PCD_EP_DB_Transmit+0xfe>
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	677b      	str	r3, [r7, #116]	; 0x74
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	461a      	mov	r2, r3
 8002b32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b34:	4413      	add	r3, r2
 8002b36:	677b      	str	r3, [r7, #116]	; 0x74
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	011a      	lsls	r2, r3, #4
 8002b3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b40:	4413      	add	r3, r2
 8002b42:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002b46:	673b      	str	r3, [r7, #112]	; 0x70
 8002b48:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	785b      	ldrb	r3, [r3, #1]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d126      	bne.n	8002baa <HAL_PCD_EP_DB_Transmit+0x15a>
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	66bb      	str	r3, [r7, #104]	; 0x68
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b70:	4413      	add	r3, r2
 8002b72:	66bb      	str	r3, [r7, #104]	; 0x68
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	011a      	lsls	r2, r3, #4
 8002b7a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b7c:	4413      	add	r3, r2
 8002b7e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002b82:	667b      	str	r3, [r7, #100]	; 0x64
 8002b84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b86:	881b      	ldrh	r3, [r3, #0]
 8002b88:	b29b      	uxth	r3, r3
 8002b8a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002b8e:	b29a      	uxth	r2, r3
 8002b90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b92:	801a      	strh	r2, [r3, #0]
 8002b94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b96:	881b      	ldrh	r3, [r3, #0]
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ba2:	b29a      	uxth	r2, r3
 8002ba4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ba6:	801a      	strh	r2, [r3, #0]
 8002ba8:	e017      	b.n	8002bda <HAL_PCD_EP_DB_Transmit+0x18a>
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	785b      	ldrb	r3, [r3, #1]
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d113      	bne.n	8002bda <HAL_PCD_EP_DB_Transmit+0x18a>
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bba:	b29b      	uxth	r3, r3
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bc0:	4413      	add	r3, r2
 8002bc2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	011a      	lsls	r2, r3, #4
 8002bca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bcc:	4413      	add	r3, r2
 8002bce:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002bd2:	663b      	str	r3, [r7, #96]	; 0x60
 8002bd4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	4619      	mov	r1, r3
 8002be0:	68f8      	ldr	r0, [r7, #12]
 8002be2:	f007 fdfa 	bl	800a7da <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002be6:	88fb      	ldrh	r3, [r7, #6]
 8002be8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	f000 82f1 	beq.w	80031d4 <HAL_PCD_EP_DB_Transmit+0x784>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	4413      	add	r3, r2
 8002c00:	881b      	ldrh	r3, [r3, #0]
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c0c:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	461a      	mov	r2, r3
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	441a      	add	r2, r3
 8002c1e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8002c22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c2a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	8013      	strh	r3, [r2, #0]
 8002c36:	e2cd      	b.n	80031d4 <HAL_PCD_EP_DB_Transmit+0x784>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002c38:	88fb      	ldrh	r3, [r7, #6]
 8002c3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d021      	beq.n	8002c86 <HAL_PCD_EP_DB_Transmit+0x236>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	461a      	mov	r2, r3
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	4413      	add	r3, r2
 8002c50:	881b      	ldrh	r3, [r3, #0]
 8002c52:	b29b      	uxth	r3, r3
 8002c54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c5c:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	461a      	mov	r2, r3
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	781b      	ldrb	r3, [r3, #0]
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	441a      	add	r2, r3
 8002c6e:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8002c72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c7a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c82:	b29b      	uxth	r3, r3
 8002c84:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	f040 82a1 	bne.w	80031d4 <HAL_PCD_EP_DB_Transmit+0x784>
      {
        ep->xfer_buff += TxByteNbre;
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	695a      	ldr	r2, [r3, #20]
 8002c96:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8002c9a:	441a      	add	r2, r3
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	69da      	ldr	r2, [r3, #28]
 8002ca4:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8002ca8:	441a      	add	r2, r3
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	6a1a      	ldr	r2, [r3, #32]
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	691b      	ldr	r3, [r3, #16]
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d30b      	bcc.n	8002cd2 <HAL_PCD_EP_DB_Transmit+0x282>
        {
          len = ep->maxpacket;
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	691b      	ldr	r3, [r3, #16]
 8002cbe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	6a1a      	ldr	r2, [r3, #32]
 8002cc6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002cca:	1ad2      	subs	r2, r2, r3
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	621a      	str	r2, [r3, #32]
 8002cd0:	e017      	b.n	8002d02 <HAL_PCD_EP_DB_Transmit+0x2b2>
        }
        else if (ep->xfer_len_db == 0U)
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	6a1b      	ldr	r3, [r3, #32]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d108      	bne.n	8002cec <HAL_PCD_EP_DB_Transmit+0x29c>
        {
          len = TxByteNbre;
 8002cda:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8002cde:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002cea:	e00a      	b.n	8002d02 <HAL_PCD_EP_DB_Transmit+0x2b2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	6a1b      	ldr	r3, [r3, #32]
 8002cf8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	785b      	ldrb	r3, [r3, #1]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d163      	bne.n	8002dd2 <HAL_PCD_EP_DB_Transmit+0x382>
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	65bb      	str	r3, [r7, #88]	; 0x58
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d1e:	4413      	add	r3, r2
 8002d20:	65bb      	str	r3, [r7, #88]	; 0x58
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	781b      	ldrb	r3, [r3, #0]
 8002d26:	011a      	lsls	r2, r3, #4
 8002d28:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d2a:	4413      	add	r3, r2
 8002d2c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002d30:	657b      	str	r3, [r7, #84]	; 0x54
 8002d32:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d112      	bne.n	8002d60 <HAL_PCD_EP_DB_Transmit+0x310>
 8002d3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d3c:	881b      	ldrh	r3, [r3, #0]
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002d44:	b29a      	uxth	r2, r3
 8002d46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d48:	801a      	strh	r2, [r3, #0]
 8002d4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d4c:	881b      	ldrh	r3, [r3, #0]
 8002d4e:	b29b      	uxth	r3, r3
 8002d50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d58:	b29a      	uxth	r2, r3
 8002d5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d5c:	801a      	strh	r2, [r3, #0]
 8002d5e:	e055      	b.n	8002e0c <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002d60:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d64:	2b3e      	cmp	r3, #62	; 0x3e
 8002d66:	d817      	bhi.n	8002d98 <HAL_PCD_EP_DB_Transmit+0x348>
 8002d68:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d6c:	085b      	lsrs	r3, r3, #1
 8002d6e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002d72:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d76:	f003 0301 	and.w	r3, r3, #1
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d004      	beq.n	8002d88 <HAL_PCD_EP_DB_Transmit+0x338>
 8002d7e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d82:	3301      	adds	r3, #1
 8002d84:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002d88:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d8c:	b29b      	uxth	r3, r3
 8002d8e:	029b      	lsls	r3, r3, #10
 8002d90:	b29a      	uxth	r2, r3
 8002d92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d94:	801a      	strh	r2, [r3, #0]
 8002d96:	e039      	b.n	8002e0c <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002d98:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d9c:	095b      	lsrs	r3, r3, #5
 8002d9e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002da2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002da6:	f003 031f 	and.w	r3, r3, #31
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d104      	bne.n	8002db8 <HAL_PCD_EP_DB_Transmit+0x368>
 8002dae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002db2:	3b01      	subs	r3, #1
 8002db4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002db8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002dbc:	b29b      	uxth	r3, r3
 8002dbe:	029b      	lsls	r3, r3, #10
 8002dc0:	b29b      	uxth	r3, r3
 8002dc2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002dc6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002dca:	b29a      	uxth	r2, r3
 8002dcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002dce:	801a      	strh	r2, [r3, #0]
 8002dd0:	e01c      	b.n	8002e0c <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	785b      	ldrb	r3, [r3, #1]
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d118      	bne.n	8002e0c <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	653b      	str	r3, [r7, #80]	; 0x50
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	461a      	mov	r2, r3
 8002dec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002dee:	4413      	add	r3, r2
 8002df0:	653b      	str	r3, [r7, #80]	; 0x50
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	781b      	ldrb	r3, [r3, #0]
 8002df6:	011a      	lsls	r2, r3, #4
 8002df8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002dfa:	4413      	add	r3, r2
 8002dfc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002e00:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e02:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e06:	b29a      	uxth	r2, r3
 8002e08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e0a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	6818      	ldr	r0, [r3, #0]
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	6959      	ldr	r1, [r3, #20]
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	891a      	ldrh	r2, [r3, #8]
 8002e18:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	f004 fcc2 	bl	80077a6 <USB_WritePMA>
 8002e22:	e1d7      	b.n	80031d4 <HAL_PCD_EP_DB_Transmit+0x784>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	461a      	mov	r2, r3
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	781b      	ldrb	r3, [r3, #0]
 8002e34:	00db      	lsls	r3, r3, #3
 8002e36:	4413      	add	r3, r2
 8002e38:	3306      	adds	r3, #6
 8002e3a:	005b      	lsls	r3, r3, #1
 8002e3c:	68fa      	ldr	r2, [r7, #12]
 8002e3e:	6812      	ldr	r2, [r2, #0]
 8002e40:	4413      	add	r3, r2
 8002e42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e46:	881b      	ldrh	r3, [r3, #0]
 8002e48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e4c:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82

    if (ep->xfer_len >= TxByteNbre)
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	699a      	ldr	r2, [r3, #24]
 8002e54:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d307      	bcc.n	8002e6c <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxByteNbre;
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	699a      	ldr	r2, [r3, #24]
 8002e60:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8002e64:	1ad2      	subs	r2, r2, r3
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	619a      	str	r2, [r3, #24]
 8002e6a:	e002      	b.n	8002e72 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	699b      	ldr	r3, [r3, #24]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	f040 80b9 	bne.w	8002fee <HAL_PCD_EP_DB_Transmit+0x59e>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	785b      	ldrb	r3, [r3, #1]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d126      	bne.n	8002ed2 <HAL_PCD_EP_DB_Transmit+0x482>
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	64bb      	str	r3, [r7, #72]	; 0x48
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e92:	b29b      	uxth	r3, r3
 8002e94:	461a      	mov	r2, r3
 8002e96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e98:	4413      	add	r3, r2
 8002e9a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	011a      	lsls	r2, r3, #4
 8002ea2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ea4:	4413      	add	r3, r2
 8002ea6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002eaa:	647b      	str	r3, [r7, #68]	; 0x44
 8002eac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002eae:	881b      	ldrh	r3, [r3, #0]
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002eb6:	b29a      	uxth	r2, r3
 8002eb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002eba:	801a      	strh	r2, [r3, #0]
 8002ebc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ebe:	881b      	ldrh	r3, [r3, #0]
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ec6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002eca:	b29a      	uxth	r2, r3
 8002ecc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ece:	801a      	strh	r2, [r3, #0]
 8002ed0:	e01a      	b.n	8002f08 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	785b      	ldrb	r3, [r3, #1]
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d116      	bne.n	8002f08 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	643b      	str	r3, [r7, #64]	; 0x40
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ee8:	b29b      	uxth	r3, r3
 8002eea:	461a      	mov	r2, r3
 8002eec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002eee:	4413      	add	r3, r2
 8002ef0:	643b      	str	r3, [r7, #64]	; 0x40
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	781b      	ldrb	r3, [r3, #0]
 8002ef6:	011a      	lsls	r2, r3, #4
 8002ef8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002efa:	4413      	add	r3, r2
 8002efc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002f00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f04:	2200      	movs	r2, #0
 8002f06:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	785b      	ldrb	r3, [r3, #1]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d126      	bne.n	8002f64 <HAL_PCD_EP_DB_Transmit+0x514>
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	637b      	str	r3, [r7, #52]	; 0x34
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f24:	b29b      	uxth	r3, r3
 8002f26:	461a      	mov	r2, r3
 8002f28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f2a:	4413      	add	r3, r2
 8002f2c:	637b      	str	r3, [r7, #52]	; 0x34
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	781b      	ldrb	r3, [r3, #0]
 8002f32:	011a      	lsls	r2, r3, #4
 8002f34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f36:	4413      	add	r3, r2
 8002f38:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002f3c:	633b      	str	r3, [r7, #48]	; 0x30
 8002f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f40:	881b      	ldrh	r3, [r3, #0]
 8002f42:	b29b      	uxth	r3, r3
 8002f44:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002f48:	b29a      	uxth	r2, r3
 8002f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f4c:	801a      	strh	r2, [r3, #0]
 8002f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f50:	881b      	ldrh	r3, [r3, #0]
 8002f52:	b29b      	uxth	r3, r3
 8002f54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f5c:	b29a      	uxth	r2, r3
 8002f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f60:	801a      	strh	r2, [r3, #0]
 8002f62:	e017      	b.n	8002f94 <HAL_PCD_EP_DB_Transmit+0x544>
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	785b      	ldrb	r3, [r3, #1]
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d113      	bne.n	8002f94 <HAL_PCD_EP_DB_Transmit+0x544>
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	461a      	mov	r2, r3
 8002f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f7a:	4413      	add	r3, r2
 8002f7c:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	781b      	ldrb	r3, [r3, #0]
 8002f82:	011a      	lsls	r2, r3, #4
 8002f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f86:	4413      	add	r3, r2
 8002f88:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f90:	2200      	movs	r2, #0
 8002f92:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	781b      	ldrb	r3, [r3, #0]
 8002f98:	4619      	mov	r1, r3
 8002f9a:	68f8      	ldr	r0, [r7, #12]
 8002f9c:	f007 fc1d 	bl	800a7da <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002fa0:	88fb      	ldrh	r3, [r7, #6]
 8002fa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	f040 8114 	bne.w	80031d4 <HAL_PCD_EP_DB_Transmit+0x784>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	781b      	ldrb	r3, [r3, #0]
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	4413      	add	r3, r2
 8002fba:	881b      	ldrh	r3, [r3, #0]
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fc6:	857b      	strh	r3, [r7, #42]	; 0x2a
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	461a      	mov	r2, r3
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	441a      	add	r2, r3
 8002fd6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002fd8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002fdc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002fe0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002fe4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	8013      	strh	r3, [r2, #0]
 8002fec:	e0f2      	b.n	80031d4 <HAL_PCD_EP_DB_Transmit+0x784>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002fee:	88fb      	ldrh	r3, [r7, #6]
 8002ff0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d11f      	bne.n	8003038 <HAL_PCD_EP_DB_Transmit+0x5e8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	4413      	add	r3, r2
 8003006:	881b      	ldrh	r3, [r3, #0]
 8003008:	b29b      	uxth	r3, r3
 800300a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800300e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003012:	853b      	strh	r3, [r7, #40]	; 0x28
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	461a      	mov	r2, r3
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	781b      	ldrb	r3, [r3, #0]
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	441a      	add	r2, r3
 8003022:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003024:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003028:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800302c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003030:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003034:	b29b      	uxth	r3, r3
 8003036:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800303e:	2b01      	cmp	r3, #1
 8003040:	f040 80c8 	bne.w	80031d4 <HAL_PCD_EP_DB_Transmit+0x784>
      {
        ep->xfer_buff += TxByteNbre;
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	695a      	ldr	r2, [r3, #20]
 8003048:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800304c:	441a      	add	r2, r3
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	69da      	ldr	r2, [r3, #28]
 8003056:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800305a:	441a      	add	r2, r3
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	6a1a      	ldr	r2, [r3, #32]
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	691b      	ldr	r3, [r3, #16]
 8003068:	429a      	cmp	r2, r3
 800306a:	d30b      	bcc.n	8003084 <HAL_PCD_EP_DB_Transmit+0x634>
        {
          len = ep->maxpacket;
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	691b      	ldr	r3, [r3, #16]
 8003070:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	6a1a      	ldr	r2, [r3, #32]
 8003078:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800307c:	1ad2      	subs	r2, r2, r3
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	621a      	str	r2, [r3, #32]
 8003082:	e017      	b.n	80030b4 <HAL_PCD_EP_DB_Transmit+0x664>
        }
        else if (ep->xfer_len_db == 0U)
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	6a1b      	ldr	r3, [r3, #32]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d108      	bne.n	800309e <HAL_PCD_EP_DB_Transmit+0x64e>
        {
          len = TxByteNbre;
 800308c:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8003090:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	2200      	movs	r2, #0
 8003098:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800309c:	e00a      	b.n	80030b4 <HAL_PCD_EP_DB_Transmit+0x664>
        }
        else
        {
          len = ep->xfer_len_db;
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	6a1b      	ldr	r3, [r3, #32]
 80030a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	2200      	movs	r2, #0
 80030aa:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	2200      	movs	r2, #0
 80030b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	627b      	str	r3, [r7, #36]	; 0x24
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	785b      	ldrb	r3, [r3, #1]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d163      	bne.n	800318a <HAL_PCD_EP_DB_Transmit+0x73a>
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	623b      	str	r3, [r7, #32]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	461a      	mov	r2, r3
 80030d4:	6a3b      	ldr	r3, [r7, #32]
 80030d6:	4413      	add	r3, r2
 80030d8:	623b      	str	r3, [r7, #32]
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	011a      	lsls	r2, r3, #4
 80030e0:	6a3b      	ldr	r3, [r7, #32]
 80030e2:	4413      	add	r3, r2
 80030e4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80030e8:	61fb      	str	r3, [r7, #28]
 80030ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d112      	bne.n	8003118 <HAL_PCD_EP_DB_Transmit+0x6c8>
 80030f2:	69fb      	ldr	r3, [r7, #28]
 80030f4:	881b      	ldrh	r3, [r3, #0]
 80030f6:	b29b      	uxth	r3, r3
 80030f8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80030fc:	b29a      	uxth	r2, r3
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	801a      	strh	r2, [r3, #0]
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	881b      	ldrh	r3, [r3, #0]
 8003106:	b29b      	uxth	r3, r3
 8003108:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800310c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003110:	b29a      	uxth	r2, r3
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	801a      	strh	r2, [r3, #0]
 8003116:	e052      	b.n	80031be <HAL_PCD_EP_DB_Transmit+0x76e>
 8003118:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800311c:	2b3e      	cmp	r3, #62	; 0x3e
 800311e:	d817      	bhi.n	8003150 <HAL_PCD_EP_DB_Transmit+0x700>
 8003120:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003124:	085b      	lsrs	r3, r3, #1
 8003126:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800312a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800312e:	f003 0301 	and.w	r3, r3, #1
 8003132:	2b00      	cmp	r3, #0
 8003134:	d004      	beq.n	8003140 <HAL_PCD_EP_DB_Transmit+0x6f0>
 8003136:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800313a:	3301      	adds	r3, #1
 800313c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003140:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003144:	b29b      	uxth	r3, r3
 8003146:	029b      	lsls	r3, r3, #10
 8003148:	b29a      	uxth	r2, r3
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	801a      	strh	r2, [r3, #0]
 800314e:	e036      	b.n	80031be <HAL_PCD_EP_DB_Transmit+0x76e>
 8003150:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003154:	095b      	lsrs	r3, r3, #5
 8003156:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800315a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800315e:	f003 031f 	and.w	r3, r3, #31
 8003162:	2b00      	cmp	r3, #0
 8003164:	d104      	bne.n	8003170 <HAL_PCD_EP_DB_Transmit+0x720>
 8003166:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800316a:	3b01      	subs	r3, #1
 800316c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003170:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003174:	b29b      	uxth	r3, r3
 8003176:	029b      	lsls	r3, r3, #10
 8003178:	b29b      	uxth	r3, r3
 800317a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800317e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003182:	b29a      	uxth	r2, r3
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	801a      	strh	r2, [r3, #0]
 8003188:	e019      	b.n	80031be <HAL_PCD_EP_DB_Transmit+0x76e>
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	785b      	ldrb	r3, [r3, #1]
 800318e:	2b01      	cmp	r3, #1
 8003190:	d115      	bne.n	80031be <HAL_PCD_EP_DB_Transmit+0x76e>
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800319a:	b29b      	uxth	r3, r3
 800319c:	461a      	mov	r2, r3
 800319e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a0:	4413      	add	r3, r2
 80031a2:	627b      	str	r3, [r7, #36]	; 0x24
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	011a      	lsls	r2, r3, #4
 80031aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ac:	4413      	add	r3, r2
 80031ae:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80031b2:	61bb      	str	r3, [r7, #24]
 80031b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80031b8:	b29a      	uxth	r2, r3
 80031ba:	69bb      	ldr	r3, [r7, #24]
 80031bc:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	6818      	ldr	r0, [r3, #0]
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	6959      	ldr	r1, [r3, #20]
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	895a      	ldrh	r2, [r3, #10]
 80031ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80031ce:	b29b      	uxth	r3, r3
 80031d0:	f004 fae9 	bl	80077a6 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	461a      	mov	r2, r3
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	4413      	add	r3, r2
 80031e2:	881b      	ldrh	r3, [r3, #0]
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031ee:	82fb      	strh	r3, [r7, #22]
 80031f0:	8afb      	ldrh	r3, [r7, #22]
 80031f2:	f083 0310 	eor.w	r3, r3, #16
 80031f6:	82fb      	strh	r3, [r7, #22]
 80031f8:	8afb      	ldrh	r3, [r7, #22]
 80031fa:	f083 0320 	eor.w	r3, r3, #32
 80031fe:	82fb      	strh	r3, [r7, #22]
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	461a      	mov	r2, r3
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	781b      	ldrb	r3, [r3, #0]
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	441a      	add	r2, r3
 800320e:	8afb      	ldrh	r3, [r7, #22]
 8003210:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003214:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003218:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800321c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003220:	b29b      	uxth	r3, r3
 8003222:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003224:	2300      	movs	r3, #0
}
 8003226:	4618      	mov	r0, r3
 8003228:	3790      	adds	r7, #144	; 0x90
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}

0800322e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800322e:	b480      	push	{r7}
 8003230:	b087      	sub	sp, #28
 8003232:	af00      	add	r7, sp, #0
 8003234:	60f8      	str	r0, [r7, #12]
 8003236:	607b      	str	r3, [r7, #4]
 8003238:	460b      	mov	r3, r1
 800323a:	817b      	strh	r3, [r7, #10]
 800323c:	4613      	mov	r3, r2
 800323e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003240:	897b      	ldrh	r3, [r7, #10]
 8003242:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003246:	b29b      	uxth	r3, r3
 8003248:	2b00      	cmp	r3, #0
 800324a:	d00b      	beq.n	8003264 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800324c:	897b      	ldrh	r3, [r7, #10]
 800324e:	f003 0307 	and.w	r3, r3, #7
 8003252:	1c5a      	adds	r2, r3, #1
 8003254:	4613      	mov	r3, r2
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	4413      	add	r3, r2
 800325a:	00db      	lsls	r3, r3, #3
 800325c:	68fa      	ldr	r2, [r7, #12]
 800325e:	4413      	add	r3, r2
 8003260:	617b      	str	r3, [r7, #20]
 8003262:	e009      	b.n	8003278 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003264:	897a      	ldrh	r2, [r7, #10]
 8003266:	4613      	mov	r3, r2
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	4413      	add	r3, r2
 800326c:	00db      	lsls	r3, r3, #3
 800326e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003272:	68fa      	ldr	r2, [r7, #12]
 8003274:	4413      	add	r3, r2
 8003276:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003278:	893b      	ldrh	r3, [r7, #8]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d107      	bne.n	800328e <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	2200      	movs	r2, #0
 8003282:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	b29a      	uxth	r2, r3
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	80da      	strh	r2, [r3, #6]
 800328c:	e00b      	b.n	80032a6 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	2201      	movs	r2, #1
 8003292:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	b29a      	uxth	r2, r3
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	0c1b      	lsrs	r3, r3, #16
 80032a0:	b29a      	uxth	r2, r3
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80032a6:	2300      	movs	r3, #0
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	371c      	adds	r7, #28
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bc80      	pop	{r7}
 80032b0:	4770      	bx	lr
	...

080032b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b086      	sub	sp, #24
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d101      	bne.n	80032c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e35c      	b.n	8003980 <HAL_RCC_OscConfig+0x6cc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d01c      	beq.n	8003308 <HAL_RCC_OscConfig+0x54>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 0301 	and.w	r3, r3, #1
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d116      	bne.n	8003308 <HAL_RCC_OscConfig+0x54>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0302 	and.w	r3, r3, #2
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d110      	bne.n	8003308 <HAL_RCC_OscConfig+0x54>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0308 	and.w	r3, r3, #8
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d10a      	bne.n	8003308 <HAL_RCC_OscConfig+0x54>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0304 	and.w	r3, r3, #4
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d104      	bne.n	8003308 <HAL_RCC_OscConfig+0x54>
 80032fe:	f240 1167 	movw	r1, #359	; 0x167
 8003302:	48a5      	ldr	r0, [pc, #660]	; (8003598 <HAL_RCC_OscConfig+0x2e4>)
 8003304:	f7fd f93c 	bl	8000580 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 0301 	and.w	r3, r3, #1
 8003310:	2b00      	cmp	r3, #0
 8003312:	f000 809a 	beq.w	800344a <HAL_RCC_OscConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d00e      	beq.n	800333c <HAL_RCC_OscConfig+0x88>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003326:	d009      	beq.n	800333c <HAL_RCC_OscConfig+0x88>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003330:	d004      	beq.n	800333c <HAL_RCC_OscConfig+0x88>
 8003332:	f240 116d 	movw	r1, #365	; 0x16d
 8003336:	4898      	ldr	r0, [pc, #608]	; (8003598 <HAL_RCC_OscConfig+0x2e4>)
 8003338:	f7fd f922 	bl	8000580 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800333c:	4b97      	ldr	r3, [pc, #604]	; (800359c <HAL_RCC_OscConfig+0x2e8>)
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	f003 030c 	and.w	r3, r3, #12
 8003344:	2b04      	cmp	r3, #4
 8003346:	d00c      	beq.n	8003362 <HAL_RCC_OscConfig+0xae>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003348:	4b94      	ldr	r3, [pc, #592]	; (800359c <HAL_RCC_OscConfig+0x2e8>)
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	f003 030c 	and.w	r3, r3, #12
 8003350:	2b08      	cmp	r3, #8
 8003352:	d112      	bne.n	800337a <HAL_RCC_OscConfig+0xc6>
 8003354:	4b91      	ldr	r3, [pc, #580]	; (800359c <HAL_RCC_OscConfig+0x2e8>)
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800335c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003360:	d10b      	bne.n	800337a <HAL_RCC_OscConfig+0xc6>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003362:	4b8e      	ldr	r3, [pc, #568]	; (800359c <HAL_RCC_OscConfig+0x2e8>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d06c      	beq.n	8003448 <HAL_RCC_OscConfig+0x194>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d168      	bne.n	8003448 <HAL_RCC_OscConfig+0x194>
      {
        return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e302      	b.n	8003980 <HAL_RCC_OscConfig+0x6cc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003382:	d106      	bne.n	8003392 <HAL_RCC_OscConfig+0xde>
 8003384:	4a85      	ldr	r2, [pc, #532]	; (800359c <HAL_RCC_OscConfig+0x2e8>)
 8003386:	4b85      	ldr	r3, [pc, #532]	; (800359c <HAL_RCC_OscConfig+0x2e8>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800338e:	6013      	str	r3, [r2, #0]
 8003390:	e02e      	b.n	80033f0 <HAL_RCC_OscConfig+0x13c>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d10c      	bne.n	80033b4 <HAL_RCC_OscConfig+0x100>
 800339a:	4a80      	ldr	r2, [pc, #512]	; (800359c <HAL_RCC_OscConfig+0x2e8>)
 800339c:	4b7f      	ldr	r3, [pc, #508]	; (800359c <HAL_RCC_OscConfig+0x2e8>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033a4:	6013      	str	r3, [r2, #0]
 80033a6:	4a7d      	ldr	r2, [pc, #500]	; (800359c <HAL_RCC_OscConfig+0x2e8>)
 80033a8:	4b7c      	ldr	r3, [pc, #496]	; (800359c <HAL_RCC_OscConfig+0x2e8>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033b0:	6013      	str	r3, [r2, #0]
 80033b2:	e01d      	b.n	80033f0 <HAL_RCC_OscConfig+0x13c>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033bc:	d10c      	bne.n	80033d8 <HAL_RCC_OscConfig+0x124>
 80033be:	4a77      	ldr	r2, [pc, #476]	; (800359c <HAL_RCC_OscConfig+0x2e8>)
 80033c0:	4b76      	ldr	r3, [pc, #472]	; (800359c <HAL_RCC_OscConfig+0x2e8>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033c8:	6013      	str	r3, [r2, #0]
 80033ca:	4a74      	ldr	r2, [pc, #464]	; (800359c <HAL_RCC_OscConfig+0x2e8>)
 80033cc:	4b73      	ldr	r3, [pc, #460]	; (800359c <HAL_RCC_OscConfig+0x2e8>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033d4:	6013      	str	r3, [r2, #0]
 80033d6:	e00b      	b.n	80033f0 <HAL_RCC_OscConfig+0x13c>
 80033d8:	4a70      	ldr	r2, [pc, #448]	; (800359c <HAL_RCC_OscConfig+0x2e8>)
 80033da:	4b70      	ldr	r3, [pc, #448]	; (800359c <HAL_RCC_OscConfig+0x2e8>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033e2:	6013      	str	r3, [r2, #0]
 80033e4:	4a6d      	ldr	r2, [pc, #436]	; (800359c <HAL_RCC_OscConfig+0x2e8>)
 80033e6:	4b6d      	ldr	r3, [pc, #436]	; (800359c <HAL_RCC_OscConfig+0x2e8>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033ee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d013      	beq.n	8003420 <HAL_RCC_OscConfig+0x16c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033f8:	f7fd fb86 	bl	8000b08 <HAL_GetTick>
 80033fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033fe:	e008      	b.n	8003412 <HAL_RCC_OscConfig+0x15e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003400:	f7fd fb82 	bl	8000b08 <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	2b64      	cmp	r3, #100	; 0x64
 800340c:	d901      	bls.n	8003412 <HAL_RCC_OscConfig+0x15e>
          {
            return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e2b6      	b.n	8003980 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003412:	4b62      	ldr	r3, [pc, #392]	; (800359c <HAL_RCC_OscConfig+0x2e8>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d0f0      	beq.n	8003400 <HAL_RCC_OscConfig+0x14c>
 800341e:	e014      	b.n	800344a <HAL_RCC_OscConfig+0x196>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003420:	f7fd fb72 	bl	8000b08 <HAL_GetTick>
 8003424:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003426:	e008      	b.n	800343a <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003428:	f7fd fb6e 	bl	8000b08 <HAL_GetTick>
 800342c:	4602      	mov	r2, r0
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	2b64      	cmp	r3, #100	; 0x64
 8003434:	d901      	bls.n	800343a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e2a2      	b.n	8003980 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800343a:	4b58      	ldr	r3, [pc, #352]	; (800359c <HAL_RCC_OscConfig+0x2e8>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d1f0      	bne.n	8003428 <HAL_RCC_OscConfig+0x174>
 8003446:	e000      	b.n	800344a <HAL_RCC_OscConfig+0x196>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003448:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0302 	and.w	r3, r3, #2
 8003452:	2b00      	cmp	r3, #0
 8003454:	d079      	beq.n	800354a <HAL_RCC_OscConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	691b      	ldr	r3, [r3, #16]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d008      	beq.n	8003470 <HAL_RCC_OscConfig+0x1bc>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	691b      	ldr	r3, [r3, #16]
 8003462:	2b01      	cmp	r3, #1
 8003464:	d004      	beq.n	8003470 <HAL_RCC_OscConfig+0x1bc>
 8003466:	f240 11a1 	movw	r1, #417	; 0x1a1
 800346a:	484b      	ldr	r0, [pc, #300]	; (8003598 <HAL_RCC_OscConfig+0x2e4>)
 800346c:	f7fd f888 	bl	8000580 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	695b      	ldr	r3, [r3, #20]
 8003474:	2b1f      	cmp	r3, #31
 8003476:	d904      	bls.n	8003482 <HAL_RCC_OscConfig+0x1ce>
 8003478:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 800347c:	4846      	ldr	r0, [pc, #280]	; (8003598 <HAL_RCC_OscConfig+0x2e4>)
 800347e:	f7fd f87f 	bl	8000580 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003482:	4b46      	ldr	r3, [pc, #280]	; (800359c <HAL_RCC_OscConfig+0x2e8>)
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	f003 030c 	and.w	r3, r3, #12
 800348a:	2b00      	cmp	r3, #0
 800348c:	d00b      	beq.n	80034a6 <HAL_RCC_OscConfig+0x1f2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800348e:	4b43      	ldr	r3, [pc, #268]	; (800359c <HAL_RCC_OscConfig+0x2e8>)
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	f003 030c 	and.w	r3, r3, #12
 8003496:	2b08      	cmp	r3, #8
 8003498:	d11c      	bne.n	80034d4 <HAL_RCC_OscConfig+0x220>
 800349a:	4b40      	ldr	r3, [pc, #256]	; (800359c <HAL_RCC_OscConfig+0x2e8>)
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d116      	bne.n	80034d4 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034a6:	4b3d      	ldr	r3, [pc, #244]	; (800359c <HAL_RCC_OscConfig+0x2e8>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0302 	and.w	r3, r3, #2
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d005      	beq.n	80034be <HAL_RCC_OscConfig+0x20a>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	691b      	ldr	r3, [r3, #16]
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d001      	beq.n	80034be <HAL_RCC_OscConfig+0x20a>
      {
        return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e260      	b.n	8003980 <HAL_RCC_OscConfig+0x6cc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034be:	4937      	ldr	r1, [pc, #220]	; (800359c <HAL_RCC_OscConfig+0x2e8>)
 80034c0:	4b36      	ldr	r3, [pc, #216]	; (800359c <HAL_RCC_OscConfig+0x2e8>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	695b      	ldr	r3, [r3, #20]
 80034cc:	00db      	lsls	r3, r3, #3
 80034ce:	4313      	orrs	r3, r2
 80034d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034d2:	e03a      	b.n	800354a <HAL_RCC_OscConfig+0x296>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	691b      	ldr	r3, [r3, #16]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d020      	beq.n	800351e <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034dc:	4b30      	ldr	r3, [pc, #192]	; (80035a0 <HAL_RCC_OscConfig+0x2ec>)
 80034de:	2201      	movs	r2, #1
 80034e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034e2:	f7fd fb11 	bl	8000b08 <HAL_GetTick>
 80034e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034e8:	e008      	b.n	80034fc <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034ea:	f7fd fb0d 	bl	8000b08 <HAL_GetTick>
 80034ee:	4602      	mov	r2, r0
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	1ad3      	subs	r3, r2, r3
 80034f4:	2b02      	cmp	r3, #2
 80034f6:	d901      	bls.n	80034fc <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80034f8:	2303      	movs	r3, #3
 80034fa:	e241      	b.n	8003980 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034fc:	4b27      	ldr	r3, [pc, #156]	; (800359c <HAL_RCC_OscConfig+0x2e8>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 0302 	and.w	r3, r3, #2
 8003504:	2b00      	cmp	r3, #0
 8003506:	d0f0      	beq.n	80034ea <HAL_RCC_OscConfig+0x236>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003508:	4924      	ldr	r1, [pc, #144]	; (800359c <HAL_RCC_OscConfig+0x2e8>)
 800350a:	4b24      	ldr	r3, [pc, #144]	; (800359c <HAL_RCC_OscConfig+0x2e8>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	695b      	ldr	r3, [r3, #20]
 8003516:	00db      	lsls	r3, r3, #3
 8003518:	4313      	orrs	r3, r2
 800351a:	600b      	str	r3, [r1, #0]
 800351c:	e015      	b.n	800354a <HAL_RCC_OscConfig+0x296>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800351e:	4b20      	ldr	r3, [pc, #128]	; (80035a0 <HAL_RCC_OscConfig+0x2ec>)
 8003520:	2200      	movs	r2, #0
 8003522:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003524:	f7fd faf0 	bl	8000b08 <HAL_GetTick>
 8003528:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800352a:	e008      	b.n	800353e <HAL_RCC_OscConfig+0x28a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800352c:	f7fd faec 	bl	8000b08 <HAL_GetTick>
 8003530:	4602      	mov	r2, r0
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	2b02      	cmp	r3, #2
 8003538:	d901      	bls.n	800353e <HAL_RCC_OscConfig+0x28a>
          {
            return HAL_TIMEOUT;
 800353a:	2303      	movs	r3, #3
 800353c:	e220      	b.n	8003980 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800353e:	4b17      	ldr	r3, [pc, #92]	; (800359c <HAL_RCC_OscConfig+0x2e8>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 0302 	and.w	r3, r3, #2
 8003546:	2b00      	cmp	r3, #0
 8003548:	d1f0      	bne.n	800352c <HAL_RCC_OscConfig+0x278>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0308 	and.w	r3, r3, #8
 8003552:	2b00      	cmp	r3, #0
 8003554:	d048      	beq.n	80035e8 <HAL_RCC_OscConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	699b      	ldr	r3, [r3, #24]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d008      	beq.n	8003570 <HAL_RCC_OscConfig+0x2bc>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	699b      	ldr	r3, [r3, #24]
 8003562:	2b01      	cmp	r3, #1
 8003564:	d004      	beq.n	8003570 <HAL_RCC_OscConfig+0x2bc>
 8003566:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 800356a:	480b      	ldr	r0, [pc, #44]	; (8003598 <HAL_RCC_OscConfig+0x2e4>)
 800356c:	f7fd f808 	bl	8000580 <assert_failed>

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	699b      	ldr	r3, [r3, #24]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d021      	beq.n	80035bc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003578:	4b0a      	ldr	r3, [pc, #40]	; (80035a4 <HAL_RCC_OscConfig+0x2f0>)
 800357a:	2201      	movs	r2, #1
 800357c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800357e:	f7fd fac3 	bl	8000b08 <HAL_GetTick>
 8003582:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003584:	e010      	b.n	80035a8 <HAL_RCC_OscConfig+0x2f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003586:	f7fd fabf 	bl	8000b08 <HAL_GetTick>
 800358a:	4602      	mov	r2, r0
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	1ad3      	subs	r3, r2, r3
 8003590:	2b02      	cmp	r3, #2
 8003592:	d909      	bls.n	80035a8 <HAL_RCC_OscConfig+0x2f4>
        {
          return HAL_TIMEOUT;
 8003594:	2303      	movs	r3, #3
 8003596:	e1f3      	b.n	8003980 <HAL_RCC_OscConfig+0x6cc>
 8003598:	0800b37c 	.word	0x0800b37c
 800359c:	40021000 	.word	0x40021000
 80035a0:	42420000 	.word	0x42420000
 80035a4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035a8:	4b67      	ldr	r3, [pc, #412]	; (8003748 <HAL_RCC_OscConfig+0x494>)
 80035aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ac:	f003 0302 	and.w	r3, r3, #2
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d0e8      	beq.n	8003586 <HAL_RCC_OscConfig+0x2d2>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80035b4:	2001      	movs	r0, #1
 80035b6:	f000 fc53 	bl	8003e60 <RCC_Delay>
 80035ba:	e015      	b.n	80035e8 <HAL_RCC_OscConfig+0x334>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035bc:	4b63      	ldr	r3, [pc, #396]	; (800374c <HAL_RCC_OscConfig+0x498>)
 80035be:	2200      	movs	r2, #0
 80035c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035c2:	f7fd faa1 	bl	8000b08 <HAL_GetTick>
 80035c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035c8:	e008      	b.n	80035dc <HAL_RCC_OscConfig+0x328>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035ca:	f7fd fa9d 	bl	8000b08 <HAL_GetTick>
 80035ce:	4602      	mov	r2, r0
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	1ad3      	subs	r3, r2, r3
 80035d4:	2b02      	cmp	r3, #2
 80035d6:	d901      	bls.n	80035dc <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 80035d8:	2303      	movs	r3, #3
 80035da:	e1d1      	b.n	8003980 <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035dc:	4b5a      	ldr	r3, [pc, #360]	; (8003748 <HAL_RCC_OscConfig+0x494>)
 80035de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e0:	f003 0302 	and.w	r3, r3, #2
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d1f0      	bne.n	80035ca <HAL_RCC_OscConfig+0x316>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 0304 	and.w	r3, r3, #4
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	f000 80c0 	beq.w	8003776 <HAL_RCC_OscConfig+0x4c2>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035f6:	2300      	movs	r3, #0
 80035f8:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	68db      	ldr	r3, [r3, #12]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d00c      	beq.n	800361c <HAL_RCC_OscConfig+0x368>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	2b01      	cmp	r3, #1
 8003608:	d008      	beq.n	800361c <HAL_RCC_OscConfig+0x368>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	68db      	ldr	r3, [r3, #12]
 800360e:	2b05      	cmp	r3, #5
 8003610:	d004      	beq.n	800361c <HAL_RCC_OscConfig+0x368>
 8003612:	f240 2111 	movw	r1, #529	; 0x211
 8003616:	484e      	ldr	r0, [pc, #312]	; (8003750 <HAL_RCC_OscConfig+0x49c>)
 8003618:	f7fc ffb2 	bl	8000580 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800361c:	4b4a      	ldr	r3, [pc, #296]	; (8003748 <HAL_RCC_OscConfig+0x494>)
 800361e:	69db      	ldr	r3, [r3, #28]
 8003620:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003624:	2b00      	cmp	r3, #0
 8003626:	d10d      	bne.n	8003644 <HAL_RCC_OscConfig+0x390>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003628:	4a47      	ldr	r2, [pc, #284]	; (8003748 <HAL_RCC_OscConfig+0x494>)
 800362a:	4b47      	ldr	r3, [pc, #284]	; (8003748 <HAL_RCC_OscConfig+0x494>)
 800362c:	69db      	ldr	r3, [r3, #28]
 800362e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003632:	61d3      	str	r3, [r2, #28]
 8003634:	4b44      	ldr	r3, [pc, #272]	; (8003748 <HAL_RCC_OscConfig+0x494>)
 8003636:	69db      	ldr	r3, [r3, #28]
 8003638:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800363c:	60bb      	str	r3, [r7, #8]
 800363e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003640:	2301      	movs	r3, #1
 8003642:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003644:	4b43      	ldr	r3, [pc, #268]	; (8003754 <HAL_RCC_OscConfig+0x4a0>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800364c:	2b00      	cmp	r3, #0
 800364e:	d118      	bne.n	8003682 <HAL_RCC_OscConfig+0x3ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003650:	4a40      	ldr	r2, [pc, #256]	; (8003754 <HAL_RCC_OscConfig+0x4a0>)
 8003652:	4b40      	ldr	r3, [pc, #256]	; (8003754 <HAL_RCC_OscConfig+0x4a0>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800365a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800365c:	f7fd fa54 	bl	8000b08 <HAL_GetTick>
 8003660:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003662:	e008      	b.n	8003676 <HAL_RCC_OscConfig+0x3c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003664:	f7fd fa50 	bl	8000b08 <HAL_GetTick>
 8003668:	4602      	mov	r2, r0
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	2b64      	cmp	r3, #100	; 0x64
 8003670:	d901      	bls.n	8003676 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e184      	b.n	8003980 <HAL_RCC_OscConfig+0x6cc>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003676:	4b37      	ldr	r3, [pc, #220]	; (8003754 <HAL_RCC_OscConfig+0x4a0>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800367e:	2b00      	cmp	r3, #0
 8003680:	d0f0      	beq.n	8003664 <HAL_RCC_OscConfig+0x3b0>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	68db      	ldr	r3, [r3, #12]
 8003686:	2b01      	cmp	r3, #1
 8003688:	d106      	bne.n	8003698 <HAL_RCC_OscConfig+0x3e4>
 800368a:	4a2f      	ldr	r2, [pc, #188]	; (8003748 <HAL_RCC_OscConfig+0x494>)
 800368c:	4b2e      	ldr	r3, [pc, #184]	; (8003748 <HAL_RCC_OscConfig+0x494>)
 800368e:	6a1b      	ldr	r3, [r3, #32]
 8003690:	f043 0301 	orr.w	r3, r3, #1
 8003694:	6213      	str	r3, [r2, #32]
 8003696:	e02d      	b.n	80036f4 <HAL_RCC_OscConfig+0x440>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d10c      	bne.n	80036ba <HAL_RCC_OscConfig+0x406>
 80036a0:	4a29      	ldr	r2, [pc, #164]	; (8003748 <HAL_RCC_OscConfig+0x494>)
 80036a2:	4b29      	ldr	r3, [pc, #164]	; (8003748 <HAL_RCC_OscConfig+0x494>)
 80036a4:	6a1b      	ldr	r3, [r3, #32]
 80036a6:	f023 0301 	bic.w	r3, r3, #1
 80036aa:	6213      	str	r3, [r2, #32]
 80036ac:	4a26      	ldr	r2, [pc, #152]	; (8003748 <HAL_RCC_OscConfig+0x494>)
 80036ae:	4b26      	ldr	r3, [pc, #152]	; (8003748 <HAL_RCC_OscConfig+0x494>)
 80036b0:	6a1b      	ldr	r3, [r3, #32]
 80036b2:	f023 0304 	bic.w	r3, r3, #4
 80036b6:	6213      	str	r3, [r2, #32]
 80036b8:	e01c      	b.n	80036f4 <HAL_RCC_OscConfig+0x440>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	68db      	ldr	r3, [r3, #12]
 80036be:	2b05      	cmp	r3, #5
 80036c0:	d10c      	bne.n	80036dc <HAL_RCC_OscConfig+0x428>
 80036c2:	4a21      	ldr	r2, [pc, #132]	; (8003748 <HAL_RCC_OscConfig+0x494>)
 80036c4:	4b20      	ldr	r3, [pc, #128]	; (8003748 <HAL_RCC_OscConfig+0x494>)
 80036c6:	6a1b      	ldr	r3, [r3, #32]
 80036c8:	f043 0304 	orr.w	r3, r3, #4
 80036cc:	6213      	str	r3, [r2, #32]
 80036ce:	4a1e      	ldr	r2, [pc, #120]	; (8003748 <HAL_RCC_OscConfig+0x494>)
 80036d0:	4b1d      	ldr	r3, [pc, #116]	; (8003748 <HAL_RCC_OscConfig+0x494>)
 80036d2:	6a1b      	ldr	r3, [r3, #32]
 80036d4:	f043 0301 	orr.w	r3, r3, #1
 80036d8:	6213      	str	r3, [r2, #32]
 80036da:	e00b      	b.n	80036f4 <HAL_RCC_OscConfig+0x440>
 80036dc:	4a1a      	ldr	r2, [pc, #104]	; (8003748 <HAL_RCC_OscConfig+0x494>)
 80036de:	4b1a      	ldr	r3, [pc, #104]	; (8003748 <HAL_RCC_OscConfig+0x494>)
 80036e0:	6a1b      	ldr	r3, [r3, #32]
 80036e2:	f023 0301 	bic.w	r3, r3, #1
 80036e6:	6213      	str	r3, [r2, #32]
 80036e8:	4a17      	ldr	r2, [pc, #92]	; (8003748 <HAL_RCC_OscConfig+0x494>)
 80036ea:	4b17      	ldr	r3, [pc, #92]	; (8003748 <HAL_RCC_OscConfig+0x494>)
 80036ec:	6a1b      	ldr	r3, [r3, #32]
 80036ee:	f023 0304 	bic.w	r3, r3, #4
 80036f2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d015      	beq.n	8003728 <HAL_RCC_OscConfig+0x474>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036fc:	f7fd fa04 	bl	8000b08 <HAL_GetTick>
 8003700:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003702:	e00a      	b.n	800371a <HAL_RCC_OscConfig+0x466>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003704:	f7fd fa00 	bl	8000b08 <HAL_GetTick>
 8003708:	4602      	mov	r2, r0
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003712:	4293      	cmp	r3, r2
 8003714:	d901      	bls.n	800371a <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	e132      	b.n	8003980 <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800371a:	4b0b      	ldr	r3, [pc, #44]	; (8003748 <HAL_RCC_OscConfig+0x494>)
 800371c:	6a1b      	ldr	r3, [r3, #32]
 800371e:	f003 0302 	and.w	r3, r3, #2
 8003722:	2b00      	cmp	r3, #0
 8003724:	d0ee      	beq.n	8003704 <HAL_RCC_OscConfig+0x450>
 8003726:	e01d      	b.n	8003764 <HAL_RCC_OscConfig+0x4b0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003728:	f7fd f9ee 	bl	8000b08 <HAL_GetTick>
 800372c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800372e:	e013      	b.n	8003758 <HAL_RCC_OscConfig+0x4a4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003730:	f7fd f9ea 	bl	8000b08 <HAL_GetTick>
 8003734:	4602      	mov	r2, r0
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	f241 3288 	movw	r2, #5000	; 0x1388
 800373e:	4293      	cmp	r3, r2
 8003740:	d90a      	bls.n	8003758 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	e11c      	b.n	8003980 <HAL_RCC_OscConfig+0x6cc>
 8003746:	bf00      	nop
 8003748:	40021000 	.word	0x40021000
 800374c:	42420480 	.word	0x42420480
 8003750:	0800b37c 	.word	0x0800b37c
 8003754:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003758:	4b8b      	ldr	r3, [pc, #556]	; (8003988 <HAL_RCC_OscConfig+0x6d4>)
 800375a:	6a1b      	ldr	r3, [r3, #32]
 800375c:	f003 0302 	and.w	r3, r3, #2
 8003760:	2b00      	cmp	r3, #0
 8003762:	d1e5      	bne.n	8003730 <HAL_RCC_OscConfig+0x47c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003764:	7dfb      	ldrb	r3, [r7, #23]
 8003766:	2b01      	cmp	r3, #1
 8003768:	d105      	bne.n	8003776 <HAL_RCC_OscConfig+0x4c2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800376a:	4a87      	ldr	r2, [pc, #540]	; (8003988 <HAL_RCC_OscConfig+0x6d4>)
 800376c:	4b86      	ldr	r3, [pc, #536]	; (8003988 <HAL_RCC_OscConfig+0x6d4>)
 800376e:	69db      	ldr	r3, [r3, #28]
 8003770:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003774:	61d3      	str	r3, [r2, #28]
  }

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	69db      	ldr	r3, [r3, #28]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d00c      	beq.n	8003798 <HAL_RCC_OscConfig+0x4e4>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	69db      	ldr	r3, [r3, #28]
 8003782:	2b01      	cmp	r3, #1
 8003784:	d008      	beq.n	8003798 <HAL_RCC_OscConfig+0x4e4>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	69db      	ldr	r3, [r3, #28]
 800378a:	2b02      	cmp	r3, #2
 800378c:	d004      	beq.n	8003798 <HAL_RCC_OscConfig+0x4e4>
 800378e:	f240 21af 	movw	r1, #687	; 0x2af
 8003792:	487e      	ldr	r0, [pc, #504]	; (800398c <HAL_RCC_OscConfig+0x6d8>)
 8003794:	f7fc fef4 	bl	8000580 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	69db      	ldr	r3, [r3, #28]
 800379c:	2b00      	cmp	r3, #0
 800379e:	f000 80ee 	beq.w	800397e <HAL_RCC_OscConfig+0x6ca>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037a2:	4b79      	ldr	r3, [pc, #484]	; (8003988 <HAL_RCC_OscConfig+0x6d4>)
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	f003 030c 	and.w	r3, r3, #12
 80037aa:	2b08      	cmp	r3, #8
 80037ac:	f000 80ce 	beq.w	800394c <HAL_RCC_OscConfig+0x698>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	69db      	ldr	r3, [r3, #28]
 80037b4:	2b02      	cmp	r3, #2
 80037b6:	f040 80b2 	bne.w	800391e <HAL_RCC_OscConfig+0x66a>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a1b      	ldr	r3, [r3, #32]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d009      	beq.n	80037d6 <HAL_RCC_OscConfig+0x522>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6a1b      	ldr	r3, [r3, #32]
 80037c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037ca:	d004      	beq.n	80037d6 <HAL_RCC_OscConfig+0x522>
 80037cc:	f44f 712e 	mov.w	r1, #696	; 0x2b8
 80037d0:	486e      	ldr	r0, [pc, #440]	; (800398c <HAL_RCC_OscConfig+0x6d8>)
 80037d2:	f7fc fed5 	bl	8000580 <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d04a      	beq.n	8003874 <HAL_RCC_OscConfig+0x5c0>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80037e6:	d045      	beq.n	8003874 <HAL_RCC_OscConfig+0x5c0>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ec:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80037f0:	d040      	beq.n	8003874 <HAL_RCC_OscConfig+0x5c0>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80037fa:	d03b      	beq.n	8003874 <HAL_RCC_OscConfig+0x5c0>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003800:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003804:	d036      	beq.n	8003874 <HAL_RCC_OscConfig+0x5c0>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800380a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800380e:	d031      	beq.n	8003874 <HAL_RCC_OscConfig+0x5c0>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003814:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003818:	d02c      	beq.n	8003874 <HAL_RCC_OscConfig+0x5c0>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003822:	d027      	beq.n	8003874 <HAL_RCC_OscConfig+0x5c0>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003828:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800382c:	d022      	beq.n	8003874 <HAL_RCC_OscConfig+0x5c0>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003832:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003836:	d01d      	beq.n	8003874 <HAL_RCC_OscConfig+0x5c0>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003840:	d018      	beq.n	8003874 <HAL_RCC_OscConfig+0x5c0>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003846:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800384a:	d013      	beq.n	8003874 <HAL_RCC_OscConfig+0x5c0>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003850:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003854:	d00e      	beq.n	8003874 <HAL_RCC_OscConfig+0x5c0>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385a:	f5b3 1f50 	cmp.w	r3, #3407872	; 0x340000
 800385e:	d009      	beq.n	8003874 <HAL_RCC_OscConfig+0x5c0>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003864:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 8003868:	d004      	beq.n	8003874 <HAL_RCC_OscConfig+0x5c0>
 800386a:	f240 21b9 	movw	r1, #697	; 0x2b9
 800386e:	4847      	ldr	r0, [pc, #284]	; (800398c <HAL_RCC_OscConfig+0x6d8>)
 8003870:	f7fc fe86 	bl	8000580 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003874:	4b46      	ldr	r3, [pc, #280]	; (8003990 <HAL_RCC_OscConfig+0x6dc>)
 8003876:	2200      	movs	r2, #0
 8003878:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800387a:	f7fd f945 	bl	8000b08 <HAL_GetTick>
 800387e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003880:	e008      	b.n	8003894 <HAL_RCC_OscConfig+0x5e0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003882:	f7fd f941 	bl	8000b08 <HAL_GetTick>
 8003886:	4602      	mov	r2, r0
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	1ad3      	subs	r3, r2, r3
 800388c:	2b02      	cmp	r3, #2
 800388e:	d901      	bls.n	8003894 <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 8003890:	2303      	movs	r3, #3
 8003892:	e075      	b.n	8003980 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003894:	4b3c      	ldr	r3, [pc, #240]	; (8003988 <HAL_RCC_OscConfig+0x6d4>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800389c:	2b00      	cmp	r3, #0
 800389e:	d1f0      	bne.n	8003882 <HAL_RCC_OscConfig+0x5ce>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6a1b      	ldr	r3, [r3, #32]
 80038a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038a8:	d116      	bne.n	80038d8 <HAL_RCC_OscConfig+0x624>
        {
          /* Check the parameter */
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d009      	beq.n	80038c6 <HAL_RCC_OscConfig+0x612>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80038ba:	d004      	beq.n	80038c6 <HAL_RCC_OscConfig+0x612>
 80038bc:	f240 21cf 	movw	r1, #719	; 0x2cf
 80038c0:	4832      	ldr	r0, [pc, #200]	; (800398c <HAL_RCC_OscConfig+0x6d8>)
 80038c2:	f7fc fe5d 	bl	8000580 <assert_failed>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80038c6:	4930      	ldr	r1, [pc, #192]	; (8003988 <HAL_RCC_OscConfig+0x6d4>)
 80038c8:	4b2f      	ldr	r3, [pc, #188]	; (8003988 <HAL_RCC_OscConfig+0x6d4>)
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038d8:	482b      	ldr	r0, [pc, #172]	; (8003988 <HAL_RCC_OscConfig+0x6d4>)
 80038da:	4b2b      	ldr	r3, [pc, #172]	; (8003988 <HAL_RCC_OscConfig+0x6d4>)
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6a19      	ldr	r1, [r3, #32]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ea:	430b      	orrs	r3, r1
 80038ec:	4313      	orrs	r3, r2
 80038ee:	6043      	str	r3, [r0, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038f0:	4b27      	ldr	r3, [pc, #156]	; (8003990 <HAL_RCC_OscConfig+0x6dc>)
 80038f2:	2201      	movs	r2, #1
 80038f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038f6:	f7fd f907 	bl	8000b08 <HAL_GetTick>
 80038fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80038fc:	e008      	b.n	8003910 <HAL_RCC_OscConfig+0x65c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038fe:	f7fd f903 	bl	8000b08 <HAL_GetTick>
 8003902:	4602      	mov	r2, r0
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	2b02      	cmp	r3, #2
 800390a:	d901      	bls.n	8003910 <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 800390c:	2303      	movs	r3, #3
 800390e:	e037      	b.n	8003980 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003910:	4b1d      	ldr	r3, [pc, #116]	; (8003988 <HAL_RCC_OscConfig+0x6d4>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003918:	2b00      	cmp	r3, #0
 800391a:	d0f0      	beq.n	80038fe <HAL_RCC_OscConfig+0x64a>
 800391c:	e02f      	b.n	800397e <HAL_RCC_OscConfig+0x6ca>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800391e:	4b1c      	ldr	r3, [pc, #112]	; (8003990 <HAL_RCC_OscConfig+0x6dc>)
 8003920:	2200      	movs	r2, #0
 8003922:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003924:	f7fd f8f0 	bl	8000b08 <HAL_GetTick>
 8003928:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800392a:	e008      	b.n	800393e <HAL_RCC_OscConfig+0x68a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800392c:	f7fd f8ec 	bl	8000b08 <HAL_GetTick>
 8003930:	4602      	mov	r2, r0
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	2b02      	cmp	r3, #2
 8003938:	d901      	bls.n	800393e <HAL_RCC_OscConfig+0x68a>
          {
            return HAL_TIMEOUT;
 800393a:	2303      	movs	r3, #3
 800393c:	e020      	b.n	8003980 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800393e:	4b12      	ldr	r3, [pc, #72]	; (8003988 <HAL_RCC_OscConfig+0x6d4>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003946:	2b00      	cmp	r3, #0
 8003948:	d1f0      	bne.n	800392c <HAL_RCC_OscConfig+0x678>
 800394a:	e018      	b.n	800397e <HAL_RCC_OscConfig+0x6ca>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	69db      	ldr	r3, [r3, #28]
 8003950:	2b01      	cmp	r3, #1
 8003952:	d101      	bne.n	8003958 <HAL_RCC_OscConfig+0x6a4>
      {
        return HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	e013      	b.n	8003980 <HAL_RCC_OscConfig+0x6cc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003958:	4b0b      	ldr	r3, [pc, #44]	; (8003988 <HAL_RCC_OscConfig+0x6d4>)
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6a1b      	ldr	r3, [r3, #32]
 8003968:	429a      	cmp	r2, r3
 800396a:	d106      	bne.n	800397a <HAL_RCC_OscConfig+0x6c6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003976:	429a      	cmp	r2, r3
 8003978:	d001      	beq.n	800397e <HAL_RCC_OscConfig+0x6ca>
        {
          return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e000      	b.n	8003980 <HAL_RCC_OscConfig+0x6cc>
        }
      }
    }
  }

  return HAL_OK;
 800397e:	2300      	movs	r3, #0
}
 8003980:	4618      	mov	r0, r3
 8003982:	3718      	adds	r7, #24
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}
 8003988:	40021000 	.word	0x40021000
 800398c:	0800b37c 	.word	0x0800b37c
 8003990:	42420060 	.word	0x42420060

08003994 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b084      	sub	sp, #16
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
 800399c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d101      	bne.n	80039a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e176      	b.n	8003c96 <HAL_RCC_ClockConfig+0x302>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 0301 	and.w	r3, r3, #1
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d116      	bne.n	80039e2 <HAL_RCC_ClockConfig+0x4e>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 0302 	and.w	r3, r3, #2
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d110      	bne.n	80039e2 <HAL_RCC_ClockConfig+0x4e>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 0304 	and.w	r3, r3, #4
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d10a      	bne.n	80039e2 <HAL_RCC_ClockConfig+0x4e>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 0308 	and.w	r3, r3, #8
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d104      	bne.n	80039e2 <HAL_RCC_ClockConfig+0x4e>
 80039d8:	f44f 714e 	mov.w	r1, #824	; 0x338
 80039dc:	4874      	ldr	r0, [pc, #464]	; (8003bb0 <HAL_RCC_ClockConfig+0x21c>)
 80039de:	f7fc fdcf 	bl	8000580 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d00a      	beq.n	80039fe <HAL_RCC_ClockConfig+0x6a>
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d007      	beq.n	80039fe <HAL_RCC_ClockConfig+0x6a>
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	2b02      	cmp	r3, #2
 80039f2:	d004      	beq.n	80039fe <HAL_RCC_ClockConfig+0x6a>
 80039f4:	f240 3139 	movw	r1, #825	; 0x339
 80039f8:	486d      	ldr	r0, [pc, #436]	; (8003bb0 <HAL_RCC_ClockConfig+0x21c>)
 80039fa:	f7fc fdc1 	bl	8000580 <assert_failed>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039fe:	4b6d      	ldr	r3, [pc, #436]	; (8003bb4 <HAL_RCC_ClockConfig+0x220>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0207 	and.w	r2, r3, #7
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d210      	bcs.n	8003a2e <HAL_RCC_ClockConfig+0x9a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a0c:	4969      	ldr	r1, [pc, #420]	; (8003bb4 <HAL_RCC_ClockConfig+0x220>)
 8003a0e:	4b69      	ldr	r3, [pc, #420]	; (8003bb4 <HAL_RCC_ClockConfig+0x220>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f023 0207 	bic.w	r2, r3, #7
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a1c:	4b65      	ldr	r3, [pc, #404]	; (8003bb4 <HAL_RCC_ClockConfig+0x220>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0207 	and.w	r2, r3, #7
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d001      	beq.n	8003a2e <HAL_RCC_ClockConfig+0x9a>
  {
    return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e133      	b.n	8003c96 <HAL_RCC_ClockConfig+0x302>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 0302 	and.w	r3, r3, #2
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d049      	beq.n	8003ace <HAL_RCC_ClockConfig+0x13a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 0304 	and.w	r3, r3, #4
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d005      	beq.n	8003a52 <HAL_RCC_ClockConfig+0xbe>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a46:	4a5c      	ldr	r2, [pc, #368]	; (8003bb8 <HAL_RCC_ClockConfig+0x224>)
 8003a48:	4b5b      	ldr	r3, [pc, #364]	; (8003bb8 <HAL_RCC_ClockConfig+0x224>)
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003a50:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0308 	and.w	r3, r3, #8
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d005      	beq.n	8003a6a <HAL_RCC_ClockConfig+0xd6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a5e:	4a56      	ldr	r2, [pc, #344]	; (8003bb8 <HAL_RCC_ClockConfig+0x224>)
 8003a60:	4b55      	ldr	r3, [pc, #340]	; (8003bb8 <HAL_RCC_ClockConfig+0x224>)
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003a68:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d024      	beq.n	8003abc <HAL_RCC_ClockConfig+0x128>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	2b80      	cmp	r3, #128	; 0x80
 8003a78:	d020      	beq.n	8003abc <HAL_RCC_ClockConfig+0x128>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	2b90      	cmp	r3, #144	; 0x90
 8003a80:	d01c      	beq.n	8003abc <HAL_RCC_ClockConfig+0x128>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	2ba0      	cmp	r3, #160	; 0xa0
 8003a88:	d018      	beq.n	8003abc <HAL_RCC_ClockConfig+0x128>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	2bb0      	cmp	r3, #176	; 0xb0
 8003a90:	d014      	beq.n	8003abc <HAL_RCC_ClockConfig+0x128>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	2bc0      	cmp	r3, #192	; 0xc0
 8003a98:	d010      	beq.n	8003abc <HAL_RCC_ClockConfig+0x128>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	2bd0      	cmp	r3, #208	; 0xd0
 8003aa0:	d00c      	beq.n	8003abc <HAL_RCC_ClockConfig+0x128>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	2be0      	cmp	r3, #224	; 0xe0
 8003aa8:	d008      	beq.n	8003abc <HAL_RCC_ClockConfig+0x128>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	2bf0      	cmp	r3, #240	; 0xf0
 8003ab0:	d004      	beq.n	8003abc <HAL_RCC_ClockConfig+0x128>
 8003ab2:	f240 315f 	movw	r1, #863	; 0x35f
 8003ab6:	483e      	ldr	r0, [pc, #248]	; (8003bb0 <HAL_RCC_ClockConfig+0x21c>)
 8003ab8:	f7fc fd62 	bl	8000580 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003abc:	493e      	ldr	r1, [pc, #248]	; (8003bb8 <HAL_RCC_ClockConfig+0x224>)
 8003abe:	4b3e      	ldr	r3, [pc, #248]	; (8003bb8 <HAL_RCC_ClockConfig+0x224>)
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 0301 	and.w	r3, r3, #1
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d051      	beq.n	8003b7e <HAL_RCC_ClockConfig+0x1ea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d00c      	beq.n	8003afc <HAL_RCC_ClockConfig+0x168>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d008      	beq.n	8003afc <HAL_RCC_ClockConfig+0x168>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	2b02      	cmp	r3, #2
 8003af0:	d004      	beq.n	8003afc <HAL_RCC_ClockConfig+0x168>
 8003af2:	f240 3166 	movw	r1, #870	; 0x366
 8003af6:	482e      	ldr	r0, [pc, #184]	; (8003bb0 <HAL_RCC_ClockConfig+0x21c>)
 8003af8:	f7fc fd42 	bl	8000580 <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d107      	bne.n	8003b14 <HAL_RCC_ClockConfig+0x180>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b04:	4b2c      	ldr	r3, [pc, #176]	; (8003bb8 <HAL_RCC_ClockConfig+0x224>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d115      	bne.n	8003b3c <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	e0c0      	b.n	8003c96 <HAL_RCC_ClockConfig+0x302>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	2b02      	cmp	r3, #2
 8003b1a:	d107      	bne.n	8003b2c <HAL_RCC_ClockConfig+0x198>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b1c:	4b26      	ldr	r3, [pc, #152]	; (8003bb8 <HAL_RCC_ClockConfig+0x224>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d109      	bne.n	8003b3c <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e0b4      	b.n	8003c96 <HAL_RCC_ClockConfig+0x302>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b2c:	4b22      	ldr	r3, [pc, #136]	; (8003bb8 <HAL_RCC_ClockConfig+0x224>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 0302 	and.w	r3, r3, #2
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d101      	bne.n	8003b3c <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e0ac      	b.n	8003c96 <HAL_RCC_ClockConfig+0x302>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b3c:	491e      	ldr	r1, [pc, #120]	; (8003bb8 <HAL_RCC_ClockConfig+0x224>)
 8003b3e:	4b1e      	ldr	r3, [pc, #120]	; (8003bb8 <HAL_RCC_ClockConfig+0x224>)
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	f023 0203 	bic.w	r2, r3, #3
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b4e:	f7fc ffdb 	bl	8000b08 <HAL_GetTick>
 8003b52:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b54:	e00a      	b.n	8003b6c <HAL_RCC_ClockConfig+0x1d8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b56:	f7fc ffd7 	bl	8000b08 <HAL_GetTick>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	1ad3      	subs	r3, r2, r3
 8003b60:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d901      	bls.n	8003b6c <HAL_RCC_ClockConfig+0x1d8>
      {
        return HAL_TIMEOUT;
 8003b68:	2303      	movs	r3, #3
 8003b6a:	e094      	b.n	8003c96 <HAL_RCC_ClockConfig+0x302>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b6c:	4b12      	ldr	r3, [pc, #72]	; (8003bb8 <HAL_RCC_ClockConfig+0x224>)
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	f003 020c 	and.w	r2, r3, #12
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	009b      	lsls	r3, r3, #2
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d1eb      	bne.n	8003b56 <HAL_RCC_ClockConfig+0x1c2>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b7e:	4b0d      	ldr	r3, [pc, #52]	; (8003bb4 <HAL_RCC_ClockConfig+0x220>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0207 	and.w	r2, r3, #7
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d917      	bls.n	8003bbc <HAL_RCC_ClockConfig+0x228>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b8c:	4909      	ldr	r1, [pc, #36]	; (8003bb4 <HAL_RCC_ClockConfig+0x220>)
 8003b8e:	4b09      	ldr	r3, [pc, #36]	; (8003bb4 <HAL_RCC_ClockConfig+0x220>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f023 0207 	bic.w	r2, r3, #7
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b9c:	4b05      	ldr	r3, [pc, #20]	; (8003bb4 <HAL_RCC_ClockConfig+0x220>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 0207 	and.w	r2, r3, #7
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d008      	beq.n	8003bbc <HAL_RCC_ClockConfig+0x228>
  {
    return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e073      	b.n	8003c96 <HAL_RCC_ClockConfig+0x302>
 8003bae:	bf00      	nop
 8003bb0:	0800b37c 	.word	0x0800b37c
 8003bb4:	40022000 	.word	0x40022000
 8003bb8:	40021000 	.word	0x40021000
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 0304 	and.w	r3, r3, #4
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d025      	beq.n	8003c14 <HAL_RCC_ClockConfig+0x280>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d018      	beq.n	8003c02 <HAL_RCC_ClockConfig+0x26e>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bd8:	d013      	beq.n	8003c02 <HAL_RCC_ClockConfig+0x26e>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	68db      	ldr	r3, [r3, #12]
 8003bde:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003be2:	d00e      	beq.n	8003c02 <HAL_RCC_ClockConfig+0x26e>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003bec:	d009      	beq.n	8003c02 <HAL_RCC_ClockConfig+0x26e>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	68db      	ldr	r3, [r3, #12]
 8003bf2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003bf6:	d004      	beq.n	8003c02 <HAL_RCC_ClockConfig+0x26e>
 8003bf8:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 8003bfc:	4828      	ldr	r0, [pc, #160]	; (8003ca0 <HAL_RCC_ClockConfig+0x30c>)
 8003bfe:	f7fc fcbf 	bl	8000580 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c02:	4928      	ldr	r1, [pc, #160]	; (8003ca4 <HAL_RCC_ClockConfig+0x310>)
 8003c04:	4b27      	ldr	r3, [pc, #156]	; (8003ca4 <HAL_RCC_ClockConfig+0x310>)
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 0308 	and.w	r3, r3, #8
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d026      	beq.n	8003c6e <HAL_RCC_ClockConfig+0x2da>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	691b      	ldr	r3, [r3, #16]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d018      	beq.n	8003c5a <HAL_RCC_ClockConfig+0x2c6>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	691b      	ldr	r3, [r3, #16]
 8003c2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c30:	d013      	beq.n	8003c5a <HAL_RCC_ClockConfig+0x2c6>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	691b      	ldr	r3, [r3, #16]
 8003c36:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003c3a:	d00e      	beq.n	8003c5a <HAL_RCC_ClockConfig+0x2c6>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	691b      	ldr	r3, [r3, #16]
 8003c40:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003c44:	d009      	beq.n	8003c5a <HAL_RCC_ClockConfig+0x2c6>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	691b      	ldr	r3, [r3, #16]
 8003c4a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003c4e:	d004      	beq.n	8003c5a <HAL_RCC_ClockConfig+0x2c6>
 8003c50:	f240 31ab 	movw	r1, #939	; 0x3ab
 8003c54:	4812      	ldr	r0, [pc, #72]	; (8003ca0 <HAL_RCC_ClockConfig+0x30c>)
 8003c56:	f7fc fc93 	bl	8000580 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003c5a:	4912      	ldr	r1, [pc, #72]	; (8003ca4 <HAL_RCC_ClockConfig+0x310>)
 8003c5c:	4b11      	ldr	r3, [pc, #68]	; (8003ca4 <HAL_RCC_ClockConfig+0x310>)
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	691b      	ldr	r3, [r3, #16]
 8003c68:	00db      	lsls	r3, r3, #3
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003c6e:	f000 f821 	bl	8003cb4 <HAL_RCC_GetSysClockFreq>
 8003c72:	4601      	mov	r1, r0
 8003c74:	4b0b      	ldr	r3, [pc, #44]	; (8003ca4 <HAL_RCC_ClockConfig+0x310>)
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	091b      	lsrs	r3, r3, #4
 8003c7a:	f003 030f 	and.w	r3, r3, #15
 8003c7e:	4a0a      	ldr	r2, [pc, #40]	; (8003ca8 <HAL_RCC_ClockConfig+0x314>)
 8003c80:	5cd3      	ldrb	r3, [r2, r3]
 8003c82:	fa21 f303 	lsr.w	r3, r1, r3
 8003c86:	4a09      	ldr	r2, [pc, #36]	; (8003cac <HAL_RCC_ClockConfig+0x318>)
 8003c88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003c8a:	4b09      	ldr	r3, [pc, #36]	; (8003cb0 <HAL_RCC_ClockConfig+0x31c>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f7fc fcb8 	bl	8000604 <HAL_InitTick>

  return HAL_OK;
 8003c94:	2300      	movs	r3, #0
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3710      	adds	r7, #16
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	0800b37c 	.word	0x0800b37c
 8003ca4:	40021000 	.word	0x40021000
 8003ca8:	0800b590 	.word	0x0800b590
 8003cac:	20000000 	.word	0x20000000
 8003cb0:	20000004 	.word	0x20000004

08003cb4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cb4:	b490      	push	{r4, r7}
 8003cb6:	b08a      	sub	sp, #40	; 0x28
 8003cb8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003cba:	4b2a      	ldr	r3, [pc, #168]	; (8003d64 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003cbc:	1d3c      	adds	r4, r7, #4
 8003cbe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003cc0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003cc4:	4b28      	ldr	r3, [pc, #160]	; (8003d68 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003cc6:	881b      	ldrh	r3, [r3, #0]
 8003cc8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	61fb      	str	r3, [r7, #28]
 8003cce:	2300      	movs	r3, #0
 8003cd0:	61bb      	str	r3, [r7, #24]
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	627b      	str	r3, [r7, #36]	; 0x24
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003cde:	4b23      	ldr	r3, [pc, #140]	; (8003d6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003ce4:	69fb      	ldr	r3, [r7, #28]
 8003ce6:	f003 030c 	and.w	r3, r3, #12
 8003cea:	2b04      	cmp	r3, #4
 8003cec:	d002      	beq.n	8003cf4 <HAL_RCC_GetSysClockFreq+0x40>
 8003cee:	2b08      	cmp	r3, #8
 8003cf0:	d003      	beq.n	8003cfa <HAL_RCC_GetSysClockFreq+0x46>
 8003cf2:	e02d      	b.n	8003d50 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003cf4:	4b1e      	ldr	r3, [pc, #120]	; (8003d70 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003cf6:	623b      	str	r3, [r7, #32]
      break;
 8003cf8:	e02d      	b.n	8003d56 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003cfa:	69fb      	ldr	r3, [r7, #28]
 8003cfc:	0c9b      	lsrs	r3, r3, #18
 8003cfe:	f003 030f 	and.w	r3, r3, #15
 8003d02:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003d06:	4413      	add	r3, r2
 8003d08:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003d0c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003d0e:	69fb      	ldr	r3, [r7, #28]
 8003d10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d013      	beq.n	8003d40 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003d18:	4b14      	ldr	r3, [pc, #80]	; (8003d6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	0c5b      	lsrs	r3, r3, #17
 8003d1e:	f003 0301 	and.w	r3, r3, #1
 8003d22:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003d26:	4413      	add	r3, r2
 8003d28:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003d2c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	4a0f      	ldr	r2, [pc, #60]	; (8003d70 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003d32:	fb02 f203 	mul.w	r2, r2, r3
 8003d36:	69bb      	ldr	r3, [r7, #24]
 8003d38:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d3c:	627b      	str	r3, [r7, #36]	; 0x24
 8003d3e:	e004      	b.n	8003d4a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	4a0c      	ldr	r2, [pc, #48]	; (8003d74 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003d44:	fb02 f303 	mul.w	r3, r2, r3
 8003d48:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d4c:	623b      	str	r3, [r7, #32]
      break;
 8003d4e:	e002      	b.n	8003d56 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003d50:	4b07      	ldr	r3, [pc, #28]	; (8003d70 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003d52:	623b      	str	r3, [r7, #32]
      break;
 8003d54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d56:	6a3b      	ldr	r3, [r7, #32]
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	3728      	adds	r7, #40	; 0x28
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bc90      	pop	{r4, r7}
 8003d60:	4770      	bx	lr
 8003d62:	bf00      	nop
 8003d64:	0800b3b4 	.word	0x0800b3b4
 8003d68:	0800b3c4 	.word	0x0800b3c4
 8003d6c:	40021000 	.word	0x40021000
 8003d70:	007a1200 	.word	0x007a1200
 8003d74:	003d0900 	.word	0x003d0900

08003d78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d7c:	4b02      	ldr	r3, [pc, #8]	; (8003d88 <HAL_RCC_GetHCLKFreq+0x10>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bc80      	pop	{r7}
 8003d86:	4770      	bx	lr
 8003d88:	20000000 	.word	0x20000000

08003d8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003d90:	f7ff fff2 	bl	8003d78 <HAL_RCC_GetHCLKFreq>
 8003d94:	4601      	mov	r1, r0
 8003d96:	4b05      	ldr	r3, [pc, #20]	; (8003dac <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	0a1b      	lsrs	r3, r3, #8
 8003d9c:	f003 0307 	and.w	r3, r3, #7
 8003da0:	4a03      	ldr	r2, [pc, #12]	; (8003db0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003da2:	5cd3      	ldrb	r3, [r2, r3]
 8003da4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	bd80      	pop	{r7, pc}
 8003dac:	40021000 	.word	0x40021000
 8003db0:	0800b5a0 	.word	0x0800b5a0

08003db4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003db8:	f7ff ffde 	bl	8003d78 <HAL_RCC_GetHCLKFreq>
 8003dbc:	4601      	mov	r1, r0
 8003dbe:	4b05      	ldr	r3, [pc, #20]	; (8003dd4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	0adb      	lsrs	r3, r3, #11
 8003dc4:	f003 0307 	and.w	r3, r3, #7
 8003dc8:	4a03      	ldr	r2, [pc, #12]	; (8003dd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003dca:	5cd3      	ldrb	r3, [r2, r3]
 8003dcc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	bd80      	pop	{r7, pc}
 8003dd4:	40021000 	.word	0x40021000
 8003dd8:	0800b5a0 	.word	0x0800b5a0

08003ddc <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b082      	sub	sp, #8
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d104      	bne.n	8003df6 <HAL_RCC_GetClockConfig+0x1a>
 8003dec:	f240 5123 	movw	r1, #1315	; 0x523
 8003df0:	4818      	ldr	r0, [pc, #96]	; (8003e54 <HAL_RCC_GetClockConfig+0x78>)
 8003df2:	f7fc fbc5 	bl	8000580 <assert_failed>
  assert_param(pFLatency != NULL);
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d104      	bne.n	8003e06 <HAL_RCC_GetClockConfig+0x2a>
 8003dfc:	f240 5124 	movw	r1, #1316	; 0x524
 8003e00:	4814      	ldr	r0, [pc, #80]	; (8003e54 <HAL_RCC_GetClockConfig+0x78>)
 8003e02:	f7fc fbbd 	bl	8000580 <assert_failed>

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	220f      	movs	r2, #15
 8003e0a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003e0c:	4b12      	ldr	r3, [pc, #72]	; (8003e58 <HAL_RCC_GetClockConfig+0x7c>)
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	f003 0203 	and.w	r2, r3, #3
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003e18:	4b0f      	ldr	r3, [pc, #60]	; (8003e58 <HAL_RCC_GetClockConfig+0x7c>)
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003e24:	4b0c      	ldr	r3, [pc, #48]	; (8003e58 <HAL_RCC_GetClockConfig+0x7c>)
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003e30:	4b09      	ldr	r3, [pc, #36]	; (8003e58 <HAL_RCC_GetClockConfig+0x7c>)
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	08db      	lsrs	r3, r3, #3
 8003e36:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003e3e:	4b07      	ldr	r3, [pc, #28]	; (8003e5c <HAL_RCC_GetClockConfig+0x80>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 0207 	and.w	r2, r3, #7
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8003e4a:	bf00      	nop
 8003e4c:	3708      	adds	r7, #8
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop
 8003e54:	0800b37c 	.word	0x0800b37c
 8003e58:	40021000 	.word	0x40021000
 8003e5c:	40022000 	.word	0x40022000

08003e60 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b085      	sub	sp, #20
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003e68:	4b0a      	ldr	r3, [pc, #40]	; (8003e94 <RCC_Delay+0x34>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a0a      	ldr	r2, [pc, #40]	; (8003e98 <RCC_Delay+0x38>)
 8003e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e72:	0a5b      	lsrs	r3, r3, #9
 8003e74:	687a      	ldr	r2, [r7, #4]
 8003e76:	fb02 f303 	mul.w	r3, r2, r3
 8003e7a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003e7c:	bf00      	nop
  }
  while (Delay --);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	1e5a      	subs	r2, r3, #1
 8003e82:	60fa      	str	r2, [r7, #12]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d1f9      	bne.n	8003e7c <RCC_Delay+0x1c>
}
 8003e88:	bf00      	nop
 8003e8a:	3714      	adds	r7, #20
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bc80      	pop	{r7}
 8003e90:	4770      	bx	lr
 8003e92:	bf00      	nop
 8003e94:	20000000 	.word	0x20000000
 8003e98:	10624dd3 	.word	0x10624dd3

08003e9c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b086      	sub	sp, #24
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	613b      	str	r3, [r7, #16]
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	60fb      	str	r3, [r7, #12]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
#endif /* STM32F105xC || STM32F107xC */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 0301 	and.w	r3, r3, #1
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d10f      	bne.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 0302 	and.w	r3, r3, #2
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d109      	bne.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 0310 	and.w	r3, r3, #16
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d103      	bne.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8003ed0:	216c      	movs	r1, #108	; 0x6c
 8003ed2:	4873      	ldr	r0, [pc, #460]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8003ed4:	f7fc fb54 	bl	8000580 <assert_failed>

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 0301 	and.w	r3, r3, #1
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	f000 8095 	beq.w	8004010 <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    FlagStatus pwrclkchanged = RESET;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	75fb      	strb	r3, [r7, #23]

    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d012      	beq.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003efa:	d00d      	beq.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f04:	d008      	beq.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f0e:	d003      	beq.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003f10:	2174      	movs	r1, #116	; 0x74
 8003f12:	4863      	ldr	r0, [pc, #396]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8003f14:	f7fc fb34 	bl	8000580 <assert_failed>

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f18:	4b62      	ldr	r3, [pc, #392]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003f1a:	69db      	ldr	r3, [r3, #28]
 8003f1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d10d      	bne.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f24:	4a5f      	ldr	r2, [pc, #380]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003f26:	4b5f      	ldr	r3, [pc, #380]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003f28:	69db      	ldr	r3, [r3, #28]
 8003f2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f2e:	61d3      	str	r3, [r2, #28]
 8003f30:	4b5c      	ldr	r3, [pc, #368]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003f32:	69db      	ldr	r3, [r3, #28]
 8003f34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f38:	60bb      	str	r3, [r7, #8]
 8003f3a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f40:	4b59      	ldr	r3, [pc, #356]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d118      	bne.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0xe2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f4c:	4a56      	ldr	r2, [pc, #344]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8003f4e:	4b56      	ldr	r3, [pc, #344]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f56:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f58:	f7fc fdd6 	bl	8000b08 <HAL_GetTick>
 8003f5c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f5e:	e008      	b.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0xd6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f60:	f7fc fdd2 	bl	8000b08 <HAL_GetTick>
 8003f64:	4602      	mov	r2, r0
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	1ad3      	subs	r3, r2, r3
 8003f6a:	2b64      	cmp	r3, #100	; 0x64
 8003f6c:	d901      	bls.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0xd6>
        {
          return HAL_TIMEOUT;
 8003f6e:	2303      	movs	r3, #3
 8003f70:	e092      	b.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f72:	4b4d      	ldr	r3, [pc, #308]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d0f0      	beq.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0xc4>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003f7e:	4b49      	ldr	r3, [pc, #292]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003f80:	6a1b      	ldr	r3, [r3, #32]
 8003f82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f86:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d02e      	beq.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x150>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d027      	beq.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f9c:	4b41      	ldr	r3, [pc, #260]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003f9e:	6a1b      	ldr	r3, [r3, #32]
 8003fa0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fa4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003fa6:	4b41      	ldr	r3, [pc, #260]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003fa8:	2201      	movs	r2, #1
 8003faa:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003fac:	4b3f      	ldr	r3, [pc, #252]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003fae:	2200      	movs	r2, #0
 8003fb0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003fb2:	4a3c      	ldr	r2, [pc, #240]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	f003 0301 	and.w	r3, r3, #1
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d014      	beq.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fc2:	f7fc fda1 	bl	8000b08 <HAL_GetTick>
 8003fc6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fc8:	e00a      	b.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x144>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fca:	f7fc fd9d 	bl	8000b08 <HAL_GetTick>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	1ad3      	subs	r3, r2, r3
 8003fd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d901      	bls.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x144>
          {
            return HAL_TIMEOUT;
 8003fdc:	2303      	movs	r3, #3
 8003fde:	e05b      	b.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fe0:	4b30      	ldr	r3, [pc, #192]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003fe2:	6a1b      	ldr	r3, [r3, #32]
 8003fe4:	f003 0302 	and.w	r3, r3, #2
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d0ee      	beq.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x12e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003fec:	492d      	ldr	r1, [pc, #180]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003fee:	4b2d      	ldr	r3, [pc, #180]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003ff0:	6a1b      	ldr	r3, [r3, #32]
 8003ff2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003ffe:	7dfb      	ldrb	r3, [r7, #23]
 8004000:	2b01      	cmp	r3, #1
 8004002:	d105      	bne.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004004:	4a27      	ldr	r2, [pc, #156]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8004006:	4b27      	ldr	r3, [pc, #156]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8004008:	69db      	ldr	r3, [r3, #28]
 800400a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800400e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 0302 	and.w	r3, r3, #2
 8004018:	2b00      	cmp	r3, #0
 800401a:	d01f      	beq.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d012      	beq.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800402c:	d00d      	beq.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004036:	d008      	beq.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004040:	d003      	beq.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8004042:	21b9      	movs	r1, #185	; 0xb9
 8004044:	4816      	ldr	r0, [pc, #88]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8004046:	f7fc fa9b 	bl	8000580 <assert_failed>

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800404a:	4916      	ldr	r1, [pc, #88]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800404c:	4b15      	ldr	r3, [pc, #84]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	4313      	orrs	r3, r2
 800405a:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 0310 	and.w	r3, r3, #16
 8004064:	2b00      	cmp	r3, #0
 8004066:	d016      	beq.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	68db      	ldr	r3, [r3, #12]
 800406c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004070:	d008      	beq.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	68db      	ldr	r3, [r3, #12]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d004      	beq.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800407a:	f240 1115 	movw	r1, #277	; 0x115
 800407e:	4808      	ldr	r0, [pc, #32]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8004080:	f7fc fa7e 	bl	8000580 <assert_failed>

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004084:	4907      	ldr	r1, [pc, #28]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8004086:	4b07      	ldr	r3, [pc, #28]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	68db      	ldr	r3, [r3, #12]
 8004092:	4313      	orrs	r3, r2
 8004094:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004096:	2300      	movs	r3, #0
}
 8004098:	4618      	mov	r0, r3
 800409a:	3718      	adds	r7, #24
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}
 80040a0:	0800b3c8 	.word	0x0800b3c8
 80040a4:	40021000 	.word	0x40021000
 80040a8:	40007000 	.word	0x40007000
 80040ac:	42420440 	.word	0x42420440

080040b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b082      	sub	sp, #8
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d101      	bne.n	80040c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e093      	b.n	80041ea <HAL_TIM_Base_Init+0x13a>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a4b      	ldr	r2, [pc, #300]	; (80041f4 <HAL_TIM_Base_Init+0x144>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d013      	beq.n	80040f4 <HAL_TIM_Base_Init+0x44>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040d4:	d00e      	beq.n	80040f4 <HAL_TIM_Base_Init+0x44>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a47      	ldr	r2, [pc, #284]	; (80041f8 <HAL_TIM_Base_Init+0x148>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d009      	beq.n	80040f4 <HAL_TIM_Base_Init+0x44>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a45      	ldr	r2, [pc, #276]	; (80041fc <HAL_TIM_Base_Init+0x14c>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d004      	beq.n	80040f4 <HAL_TIM_Base_Init+0x44>
 80040ea:	f240 1113 	movw	r1, #275	; 0x113
 80040ee:	4844      	ldr	r0, [pc, #272]	; (8004200 <HAL_TIM_Base_Init+0x150>)
 80040f0:	f7fc fa46 	bl	8000580 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d014      	beq.n	8004126 <HAL_TIM_Base_Init+0x76>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	2b10      	cmp	r3, #16
 8004102:	d010      	beq.n	8004126 <HAL_TIM_Base_Init+0x76>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	2b20      	cmp	r3, #32
 800410a:	d00c      	beq.n	8004126 <HAL_TIM_Base_Init+0x76>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	2b40      	cmp	r3, #64	; 0x40
 8004112:	d008      	beq.n	8004126 <HAL_TIM_Base_Init+0x76>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	2b60      	cmp	r3, #96	; 0x60
 800411a:	d004      	beq.n	8004126 <HAL_TIM_Base_Init+0x76>
 800411c:	f44f 718a 	mov.w	r1, #276	; 0x114
 8004120:	4837      	ldr	r0, [pc, #220]	; (8004200 <HAL_TIM_Base_Init+0x150>)
 8004122:	f7fc fa2d 	bl	8000580 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	691b      	ldr	r3, [r3, #16]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d00e      	beq.n	800414c <HAL_TIM_Base_Init+0x9c>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	691b      	ldr	r3, [r3, #16]
 8004132:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004136:	d009      	beq.n	800414c <HAL_TIM_Base_Init+0x9c>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	691b      	ldr	r3, [r3, #16]
 800413c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004140:	d004      	beq.n	800414c <HAL_TIM_Base_Init+0x9c>
 8004142:	f240 1115 	movw	r1, #277	; 0x115
 8004146:	482e      	ldr	r0, [pc, #184]	; (8004200 <HAL_TIM_Base_Init+0x150>)
 8004148:	f7fc fa1a 	bl	8000580 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	699b      	ldr	r3, [r3, #24]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d008      	beq.n	8004166 <HAL_TIM_Base_Init+0xb6>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	699b      	ldr	r3, [r3, #24]
 8004158:	2b80      	cmp	r3, #128	; 0x80
 800415a:	d004      	beq.n	8004166 <HAL_TIM_Base_Init+0xb6>
 800415c:	f44f 718b 	mov.w	r1, #278	; 0x116
 8004160:	4827      	ldr	r0, [pc, #156]	; (8004200 <HAL_TIM_Base_Init+0x150>)
 8004162:	f7fc fa0d 	bl	8000580 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800416c:	b2db      	uxtb	r3, r3
 800416e:	2b00      	cmp	r3, #0
 8004170:	d106      	bne.n	8004180 <HAL_TIM_Base_Init+0xd0>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2200      	movs	r2, #0
 8004176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f000 f842 	bl	8004204 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2202      	movs	r2, #2
 8004184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	3304      	adds	r3, #4
 8004190:	4619      	mov	r1, r3
 8004192:	4610      	mov	r0, r2
 8004194:	f000 f9d8 	bl	8004548 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2201      	movs	r2, #1
 800419c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2201      	movs	r2, #1
 80041ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2201      	movs	r2, #1
 80041b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2201      	movs	r2, #1
 80041bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2201      	movs	r2, #1
 80041c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2201      	movs	r2, #1
 80041cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2201      	movs	r2, #1
 80041d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2201      	movs	r2, #1
 80041dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2201      	movs	r2, #1
 80041e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041e8:	2300      	movs	r3, #0
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3708      	adds	r7, #8
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}
 80041f2:	bf00      	nop
 80041f4:	40012c00 	.word	0x40012c00
 80041f8:	40000400 	.word	0x40000400
 80041fc:	40000800 	.word	0x40000800
 8004200:	0800b418 	.word	0x0800b418

08004204 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004204:	b480      	push	{r7}
 8004206:	b083      	sub	sp, #12
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800420c:	bf00      	nop
 800420e:	370c      	adds	r7, #12
 8004210:	46bd      	mov	sp, r7
 8004212:	bc80      	pop	{r7}
 8004214:	4770      	bx	lr
	...

08004218 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b084      	sub	sp, #16
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a2e      	ldr	r2, [pc, #184]	; (80042e0 <HAL_TIM_Base_Start_IT+0xc8>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d013      	beq.n	8004252 <HAL_TIM_Base_Start_IT+0x3a>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004232:	d00e      	beq.n	8004252 <HAL_TIM_Base_Start_IT+0x3a>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a2a      	ldr	r2, [pc, #168]	; (80042e4 <HAL_TIM_Base_Start_IT+0xcc>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d009      	beq.n	8004252 <HAL_TIM_Base_Start_IT+0x3a>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a29      	ldr	r2, [pc, #164]	; (80042e8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d004      	beq.n	8004252 <HAL_TIM_Base_Start_IT+0x3a>
 8004248:	f240 11cf 	movw	r1, #463	; 0x1cf
 800424c:	4827      	ldr	r0, [pc, #156]	; (80042ec <HAL_TIM_Base_Start_IT+0xd4>)
 800424e:	f7fc f997 	bl	8000580 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004258:	b2db      	uxtb	r3, r3
 800425a:	2b01      	cmp	r3, #1
 800425c:	d001      	beq.n	8004262 <HAL_TIM_Base_Start_IT+0x4a>
  {
    return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e03a      	b.n	80042d8 <HAL_TIM_Base_Start_IT+0xc0>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2202      	movs	r2, #2
 8004266:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	687a      	ldr	r2, [r7, #4]
 8004270:	6812      	ldr	r2, [r2, #0]
 8004272:	68d2      	ldr	r2, [r2, #12]
 8004274:	f042 0201 	orr.w	r2, r2, #1
 8004278:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a18      	ldr	r2, [pc, #96]	; (80042e0 <HAL_TIM_Base_Start_IT+0xc8>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d00e      	beq.n	80042a2 <HAL_TIM_Base_Start_IT+0x8a>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800428c:	d009      	beq.n	80042a2 <HAL_TIM_Base_Start_IT+0x8a>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a14      	ldr	r2, [pc, #80]	; (80042e4 <HAL_TIM_Base_Start_IT+0xcc>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d004      	beq.n	80042a2 <HAL_TIM_Base_Start_IT+0x8a>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a12      	ldr	r2, [pc, #72]	; (80042e8 <HAL_TIM_Base_Start_IT+0xd0>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d111      	bne.n	80042c6 <HAL_TIM_Base_Start_IT+0xae>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	f003 0307 	and.w	r3, r3, #7
 80042ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2b06      	cmp	r3, #6
 80042b2:	d010      	beq.n	80042d6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	687a      	ldr	r2, [r7, #4]
 80042ba:	6812      	ldr	r2, [r2, #0]
 80042bc:	6812      	ldr	r2, [r2, #0]
 80042be:	f042 0201 	orr.w	r2, r2, #1
 80042c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042c4:	e007      	b.n	80042d6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	687a      	ldr	r2, [r7, #4]
 80042cc:	6812      	ldr	r2, [r2, #0]
 80042ce:	6812      	ldr	r2, [r2, #0]
 80042d0:	f042 0201 	orr.w	r2, r2, #1
 80042d4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80042d6:	2300      	movs	r3, #0
}
 80042d8:	4618      	mov	r0, r3
 80042da:	3710      	adds	r7, #16
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}
 80042e0:	40012c00 	.word	0x40012c00
 80042e4:	40000400 	.word	0x40000400
 80042e8:	40000800 	.word	0x40000800
 80042ec:	0800b418 	.word	0x0800b418

080042f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b082      	sub	sp, #8
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	691b      	ldr	r3, [r3, #16]
 80042fe:	f003 0302 	and.w	r3, r3, #2
 8004302:	2b02      	cmp	r3, #2
 8004304:	d122      	bne.n	800434c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	f003 0302 	and.w	r3, r3, #2
 8004310:	2b02      	cmp	r3, #2
 8004312:	d11b      	bne.n	800434c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f06f 0202 	mvn.w	r2, #2
 800431c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2201      	movs	r2, #1
 8004322:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	699b      	ldr	r3, [r3, #24]
 800432a:	f003 0303 	and.w	r3, r3, #3
 800432e:	2b00      	cmp	r3, #0
 8004330:	d003      	beq.n	800433a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f000 f8ed 	bl	8004512 <HAL_TIM_IC_CaptureCallback>
 8004338:	e005      	b.n	8004346 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f000 f8e0 	bl	8004500 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004340:	6878      	ldr	r0, [r7, #4]
 8004342:	f000 f8ef 	bl	8004524 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2200      	movs	r2, #0
 800434a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	691b      	ldr	r3, [r3, #16]
 8004352:	f003 0304 	and.w	r3, r3, #4
 8004356:	2b04      	cmp	r3, #4
 8004358:	d122      	bne.n	80043a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	68db      	ldr	r3, [r3, #12]
 8004360:	f003 0304 	and.w	r3, r3, #4
 8004364:	2b04      	cmp	r3, #4
 8004366:	d11b      	bne.n	80043a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f06f 0204 	mvn.w	r2, #4
 8004370:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2202      	movs	r2, #2
 8004376:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	699b      	ldr	r3, [r3, #24]
 800437e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004382:	2b00      	cmp	r3, #0
 8004384:	d003      	beq.n	800438e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f000 f8c3 	bl	8004512 <HAL_TIM_IC_CaptureCallback>
 800438c:	e005      	b.n	800439a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f000 f8b6 	bl	8004500 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f000 f8c5 	bl	8004524 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2200      	movs	r2, #0
 800439e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	691b      	ldr	r3, [r3, #16]
 80043a6:	f003 0308 	and.w	r3, r3, #8
 80043aa:	2b08      	cmp	r3, #8
 80043ac:	d122      	bne.n	80043f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	f003 0308 	and.w	r3, r3, #8
 80043b8:	2b08      	cmp	r3, #8
 80043ba:	d11b      	bne.n	80043f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f06f 0208 	mvn.w	r2, #8
 80043c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2204      	movs	r2, #4
 80043ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	69db      	ldr	r3, [r3, #28]
 80043d2:	f003 0303 	and.w	r3, r3, #3
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d003      	beq.n	80043e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f000 f899 	bl	8004512 <HAL_TIM_IC_CaptureCallback>
 80043e0:	e005      	b.n	80043ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f000 f88c 	bl	8004500 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f000 f89b 	bl	8004524 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	691b      	ldr	r3, [r3, #16]
 80043fa:	f003 0310 	and.w	r3, r3, #16
 80043fe:	2b10      	cmp	r3, #16
 8004400:	d122      	bne.n	8004448 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	68db      	ldr	r3, [r3, #12]
 8004408:	f003 0310 	and.w	r3, r3, #16
 800440c:	2b10      	cmp	r3, #16
 800440e:	d11b      	bne.n	8004448 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f06f 0210 	mvn.w	r2, #16
 8004418:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2208      	movs	r2, #8
 800441e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	69db      	ldr	r3, [r3, #28]
 8004426:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800442a:	2b00      	cmp	r3, #0
 800442c:	d003      	beq.n	8004436 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f000 f86f 	bl	8004512 <HAL_TIM_IC_CaptureCallback>
 8004434:	e005      	b.n	8004442 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f000 f862 	bl	8004500 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f000 f871 	bl	8004524 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2200      	movs	r2, #0
 8004446:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	691b      	ldr	r3, [r3, #16]
 800444e:	f003 0301 	and.w	r3, r3, #1
 8004452:	2b01      	cmp	r3, #1
 8004454:	d10e      	bne.n	8004474 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	f003 0301 	and.w	r3, r3, #1
 8004460:	2b01      	cmp	r3, #1
 8004462:	d107      	bne.n	8004474 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f06f 0201 	mvn.w	r2, #1
 800446c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f7fc f870 	bl	8000554 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	691b      	ldr	r3, [r3, #16]
 800447a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800447e:	2b80      	cmp	r3, #128	; 0x80
 8004480:	d10e      	bne.n	80044a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800448c:	2b80      	cmp	r3, #128	; 0x80
 800448e:	d107      	bne.n	80044a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004498:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f000 f8bf 	bl	800461e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	691b      	ldr	r3, [r3, #16]
 80044a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044aa:	2b40      	cmp	r3, #64	; 0x40
 80044ac:	d10e      	bne.n	80044cc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	68db      	ldr	r3, [r3, #12]
 80044b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044b8:	2b40      	cmp	r3, #64	; 0x40
 80044ba:	d107      	bne.n	80044cc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80044c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f000 f835 	bl	8004536 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	691b      	ldr	r3, [r3, #16]
 80044d2:	f003 0320 	and.w	r3, r3, #32
 80044d6:	2b20      	cmp	r3, #32
 80044d8:	d10e      	bne.n	80044f8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	68db      	ldr	r3, [r3, #12]
 80044e0:	f003 0320 	and.w	r3, r3, #32
 80044e4:	2b20      	cmp	r3, #32
 80044e6:	d107      	bne.n	80044f8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f06f 0220 	mvn.w	r2, #32
 80044f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f000 f88a 	bl	800460c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80044f8:	bf00      	nop
 80044fa:	3708      	adds	r7, #8
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}

08004500 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004500:	b480      	push	{r7}
 8004502:	b083      	sub	sp, #12
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004508:	bf00      	nop
 800450a:	370c      	adds	r7, #12
 800450c:	46bd      	mov	sp, r7
 800450e:	bc80      	pop	{r7}
 8004510:	4770      	bx	lr

08004512 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004512:	b480      	push	{r7}
 8004514:	b083      	sub	sp, #12
 8004516:	af00      	add	r7, sp, #0
 8004518:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800451a:	bf00      	nop
 800451c:	370c      	adds	r7, #12
 800451e:	46bd      	mov	sp, r7
 8004520:	bc80      	pop	{r7}
 8004522:	4770      	bx	lr

08004524 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004524:	b480      	push	{r7}
 8004526:	b083      	sub	sp, #12
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800452c:	bf00      	nop
 800452e:	370c      	adds	r7, #12
 8004530:	46bd      	mov	sp, r7
 8004532:	bc80      	pop	{r7}
 8004534:	4770      	bx	lr

08004536 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004536:	b480      	push	{r7}
 8004538:	b083      	sub	sp, #12
 800453a:	af00      	add	r7, sp, #0
 800453c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800453e:	bf00      	nop
 8004540:	370c      	adds	r7, #12
 8004542:	46bd      	mov	sp, r7
 8004544:	bc80      	pop	{r7}
 8004546:	4770      	bx	lr

08004548 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004548:	b480      	push	{r7}
 800454a:	b085      	sub	sp, #20
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
 8004550:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	4a29      	ldr	r2, [pc, #164]	; (8004600 <TIM_Base_SetConfig+0xb8>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d00b      	beq.n	8004578 <TIM_Base_SetConfig+0x30>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004566:	d007      	beq.n	8004578 <TIM_Base_SetConfig+0x30>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	4a26      	ldr	r2, [pc, #152]	; (8004604 <TIM_Base_SetConfig+0xbc>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d003      	beq.n	8004578 <TIM_Base_SetConfig+0x30>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	4a25      	ldr	r2, [pc, #148]	; (8004608 <TIM_Base_SetConfig+0xc0>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d108      	bne.n	800458a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800457e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	68fa      	ldr	r2, [r7, #12]
 8004586:	4313      	orrs	r3, r2
 8004588:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	4a1c      	ldr	r2, [pc, #112]	; (8004600 <TIM_Base_SetConfig+0xb8>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d00b      	beq.n	80045aa <TIM_Base_SetConfig+0x62>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004598:	d007      	beq.n	80045aa <TIM_Base_SetConfig+0x62>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	4a19      	ldr	r2, [pc, #100]	; (8004604 <TIM_Base_SetConfig+0xbc>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d003      	beq.n	80045aa <TIM_Base_SetConfig+0x62>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	4a18      	ldr	r2, [pc, #96]	; (8004608 <TIM_Base_SetConfig+0xc0>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d108      	bne.n	80045bc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	68db      	ldr	r3, [r3, #12]
 80045b6:	68fa      	ldr	r2, [r7, #12]
 80045b8:	4313      	orrs	r3, r2
 80045ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	695b      	ldr	r3, [r3, #20]
 80045c6:	4313      	orrs	r3, r2
 80045c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	68fa      	ldr	r2, [r7, #12]
 80045ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	689a      	ldr	r2, [r3, #8]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	4a07      	ldr	r2, [pc, #28]	; (8004600 <TIM_Base_SetConfig+0xb8>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d103      	bne.n	80045f0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	691a      	ldr	r2, [r3, #16]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2201      	movs	r2, #1
 80045f4:	615a      	str	r2, [r3, #20]
}
 80045f6:	bf00      	nop
 80045f8:	3714      	adds	r7, #20
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bc80      	pop	{r7}
 80045fe:	4770      	bx	lr
 8004600:	40012c00 	.word	0x40012c00
 8004604:	40000400 	.word	0x40000400
 8004608:	40000800 	.word	0x40000800

0800460c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800460c:	b480      	push	{r7}
 800460e:	b083      	sub	sp, #12
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004614:	bf00      	nop
 8004616:	370c      	adds	r7, #12
 8004618:	46bd      	mov	sp, r7
 800461a:	bc80      	pop	{r7}
 800461c:	4770      	bx	lr

0800461e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800461e:	b480      	push	{r7}
 8004620:	b083      	sub	sp, #12
 8004622:	af00      	add	r7, sp, #0
 8004624:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004626:	bf00      	nop
 8004628:	370c      	adds	r7, #12
 800462a:	46bd      	mov	sp, r7
 800462c:	bc80      	pop	{r7}
 800462e:	4770      	bx	lr

08004630 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b082      	sub	sp, #8
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d101      	bne.n	8004642 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	e092      	b.n	8004768 <HAL_UART_Init+0x138>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	699b      	ldr	r3, [r3, #24]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d02c      	beq.n	80046a4 <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2 and USART3 */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a48      	ldr	r2, [pc, #288]	; (8004770 <HAL_UART_Init+0x140>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d00e      	beq.n	8004672 <HAL_UART_Init+0x42>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a46      	ldr	r2, [pc, #280]	; (8004774 <HAL_UART_Init+0x144>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d009      	beq.n	8004672 <HAL_UART_Init+0x42>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a45      	ldr	r2, [pc, #276]	; (8004778 <HAL_UART_Init+0x148>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d004      	beq.n	8004672 <HAL_UART_Init+0x42>
 8004668:	f44f 71b6 	mov.w	r1, #364	; 0x16c
 800466c:	4843      	ldr	r0, [pc, #268]	; (800477c <HAL_UART_Init+0x14c>)
 800466e:	f7fb ff87 	bl	8000580 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	699b      	ldr	r3, [r3, #24]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d028      	beq.n	80046cc <HAL_UART_Init+0x9c>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	699b      	ldr	r3, [r3, #24]
 800467e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004682:	d023      	beq.n	80046cc <HAL_UART_Init+0x9c>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	699b      	ldr	r3, [r3, #24]
 8004688:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800468c:	d01e      	beq.n	80046cc <HAL_UART_Init+0x9c>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	699b      	ldr	r3, [r3, #24]
 8004692:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004696:	d019      	beq.n	80046cc <HAL_UART_Init+0x9c>
 8004698:	f240 116d 	movw	r1, #365	; 0x16d
 800469c:	4837      	ldr	r0, [pc, #220]	; (800477c <HAL_UART_Init+0x14c>)
 800469e:	f7fb ff6f 	bl	8000580 <assert_failed>
 80046a2:	e013      	b.n	80046cc <HAL_UART_Init+0x9c>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a31      	ldr	r2, [pc, #196]	; (8004770 <HAL_UART_Init+0x140>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d00e      	beq.n	80046cc <HAL_UART_Init+0x9c>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a30      	ldr	r2, [pc, #192]	; (8004774 <HAL_UART_Init+0x144>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d009      	beq.n	80046cc <HAL_UART_Init+0x9c>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a2e      	ldr	r2, [pc, #184]	; (8004778 <HAL_UART_Init+0x148>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d004      	beq.n	80046cc <HAL_UART_Init+0x9c>
 80046c2:	f240 1171 	movw	r1, #369	; 0x171
 80046c6:	482d      	ldr	r0, [pc, #180]	; (800477c <HAL_UART_Init+0x14c>)
 80046c8:	f7fb ff5a 	bl	8000580 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d009      	beq.n	80046e8 <HAL_UART_Init+0xb8>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046dc:	d004      	beq.n	80046e8 <HAL_UART_Init+0xb8>
 80046de:	f240 1173 	movw	r1, #371	; 0x173
 80046e2:	4826      	ldr	r0, [pc, #152]	; (800477c <HAL_UART_Init+0x14c>)
 80046e4:	f7fb ff4c 	bl	8000580 <assert_failed>
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046ee:	b2db      	uxtb	r3, r3
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d106      	bne.n	8004702 <HAL_UART_Init+0xd2>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2200      	movs	r2, #0
 80046f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046fc:	6878      	ldr	r0, [r7, #4]
 80046fe:	f7fc f89d 	bl	800083c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2224      	movs	r2, #36	; 0x24
 8004706:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	6812      	ldr	r2, [r2, #0]
 8004712:	68d2      	ldr	r2, [r2, #12]
 8004714:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004718:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f000 fd74 	bl	8005208 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	687a      	ldr	r2, [r7, #4]
 8004726:	6812      	ldr	r2, [r2, #0]
 8004728:	6912      	ldr	r2, [r2, #16]
 800472a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800472e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	687a      	ldr	r2, [r7, #4]
 8004736:	6812      	ldr	r2, [r2, #0]
 8004738:	6952      	ldr	r2, [r2, #20]
 800473a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800473e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	687a      	ldr	r2, [r7, #4]
 8004746:	6812      	ldr	r2, [r2, #0]
 8004748:	68d2      	ldr	r2, [r2, #12]
 800474a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800474e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2220      	movs	r2, #32
 800475a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2220      	movs	r2, #32
 8004762:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004766:	2300      	movs	r3, #0
}
 8004768:	4618      	mov	r0, r3
 800476a:	3708      	adds	r7, #8
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}
 8004770:	40013800 	.word	0x40013800
 8004774:	40004400 	.word	0x40004400
 8004778:	40004800 	.word	0x40004800
 800477c:	0800b450 	.word	0x0800b450

08004780 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b086      	sub	sp, #24
 8004784:	af00      	add	r7, sp, #0
 8004786:	60f8      	str	r0, [r7, #12]
 8004788:	60b9      	str	r1, [r7, #8]
 800478a:	4613      	mov	r3, r2
 800478c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004794:	b2db      	uxtb	r3, r3
 8004796:	2b20      	cmp	r3, #32
 8004798:	d153      	bne.n	8004842 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d002      	beq.n	80047a6 <HAL_UART_Transmit_DMA+0x26>
 80047a0:	88fb      	ldrh	r3, [r7, #6]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d101      	bne.n	80047aa <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	e04c      	b.n	8004844 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d101      	bne.n	80047b8 <HAL_UART_Transmit_DMA+0x38>
 80047b4:	2302      	movs	r3, #2
 80047b6:	e045      	b.n	8004844 <HAL_UART_Transmit_DMA+0xc4>
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2201      	movs	r2, #1
 80047bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80047c0:	68ba      	ldr	r2, [r7, #8]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	88fa      	ldrh	r2, [r7, #6]
 80047ca:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	88fa      	ldrh	r2, [r7, #6]
 80047d0:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2200      	movs	r2, #0
 80047d6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2221      	movs	r2, #33	; 0x21
 80047dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047e4:	4a19      	ldr	r2, [pc, #100]	; (800484c <HAL_UART_Transmit_DMA+0xcc>)
 80047e6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047ec:	4a18      	ldr	r2, [pc, #96]	; (8004850 <HAL_UART_Transmit_DMA+0xd0>)
 80047ee:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047f4:	4a17      	ldr	r2, [pc, #92]	; (8004854 <HAL_UART_Transmit_DMA+0xd4>)
 80047f6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047fc:	2200      	movs	r2, #0
 80047fe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 8004800:	f107 0308 	add.w	r3, r7, #8
 8004804:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	6819      	ldr	r1, [r3, #0]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	3304      	adds	r3, #4
 8004814:	461a      	mov	r2, r3
 8004816:	88fb      	ldrh	r3, [r7, #6]
 8004818:	f7fc fb8c 	bl	8000f34 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004824:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2200      	movs	r2, #0
 800482a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	68fa      	ldr	r2, [r7, #12]
 8004834:	6812      	ldr	r2, [r2, #0]
 8004836:	6952      	ldr	r2, [r2, #20]
 8004838:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800483c:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800483e:	2300      	movs	r3, #0
 8004840:	e000      	b.n	8004844 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8004842:	2302      	movs	r3, #2
  }
}
 8004844:	4618      	mov	r0, r3
 8004846:	3718      	adds	r7, #24
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}
 800484c:	08004cab 	.word	0x08004cab
 8004850:	08004cfd 	.word	0x08004cfd
 8004854:	08004de5 	.word	0x08004de5

08004858 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b086      	sub	sp, #24
 800485c:	af00      	add	r7, sp, #0
 800485e:	60f8      	str	r0, [r7, #12]
 8004860:	60b9      	str	r1, [r7, #8]
 8004862:	4613      	mov	r3, r2
 8004864:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800486c:	b2db      	uxtb	r3, r3
 800486e:	2b20      	cmp	r3, #32
 8004870:	d13c      	bne.n	80048ec <HAL_UARTEx_ReceiveToIdle_DMA+0x94>
  {
    if ((pData == NULL) || (Size == 0U))
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d002      	beq.n	800487e <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8004878:	88fb      	ldrh	r3, [r7, #6]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d101      	bne.n	8004882 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e035      	b.n	80048ee <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
    }

    __HAL_LOCK(huart);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004888:	2b01      	cmp	r3, #1
 800488a:	d101      	bne.n	8004890 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 800488c:	2302      	movs	r3, #2
 800488e:	e02e      	b.n	80048ee <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2201      	movs	r2, #1
 8004894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2201      	movs	r2, #1
 800489c:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800489e:	88fb      	ldrh	r3, [r7, #6]
 80048a0:	461a      	mov	r2, r3
 80048a2:	68b9      	ldr	r1, [r7, #8]
 80048a4:	68f8      	ldr	r0, [r7, #12]
 80048a6:	f000 fae7 	bl	8004e78 <UART_Start_Receive_DMA>
 80048aa:	4603      	mov	r3, r0
 80048ac:	75fb      	strb	r3, [r7, #23]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80048ae:	7dfb      	ldrb	r3, [r7, #23]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d119      	bne.n	80048e8 <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d113      	bne.n	80048e4 <HAL_UARTEx_ReceiveToIdle_DMA+0x8c>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80048bc:	2300      	movs	r3, #0
 80048be:	613b      	str	r3, [r7, #16]
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	613b      	str	r3, [r7, #16]
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	613b      	str	r3, [r7, #16]
 80048d0:	693b      	ldr	r3, [r7, #16]
        SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	68fa      	ldr	r2, [r7, #12]
 80048d8:	6812      	ldr	r2, [r2, #0]
 80048da:	68d2      	ldr	r2, [r2, #12]
 80048dc:	f042 0210 	orr.w	r2, r2, #16
 80048e0:	60da      	str	r2, [r3, #12]
 80048e2:	e001      	b.n	80048e8 <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	75fb      	strb	r3, [r7, #23]
      }
    }

    return status;
 80048e8:	7dfb      	ldrb	r3, [r7, #23]
 80048ea:	e000      	b.n	80048ee <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
  }
  else
  {
    return HAL_BUSY;
 80048ec:	2302      	movs	r3, #2
  }
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3718      	adds	r7, #24
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}
	...

080048f8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b08a      	sub	sp, #40	; 0x28
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	68db      	ldr	r3, [r3, #12]
 800490e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	695b      	ldr	r3, [r3, #20]
 8004916:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004918:	2300      	movs	r3, #0
 800491a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800491c:	2300      	movs	r3, #0
 800491e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004922:	f003 030f 	and.w	r3, r3, #15
 8004926:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004928:	69bb      	ldr	r3, [r7, #24]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d10d      	bne.n	800494a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800492e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004930:	f003 0320 	and.w	r3, r3, #32
 8004934:	2b00      	cmp	r3, #0
 8004936:	d008      	beq.n	800494a <HAL_UART_IRQHandler+0x52>
 8004938:	6a3b      	ldr	r3, [r7, #32]
 800493a:	f003 0320 	and.w	r3, r3, #32
 800493e:	2b00      	cmp	r3, #0
 8004940:	d003      	beq.n	800494a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f000 fbb7 	bl	80050b6 <UART_Receive_IT>
      return;
 8004948:	e17c      	b.n	8004c44 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800494a:	69bb      	ldr	r3, [r7, #24]
 800494c:	2b00      	cmp	r3, #0
 800494e:	f000 80b1 	beq.w	8004ab4 <HAL_UART_IRQHandler+0x1bc>
 8004952:	69fb      	ldr	r3, [r7, #28]
 8004954:	f003 0301 	and.w	r3, r3, #1
 8004958:	2b00      	cmp	r3, #0
 800495a:	d105      	bne.n	8004968 <HAL_UART_IRQHandler+0x70>
 800495c:	6a3b      	ldr	r3, [r7, #32]
 800495e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004962:	2b00      	cmp	r3, #0
 8004964:	f000 80a6 	beq.w	8004ab4 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800496a:	f003 0301 	and.w	r3, r3, #1
 800496e:	2b00      	cmp	r3, #0
 8004970:	d00a      	beq.n	8004988 <HAL_UART_IRQHandler+0x90>
 8004972:	6a3b      	ldr	r3, [r7, #32]
 8004974:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004978:	2b00      	cmp	r3, #0
 800497a:	d005      	beq.n	8004988 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004980:	f043 0201 	orr.w	r2, r3, #1
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800498a:	f003 0304 	and.w	r3, r3, #4
 800498e:	2b00      	cmp	r3, #0
 8004990:	d00a      	beq.n	80049a8 <HAL_UART_IRQHandler+0xb0>
 8004992:	69fb      	ldr	r3, [r7, #28]
 8004994:	f003 0301 	and.w	r3, r3, #1
 8004998:	2b00      	cmp	r3, #0
 800499a:	d005      	beq.n	80049a8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a0:	f043 0202 	orr.w	r2, r3, #2
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80049a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049aa:	f003 0302 	and.w	r3, r3, #2
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d00a      	beq.n	80049c8 <HAL_UART_IRQHandler+0xd0>
 80049b2:	69fb      	ldr	r3, [r7, #28]
 80049b4:	f003 0301 	and.w	r3, r3, #1
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d005      	beq.n	80049c8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c0:	f043 0204 	orr.w	r2, r3, #4
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80049c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ca:	f003 0308 	and.w	r3, r3, #8
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d00f      	beq.n	80049f2 <HAL_UART_IRQHandler+0xfa>
 80049d2:	6a3b      	ldr	r3, [r7, #32]
 80049d4:	f003 0320 	and.w	r3, r3, #32
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d104      	bne.n	80049e6 <HAL_UART_IRQHandler+0xee>
 80049dc:	69fb      	ldr	r3, [r7, #28]
 80049de:	f003 0301 	and.w	r3, r3, #1
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d005      	beq.n	80049f2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ea:	f043 0208 	orr.w	r2, r3, #8
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	f000 811f 	beq.w	8004c3a <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80049fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fe:	f003 0320 	and.w	r3, r3, #32
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d007      	beq.n	8004a16 <HAL_UART_IRQHandler+0x11e>
 8004a06:	6a3b      	ldr	r3, [r7, #32]
 8004a08:	f003 0320 	and.w	r3, r3, #32
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d002      	beq.n	8004a16 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	f000 fb50 	bl	80050b6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	695b      	ldr	r3, [r3, #20]
 8004a1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	bf14      	ite	ne
 8004a24:	2301      	movne	r3, #1
 8004a26:	2300      	moveq	r3, #0
 8004a28:	b2db      	uxtb	r3, r3
 8004a2a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a30:	f003 0308 	and.w	r3, r3, #8
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d102      	bne.n	8004a3e <HAL_UART_IRQHandler+0x146>
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d031      	beq.n	8004aa2 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f000 fa93 	bl	8004f6a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	695b      	ldr	r3, [r3, #20]
 8004a4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d023      	beq.n	8004a9a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	6812      	ldr	r2, [r2, #0]
 8004a5a:	6952      	ldr	r2, [r2, #20]
 8004a5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a60:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d013      	beq.n	8004a92 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a6e:	4a77      	ldr	r2, [pc, #476]	; (8004c4c <HAL_UART_IRQHandler+0x354>)
 8004a70:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a76:	4618      	mov	r0, r3
 8004a78:	f7fc fb04 	bl	8001084 <HAL_DMA_Abort_IT>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d016      	beq.n	8004ab0 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a88:	687a      	ldr	r2, [r7, #4]
 8004a8a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004a8c:	4610      	mov	r0, r2
 8004a8e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a90:	e00e      	b.n	8004ab0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f000 f900 	bl	8004c98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a98:	e00a      	b.n	8004ab0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f000 f8fc 	bl	8004c98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004aa0:	e006      	b.n	8004ab0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f000 f8f8 	bl	8004c98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004aae:	e0c4      	b.n	8004c3a <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ab0:	bf00      	nop
    return;
 8004ab2:	e0c2      	b.n	8004c3a <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	f040 80a1 	bne.w	8004c00 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac0:	f003 0310 	and.w	r3, r3, #16
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	f000 809b 	beq.w	8004c00 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004aca:	6a3b      	ldr	r3, [r7, #32]
 8004acc:	f003 0310 	and.w	r3, r3, #16
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	f000 8095 	beq.w	8004c00 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	60fb      	str	r3, [r7, #12]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	60fb      	str	r3, [r7, #12]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	60fb      	str	r3, [r7, #12]
 8004aea:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	695b      	ldr	r3, [r3, #20]
 8004af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d04e      	beq.n	8004b98 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	827b      	strh	r3, [r7, #18]
      if (  (nb_remaining_rx_data > 0U)
 8004b04:	8a7b      	ldrh	r3, [r7, #18]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	f000 8099 	beq.w	8004c3e <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004b10:	8a7a      	ldrh	r2, [r7, #18]
 8004b12:	429a      	cmp	r2, r3
 8004b14:	f080 8093 	bcs.w	8004c3e <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	8a7a      	ldrh	r2, [r7, #18]
 8004b1c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b22:	699b      	ldr	r3, [r3, #24]
 8004b24:	2b20      	cmp	r3, #32
 8004b26:	d02b      	beq.n	8004b80 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	687a      	ldr	r2, [r7, #4]
 8004b2e:	6812      	ldr	r2, [r2, #0]
 8004b30:	68d2      	ldr	r2, [r2, #12]
 8004b32:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b36:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	687a      	ldr	r2, [r7, #4]
 8004b3e:	6812      	ldr	r2, [r2, #0]
 8004b40:	6952      	ldr	r2, [r2, #20]
 8004b42:	f022 0201 	bic.w	r2, r2, #1
 8004b46:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	687a      	ldr	r2, [r7, #4]
 8004b4e:	6812      	ldr	r2, [r2, #0]
 8004b50:	6952      	ldr	r2, [r2, #20]
 8004b52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b56:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2220      	movs	r2, #32
 8004b5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2200      	movs	r2, #0
 8004b64:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	6812      	ldr	r2, [r2, #0]
 8004b6e:	68d2      	ldr	r2, [r2, #12]
 8004b70:	f022 0210 	bic.w	r2, r2, #16
 8004b74:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f7fc fa48 	bl	8001010 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b88:	b29b      	uxth	r3, r3
 8004b8a:	1ad3      	subs	r3, r2, r3
 8004b8c:	b29b      	uxth	r3, r3
 8004b8e:	4619      	mov	r1, r3
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f006 f8c1 	bl	800ad18 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004b96:	e052      	b.n	8004c3e <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ba0:	b29b      	uxth	r3, r3
 8004ba2:	1ad3      	subs	r3, r2, r3
 8004ba4:	823b      	strh	r3, [r7, #16]
      if (  (huart->RxXferCount > 0U)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004baa:	b29b      	uxth	r3, r3
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d048      	beq.n	8004c42 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8004bb0:	8a3b      	ldrh	r3, [r7, #16]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d045      	beq.n	8004c42 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	687a      	ldr	r2, [r7, #4]
 8004bbc:	6812      	ldr	r2, [r2, #0]
 8004bbe:	68d2      	ldr	r2, [r2, #12]
 8004bc0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004bc4:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	687a      	ldr	r2, [r7, #4]
 8004bcc:	6812      	ldr	r2, [r2, #0]
 8004bce:	6952      	ldr	r2, [r2, #20]
 8004bd0:	f022 0201 	bic.w	r2, r2, #1
 8004bd4:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2220      	movs	r2, #32
 8004bda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2200      	movs	r2, #0
 8004be2:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	687a      	ldr	r2, [r7, #4]
 8004bea:	6812      	ldr	r2, [r2, #0]
 8004bec:	68d2      	ldr	r2, [r2, #12]
 8004bee:	f022 0210 	bic.w	r2, r2, #16
 8004bf2:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004bf4:	8a3b      	ldrh	r3, [r7, #16]
 8004bf6:	4619      	mov	r1, r3
 8004bf8:	6878      	ldr	r0, [r7, #4]
 8004bfa:	f006 f88d 	bl	800ad18 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004bfe:	e020      	b.n	8004c42 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d008      	beq.n	8004c1c <HAL_UART_IRQHandler+0x324>
 8004c0a:	6a3b      	ldr	r3, [r7, #32]
 8004c0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d003      	beq.n	8004c1c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	f000 f9e8 	bl	8004fea <UART_Transmit_IT>
    return;
 8004c1a:	e013      	b.n	8004c44 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d00e      	beq.n	8004c44 <HAL_UART_IRQHandler+0x34c>
 8004c26:	6a3b      	ldr	r3, [r7, #32]
 8004c28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d009      	beq.n	8004c44 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f000 fa28 	bl	8005086 <UART_EndTransmit_IT>
    return;
 8004c36:	bf00      	nop
 8004c38:	e004      	b.n	8004c44 <HAL_UART_IRQHandler+0x34c>
    return;
 8004c3a:	bf00      	nop
 8004c3c:	e002      	b.n	8004c44 <HAL_UART_IRQHandler+0x34c>
      return;
 8004c3e:	bf00      	nop
 8004c40:	e000      	b.n	8004c44 <HAL_UART_IRQHandler+0x34c>
      return;
 8004c42:	bf00      	nop
  }
}
 8004c44:	3728      	adds	r7, #40	; 0x28
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}
 8004c4a:	bf00      	nop
 8004c4c:	08004fc3 	.word	0x08004fc3

08004c50 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b083      	sub	sp, #12
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004c58:	bf00      	nop
 8004c5a:	370c      	adds	r7, #12
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bc80      	pop	{r7}
 8004c60:	4770      	bx	lr

08004c62 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004c62:	b480      	push	{r7}
 8004c64:	b083      	sub	sp, #12
 8004c66:	af00      	add	r7, sp, #0
 8004c68:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8004c6a:	bf00      	nop
 8004c6c:	370c      	adds	r7, #12
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bc80      	pop	{r7}
 8004c72:	4770      	bx	lr

08004c74 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b083      	sub	sp, #12
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004c7c:	bf00      	nop
 8004c7e:	370c      	adds	r7, #12
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bc80      	pop	{r7}
 8004c84:	4770      	bx	lr

08004c86 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004c86:	b480      	push	{r7}
 8004c88:	b083      	sub	sp, #12
 8004c8a:	af00      	add	r7, sp, #0
 8004c8c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004c8e:	bf00      	nop
 8004c90:	370c      	adds	r7, #12
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bc80      	pop	{r7}
 8004c96:	4770      	bx	lr

08004c98 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b083      	sub	sp, #12
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004ca0:	bf00      	nop
 8004ca2:	370c      	adds	r7, #12
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bc80      	pop	{r7}
 8004ca8:	4770      	bx	lr

08004caa <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004caa:	b580      	push	{r7, lr}
 8004cac:	b084      	sub	sp, #16
 8004cae:	af00      	add	r7, sp, #0
 8004cb0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb6:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f003 0320 	and.w	r3, r3, #32
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d113      	bne.n	8004cee <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	68fa      	ldr	r2, [r7, #12]
 8004cd2:	6812      	ldr	r2, [r2, #0]
 8004cd4:	6952      	ldr	r2, [r2, #20]
 8004cd6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004cda:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	68fa      	ldr	r2, [r7, #12]
 8004ce2:	6812      	ldr	r2, [r2, #0]
 8004ce4:	68d2      	ldr	r2, [r2, #12]
 8004ce6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004cea:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004cec:	e002      	b.n	8004cf4 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8004cee:	68f8      	ldr	r0, [r7, #12]
 8004cf0:	f7ff ffae 	bl	8004c50 <HAL_UART_TxCpltCallback>
}
 8004cf4:	bf00      	nop
 8004cf6:	3710      	adds	r7, #16
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}

08004cfc <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b084      	sub	sp, #16
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d08:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004d0a:	68f8      	ldr	r0, [r7, #12]
 8004d0c:	f7ff ffa9 	bl	8004c62 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d10:	bf00      	nop
 8004d12:	3710      	adds	r7, #16
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}

08004d18 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b084      	sub	sp, #16
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d24:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f003 0320 	and.w	r3, r3, #32
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d12a      	bne.n	8004d8a <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2200      	movs	r2, #0
 8004d38:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	68fa      	ldr	r2, [r7, #12]
 8004d40:	6812      	ldr	r2, [r2, #0]
 8004d42:	68d2      	ldr	r2, [r2, #12]
 8004d44:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d48:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	68fa      	ldr	r2, [r7, #12]
 8004d50:	6812      	ldr	r2, [r2, #0]
 8004d52:	6952      	ldr	r2, [r2, #20]
 8004d54:	f022 0201 	bic.w	r2, r2, #1
 8004d58:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	68fa      	ldr	r2, [r7, #12]
 8004d60:	6812      	ldr	r2, [r2, #0]
 8004d62:	6952      	ldr	r2, [r2, #20]
 8004d64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d68:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2220      	movs	r2, #32
 8004d6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	d107      	bne.n	8004d8a <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	68fa      	ldr	r2, [r7, #12]
 8004d80:	6812      	ldr	r2, [r2, #0]
 8004d82:	68d2      	ldr	r2, [r2, #12]
 8004d84:	f022 0210 	bic.w	r2, r2, #16
 8004d88:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d8e:	2b01      	cmp	r3, #1
 8004d90:	d106      	bne.n	8004da0 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004d96:	4619      	mov	r1, r3
 8004d98:	68f8      	ldr	r0, [r7, #12]
 8004d9a:	f005 ffbd 	bl	800ad18 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004d9e:	e002      	b.n	8004da6 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8004da0:	68f8      	ldr	r0, [r7, #12]
 8004da2:	f7ff ff67 	bl	8004c74 <HAL_UART_RxCpltCallback>
}
 8004da6:	bf00      	nop
 8004da8:	3710      	adds	r7, #16
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}

08004dae <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004dae:	b580      	push	{r7, lr}
 8004db0:	b084      	sub	sp, #16
 8004db2:	af00      	add	r7, sp, #0
 8004db4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dba:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d108      	bne.n	8004dd6 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004dc8:	085b      	lsrs	r3, r3, #1
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	4619      	mov	r1, r3
 8004dce:	68f8      	ldr	r0, [r7, #12]
 8004dd0:	f005 ffa2 	bl	800ad18 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004dd4:	e002      	b.n	8004ddc <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8004dd6:	68f8      	ldr	r0, [r7, #12]
 8004dd8:	f7ff ff55 	bl	8004c86 <HAL_UART_RxHalfCpltCallback>
}
 8004ddc:	bf00      	nop
 8004dde:	3710      	adds	r7, #16
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}

08004de4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b084      	sub	sp, #16
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004dec:	2300      	movs	r3, #0
 8004dee:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	695b      	ldr	r3, [r3, #20]
 8004dfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	bf14      	ite	ne
 8004e04:	2301      	movne	r3, #1
 8004e06:	2300      	moveq	r3, #0
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e12:	b2db      	uxtb	r3, r3
 8004e14:	2b21      	cmp	r3, #33	; 0x21
 8004e16:	d108      	bne.n	8004e2a <UART_DMAError+0x46>
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d005      	beq.n	8004e2a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	2200      	movs	r2, #0
 8004e22:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004e24:	68b8      	ldr	r0, [r7, #8]
 8004e26:	f000 f88b 	bl	8004f40 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	695b      	ldr	r3, [r3, #20]
 8004e30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	bf14      	ite	ne
 8004e38:	2301      	movne	r3, #1
 8004e3a:	2300      	moveq	r3, #0
 8004e3c:	b2db      	uxtb	r3, r3
 8004e3e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e46:	b2db      	uxtb	r3, r3
 8004e48:	2b22      	cmp	r3, #34	; 0x22
 8004e4a:	d108      	bne.n	8004e5e <UART_DMAError+0x7a>
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d005      	beq.n	8004e5e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	2200      	movs	r2, #0
 8004e56:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004e58:	68b8      	ldr	r0, [r7, #8]
 8004e5a:	f000 f886 	bl	8004f6a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e62:	f043 0210 	orr.w	r2, r3, #16
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004e6a:	68b8      	ldr	r0, [r7, #8]
 8004e6c:	f7ff ff14 	bl	8004c98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e70:	bf00      	nop
 8004e72:	3710      	adds	r7, #16
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}

08004e78 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b086      	sub	sp, #24
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	60f8      	str	r0, [r7, #12]
 8004e80:	60b9      	str	r1, [r7, #8]
 8004e82:	4613      	mov	r3, r2
 8004e84:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004e86:	68ba      	ldr	r2, [r7, #8]
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	88fa      	ldrh	r2, [r7, #6]
 8004e90:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2200      	movs	r2, #0
 8004e96:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2222      	movs	r2, #34	; 0x22
 8004e9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ea4:	4a23      	ldr	r2, [pc, #140]	; (8004f34 <UART_Start_Receive_DMA+0xbc>)
 8004ea6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eac:	4a22      	ldr	r2, [pc, #136]	; (8004f38 <UART_Start_Receive_DMA+0xc0>)
 8004eae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eb4:	4a21      	ldr	r2, [pc, #132]	; (8004f3c <UART_Start_Receive_DMA+0xc4>)
 8004eb6:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004ec0:	f107 0308 	add.w	r3, r7, #8
 8004ec4:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	3304      	adds	r3, #4
 8004ed0:	4619      	mov	r1, r3
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	681a      	ldr	r2, [r3, #0]
 8004ed6:	88fb      	ldrh	r3, [r7, #6]
 8004ed8:	f7fc f82c 	bl	8000f34 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004edc:	2300      	movs	r3, #0
 8004ede:	613b      	str	r3, [r7, #16]
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	613b      	str	r3, [r7, #16]
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	613b      	str	r3, [r7, #16]
 8004ef0:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	68fa      	ldr	r2, [r7, #12]
 8004f00:	6812      	ldr	r2, [r2, #0]
 8004f02:	68d2      	ldr	r2, [r2, #12]
 8004f04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f08:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	68fa      	ldr	r2, [r7, #12]
 8004f10:	6812      	ldr	r2, [r2, #0]
 8004f12:	6952      	ldr	r2, [r2, #20]
 8004f14:	f042 0201 	orr.w	r2, r2, #1
 8004f18:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	68fa      	ldr	r2, [r7, #12]
 8004f20:	6812      	ldr	r2, [r2, #0]
 8004f22:	6952      	ldr	r2, [r2, #20]
 8004f24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f28:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8004f2a:	2300      	movs	r3, #0
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	3718      	adds	r7, #24
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}
 8004f34:	08004d19 	.word	0x08004d19
 8004f38:	08004daf 	.word	0x08004daf
 8004f3c:	08004de5 	.word	0x08004de5

08004f40 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b083      	sub	sp, #12
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	687a      	ldr	r2, [r7, #4]
 8004f4e:	6812      	ldr	r2, [r2, #0]
 8004f50:	68d2      	ldr	r2, [r2, #12]
 8004f52:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004f56:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2220      	movs	r2, #32
 8004f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8004f60:	bf00      	nop
 8004f62:	370c      	adds	r7, #12
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bc80      	pop	{r7}
 8004f68:	4770      	bx	lr

08004f6a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f6a:	b480      	push	{r7}
 8004f6c:	b083      	sub	sp, #12
 8004f6e:	af00      	add	r7, sp, #0
 8004f70:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	687a      	ldr	r2, [r7, #4]
 8004f78:	6812      	ldr	r2, [r2, #0]
 8004f7a:	68d2      	ldr	r2, [r2, #12]
 8004f7c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004f80:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	687a      	ldr	r2, [r7, #4]
 8004f88:	6812      	ldr	r2, [r2, #0]
 8004f8a:	6952      	ldr	r2, [r2, #20]
 8004f8c:	f022 0201 	bic.w	r2, r2, #1
 8004f90:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f96:	2b01      	cmp	r3, #1
 8004f98:	d107      	bne.n	8004faa <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	687a      	ldr	r2, [r7, #4]
 8004fa0:	6812      	ldr	r2, [r2, #0]
 8004fa2:	68d2      	ldr	r2, [r2, #12]
 8004fa4:	f022 0210 	bic.w	r2, r2, #16
 8004fa8:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2220      	movs	r2, #32
 8004fae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004fb8:	bf00      	nop
 8004fba:	370c      	adds	r7, #12
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bc80      	pop	{r7}
 8004fc0:	4770      	bx	lr

08004fc2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004fc2:	b580      	push	{r7, lr}
 8004fc4:	b084      	sub	sp, #16
 8004fc6:	af00      	add	r7, sp, #0
 8004fc8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fce:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004fdc:	68f8      	ldr	r0, [r7, #12]
 8004fde:	f7ff fe5b 	bl	8004c98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004fe2:	bf00      	nop
 8004fe4:	3710      	adds	r7, #16
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}

08004fea <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004fea:	b480      	push	{r7}
 8004fec:	b085      	sub	sp, #20
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ff8:	b2db      	uxtb	r3, r3
 8004ffa:	2b21      	cmp	r3, #33	; 0x21
 8004ffc:	d13d      	bne.n	800507a <UART_Transmit_IT+0x90>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005006:	d113      	bne.n	8005030 <UART_Transmit_IT+0x46>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	691b      	ldr	r3, [r3, #16]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d10f      	bne.n	8005030 <UART_Transmit_IT+0x46>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6a1b      	ldr	r3, [r3, #32]
 8005014:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	68fa      	ldr	r2, [r7, #12]
 800501c:	8812      	ldrh	r2, [r2, #0]
 800501e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005022:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6a1b      	ldr	r3, [r3, #32]
 8005028:	1c9a      	adds	r2, r3, #2
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	621a      	str	r2, [r3, #32]
 800502e:	e008      	b.n	8005042 <UART_Transmit_IT+0x58>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6a1b      	ldr	r3, [r3, #32]
 8005038:	1c58      	adds	r0, r3, #1
 800503a:	6879      	ldr	r1, [r7, #4]
 800503c:	6208      	str	r0, [r1, #32]
 800503e:	781b      	ldrb	r3, [r3, #0]
 8005040:	6053      	str	r3, [r2, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005046:	b29b      	uxth	r3, r3
 8005048:	3b01      	subs	r3, #1
 800504a:	b29b      	uxth	r3, r3
 800504c:	687a      	ldr	r2, [r7, #4]
 800504e:	4619      	mov	r1, r3
 8005050:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005052:	2b00      	cmp	r3, #0
 8005054:	d10f      	bne.n	8005076 <UART_Transmit_IT+0x8c>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	6812      	ldr	r2, [r2, #0]
 800505e:	68d2      	ldr	r2, [r2, #12]
 8005060:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005064:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	687a      	ldr	r2, [r7, #4]
 800506c:	6812      	ldr	r2, [r2, #0]
 800506e:	68d2      	ldr	r2, [r2, #12]
 8005070:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005074:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005076:	2300      	movs	r3, #0
 8005078:	e000      	b.n	800507c <UART_Transmit_IT+0x92>
  }
  else
  {
    return HAL_BUSY;
 800507a:	2302      	movs	r3, #2
  }
}
 800507c:	4618      	mov	r0, r3
 800507e:	3714      	adds	r7, #20
 8005080:	46bd      	mov	sp, r7
 8005082:	bc80      	pop	{r7}
 8005084:	4770      	bx	lr

08005086 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005086:	b580      	push	{r7, lr}
 8005088:	b082      	sub	sp, #8
 800508a:	af00      	add	r7, sp, #0
 800508c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	687a      	ldr	r2, [r7, #4]
 8005094:	6812      	ldr	r2, [r2, #0]
 8005096:	68d2      	ldr	r2, [r2, #12]
 8005098:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800509c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2220      	movs	r2, #32
 80050a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f7ff fdd2 	bl	8004c50 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80050ac:	2300      	movs	r3, #0
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	3708      	adds	r7, #8
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}

080050b6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80050b6:	b580      	push	{r7, lr}
 80050b8:	b086      	sub	sp, #24
 80050ba:	af00      	add	r7, sp, #0
 80050bc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050c4:	b2db      	uxtb	r3, r3
 80050c6:	2b22      	cmp	r3, #34	; 0x22
 80050c8:	f040 8099 	bne.w	80051fe <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050d4:	d117      	bne.n	8005106 <UART_Receive_IT+0x50>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	691b      	ldr	r3, [r3, #16]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d113      	bne.n	8005106 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80050de:	2300      	movs	r3, #0
 80050e0:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050e6:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	b29b      	uxth	r3, r3
 80050f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050f4:	b29a      	uxth	r2, r3
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050fe:	1c9a      	adds	r2, r3, #2
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	629a      	str	r2, [r3, #40]	; 0x28
 8005104:	e026      	b.n	8005154 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800510a:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800510c:	2300      	movs	r3, #0
 800510e:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005118:	d007      	beq.n	800512a <UART_Receive_IT+0x74>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d10a      	bne.n	8005138 <UART_Receive_IT+0x82>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	691b      	ldr	r3, [r3, #16]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d106      	bne.n	8005138 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	b2da      	uxtb	r2, r3
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	701a      	strb	r2, [r3, #0]
 8005136:	e008      	b.n	800514a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	b2db      	uxtb	r3, r3
 8005140:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005144:	b2da      	uxtb	r2, r3
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800514e:	1c5a      	adds	r2, r3, #1
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005158:	b29b      	uxth	r3, r3
 800515a:	3b01      	subs	r3, #1
 800515c:	b29b      	uxth	r3, r3
 800515e:	687a      	ldr	r2, [r7, #4]
 8005160:	4619      	mov	r1, r3
 8005162:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005164:	2b00      	cmp	r3, #0
 8005166:	d148      	bne.n	80051fa <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	687a      	ldr	r2, [r7, #4]
 800516e:	6812      	ldr	r2, [r2, #0]
 8005170:	68d2      	ldr	r2, [r2, #12]
 8005172:	f022 0220 	bic.w	r2, r2, #32
 8005176:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	687a      	ldr	r2, [r7, #4]
 800517e:	6812      	ldr	r2, [r2, #0]
 8005180:	68d2      	ldr	r2, [r2, #12]
 8005182:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005186:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	687a      	ldr	r2, [r7, #4]
 800518e:	6812      	ldr	r2, [r2, #0]
 8005190:	6952      	ldr	r2, [r2, #20]
 8005192:	f022 0201 	bic.w	r2, r2, #1
 8005196:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2220      	movs	r2, #32
 800519c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d123      	bne.n	80051f0 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2200      	movs	r2, #0
 80051ac:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	687a      	ldr	r2, [r7, #4]
 80051b4:	6812      	ldr	r2, [r2, #0]
 80051b6:	68d2      	ldr	r2, [r2, #12]
 80051b8:	f022 0210 	bic.w	r2, r2, #16
 80051bc:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f003 0310 	and.w	r3, r3, #16
 80051c8:	2b10      	cmp	r3, #16
 80051ca:	d10a      	bne.n	80051e2 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80051cc:	2300      	movs	r3, #0
 80051ce:	60fb      	str	r3, [r7, #12]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	60fb      	str	r3, [r7, #12]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	60fb      	str	r3, [r7, #12]
 80051e0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80051e6:	4619      	mov	r1, r3
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	f005 fd95 	bl	800ad18 <HAL_UARTEx_RxEventCallback>
 80051ee:	e002      	b.n	80051f6 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	f7ff fd3f 	bl	8004c74 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80051f6:	2300      	movs	r3, #0
 80051f8:	e002      	b.n	8005200 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80051fa:	2300      	movs	r3, #0
 80051fc:	e000      	b.n	8005200 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80051fe:	2302      	movs	r3, #2
  }
}
 8005200:	4618      	mov	r0, r3
 8005202:	3718      	adds	r7, #24
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}

08005208 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005208:	b590      	push	{r4, r7, lr}
 800520a:	b085      	sub	sp, #20
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	4a5f      	ldr	r2, [pc, #380]	; (8005394 <UART_SetConfig+0x18c>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d904      	bls.n	8005224 <UART_SetConfig+0x1c>
 800521a:	f640 6153 	movw	r1, #3667	; 0xe53
 800521e:	485e      	ldr	r0, [pc, #376]	; (8005398 <UART_SetConfig+0x190>)
 8005220:	f7fb f9ae 	bl	8000580 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	68db      	ldr	r3, [r3, #12]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d009      	beq.n	8005240 <UART_SetConfig+0x38>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	68db      	ldr	r3, [r3, #12]
 8005230:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005234:	d004      	beq.n	8005240 <UART_SetConfig+0x38>
 8005236:	f640 6154 	movw	r1, #3668	; 0xe54
 800523a:	4857      	ldr	r0, [pc, #348]	; (8005398 <UART_SetConfig+0x190>)
 800523c:	f7fb f9a0 	bl	8000580 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	691b      	ldr	r3, [r3, #16]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d00e      	beq.n	8005266 <UART_SetConfig+0x5e>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	691b      	ldr	r3, [r3, #16]
 800524c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005250:	d009      	beq.n	8005266 <UART_SetConfig+0x5e>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	691b      	ldr	r3, [r3, #16]
 8005256:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800525a:	d004      	beq.n	8005266 <UART_SetConfig+0x5e>
 800525c:	f640 6155 	movw	r1, #3669	; 0xe55
 8005260:	484d      	ldr	r0, [pc, #308]	; (8005398 <UART_SetConfig+0x190>)
 8005262:	f7fb f98d 	bl	8000580 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	695a      	ldr	r2, [r3, #20]
 800526a:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 800526e:	4013      	ands	r3, r2
 8005270:	2b00      	cmp	r3, #0
 8005272:	d103      	bne.n	800527c <UART_SetConfig+0x74>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	695b      	ldr	r3, [r3, #20]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d104      	bne.n	8005286 <UART_SetConfig+0x7e>
 800527c:	f640 6156 	movw	r1, #3670	; 0xe56
 8005280:	4845      	ldr	r0, [pc, #276]	; (8005398 <UART_SetConfig+0x190>)
 8005282:	f7fb f97d 	bl	8000580 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	687a      	ldr	r2, [r7, #4]
 800528c:	6812      	ldr	r2, [r2, #0]
 800528e:	6912      	ldr	r2, [r2, #16]
 8005290:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8005294:	687a      	ldr	r2, [r7, #4]
 8005296:	68d2      	ldr	r2, [r2, #12]
 8005298:	430a      	orrs	r2, r1
 800529a:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	689a      	ldr	r2, [r3, #8]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	691b      	ldr	r3, [r3, #16]
 80052a4:	431a      	orrs	r2, r3
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	695b      	ldr	r3, [r3, #20]
 80052aa:	4313      	orrs	r3, r2
 80052ac:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681a      	ldr	r2, [r3, #0]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	68db      	ldr	r3, [r3, #12]
 80052b8:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80052bc:	f023 030c 	bic.w	r3, r3, #12
 80052c0:	68b9      	ldr	r1, [r7, #8]
 80052c2:	430b      	orrs	r3, r1
 80052c4:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	687a      	ldr	r2, [r7, #4]
 80052cc:	6812      	ldr	r2, [r2, #0]
 80052ce:	6952      	ldr	r2, [r2, #20]
 80052d0:	f422 7140 	bic.w	r1, r2, #768	; 0x300
 80052d4:	687a      	ldr	r2, [r7, #4]
 80052d6:	6992      	ldr	r2, [r2, #24]
 80052d8:	430a      	orrs	r2, r1
 80052da:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a2e      	ldr	r2, [pc, #184]	; (800539c <UART_SetConfig+0x194>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d103      	bne.n	80052ee <UART_SetConfig+0xe6>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80052e6:	f7fe fd65 	bl	8003db4 <HAL_RCC_GetPCLK2Freq>
 80052ea:	60f8      	str	r0, [r7, #12]
 80052ec:	e002      	b.n	80052f4 <UART_SetConfig+0xec>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80052ee:	f7fe fd4d 	bl	8003d8c <HAL_RCC_GetPCLK1Freq>
 80052f2:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6819      	ldr	r1, [r3, #0]
 80052f8:	68fa      	ldr	r2, [r7, #12]
 80052fa:	4613      	mov	r3, r2
 80052fc:	009b      	lsls	r3, r3, #2
 80052fe:	4413      	add	r3, r2
 8005300:	009a      	lsls	r2, r3, #2
 8005302:	441a      	add	r2, r3
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	009b      	lsls	r3, r3, #2
 800530a:	fbb2 f3f3 	udiv	r3, r2, r3
 800530e:	4a24      	ldr	r2, [pc, #144]	; (80053a0 <UART_SetConfig+0x198>)
 8005310:	fba2 2303 	umull	r2, r3, r2, r3
 8005314:	095b      	lsrs	r3, r3, #5
 8005316:	0118      	lsls	r0, r3, #4
 8005318:	68fa      	ldr	r2, [r7, #12]
 800531a:	4613      	mov	r3, r2
 800531c:	009b      	lsls	r3, r3, #2
 800531e:	4413      	add	r3, r2
 8005320:	009a      	lsls	r2, r3, #2
 8005322:	441a      	add	r2, r3
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	009b      	lsls	r3, r3, #2
 800532a:	fbb2 f2f3 	udiv	r2, r2, r3
 800532e:	4b1c      	ldr	r3, [pc, #112]	; (80053a0 <UART_SetConfig+0x198>)
 8005330:	fba3 4302 	umull	r4, r3, r3, r2
 8005334:	095b      	lsrs	r3, r3, #5
 8005336:	2464      	movs	r4, #100	; 0x64
 8005338:	fb04 f303 	mul.w	r3, r4, r3
 800533c:	1ad3      	subs	r3, r2, r3
 800533e:	011b      	lsls	r3, r3, #4
 8005340:	3332      	adds	r3, #50	; 0x32
 8005342:	4a17      	ldr	r2, [pc, #92]	; (80053a0 <UART_SetConfig+0x198>)
 8005344:	fba2 2303 	umull	r2, r3, r2, r3
 8005348:	095b      	lsrs	r3, r3, #5
 800534a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800534e:	4418      	add	r0, r3
 8005350:	68fa      	ldr	r2, [r7, #12]
 8005352:	4613      	mov	r3, r2
 8005354:	009b      	lsls	r3, r3, #2
 8005356:	4413      	add	r3, r2
 8005358:	009a      	lsls	r2, r3, #2
 800535a:	441a      	add	r2, r3
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	009b      	lsls	r3, r3, #2
 8005362:	fbb2 f2f3 	udiv	r2, r2, r3
 8005366:	4b0e      	ldr	r3, [pc, #56]	; (80053a0 <UART_SetConfig+0x198>)
 8005368:	fba3 4302 	umull	r4, r3, r3, r2
 800536c:	095b      	lsrs	r3, r3, #5
 800536e:	2464      	movs	r4, #100	; 0x64
 8005370:	fb04 f303 	mul.w	r3, r4, r3
 8005374:	1ad3      	subs	r3, r2, r3
 8005376:	011b      	lsls	r3, r3, #4
 8005378:	3332      	adds	r3, #50	; 0x32
 800537a:	4a09      	ldr	r2, [pc, #36]	; (80053a0 <UART_SetConfig+0x198>)
 800537c:	fba2 2303 	umull	r2, r3, r2, r3
 8005380:	095b      	lsrs	r3, r3, #5
 8005382:	f003 030f 	and.w	r3, r3, #15
 8005386:	4403      	add	r3, r0
 8005388:	608b      	str	r3, [r1, #8]
#endif /* USART_CR1_OVER8 */
}
 800538a:	bf00      	nop
 800538c:	3714      	adds	r7, #20
 800538e:	46bd      	mov	sp, r7
 8005390:	bd90      	pop	{r4, r7, pc}
 8005392:	bf00      	nop
 8005394:	0044aa20 	.word	0x0044aa20
 8005398:	0800b450 	.word	0x0800b450
 800539c:	40013800 	.word	0x40013800
 80053a0:	51eb851f 	.word	0x51eb851f

080053a4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80053a4:	b084      	sub	sp, #16
 80053a6:	b480      	push	{r7}
 80053a8:	b083      	sub	sp, #12
 80053aa:	af00      	add	r7, sp, #0
 80053ac:	6078      	str	r0, [r7, #4]
 80053ae:	f107 0014 	add.w	r0, r7, #20
 80053b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80053b6:	2300      	movs	r3, #0
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	370c      	adds	r7, #12
 80053bc:	46bd      	mov	sp, r7
 80053be:	bc80      	pop	{r7}
 80053c0:	b004      	add	sp, #16
 80053c2:	4770      	bx	lr

080053c4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b085      	sub	sp, #20
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2200      	movs	r2, #0
 80053d0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80053d4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80053d8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	b29a      	uxth	r2, r3
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80053e4:	2300      	movs	r3, #0
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	3714      	adds	r7, #20
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bc80      	pop	{r7}
 80053ee:	4770      	bx	lr

080053f0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b085      	sub	sp, #20
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80053f8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80053fc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005404:	b29a      	uxth	r2, r3
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	b29b      	uxth	r3, r3
 800540a:	43db      	mvns	r3, r3
 800540c:	b29b      	uxth	r3, r3
 800540e:	4013      	ands	r3, r2
 8005410:	b29a      	uxth	r2, r3
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005418:	2300      	movs	r3, #0
}
 800541a:	4618      	mov	r0, r3
 800541c:	3714      	adds	r7, #20
 800541e:	46bd      	mov	sp, r7
 8005420:	bc80      	pop	{r7}
 8005422:	4770      	bx	lr

08005424 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8005424:	b480      	push	{r7}
 8005426:	b083      	sub	sp, #12
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
 800542c:	460b      	mov	r3, r1
 800542e:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005430:	2300      	movs	r3, #0
}
 8005432:	4618      	mov	r0, r3
 8005434:	370c      	adds	r7, #12
 8005436:	46bd      	mov	sp, r7
 8005438:	bc80      	pop	{r7}
 800543a:	4770      	bx	lr

0800543c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800543c:	b084      	sub	sp, #16
 800543e:	b480      	push	{r7}
 8005440:	b083      	sub	sp, #12
 8005442:	af00      	add	r7, sp, #0
 8005444:	6078      	str	r0, [r7, #4]
 8005446:	f107 0014 	add.w	r0, r7, #20
 800544a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2201      	movs	r2, #1
 8005452:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2200      	movs	r2, #0
 800545a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2200      	movs	r2, #0
 8005462:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2200      	movs	r2, #0
 800546a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800546e:	2300      	movs	r3, #0
}
 8005470:	4618      	mov	r0, r3
 8005472:	370c      	adds	r7, #12
 8005474:	46bd      	mov	sp, r7
 8005476:	bc80      	pop	{r7}
 8005478:	b004      	add	sp, #16
 800547a:	4770      	bx	lr

0800547c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800547c:	b480      	push	{r7}
 800547e:	b09b      	sub	sp, #108	; 0x6c
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
 8005484:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005486:	2300      	movs	r3, #0
 8005488:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800548c:	687a      	ldr	r2, [r7, #4]
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	781b      	ldrb	r3, [r3, #0]
 8005492:	009b      	lsls	r3, r3, #2
 8005494:	4413      	add	r3, r2
 8005496:	881b      	ldrh	r3, [r3, #0]
 8005498:	b29b      	uxth	r3, r3
 800549a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800549e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054a2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	78db      	ldrb	r3, [r3, #3]
 80054aa:	2b03      	cmp	r3, #3
 80054ac:	d81f      	bhi.n	80054ee <USB_ActivateEndpoint+0x72>
 80054ae:	a201      	add	r2, pc, #4	; (adr r2, 80054b4 <USB_ActivateEndpoint+0x38>)
 80054b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054b4:	080054c5 	.word	0x080054c5
 80054b8:	080054e1 	.word	0x080054e1
 80054bc:	080054f7 	.word	0x080054f7
 80054c0:	080054d3 	.word	0x080054d3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80054c4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80054c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80054cc:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80054d0:	e012      	b.n	80054f8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80054d2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80054d6:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80054da:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80054de:	e00b      	b.n	80054f8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80054e0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80054e4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80054e8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80054ec:	e004      	b.n	80054f8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80054f4:	e000      	b.n	80054f8 <USB_ActivateEndpoint+0x7c>
      break;
 80054f6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80054f8:	687a      	ldr	r2, [r7, #4]
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	781b      	ldrb	r3, [r3, #0]
 80054fe:	009b      	lsls	r3, r3, #2
 8005500:	441a      	add	r2, r3
 8005502:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005506:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800550a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800550e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005512:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005516:	b29b      	uxth	r3, r3
 8005518:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800551a:	687a      	ldr	r2, [r7, #4]
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	781b      	ldrb	r3, [r3, #0]
 8005520:	009b      	lsls	r3, r3, #2
 8005522:	4413      	add	r3, r2
 8005524:	881b      	ldrh	r3, [r3, #0]
 8005526:	b29b      	uxth	r3, r3
 8005528:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800552c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005530:	b29a      	uxth	r2, r3
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	781b      	ldrb	r3, [r3, #0]
 8005536:	b29b      	uxth	r3, r3
 8005538:	4313      	orrs	r3, r2
 800553a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800553e:	687a      	ldr	r2, [r7, #4]
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	781b      	ldrb	r3, [r3, #0]
 8005544:	009b      	lsls	r3, r3, #2
 8005546:	441a      	add	r2, r3
 8005548:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800554c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005550:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005554:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005558:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800555c:	b29b      	uxth	r3, r3
 800555e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	7b1b      	ldrb	r3, [r3, #12]
 8005564:	2b00      	cmp	r3, #0
 8005566:	f040 8153 	bne.w	8005810 <USB_ActivateEndpoint+0x394>
  {
    if (ep->is_in != 0U)
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	785b      	ldrb	r3, [r3, #1]
 800556e:	2b00      	cmp	r3, #0
 8005570:	f000 808e 	beq.w	8005690 <USB_ActivateEndpoint+0x214>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	65bb      	str	r3, [r7, #88]	; 0x58
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800557e:	b29b      	uxth	r3, r3
 8005580:	461a      	mov	r2, r3
 8005582:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005584:	4413      	add	r3, r2
 8005586:	65bb      	str	r3, [r7, #88]	; 0x58
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	781b      	ldrb	r3, [r3, #0]
 800558c:	011a      	lsls	r2, r3, #4
 800558e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005590:	4413      	add	r3, r2
 8005592:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005596:	657b      	str	r3, [r7, #84]	; 0x54
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	88db      	ldrh	r3, [r3, #6]
 800559c:	085b      	lsrs	r3, r3, #1
 800559e:	b29b      	uxth	r3, r3
 80055a0:	005b      	lsls	r3, r3, #1
 80055a2:	b29a      	uxth	r2, r3
 80055a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055a6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80055a8:	687a      	ldr	r2, [r7, #4]
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	781b      	ldrb	r3, [r3, #0]
 80055ae:	009b      	lsls	r3, r3, #2
 80055b0:	4413      	add	r3, r2
 80055b2:	881b      	ldrh	r3, [r3, #0]
 80055b4:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80055b8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80055bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d01d      	beq.n	8005600 <USB_ActivateEndpoint+0x184>
 80055c4:	687a      	ldr	r2, [r7, #4]
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	781b      	ldrb	r3, [r3, #0]
 80055ca:	009b      	lsls	r3, r3, #2
 80055cc:	4413      	add	r3, r2
 80055ce:	881b      	ldrh	r3, [r3, #0]
 80055d0:	b29b      	uxth	r3, r3
 80055d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055da:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80055de:	687a      	ldr	r2, [r7, #4]
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	781b      	ldrb	r3, [r3, #0]
 80055e4:	009b      	lsls	r3, r3, #2
 80055e6:	441a      	add	r2, r3
 80055e8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80055ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055f8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80055fc:	b29b      	uxth	r3, r3
 80055fe:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	78db      	ldrb	r3, [r3, #3]
 8005604:	2b01      	cmp	r3, #1
 8005606:	d024      	beq.n	8005652 <USB_ActivateEndpoint+0x1d6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005608:	687a      	ldr	r2, [r7, #4]
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	781b      	ldrb	r3, [r3, #0]
 800560e:	009b      	lsls	r3, r3, #2
 8005610:	4413      	add	r3, r2
 8005612:	881b      	ldrh	r3, [r3, #0]
 8005614:	b29b      	uxth	r3, r3
 8005616:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800561a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800561e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8005622:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005626:	f083 0320 	eor.w	r3, r3, #32
 800562a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800562e:	687a      	ldr	r2, [r7, #4]
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	781b      	ldrb	r3, [r3, #0]
 8005634:	009b      	lsls	r3, r3, #2
 8005636:	441a      	add	r2, r3
 8005638:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800563c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005640:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005644:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005648:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800564c:	b29b      	uxth	r3, r3
 800564e:	8013      	strh	r3, [r2, #0]
 8005650:	e271      	b.n	8005b36 <USB_ActivateEndpoint+0x6ba>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005652:	687a      	ldr	r2, [r7, #4]
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	781b      	ldrb	r3, [r3, #0]
 8005658:	009b      	lsls	r3, r3, #2
 800565a:	4413      	add	r3, r2
 800565c:	881b      	ldrh	r3, [r3, #0]
 800565e:	b29b      	uxth	r3, r3
 8005660:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005664:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005668:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800566c:	687a      	ldr	r2, [r7, #4]
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	781b      	ldrb	r3, [r3, #0]
 8005672:	009b      	lsls	r3, r3, #2
 8005674:	441a      	add	r2, r3
 8005676:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800567a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800567e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005682:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005686:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800568a:	b29b      	uxth	r3, r3
 800568c:	8013      	strh	r3, [r2, #0]
 800568e:	e252      	b.n	8005b36 <USB_ActivateEndpoint+0x6ba>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	64bb      	str	r3, [r7, #72]	; 0x48
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800569a:	b29b      	uxth	r3, r3
 800569c:	461a      	mov	r2, r3
 800569e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056a0:	4413      	add	r3, r2
 80056a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	781b      	ldrb	r3, [r3, #0]
 80056a8:	011a      	lsls	r2, r3, #4
 80056aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056ac:	4413      	add	r3, r2
 80056ae:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80056b2:	647b      	str	r3, [r7, #68]	; 0x44
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	88db      	ldrh	r3, [r3, #6]
 80056b8:	085b      	lsrs	r3, r3, #1
 80056ba:	b29b      	uxth	r3, r3
 80056bc:	005b      	lsls	r3, r3, #1
 80056be:	b29a      	uxth	r2, r3
 80056c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056c2:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	643b      	str	r3, [r7, #64]	; 0x40
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056ce:	b29b      	uxth	r3, r3
 80056d0:	461a      	mov	r2, r3
 80056d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056d4:	4413      	add	r3, r2
 80056d6:	643b      	str	r3, [r7, #64]	; 0x40
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	781b      	ldrb	r3, [r3, #0]
 80056dc:	011a      	lsls	r2, r3, #4
 80056de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056e0:	4413      	add	r3, r2
 80056e2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80056e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	691b      	ldr	r3, [r3, #16]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d112      	bne.n	8005716 <USB_ActivateEndpoint+0x29a>
 80056f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056f2:	881b      	ldrh	r3, [r3, #0]
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80056fa:	b29a      	uxth	r2, r3
 80056fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056fe:	801a      	strh	r2, [r3, #0]
 8005700:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005702:	881b      	ldrh	r3, [r3, #0]
 8005704:	b29b      	uxth	r3, r3
 8005706:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800570a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800570e:	b29a      	uxth	r2, r3
 8005710:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005712:	801a      	strh	r2, [r3, #0]
 8005714:	e02f      	b.n	8005776 <USB_ActivateEndpoint+0x2fa>
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	691b      	ldr	r3, [r3, #16]
 800571a:	2b3e      	cmp	r3, #62	; 0x3e
 800571c:	d813      	bhi.n	8005746 <USB_ActivateEndpoint+0x2ca>
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	691b      	ldr	r3, [r3, #16]
 8005722:	085b      	lsrs	r3, r3, #1
 8005724:	663b      	str	r3, [r7, #96]	; 0x60
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	691b      	ldr	r3, [r3, #16]
 800572a:	f003 0301 	and.w	r3, r3, #1
 800572e:	2b00      	cmp	r3, #0
 8005730:	d002      	beq.n	8005738 <USB_ActivateEndpoint+0x2bc>
 8005732:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005734:	3301      	adds	r3, #1
 8005736:	663b      	str	r3, [r7, #96]	; 0x60
 8005738:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800573a:	b29b      	uxth	r3, r3
 800573c:	029b      	lsls	r3, r3, #10
 800573e:	b29a      	uxth	r2, r3
 8005740:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005742:	801a      	strh	r2, [r3, #0]
 8005744:	e017      	b.n	8005776 <USB_ActivateEndpoint+0x2fa>
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	691b      	ldr	r3, [r3, #16]
 800574a:	095b      	lsrs	r3, r3, #5
 800574c:	663b      	str	r3, [r7, #96]	; 0x60
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	691b      	ldr	r3, [r3, #16]
 8005752:	f003 031f 	and.w	r3, r3, #31
 8005756:	2b00      	cmp	r3, #0
 8005758:	d102      	bne.n	8005760 <USB_ActivateEndpoint+0x2e4>
 800575a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800575c:	3b01      	subs	r3, #1
 800575e:	663b      	str	r3, [r7, #96]	; 0x60
 8005760:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005762:	b29b      	uxth	r3, r3
 8005764:	029b      	lsls	r3, r3, #10
 8005766:	b29b      	uxth	r3, r3
 8005768:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800576c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005770:	b29a      	uxth	r2, r3
 8005772:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005774:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005776:	687a      	ldr	r2, [r7, #4]
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	781b      	ldrb	r3, [r3, #0]
 800577c:	009b      	lsls	r3, r3, #2
 800577e:	4413      	add	r3, r2
 8005780:	881b      	ldrh	r3, [r3, #0]
 8005782:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005784:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005786:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800578a:	2b00      	cmp	r3, #0
 800578c:	d01b      	beq.n	80057c6 <USB_ActivateEndpoint+0x34a>
 800578e:	687a      	ldr	r2, [r7, #4]
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	781b      	ldrb	r3, [r3, #0]
 8005794:	009b      	lsls	r3, r3, #2
 8005796:	4413      	add	r3, r2
 8005798:	881b      	ldrh	r3, [r3, #0]
 800579a:	b29b      	uxth	r3, r3
 800579c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057a4:	873b      	strh	r3, [r7, #56]	; 0x38
 80057a6:	687a      	ldr	r2, [r7, #4]
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	781b      	ldrb	r3, [r3, #0]
 80057ac:	009b      	lsls	r3, r3, #2
 80057ae:	441a      	add	r2, r3
 80057b0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80057b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80057be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057c2:	b29b      	uxth	r3, r3
 80057c4:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80057c6:	687a      	ldr	r2, [r7, #4]
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	781b      	ldrb	r3, [r3, #0]
 80057cc:	009b      	lsls	r3, r3, #2
 80057ce:	4413      	add	r3, r2
 80057d0:	881b      	ldrh	r3, [r3, #0]
 80057d2:	b29b      	uxth	r3, r3
 80057d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80057d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057dc:	86fb      	strh	r3, [r7, #54]	; 0x36
 80057de:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80057e0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80057e4:	86fb      	strh	r3, [r7, #54]	; 0x36
 80057e6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80057e8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80057ec:	86fb      	strh	r3, [r7, #54]	; 0x36
 80057ee:	687a      	ldr	r2, [r7, #4]
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	781b      	ldrb	r3, [r3, #0]
 80057f4:	009b      	lsls	r3, r3, #2
 80057f6:	441a      	add	r2, r3
 80057f8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80057fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005802:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005806:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800580a:	b29b      	uxth	r3, r3
 800580c:	8013      	strh	r3, [r2, #0]
 800580e:	e192      	b.n	8005b36 <USB_ActivateEndpoint+0x6ba>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8005810:	687a      	ldr	r2, [r7, #4]
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	781b      	ldrb	r3, [r3, #0]
 8005816:	009b      	lsls	r3, r3, #2
 8005818:	4413      	add	r3, r2
 800581a:	881b      	ldrh	r3, [r3, #0]
 800581c:	b29b      	uxth	r3, r3
 800581e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005822:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005826:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005828:	687a      	ldr	r2, [r7, #4]
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	781b      	ldrb	r3, [r3, #0]
 800582e:	009b      	lsls	r3, r3, #2
 8005830:	441a      	add	r2, r3
 8005832:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005834:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005838:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800583c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005840:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005844:	b29b      	uxth	r3, r3
 8005846:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	633b      	str	r3, [r7, #48]	; 0x30
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005852:	b29b      	uxth	r3, r3
 8005854:	461a      	mov	r2, r3
 8005856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005858:	4413      	add	r3, r2
 800585a:	633b      	str	r3, [r7, #48]	; 0x30
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	781b      	ldrb	r3, [r3, #0]
 8005860:	011a      	lsls	r2, r3, #4
 8005862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005864:	4413      	add	r3, r2
 8005866:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800586a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	891b      	ldrh	r3, [r3, #8]
 8005870:	085b      	lsrs	r3, r3, #1
 8005872:	b29b      	uxth	r3, r3
 8005874:	005b      	lsls	r3, r3, #1
 8005876:	b29a      	uxth	r2, r3
 8005878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800587a:	801a      	strh	r2, [r3, #0]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005886:	b29b      	uxth	r3, r3
 8005888:	461a      	mov	r2, r3
 800588a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800588c:	4413      	add	r3, r2
 800588e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	781b      	ldrb	r3, [r3, #0]
 8005894:	011a      	lsls	r2, r3, #4
 8005896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005898:	4413      	add	r3, r2
 800589a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800589e:	627b      	str	r3, [r7, #36]	; 0x24
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	895b      	ldrh	r3, [r3, #10]
 80058a4:	085b      	lsrs	r3, r3, #1
 80058a6:	b29b      	uxth	r3, r3
 80058a8:	005b      	lsls	r3, r3, #1
 80058aa:	b29a      	uxth	r2, r3
 80058ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ae:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	785b      	ldrb	r3, [r3, #1]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	f040 8091 	bne.w	80059dc <USB_ActivateEndpoint+0x560>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80058ba:	687a      	ldr	r2, [r7, #4]
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	781b      	ldrb	r3, [r3, #0]
 80058c0:	009b      	lsls	r3, r3, #2
 80058c2:	4413      	add	r3, r2
 80058c4:	881b      	ldrh	r3, [r3, #0]
 80058c6:	847b      	strh	r3, [r7, #34]	; 0x22
 80058c8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80058ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d01b      	beq.n	800590a <USB_ActivateEndpoint+0x48e>
 80058d2:	687a      	ldr	r2, [r7, #4]
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	781b      	ldrb	r3, [r3, #0]
 80058d8:	009b      	lsls	r3, r3, #2
 80058da:	4413      	add	r3, r2
 80058dc:	881b      	ldrh	r3, [r3, #0]
 80058de:	b29b      	uxth	r3, r3
 80058e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058e8:	843b      	strh	r3, [r7, #32]
 80058ea:	687a      	ldr	r2, [r7, #4]
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	781b      	ldrb	r3, [r3, #0]
 80058f0:	009b      	lsls	r3, r3, #2
 80058f2:	441a      	add	r2, r3
 80058f4:	8c3b      	ldrh	r3, [r7, #32]
 80058f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005902:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005906:	b29b      	uxth	r3, r3
 8005908:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800590a:	687a      	ldr	r2, [r7, #4]
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	781b      	ldrb	r3, [r3, #0]
 8005910:	009b      	lsls	r3, r3, #2
 8005912:	4413      	add	r3, r2
 8005914:	881b      	ldrh	r3, [r3, #0]
 8005916:	83fb      	strh	r3, [r7, #30]
 8005918:	8bfb      	ldrh	r3, [r7, #30]
 800591a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800591e:	2b00      	cmp	r3, #0
 8005920:	d01b      	beq.n	800595a <USB_ActivateEndpoint+0x4de>
 8005922:	687a      	ldr	r2, [r7, #4]
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	781b      	ldrb	r3, [r3, #0]
 8005928:	009b      	lsls	r3, r3, #2
 800592a:	4413      	add	r3, r2
 800592c:	881b      	ldrh	r3, [r3, #0]
 800592e:	b29b      	uxth	r3, r3
 8005930:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005934:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005938:	83bb      	strh	r3, [r7, #28]
 800593a:	687a      	ldr	r2, [r7, #4]
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	781b      	ldrb	r3, [r3, #0]
 8005940:	009b      	lsls	r3, r3, #2
 8005942:	441a      	add	r2, r3
 8005944:	8bbb      	ldrh	r3, [r7, #28]
 8005946:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800594a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800594e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005952:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005956:	b29b      	uxth	r3, r3
 8005958:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800595a:	687a      	ldr	r2, [r7, #4]
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	781b      	ldrb	r3, [r3, #0]
 8005960:	009b      	lsls	r3, r3, #2
 8005962:	4413      	add	r3, r2
 8005964:	881b      	ldrh	r3, [r3, #0]
 8005966:	b29b      	uxth	r3, r3
 8005968:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800596c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005970:	837b      	strh	r3, [r7, #26]
 8005972:	8b7b      	ldrh	r3, [r7, #26]
 8005974:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005978:	837b      	strh	r3, [r7, #26]
 800597a:	8b7b      	ldrh	r3, [r7, #26]
 800597c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005980:	837b      	strh	r3, [r7, #26]
 8005982:	687a      	ldr	r2, [r7, #4]
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	781b      	ldrb	r3, [r3, #0]
 8005988:	009b      	lsls	r3, r3, #2
 800598a:	441a      	add	r2, r3
 800598c:	8b7b      	ldrh	r3, [r7, #26]
 800598e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005992:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005996:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800599a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800599e:	b29b      	uxth	r3, r3
 80059a0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80059a2:	687a      	ldr	r2, [r7, #4]
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	781b      	ldrb	r3, [r3, #0]
 80059a8:	009b      	lsls	r3, r3, #2
 80059aa:	4413      	add	r3, r2
 80059ac:	881b      	ldrh	r3, [r3, #0]
 80059ae:	b29b      	uxth	r3, r3
 80059b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059b8:	833b      	strh	r3, [r7, #24]
 80059ba:	687a      	ldr	r2, [r7, #4]
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	781b      	ldrb	r3, [r3, #0]
 80059c0:	009b      	lsls	r3, r3, #2
 80059c2:	441a      	add	r2, r3
 80059c4:	8b3b      	ldrh	r3, [r7, #24]
 80059c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059d6:	b29b      	uxth	r3, r3
 80059d8:	8013      	strh	r3, [r2, #0]
 80059da:	e0ac      	b.n	8005b36 <USB_ActivateEndpoint+0x6ba>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80059dc:	687a      	ldr	r2, [r7, #4]
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	781b      	ldrb	r3, [r3, #0]
 80059e2:	009b      	lsls	r3, r3, #2
 80059e4:	4413      	add	r3, r2
 80059e6:	881b      	ldrh	r3, [r3, #0]
 80059e8:	82fb      	strh	r3, [r7, #22]
 80059ea:	8afb      	ldrh	r3, [r7, #22]
 80059ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d01b      	beq.n	8005a2c <USB_ActivateEndpoint+0x5b0>
 80059f4:	687a      	ldr	r2, [r7, #4]
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	781b      	ldrb	r3, [r3, #0]
 80059fa:	009b      	lsls	r3, r3, #2
 80059fc:	4413      	add	r3, r2
 80059fe:	881b      	ldrh	r3, [r3, #0]
 8005a00:	b29b      	uxth	r3, r3
 8005a02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a0a:	82bb      	strh	r3, [r7, #20]
 8005a0c:	687a      	ldr	r2, [r7, #4]
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	781b      	ldrb	r3, [r3, #0]
 8005a12:	009b      	lsls	r3, r3, #2
 8005a14:	441a      	add	r2, r3
 8005a16:	8abb      	ldrh	r3, [r7, #20]
 8005a18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a20:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005a24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a28:	b29b      	uxth	r3, r3
 8005a2a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005a2c:	687a      	ldr	r2, [r7, #4]
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	781b      	ldrb	r3, [r3, #0]
 8005a32:	009b      	lsls	r3, r3, #2
 8005a34:	4413      	add	r3, r2
 8005a36:	881b      	ldrh	r3, [r3, #0]
 8005a38:	827b      	strh	r3, [r7, #18]
 8005a3a:	8a7b      	ldrh	r3, [r7, #18]
 8005a3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d01b      	beq.n	8005a7c <USB_ActivateEndpoint+0x600>
 8005a44:	687a      	ldr	r2, [r7, #4]
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	781b      	ldrb	r3, [r3, #0]
 8005a4a:	009b      	lsls	r3, r3, #2
 8005a4c:	4413      	add	r3, r2
 8005a4e:	881b      	ldrh	r3, [r3, #0]
 8005a50:	b29b      	uxth	r3, r3
 8005a52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a5a:	823b      	strh	r3, [r7, #16]
 8005a5c:	687a      	ldr	r2, [r7, #4]
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	781b      	ldrb	r3, [r3, #0]
 8005a62:	009b      	lsls	r3, r3, #2
 8005a64:	441a      	add	r2, r3
 8005a66:	8a3b      	ldrh	r3, [r7, #16]
 8005a68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a74:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	78db      	ldrb	r3, [r3, #3]
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d020      	beq.n	8005ac6 <USB_ActivateEndpoint+0x64a>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005a84:	687a      	ldr	r2, [r7, #4]
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	781b      	ldrb	r3, [r3, #0]
 8005a8a:	009b      	lsls	r3, r3, #2
 8005a8c:	4413      	add	r3, r2
 8005a8e:	881b      	ldrh	r3, [r3, #0]
 8005a90:	b29b      	uxth	r3, r3
 8005a92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a9a:	81fb      	strh	r3, [r7, #14]
 8005a9c:	89fb      	ldrh	r3, [r7, #14]
 8005a9e:	f083 0320 	eor.w	r3, r3, #32
 8005aa2:	81fb      	strh	r3, [r7, #14]
 8005aa4:	687a      	ldr	r2, [r7, #4]
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	781b      	ldrb	r3, [r3, #0]
 8005aaa:	009b      	lsls	r3, r3, #2
 8005aac:	441a      	add	r2, r3
 8005aae:	89fb      	ldrh	r3, [r7, #14]
 8005ab0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ab4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ab8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005abc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	8013      	strh	r3, [r2, #0]
 8005ac4:	e01b      	b.n	8005afe <USB_ActivateEndpoint+0x682>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005ac6:	687a      	ldr	r2, [r7, #4]
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	781b      	ldrb	r3, [r3, #0]
 8005acc:	009b      	lsls	r3, r3, #2
 8005ace:	4413      	add	r3, r2
 8005ad0:	881b      	ldrh	r3, [r3, #0]
 8005ad2:	b29b      	uxth	r3, r3
 8005ad4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ad8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005adc:	81bb      	strh	r3, [r7, #12]
 8005ade:	687a      	ldr	r2, [r7, #4]
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	781b      	ldrb	r3, [r3, #0]
 8005ae4:	009b      	lsls	r3, r3, #2
 8005ae6:	441a      	add	r2, r3
 8005ae8:	89bb      	ldrh	r3, [r7, #12]
 8005aea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005aee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005af2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005af6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005afa:	b29b      	uxth	r3, r3
 8005afc:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005afe:	687a      	ldr	r2, [r7, #4]
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	781b      	ldrb	r3, [r3, #0]
 8005b04:	009b      	lsls	r3, r3, #2
 8005b06:	4413      	add	r3, r2
 8005b08:	881b      	ldrh	r3, [r3, #0]
 8005b0a:	b29b      	uxth	r3, r3
 8005b0c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b14:	817b      	strh	r3, [r7, #10]
 8005b16:	687a      	ldr	r2, [r7, #4]
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	781b      	ldrb	r3, [r3, #0]
 8005b1c:	009b      	lsls	r3, r3, #2
 8005b1e:	441a      	add	r2, r3
 8005b20:	897b      	ldrh	r3, [r7, #10]
 8005b22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b32:	b29b      	uxth	r3, r3
 8005b34:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8005b36:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	376c      	adds	r7, #108	; 0x6c
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bc80      	pop	{r7}
 8005b42:	4770      	bx	lr

08005b44 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b08d      	sub	sp, #52	; 0x34
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
 8005b4c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	7b1b      	ldrb	r3, [r3, #12]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	f040 808e 	bne.w	8005c74 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	785b      	ldrb	r3, [r3, #1]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d044      	beq.n	8005bea <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005b60:	687a      	ldr	r2, [r7, #4]
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	781b      	ldrb	r3, [r3, #0]
 8005b66:	009b      	lsls	r3, r3, #2
 8005b68:	4413      	add	r3, r2
 8005b6a:	881b      	ldrh	r3, [r3, #0]
 8005b6c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005b6e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005b70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d01b      	beq.n	8005bb0 <USB_DeactivateEndpoint+0x6c>
 8005b78:	687a      	ldr	r2, [r7, #4]
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	781b      	ldrb	r3, [r3, #0]
 8005b7e:	009b      	lsls	r3, r3, #2
 8005b80:	4413      	add	r3, r2
 8005b82:	881b      	ldrh	r3, [r3, #0]
 8005b84:	b29b      	uxth	r3, r3
 8005b86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b8e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005b90:	687a      	ldr	r2, [r7, #4]
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	781b      	ldrb	r3, [r3, #0]
 8005b96:	009b      	lsls	r3, r3, #2
 8005b98:	441a      	add	r2, r3
 8005b9a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005b9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ba0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ba4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ba8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005bac:	b29b      	uxth	r3, r3
 8005bae:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005bb0:	687a      	ldr	r2, [r7, #4]
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	781b      	ldrb	r3, [r3, #0]
 8005bb6:	009b      	lsls	r3, r3, #2
 8005bb8:	4413      	add	r3, r2
 8005bba:	881b      	ldrh	r3, [r3, #0]
 8005bbc:	b29b      	uxth	r3, r3
 8005bbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bc2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bc6:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005bc8:	687a      	ldr	r2, [r7, #4]
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	781b      	ldrb	r3, [r3, #0]
 8005bce:	009b      	lsls	r3, r3, #2
 8005bd0:	441a      	add	r2, r3
 8005bd2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005bd4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bd8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bdc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005be0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005be4:	b29b      	uxth	r3, r3
 8005be6:	8013      	strh	r3, [r2, #0]
 8005be8:	e192      	b.n	8005f10 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005bea:	687a      	ldr	r2, [r7, #4]
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	781b      	ldrb	r3, [r3, #0]
 8005bf0:	009b      	lsls	r3, r3, #2
 8005bf2:	4413      	add	r3, r2
 8005bf4:	881b      	ldrh	r3, [r3, #0]
 8005bf6:	853b      	strh	r3, [r7, #40]	; 0x28
 8005bf8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005bfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d01b      	beq.n	8005c3a <USB_DeactivateEndpoint+0xf6>
 8005c02:	687a      	ldr	r2, [r7, #4]
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	781b      	ldrb	r3, [r3, #0]
 8005c08:	009b      	lsls	r3, r3, #2
 8005c0a:	4413      	add	r3, r2
 8005c0c:	881b      	ldrh	r3, [r3, #0]
 8005c0e:	b29b      	uxth	r3, r3
 8005c10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c18:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005c1a:	687a      	ldr	r2, [r7, #4]
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	781b      	ldrb	r3, [r3, #0]
 8005c20:	009b      	lsls	r3, r3, #2
 8005c22:	441a      	add	r2, r3
 8005c24:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005c26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c2e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c36:	b29b      	uxth	r3, r3
 8005c38:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005c3a:	687a      	ldr	r2, [r7, #4]
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	781b      	ldrb	r3, [r3, #0]
 8005c40:	009b      	lsls	r3, r3, #2
 8005c42:	4413      	add	r3, r2
 8005c44:	881b      	ldrh	r3, [r3, #0]
 8005c46:	b29b      	uxth	r3, r3
 8005c48:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c50:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005c52:	687a      	ldr	r2, [r7, #4]
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	781b      	ldrb	r3, [r3, #0]
 8005c58:	009b      	lsls	r3, r3, #2
 8005c5a:	441a      	add	r2, r3
 8005c5c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005c5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c6e:	b29b      	uxth	r3, r3
 8005c70:	8013      	strh	r3, [r2, #0]
 8005c72:	e14d      	b.n	8005f10 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	785b      	ldrb	r3, [r3, #1]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	f040 80a5 	bne.w	8005dc8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005c7e:	687a      	ldr	r2, [r7, #4]
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	781b      	ldrb	r3, [r3, #0]
 8005c84:	009b      	lsls	r3, r3, #2
 8005c86:	4413      	add	r3, r2
 8005c88:	881b      	ldrh	r3, [r3, #0]
 8005c8a:	847b      	strh	r3, [r7, #34]	; 0x22
 8005c8c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005c8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d01b      	beq.n	8005cce <USB_DeactivateEndpoint+0x18a>
 8005c96:	687a      	ldr	r2, [r7, #4]
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	781b      	ldrb	r3, [r3, #0]
 8005c9c:	009b      	lsls	r3, r3, #2
 8005c9e:	4413      	add	r3, r2
 8005ca0:	881b      	ldrh	r3, [r3, #0]
 8005ca2:	b29b      	uxth	r3, r3
 8005ca4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ca8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cac:	843b      	strh	r3, [r7, #32]
 8005cae:	687a      	ldr	r2, [r7, #4]
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	781b      	ldrb	r3, [r3, #0]
 8005cb4:	009b      	lsls	r3, r3, #2
 8005cb6:	441a      	add	r2, r3
 8005cb8:	8c3b      	ldrh	r3, [r7, #32]
 8005cba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cbe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cc2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005cc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cca:	b29b      	uxth	r3, r3
 8005ccc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005cce:	687a      	ldr	r2, [r7, #4]
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	781b      	ldrb	r3, [r3, #0]
 8005cd4:	009b      	lsls	r3, r3, #2
 8005cd6:	4413      	add	r3, r2
 8005cd8:	881b      	ldrh	r3, [r3, #0]
 8005cda:	83fb      	strh	r3, [r7, #30]
 8005cdc:	8bfb      	ldrh	r3, [r7, #30]
 8005cde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d01b      	beq.n	8005d1e <USB_DeactivateEndpoint+0x1da>
 8005ce6:	687a      	ldr	r2, [r7, #4]
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	781b      	ldrb	r3, [r3, #0]
 8005cec:	009b      	lsls	r3, r3, #2
 8005cee:	4413      	add	r3, r2
 8005cf0:	881b      	ldrh	r3, [r3, #0]
 8005cf2:	b29b      	uxth	r3, r3
 8005cf4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cf8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cfc:	83bb      	strh	r3, [r7, #28]
 8005cfe:	687a      	ldr	r2, [r7, #4]
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	781b      	ldrb	r3, [r3, #0]
 8005d04:	009b      	lsls	r3, r3, #2
 8005d06:	441a      	add	r2, r3
 8005d08:	8bbb      	ldrh	r3, [r7, #28]
 8005d0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d16:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005d1a:	b29b      	uxth	r3, r3
 8005d1c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005d1e:	687a      	ldr	r2, [r7, #4]
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	781b      	ldrb	r3, [r3, #0]
 8005d24:	009b      	lsls	r3, r3, #2
 8005d26:	4413      	add	r3, r2
 8005d28:	881b      	ldrh	r3, [r3, #0]
 8005d2a:	b29b      	uxth	r3, r3
 8005d2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d34:	837b      	strh	r3, [r7, #26]
 8005d36:	687a      	ldr	r2, [r7, #4]
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	781b      	ldrb	r3, [r3, #0]
 8005d3c:	009b      	lsls	r3, r3, #2
 8005d3e:	441a      	add	r2, r3
 8005d40:	8b7b      	ldrh	r3, [r7, #26]
 8005d42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d4e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005d52:	b29b      	uxth	r3, r3
 8005d54:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005d56:	687a      	ldr	r2, [r7, #4]
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	781b      	ldrb	r3, [r3, #0]
 8005d5c:	009b      	lsls	r3, r3, #2
 8005d5e:	4413      	add	r3, r2
 8005d60:	881b      	ldrh	r3, [r3, #0]
 8005d62:	b29b      	uxth	r3, r3
 8005d64:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d6c:	833b      	strh	r3, [r7, #24]
 8005d6e:	687a      	ldr	r2, [r7, #4]
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	781b      	ldrb	r3, [r3, #0]
 8005d74:	009b      	lsls	r3, r3, #2
 8005d76:	441a      	add	r2, r3
 8005d78:	8b3b      	ldrh	r3, [r7, #24]
 8005d7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005d8e:	687a      	ldr	r2, [r7, #4]
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	781b      	ldrb	r3, [r3, #0]
 8005d94:	009b      	lsls	r3, r3, #2
 8005d96:	4413      	add	r3, r2
 8005d98:	881b      	ldrh	r3, [r3, #0]
 8005d9a:	b29b      	uxth	r3, r3
 8005d9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005da0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005da4:	82fb      	strh	r3, [r7, #22]
 8005da6:	687a      	ldr	r2, [r7, #4]
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	781b      	ldrb	r3, [r3, #0]
 8005dac:	009b      	lsls	r3, r3, #2
 8005dae:	441a      	add	r2, r3
 8005db0:	8afb      	ldrh	r3, [r7, #22]
 8005db2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005db6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dc2:	b29b      	uxth	r3, r3
 8005dc4:	8013      	strh	r3, [r2, #0]
 8005dc6:	e0a3      	b.n	8005f10 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005dc8:	687a      	ldr	r2, [r7, #4]
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	781b      	ldrb	r3, [r3, #0]
 8005dce:	009b      	lsls	r3, r3, #2
 8005dd0:	4413      	add	r3, r2
 8005dd2:	881b      	ldrh	r3, [r3, #0]
 8005dd4:	82bb      	strh	r3, [r7, #20]
 8005dd6:	8abb      	ldrh	r3, [r7, #20]
 8005dd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d01b      	beq.n	8005e18 <USB_DeactivateEndpoint+0x2d4>
 8005de0:	687a      	ldr	r2, [r7, #4]
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	781b      	ldrb	r3, [r3, #0]
 8005de6:	009b      	lsls	r3, r3, #2
 8005de8:	4413      	add	r3, r2
 8005dea:	881b      	ldrh	r3, [r3, #0]
 8005dec:	b29b      	uxth	r3, r3
 8005dee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005df2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005df6:	827b      	strh	r3, [r7, #18]
 8005df8:	687a      	ldr	r2, [r7, #4]
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	781b      	ldrb	r3, [r3, #0]
 8005dfe:	009b      	lsls	r3, r3, #2
 8005e00:	441a      	add	r2, r3
 8005e02:	8a7b      	ldrh	r3, [r7, #18]
 8005e04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e0c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005e10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e14:	b29b      	uxth	r3, r3
 8005e16:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005e18:	687a      	ldr	r2, [r7, #4]
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	781b      	ldrb	r3, [r3, #0]
 8005e1e:	009b      	lsls	r3, r3, #2
 8005e20:	4413      	add	r3, r2
 8005e22:	881b      	ldrh	r3, [r3, #0]
 8005e24:	823b      	strh	r3, [r7, #16]
 8005e26:	8a3b      	ldrh	r3, [r7, #16]
 8005e28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d01b      	beq.n	8005e68 <USB_DeactivateEndpoint+0x324>
 8005e30:	687a      	ldr	r2, [r7, #4]
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	781b      	ldrb	r3, [r3, #0]
 8005e36:	009b      	lsls	r3, r3, #2
 8005e38:	4413      	add	r3, r2
 8005e3a:	881b      	ldrh	r3, [r3, #0]
 8005e3c:	b29b      	uxth	r3, r3
 8005e3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e46:	81fb      	strh	r3, [r7, #14]
 8005e48:	687a      	ldr	r2, [r7, #4]
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	781b      	ldrb	r3, [r3, #0]
 8005e4e:	009b      	lsls	r3, r3, #2
 8005e50:	441a      	add	r2, r3
 8005e52:	89fb      	ldrh	r3, [r7, #14]
 8005e54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e60:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005e64:	b29b      	uxth	r3, r3
 8005e66:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005e68:	687a      	ldr	r2, [r7, #4]
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	781b      	ldrb	r3, [r3, #0]
 8005e6e:	009b      	lsls	r3, r3, #2
 8005e70:	4413      	add	r3, r2
 8005e72:	881b      	ldrh	r3, [r3, #0]
 8005e74:	b29b      	uxth	r3, r3
 8005e76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e7e:	81bb      	strh	r3, [r7, #12]
 8005e80:	687a      	ldr	r2, [r7, #4]
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	781b      	ldrb	r3, [r3, #0]
 8005e86:	009b      	lsls	r3, r3, #2
 8005e88:	441a      	add	r2, r3
 8005e8a:	89bb      	ldrh	r3, [r7, #12]
 8005e8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e94:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005e98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e9c:	b29b      	uxth	r3, r3
 8005e9e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005ea0:	687a      	ldr	r2, [r7, #4]
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	781b      	ldrb	r3, [r3, #0]
 8005ea6:	009b      	lsls	r3, r3, #2
 8005ea8:	4413      	add	r3, r2
 8005eaa:	881b      	ldrh	r3, [r3, #0]
 8005eac:	b29b      	uxth	r3, r3
 8005eae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005eb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005eb6:	817b      	strh	r3, [r7, #10]
 8005eb8:	687a      	ldr	r2, [r7, #4]
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	781b      	ldrb	r3, [r3, #0]
 8005ebe:	009b      	lsls	r3, r3, #2
 8005ec0:	441a      	add	r2, r3
 8005ec2:	897b      	ldrh	r3, [r7, #10]
 8005ec4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ec8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ecc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ed0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ed4:	b29b      	uxth	r3, r3
 8005ed6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005ed8:	687a      	ldr	r2, [r7, #4]
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	781b      	ldrb	r3, [r3, #0]
 8005ede:	009b      	lsls	r3, r3, #2
 8005ee0:	4413      	add	r3, r2
 8005ee2:	881b      	ldrh	r3, [r3, #0]
 8005ee4:	b29b      	uxth	r3, r3
 8005ee6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005eea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eee:	813b      	strh	r3, [r7, #8]
 8005ef0:	687a      	ldr	r2, [r7, #4]
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	781b      	ldrb	r3, [r3, #0]
 8005ef6:	009b      	lsls	r3, r3, #2
 8005ef8:	441a      	add	r2, r3
 8005efa:	893b      	ldrh	r3, [r7, #8]
 8005efc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f0c:	b29b      	uxth	r3, r3
 8005f0e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005f10:	2300      	movs	r3, #0
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	3734      	adds	r7, #52	; 0x34
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bc80      	pop	{r7}
 8005f1a:	4770      	bx	lr

08005f1c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b0ce      	sub	sp, #312	; 0x138
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	1d3b      	adds	r3, r7, #4
 8005f24:	6018      	str	r0, [r3, #0]
 8005f26:	463b      	mov	r3, r7
 8005f28:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005f2a:	463b      	mov	r3, r7
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	785b      	ldrb	r3, [r3, #1]
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	f040 873e 	bne.w	8006db2 <USB_EPStartXfer+0xe96>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005f36:	463b      	mov	r3, r7
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	699a      	ldr	r2, [r3, #24]
 8005f3c:	463b      	mov	r3, r7
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	691b      	ldr	r3, [r3, #16]
 8005f42:	429a      	cmp	r2, r3
 8005f44:	d905      	bls.n	8005f52 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8005f46:	463b      	mov	r3, r7
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	691b      	ldr	r3, [r3, #16]
 8005f4c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8005f50:	e004      	b.n	8005f5c <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8005f52:	463b      	mov	r3, r7
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	699b      	ldr	r3, [r3, #24]
 8005f58:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005f5c:	463b      	mov	r3, r7
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	7b1b      	ldrb	r3, [r3, #12]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d12e      	bne.n	8005fc4 <USB_EPStartXfer+0xa8>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005f66:	463b      	mov	r3, r7
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	6959      	ldr	r1, [r3, #20]
 8005f6c:	463b      	mov	r3, r7
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	88da      	ldrh	r2, [r3, #6]
 8005f72:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005f76:	b29b      	uxth	r3, r3
 8005f78:	1d38      	adds	r0, r7, #4
 8005f7a:	6800      	ldr	r0, [r0, #0]
 8005f7c:	f001 fc13 	bl	80077a6 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005f80:	1d3b      	adds	r3, r7, #4
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005f88:	1d3b      	adds	r3, r7, #4
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f90:	b29b      	uxth	r3, r3
 8005f92:	461a      	mov	r2, r3
 8005f94:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005f98:	4413      	add	r3, r2
 8005f9a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005f9e:	463b      	mov	r3, r7
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	781b      	ldrb	r3, [r3, #0]
 8005fa4:	011a      	lsls	r2, r3, #4
 8005fa6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005faa:	4413      	add	r3, r2
 8005fac:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005fb0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005fb4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005fb8:	b29a      	uxth	r2, r3
 8005fba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005fbe:	801a      	strh	r2, [r3, #0]
 8005fc0:	f000 bec2 	b.w	8006d48 <USB_EPStartXfer+0xe2c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005fc4:	463b      	mov	r3, r7
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	78db      	ldrb	r3, [r3, #3]
 8005fca:	2b02      	cmp	r3, #2
 8005fcc:	f040 836a 	bne.w	80066a4 <USB_EPStartXfer+0x788>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005fd0:	463b      	mov	r3, r7
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	6a1a      	ldr	r2, [r3, #32]
 8005fd6:	463b      	mov	r3, r7
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	691b      	ldr	r3, [r3, #16]
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	f240 830e 	bls.w	80065fe <USB_EPStartXfer+0x6e2>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8005fe2:	1d3b      	adds	r3, r7, #4
 8005fe4:	681a      	ldr	r2, [r3, #0]
 8005fe6:	463b      	mov	r3, r7
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	781b      	ldrb	r3, [r3, #0]
 8005fec:	009b      	lsls	r3, r3, #2
 8005fee:	4413      	add	r3, r2
 8005ff0:	881b      	ldrh	r3, [r3, #0]
 8005ff2:	b29b      	uxth	r3, r3
 8005ff4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ff8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ffc:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 8006000:	1d3b      	adds	r3, r7, #4
 8006002:	681a      	ldr	r2, [r3, #0]
 8006004:	463b      	mov	r3, r7
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	781b      	ldrb	r3, [r3, #0]
 800600a:	009b      	lsls	r3, r3, #2
 800600c:	441a      	add	r2, r3
 800600e:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8006012:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006016:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800601a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800601e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006022:	b29b      	uxth	r3, r3
 8006024:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006026:	463b      	mov	r3, r7
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	6a1a      	ldr	r2, [r3, #32]
 800602c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006030:	1ad2      	subs	r2, r2, r3
 8006032:	463b      	mov	r3, r7
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006038:	1d3b      	adds	r3, r7, #4
 800603a:	681a      	ldr	r2, [r3, #0]
 800603c:	463b      	mov	r3, r7
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	781b      	ldrb	r3, [r3, #0]
 8006042:	009b      	lsls	r3, r3, #2
 8006044:	4413      	add	r3, r2
 8006046:	881b      	ldrh	r3, [r3, #0]
 8006048:	b29b      	uxth	r3, r3
 800604a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800604e:	2b00      	cmp	r3, #0
 8006050:	f000 817c 	beq.w	800634c <USB_EPStartXfer+0x430>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006054:	1d3b      	adds	r3, r7, #4
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800605c:	463b      	mov	r3, r7
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	785b      	ldrb	r3, [r3, #1]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d16f      	bne.n	8006146 <USB_EPStartXfer+0x22a>
 8006066:	1d3b      	adds	r3, r7, #4
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800606e:	1d3b      	adds	r3, r7, #4
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006076:	b29b      	uxth	r3, r3
 8006078:	461a      	mov	r2, r3
 800607a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800607e:	4413      	add	r3, r2
 8006080:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006084:	463b      	mov	r3, r7
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	781b      	ldrb	r3, [r3, #0]
 800608a:	011a      	lsls	r2, r3, #4
 800608c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006090:	4413      	add	r3, r2
 8006092:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006096:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800609a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d116      	bne.n	80060d0 <USB_EPStartXfer+0x1b4>
 80060a2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80060a6:	881b      	ldrh	r3, [r3, #0]
 80060a8:	b29b      	uxth	r3, r3
 80060aa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80060ae:	b29a      	uxth	r2, r3
 80060b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80060b4:	801a      	strh	r2, [r3, #0]
 80060b6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80060ba:	881b      	ldrh	r3, [r3, #0]
 80060bc:	b29b      	uxth	r3, r3
 80060be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060c6:	b29a      	uxth	r2, r3
 80060c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80060cc:	801a      	strh	r2, [r3, #0]
 80060ce:	e05b      	b.n	8006188 <USB_EPStartXfer+0x26c>
 80060d0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80060d4:	2b3e      	cmp	r3, #62	; 0x3e
 80060d6:	d818      	bhi.n	800610a <USB_EPStartXfer+0x1ee>
 80060d8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80060dc:	085b      	lsrs	r3, r3, #1
 80060de:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80060e2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80060e6:	f003 0301 	and.w	r3, r3, #1
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d004      	beq.n	80060f8 <USB_EPStartXfer+0x1dc>
 80060ee:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80060f2:	3301      	adds	r3, #1
 80060f4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80060f8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80060fc:	b29b      	uxth	r3, r3
 80060fe:	029b      	lsls	r3, r3, #10
 8006100:	b29a      	uxth	r2, r3
 8006102:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006106:	801a      	strh	r2, [r3, #0]
 8006108:	e03e      	b.n	8006188 <USB_EPStartXfer+0x26c>
 800610a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800610e:	095b      	lsrs	r3, r3, #5
 8006110:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8006114:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006118:	f003 031f 	and.w	r3, r3, #31
 800611c:	2b00      	cmp	r3, #0
 800611e:	d104      	bne.n	800612a <USB_EPStartXfer+0x20e>
 8006120:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006124:	3b01      	subs	r3, #1
 8006126:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800612a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800612e:	b29b      	uxth	r3, r3
 8006130:	029b      	lsls	r3, r3, #10
 8006132:	b29b      	uxth	r3, r3
 8006134:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006138:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800613c:	b29a      	uxth	r2, r3
 800613e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006142:	801a      	strh	r2, [r3, #0]
 8006144:	e020      	b.n	8006188 <USB_EPStartXfer+0x26c>
 8006146:	463b      	mov	r3, r7
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	785b      	ldrb	r3, [r3, #1]
 800614c:	2b01      	cmp	r3, #1
 800614e:	d11b      	bne.n	8006188 <USB_EPStartXfer+0x26c>
 8006150:	1d3b      	adds	r3, r7, #4
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006158:	b29b      	uxth	r3, r3
 800615a:	461a      	mov	r2, r3
 800615c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006160:	4413      	add	r3, r2
 8006162:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006166:	463b      	mov	r3, r7
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	781b      	ldrb	r3, [r3, #0]
 800616c:	011a      	lsls	r2, r3, #4
 800616e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006172:	4413      	add	r3, r2
 8006174:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006178:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800617c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006180:	b29a      	uxth	r2, r3
 8006182:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006186:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006188:	463b      	mov	r3, r7
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	895b      	ldrh	r3, [r3, #10]
 800618e:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006192:	463b      	mov	r3, r7
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	6959      	ldr	r1, [r3, #20]
 8006198:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800619c:	b29b      	uxth	r3, r3
 800619e:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 80061a2:	1d38      	adds	r0, r7, #4
 80061a4:	6800      	ldr	r0, [r0, #0]
 80061a6:	f001 fafe 	bl	80077a6 <USB_WritePMA>
            ep->xfer_buff += len;
 80061aa:	463b      	mov	r3, r7
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	695a      	ldr	r2, [r3, #20]
 80061b0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80061b4:	441a      	add	r2, r3
 80061b6:	463b      	mov	r3, r7
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80061bc:	463b      	mov	r3, r7
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	6a1a      	ldr	r2, [r3, #32]
 80061c2:	463b      	mov	r3, r7
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	691b      	ldr	r3, [r3, #16]
 80061c8:	429a      	cmp	r2, r3
 80061ca:	d909      	bls.n	80061e0 <USB_EPStartXfer+0x2c4>
            {
              ep->xfer_len_db -= len;
 80061cc:	463b      	mov	r3, r7
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	6a1a      	ldr	r2, [r3, #32]
 80061d2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80061d6:	1ad2      	subs	r2, r2, r3
 80061d8:	463b      	mov	r3, r7
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	621a      	str	r2, [r3, #32]
 80061de:	e008      	b.n	80061f2 <USB_EPStartXfer+0x2d6>
            }
            else
            {
              len = ep->xfer_len_db;
 80061e0:	463b      	mov	r3, r7
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	6a1b      	ldr	r3, [r3, #32]
 80061e6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
              ep->xfer_len_db = 0U;
 80061ea:	463b      	mov	r3, r7
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	2200      	movs	r2, #0
 80061f0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80061f2:	463b      	mov	r3, r7
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	785b      	ldrb	r3, [r3, #1]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d16f      	bne.n	80062dc <USB_EPStartXfer+0x3c0>
 80061fc:	1d3b      	adds	r3, r7, #4
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006204:	1d3b      	adds	r3, r7, #4
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800620c:	b29b      	uxth	r3, r3
 800620e:	461a      	mov	r2, r3
 8006210:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006214:	4413      	add	r3, r2
 8006216:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800621a:	463b      	mov	r3, r7
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	781b      	ldrb	r3, [r3, #0]
 8006220:	011a      	lsls	r2, r3, #4
 8006222:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006226:	4413      	add	r3, r2
 8006228:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800622c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006230:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006234:	2b00      	cmp	r3, #0
 8006236:	d116      	bne.n	8006266 <USB_EPStartXfer+0x34a>
 8006238:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800623c:	881b      	ldrh	r3, [r3, #0]
 800623e:	b29b      	uxth	r3, r3
 8006240:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006244:	b29a      	uxth	r2, r3
 8006246:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800624a:	801a      	strh	r2, [r3, #0]
 800624c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006250:	881b      	ldrh	r3, [r3, #0]
 8006252:	b29b      	uxth	r3, r3
 8006254:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006258:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800625c:	b29a      	uxth	r2, r3
 800625e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006262:	801a      	strh	r2, [r3, #0]
 8006264:	e05f      	b.n	8006326 <USB_EPStartXfer+0x40a>
 8006266:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800626a:	2b3e      	cmp	r3, #62	; 0x3e
 800626c:	d818      	bhi.n	80062a0 <USB_EPStartXfer+0x384>
 800626e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006272:	085b      	lsrs	r3, r3, #1
 8006274:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8006278:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800627c:	f003 0301 	and.w	r3, r3, #1
 8006280:	2b00      	cmp	r3, #0
 8006282:	d004      	beq.n	800628e <USB_EPStartXfer+0x372>
 8006284:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006288:	3301      	adds	r3, #1
 800628a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800628e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006292:	b29b      	uxth	r3, r3
 8006294:	029b      	lsls	r3, r3, #10
 8006296:	b29a      	uxth	r2, r3
 8006298:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800629c:	801a      	strh	r2, [r3, #0]
 800629e:	e042      	b.n	8006326 <USB_EPStartXfer+0x40a>
 80062a0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80062a4:	095b      	lsrs	r3, r3, #5
 80062a6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80062aa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80062ae:	f003 031f 	and.w	r3, r3, #31
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d104      	bne.n	80062c0 <USB_EPStartXfer+0x3a4>
 80062b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062ba:	3b01      	subs	r3, #1
 80062bc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80062c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062c4:	b29b      	uxth	r3, r3
 80062c6:	029b      	lsls	r3, r3, #10
 80062c8:	b29b      	uxth	r3, r3
 80062ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062d2:	b29a      	uxth	r2, r3
 80062d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80062d8:	801a      	strh	r2, [r3, #0]
 80062da:	e024      	b.n	8006326 <USB_EPStartXfer+0x40a>
 80062dc:	463b      	mov	r3, r7
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	785b      	ldrb	r3, [r3, #1]
 80062e2:	2b01      	cmp	r3, #1
 80062e4:	d11f      	bne.n	8006326 <USB_EPStartXfer+0x40a>
 80062e6:	1d3b      	adds	r3, r7, #4
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80062ee:	1d3b      	adds	r3, r7, #4
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062f6:	b29b      	uxth	r3, r3
 80062f8:	461a      	mov	r2, r3
 80062fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80062fe:	4413      	add	r3, r2
 8006300:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006304:	463b      	mov	r3, r7
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	781b      	ldrb	r3, [r3, #0]
 800630a:	011a      	lsls	r2, r3, #4
 800630c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006310:	4413      	add	r3, r2
 8006312:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006316:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800631a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800631e:	b29a      	uxth	r2, r3
 8006320:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006324:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006326:	463b      	mov	r3, r7
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	891b      	ldrh	r3, [r3, #8]
 800632c:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006330:	463b      	mov	r3, r7
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	6959      	ldr	r1, [r3, #20]
 8006336:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800633a:	b29b      	uxth	r3, r3
 800633c:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 8006340:	1d38      	adds	r0, r7, #4
 8006342:	6800      	ldr	r0, [r0, #0]
 8006344:	f001 fa2f 	bl	80077a6 <USB_WritePMA>
 8006348:	f000 bcfe 	b.w	8006d48 <USB_EPStartXfer+0xe2c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800634c:	463b      	mov	r3, r7
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	785b      	ldrb	r3, [r3, #1]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d164      	bne.n	8006420 <USB_EPStartXfer+0x504>
 8006356:	1d3b      	adds	r3, r7, #4
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800635c:	1d3b      	adds	r3, r7, #4
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006364:	b29b      	uxth	r3, r3
 8006366:	461a      	mov	r2, r3
 8006368:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800636a:	4413      	add	r3, r2
 800636c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800636e:	463b      	mov	r3, r7
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	781b      	ldrb	r3, [r3, #0]
 8006374:	011a      	lsls	r2, r3, #4
 8006376:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006378:	4413      	add	r3, r2
 800637a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800637e:	67bb      	str	r3, [r7, #120]	; 0x78
 8006380:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006384:	2b00      	cmp	r3, #0
 8006386:	d112      	bne.n	80063ae <USB_EPStartXfer+0x492>
 8006388:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800638a:	881b      	ldrh	r3, [r3, #0]
 800638c:	b29b      	uxth	r3, r3
 800638e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006392:	b29a      	uxth	r2, r3
 8006394:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006396:	801a      	strh	r2, [r3, #0]
 8006398:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800639a:	881b      	ldrh	r3, [r3, #0]
 800639c:	b29b      	uxth	r3, r3
 800639e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063a6:	b29a      	uxth	r2, r3
 80063a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80063aa:	801a      	strh	r2, [r3, #0]
 80063ac:	e057      	b.n	800645e <USB_EPStartXfer+0x542>
 80063ae:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80063b2:	2b3e      	cmp	r3, #62	; 0x3e
 80063b4:	d817      	bhi.n	80063e6 <USB_EPStartXfer+0x4ca>
 80063b6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80063ba:	085b      	lsrs	r3, r3, #1
 80063bc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80063c0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80063c4:	f003 0301 	and.w	r3, r3, #1
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d004      	beq.n	80063d6 <USB_EPStartXfer+0x4ba>
 80063cc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80063d0:	3301      	adds	r3, #1
 80063d2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80063d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80063da:	b29b      	uxth	r3, r3
 80063dc:	029b      	lsls	r3, r3, #10
 80063de:	b29a      	uxth	r2, r3
 80063e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80063e2:	801a      	strh	r2, [r3, #0]
 80063e4:	e03b      	b.n	800645e <USB_EPStartXfer+0x542>
 80063e6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80063ea:	095b      	lsrs	r3, r3, #5
 80063ec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80063f0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80063f4:	f003 031f 	and.w	r3, r3, #31
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d104      	bne.n	8006406 <USB_EPStartXfer+0x4ea>
 80063fc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006400:	3b01      	subs	r3, #1
 8006402:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006406:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800640a:	b29b      	uxth	r3, r3
 800640c:	029b      	lsls	r3, r3, #10
 800640e:	b29b      	uxth	r3, r3
 8006410:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006414:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006418:	b29a      	uxth	r2, r3
 800641a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800641c:	801a      	strh	r2, [r3, #0]
 800641e:	e01e      	b.n	800645e <USB_EPStartXfer+0x542>
 8006420:	463b      	mov	r3, r7
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	785b      	ldrb	r3, [r3, #1]
 8006426:	2b01      	cmp	r3, #1
 8006428:	d119      	bne.n	800645e <USB_EPStartXfer+0x542>
 800642a:	1d3b      	adds	r3, r7, #4
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	677b      	str	r3, [r7, #116]	; 0x74
 8006430:	1d3b      	adds	r3, r7, #4
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006438:	b29b      	uxth	r3, r3
 800643a:	461a      	mov	r2, r3
 800643c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800643e:	4413      	add	r3, r2
 8006440:	677b      	str	r3, [r7, #116]	; 0x74
 8006442:	463b      	mov	r3, r7
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	781b      	ldrb	r3, [r3, #0]
 8006448:	011a      	lsls	r2, r3, #4
 800644a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800644c:	4413      	add	r3, r2
 800644e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006452:	673b      	str	r3, [r7, #112]	; 0x70
 8006454:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006458:	b29a      	uxth	r2, r3
 800645a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800645c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800645e:	463b      	mov	r3, r7
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	891b      	ldrh	r3, [r3, #8]
 8006464:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006468:	463b      	mov	r3, r7
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	6959      	ldr	r1, [r3, #20]
 800646e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006472:	b29b      	uxth	r3, r3
 8006474:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 8006478:	1d38      	adds	r0, r7, #4
 800647a:	6800      	ldr	r0, [r0, #0]
 800647c:	f001 f993 	bl	80077a6 <USB_WritePMA>
            ep->xfer_buff += len;
 8006480:	463b      	mov	r3, r7
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	695a      	ldr	r2, [r3, #20]
 8006486:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800648a:	441a      	add	r2, r3
 800648c:	463b      	mov	r3, r7
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006492:	463b      	mov	r3, r7
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	6a1a      	ldr	r2, [r3, #32]
 8006498:	463b      	mov	r3, r7
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	691b      	ldr	r3, [r3, #16]
 800649e:	429a      	cmp	r2, r3
 80064a0:	d909      	bls.n	80064b6 <USB_EPStartXfer+0x59a>
            {
              ep->xfer_len_db -= len;
 80064a2:	463b      	mov	r3, r7
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	6a1a      	ldr	r2, [r3, #32]
 80064a8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80064ac:	1ad2      	subs	r2, r2, r3
 80064ae:	463b      	mov	r3, r7
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	621a      	str	r2, [r3, #32]
 80064b4:	e008      	b.n	80064c8 <USB_EPStartXfer+0x5ac>
            }
            else
            {
              len = ep->xfer_len_db;
 80064b6:	463b      	mov	r3, r7
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	6a1b      	ldr	r3, [r3, #32]
 80064bc:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
              ep->xfer_len_db = 0U;
 80064c0:	463b      	mov	r3, r7
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	2200      	movs	r2, #0
 80064c6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80064c8:	1d3b      	adds	r3, r7, #4
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80064ce:	463b      	mov	r3, r7
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	785b      	ldrb	r3, [r3, #1]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d164      	bne.n	80065a2 <USB_EPStartXfer+0x686>
 80064d8:	1d3b      	adds	r3, r7, #4
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	66bb      	str	r3, [r7, #104]	; 0x68
 80064de:	1d3b      	adds	r3, r7, #4
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064e6:	b29b      	uxth	r3, r3
 80064e8:	461a      	mov	r2, r3
 80064ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80064ec:	4413      	add	r3, r2
 80064ee:	66bb      	str	r3, [r7, #104]	; 0x68
 80064f0:	463b      	mov	r3, r7
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	781b      	ldrb	r3, [r3, #0]
 80064f6:	011a      	lsls	r2, r3, #4
 80064f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80064fa:	4413      	add	r3, r2
 80064fc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006500:	667b      	str	r3, [r7, #100]	; 0x64
 8006502:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006506:	2b00      	cmp	r3, #0
 8006508:	d112      	bne.n	8006530 <USB_EPStartXfer+0x614>
 800650a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800650c:	881b      	ldrh	r3, [r3, #0]
 800650e:	b29b      	uxth	r3, r3
 8006510:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006514:	b29a      	uxth	r2, r3
 8006516:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006518:	801a      	strh	r2, [r3, #0]
 800651a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800651c:	881b      	ldrh	r3, [r3, #0]
 800651e:	b29b      	uxth	r3, r3
 8006520:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006524:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006528:	b29a      	uxth	r2, r3
 800652a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800652c:	801a      	strh	r2, [r3, #0]
 800652e:	e054      	b.n	80065da <USB_EPStartXfer+0x6be>
 8006530:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006534:	2b3e      	cmp	r3, #62	; 0x3e
 8006536:	d817      	bhi.n	8006568 <USB_EPStartXfer+0x64c>
 8006538:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800653c:	085b      	lsrs	r3, r3, #1
 800653e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006542:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006546:	f003 0301 	and.w	r3, r3, #1
 800654a:	2b00      	cmp	r3, #0
 800654c:	d004      	beq.n	8006558 <USB_EPStartXfer+0x63c>
 800654e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006552:	3301      	adds	r3, #1
 8006554:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006558:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800655c:	b29b      	uxth	r3, r3
 800655e:	029b      	lsls	r3, r3, #10
 8006560:	b29a      	uxth	r2, r3
 8006562:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006564:	801a      	strh	r2, [r3, #0]
 8006566:	e038      	b.n	80065da <USB_EPStartXfer+0x6be>
 8006568:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800656c:	095b      	lsrs	r3, r3, #5
 800656e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006572:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006576:	f003 031f 	and.w	r3, r3, #31
 800657a:	2b00      	cmp	r3, #0
 800657c:	d104      	bne.n	8006588 <USB_EPStartXfer+0x66c>
 800657e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006582:	3b01      	subs	r3, #1
 8006584:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006588:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800658c:	b29b      	uxth	r3, r3
 800658e:	029b      	lsls	r3, r3, #10
 8006590:	b29b      	uxth	r3, r3
 8006592:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006596:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800659a:	b29a      	uxth	r2, r3
 800659c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800659e:	801a      	strh	r2, [r3, #0]
 80065a0:	e01b      	b.n	80065da <USB_EPStartXfer+0x6be>
 80065a2:	463b      	mov	r3, r7
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	785b      	ldrb	r3, [r3, #1]
 80065a8:	2b01      	cmp	r3, #1
 80065aa:	d116      	bne.n	80065da <USB_EPStartXfer+0x6be>
 80065ac:	1d3b      	adds	r3, r7, #4
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065b4:	b29b      	uxth	r3, r3
 80065b6:	461a      	mov	r2, r3
 80065b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065ba:	4413      	add	r3, r2
 80065bc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80065be:	463b      	mov	r3, r7
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	781b      	ldrb	r3, [r3, #0]
 80065c4:	011a      	lsls	r2, r3, #4
 80065c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065c8:	4413      	add	r3, r2
 80065ca:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80065ce:	663b      	str	r3, [r7, #96]	; 0x60
 80065d0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80065d4:	b29a      	uxth	r2, r3
 80065d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80065d8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80065da:	463b      	mov	r3, r7
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	895b      	ldrh	r3, [r3, #10]
 80065e0:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80065e4:	463b      	mov	r3, r7
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	6959      	ldr	r1, [r3, #20]
 80065ea:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80065ee:	b29b      	uxth	r3, r3
 80065f0:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 80065f4:	1d38      	adds	r0, r7, #4
 80065f6:	6800      	ldr	r0, [r0, #0]
 80065f8:	f001 f8d5 	bl	80077a6 <USB_WritePMA>
 80065fc:	e3a4      	b.n	8006d48 <USB_EPStartXfer+0xe2c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80065fe:	463b      	mov	r3, r7
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	6a1b      	ldr	r3, [r3, #32]
 8006604:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8006608:	1d3b      	adds	r3, r7, #4
 800660a:	681a      	ldr	r2, [r3, #0]
 800660c:	463b      	mov	r3, r7
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	781b      	ldrb	r3, [r3, #0]
 8006612:	009b      	lsls	r3, r3, #2
 8006614:	4413      	add	r3, r2
 8006616:	881b      	ldrh	r3, [r3, #0]
 8006618:	b29b      	uxth	r3, r3
 800661a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800661e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006622:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8006626:	1d3b      	adds	r3, r7, #4
 8006628:	681a      	ldr	r2, [r3, #0]
 800662a:	463b      	mov	r3, r7
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	781b      	ldrb	r3, [r3, #0]
 8006630:	009b      	lsls	r3, r3, #2
 8006632:	441a      	add	r2, r3
 8006634:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8006638:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800663c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006640:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006644:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006648:	b29b      	uxth	r3, r3
 800664a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800664c:	1d3b      	adds	r3, r7, #4
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	65bb      	str	r3, [r7, #88]	; 0x58
 8006652:	1d3b      	adds	r3, r7, #4
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800665a:	b29b      	uxth	r3, r3
 800665c:	461a      	mov	r2, r3
 800665e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006660:	4413      	add	r3, r2
 8006662:	65bb      	str	r3, [r7, #88]	; 0x58
 8006664:	463b      	mov	r3, r7
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	781b      	ldrb	r3, [r3, #0]
 800666a:	011a      	lsls	r2, r3, #4
 800666c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800666e:	4413      	add	r3, r2
 8006670:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006674:	657b      	str	r3, [r7, #84]	; 0x54
 8006676:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800667a:	b29a      	uxth	r2, r3
 800667c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800667e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006680:	463b      	mov	r3, r7
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	891b      	ldrh	r3, [r3, #8]
 8006686:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800668a:	463b      	mov	r3, r7
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	6959      	ldr	r1, [r3, #20]
 8006690:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006694:	b29b      	uxth	r3, r3
 8006696:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 800669a:	1d38      	adds	r0, r7, #4
 800669c:	6800      	ldr	r0, [r0, #0]
 800669e:	f001 f882 	bl	80077a6 <USB_WritePMA>
 80066a2:	e351      	b.n	8006d48 <USB_EPStartXfer+0xe2c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 80066a4:	1d3b      	adds	r3, r7, #4
 80066a6:	681a      	ldr	r2, [r3, #0]
 80066a8:	463b      	mov	r3, r7
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	781b      	ldrb	r3, [r3, #0]
 80066ae:	009b      	lsls	r3, r3, #2
 80066b0:	4413      	add	r3, r2
 80066b2:	881b      	ldrh	r3, [r3, #0]
 80066b4:	b29b      	uxth	r3, r3
 80066b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066be:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80066c2:	1d3b      	adds	r3, r7, #4
 80066c4:	681a      	ldr	r2, [r3, #0]
 80066c6:	463b      	mov	r3, r7
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	781b      	ldrb	r3, [r3, #0]
 80066cc:	009b      	lsls	r3, r3, #2
 80066ce:	441a      	add	r2, r3
 80066d0:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80066d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066dc:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80066e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066e4:	b29b      	uxth	r3, r3
 80066e6:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80066e8:	463b      	mov	r3, r7
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	6a1a      	ldr	r2, [r3, #32]
 80066ee:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80066f2:	1ad2      	subs	r2, r2, r3
 80066f4:	463b      	mov	r3, r7
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80066fa:	1d3b      	adds	r3, r7, #4
 80066fc:	681a      	ldr	r2, [r3, #0]
 80066fe:	463b      	mov	r3, r7
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	781b      	ldrb	r3, [r3, #0]
 8006704:	009b      	lsls	r3, r3, #2
 8006706:	4413      	add	r3, r2
 8006708:	881b      	ldrh	r3, [r3, #0]
 800670a:	b29b      	uxth	r3, r3
 800670c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006710:	2b00      	cmp	r3, #0
 8006712:	f000 8178 	beq.w	8006a06 <USB_EPStartXfer+0xaea>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006716:	1d3b      	adds	r3, r7, #4
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800671c:	463b      	mov	r3, r7
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	785b      	ldrb	r3, [r3, #1]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d164      	bne.n	80067f0 <USB_EPStartXfer+0x8d4>
 8006726:	1d3b      	adds	r3, r7, #4
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	64bb      	str	r3, [r7, #72]	; 0x48
 800672c:	1d3b      	adds	r3, r7, #4
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006734:	b29b      	uxth	r3, r3
 8006736:	461a      	mov	r2, r3
 8006738:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800673a:	4413      	add	r3, r2
 800673c:	64bb      	str	r3, [r7, #72]	; 0x48
 800673e:	463b      	mov	r3, r7
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	781b      	ldrb	r3, [r3, #0]
 8006744:	011a      	lsls	r2, r3, #4
 8006746:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006748:	4413      	add	r3, r2
 800674a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800674e:	647b      	str	r3, [r7, #68]	; 0x44
 8006750:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006754:	2b00      	cmp	r3, #0
 8006756:	d112      	bne.n	800677e <USB_EPStartXfer+0x862>
 8006758:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800675a:	881b      	ldrh	r3, [r3, #0]
 800675c:	b29b      	uxth	r3, r3
 800675e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006762:	b29a      	uxth	r2, r3
 8006764:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006766:	801a      	strh	r2, [r3, #0]
 8006768:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800676a:	881b      	ldrh	r3, [r3, #0]
 800676c:	b29b      	uxth	r3, r3
 800676e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006772:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006776:	b29a      	uxth	r2, r3
 8006778:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800677a:	801a      	strh	r2, [r3, #0]
 800677c:	e054      	b.n	8006828 <USB_EPStartXfer+0x90c>
 800677e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006782:	2b3e      	cmp	r3, #62	; 0x3e
 8006784:	d817      	bhi.n	80067b6 <USB_EPStartXfer+0x89a>
 8006786:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800678a:	085b      	lsrs	r3, r3, #1
 800678c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006790:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006794:	f003 0301 	and.w	r3, r3, #1
 8006798:	2b00      	cmp	r3, #0
 800679a:	d004      	beq.n	80067a6 <USB_EPStartXfer+0x88a>
 800679c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80067a0:	3301      	adds	r3, #1
 80067a2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80067a6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80067aa:	b29b      	uxth	r3, r3
 80067ac:	029b      	lsls	r3, r3, #10
 80067ae:	b29a      	uxth	r2, r3
 80067b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067b2:	801a      	strh	r2, [r3, #0]
 80067b4:	e038      	b.n	8006828 <USB_EPStartXfer+0x90c>
 80067b6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80067ba:	095b      	lsrs	r3, r3, #5
 80067bc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80067c0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80067c4:	f003 031f 	and.w	r3, r3, #31
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d104      	bne.n	80067d6 <USB_EPStartXfer+0x8ba>
 80067cc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80067d0:	3b01      	subs	r3, #1
 80067d2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80067d6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80067da:	b29b      	uxth	r3, r3
 80067dc:	029b      	lsls	r3, r3, #10
 80067de:	b29b      	uxth	r3, r3
 80067e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067e8:	b29a      	uxth	r2, r3
 80067ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067ec:	801a      	strh	r2, [r3, #0]
 80067ee:	e01b      	b.n	8006828 <USB_EPStartXfer+0x90c>
 80067f0:	463b      	mov	r3, r7
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	785b      	ldrb	r3, [r3, #1]
 80067f6:	2b01      	cmp	r3, #1
 80067f8:	d116      	bne.n	8006828 <USB_EPStartXfer+0x90c>
 80067fa:	1d3b      	adds	r3, r7, #4
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006802:	b29b      	uxth	r3, r3
 8006804:	461a      	mov	r2, r3
 8006806:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006808:	4413      	add	r3, r2
 800680a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800680c:	463b      	mov	r3, r7
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	781b      	ldrb	r3, [r3, #0]
 8006812:	011a      	lsls	r2, r3, #4
 8006814:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006816:	4413      	add	r3, r2
 8006818:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800681c:	643b      	str	r3, [r7, #64]	; 0x40
 800681e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006822:	b29a      	uxth	r2, r3
 8006824:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006826:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006828:	463b      	mov	r3, r7
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	895b      	ldrh	r3, [r3, #10]
 800682e:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006832:	463b      	mov	r3, r7
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	6959      	ldr	r1, [r3, #20]
 8006838:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800683c:	b29b      	uxth	r3, r3
 800683e:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 8006842:	1d38      	adds	r0, r7, #4
 8006844:	6800      	ldr	r0, [r0, #0]
 8006846:	f000 ffae 	bl	80077a6 <USB_WritePMA>
          ep->xfer_buff += len;
 800684a:	463b      	mov	r3, r7
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	695a      	ldr	r2, [r3, #20]
 8006850:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006854:	441a      	add	r2, r3
 8006856:	463b      	mov	r3, r7
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800685c:	463b      	mov	r3, r7
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	6a1a      	ldr	r2, [r3, #32]
 8006862:	463b      	mov	r3, r7
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	691b      	ldr	r3, [r3, #16]
 8006868:	429a      	cmp	r2, r3
 800686a:	d909      	bls.n	8006880 <USB_EPStartXfer+0x964>
          {
            ep->xfer_len_db -= len;
 800686c:	463b      	mov	r3, r7
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	6a1a      	ldr	r2, [r3, #32]
 8006872:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006876:	1ad2      	subs	r2, r2, r3
 8006878:	463b      	mov	r3, r7
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	621a      	str	r2, [r3, #32]
 800687e:	e008      	b.n	8006892 <USB_EPStartXfer+0x976>
          }
          else
          {
            len = ep->xfer_len_db;
 8006880:	463b      	mov	r3, r7
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	6a1b      	ldr	r3, [r3, #32]
 8006886:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
            ep->xfer_len_db = 0U;
 800688a:	463b      	mov	r3, r7
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	2200      	movs	r2, #0
 8006890:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8006892:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006896:	2b00      	cmp	r3, #0
 8006898:	f000 8256 	beq.w	8006d48 <USB_EPStartXfer+0xe2c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800689c:	463b      	mov	r3, r7
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	785b      	ldrb	r3, [r3, #1]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d172      	bne.n	800698c <USB_EPStartXfer+0xa70>
 80068a6:	1d3b      	adds	r3, r7, #4
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068ac:	1d3b      	adds	r3, r7, #4
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068b4:	b29b      	uxth	r3, r3
 80068b6:	461a      	mov	r2, r3
 80068b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068ba:	4413      	add	r3, r2
 80068bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068be:	463b      	mov	r3, r7
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	781b      	ldrb	r3, [r3, #0]
 80068c4:	011a      	lsls	r2, r3, #4
 80068c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068c8:	4413      	add	r3, r2
 80068ca:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80068ce:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80068d2:	601a      	str	r2, [r3, #0]
 80068d4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d11a      	bne.n	8006912 <USB_EPStartXfer+0x9f6>
 80068dc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	881b      	ldrh	r3, [r3, #0]
 80068e4:	b29b      	uxth	r3, r3
 80068e6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80068ea:	b29a      	uxth	r2, r3
 80068ec:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	801a      	strh	r2, [r3, #0]
 80068f4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	881b      	ldrh	r3, [r3, #0]
 80068fc:	b29b      	uxth	r3, r3
 80068fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006902:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006906:	b29a      	uxth	r2, r3
 8006908:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	801a      	strh	r2, [r3, #0]
 8006910:	e067      	b.n	80069e2 <USB_EPStartXfer+0xac6>
 8006912:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006916:	2b3e      	cmp	r3, #62	; 0x3e
 8006918:	d819      	bhi.n	800694e <USB_EPStartXfer+0xa32>
 800691a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800691e:	085b      	lsrs	r3, r3, #1
 8006920:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006924:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006928:	f003 0301 	and.w	r3, r3, #1
 800692c:	2b00      	cmp	r3, #0
 800692e:	d004      	beq.n	800693a <USB_EPStartXfer+0xa1e>
 8006930:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006934:	3301      	adds	r3, #1
 8006936:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800693a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800693e:	b29b      	uxth	r3, r3
 8006940:	029b      	lsls	r3, r3, #10
 8006942:	b29a      	uxth	r2, r3
 8006944:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	801a      	strh	r2, [r3, #0]
 800694c:	e049      	b.n	80069e2 <USB_EPStartXfer+0xac6>
 800694e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006952:	095b      	lsrs	r3, r3, #5
 8006954:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006958:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800695c:	f003 031f 	and.w	r3, r3, #31
 8006960:	2b00      	cmp	r3, #0
 8006962:	d104      	bne.n	800696e <USB_EPStartXfer+0xa52>
 8006964:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006968:	3b01      	subs	r3, #1
 800696a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800696e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006972:	b29b      	uxth	r3, r3
 8006974:	029b      	lsls	r3, r3, #10
 8006976:	b29b      	uxth	r3, r3
 8006978:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800697c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006980:	b29a      	uxth	r2, r3
 8006982:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	801a      	strh	r2, [r3, #0]
 800698a:	e02a      	b.n	80069e2 <USB_EPStartXfer+0xac6>
 800698c:	463b      	mov	r3, r7
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	785b      	ldrb	r3, [r3, #1]
 8006992:	2b01      	cmp	r3, #1
 8006994:	d125      	bne.n	80069e2 <USB_EPStartXfer+0xac6>
 8006996:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800699a:	1d3a      	adds	r2, r7, #4
 800699c:	6812      	ldr	r2, [r2, #0]
 800699e:	601a      	str	r2, [r3, #0]
 80069a0:	1d3b      	adds	r3, r7, #4
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069a8:	b29b      	uxth	r3, r3
 80069aa:	4619      	mov	r1, r3
 80069ac:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80069b0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80069b4:	6812      	ldr	r2, [r2, #0]
 80069b6:	440a      	add	r2, r1
 80069b8:	601a      	str	r2, [r3, #0]
 80069ba:	463b      	mov	r3, r7
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	781b      	ldrb	r3, [r3, #0]
 80069c0:	011a      	lsls	r2, r3, #4
 80069c2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4413      	add	r3, r2
 80069ca:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80069ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80069d2:	601a      	str	r2, [r3, #0]
 80069d4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80069d8:	b29a      	uxth	r2, r3
 80069da:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80069e2:	463b      	mov	r3, r7
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	891b      	ldrh	r3, [r3, #8]
 80069e8:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80069ec:	463b      	mov	r3, r7
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	6959      	ldr	r1, [r3, #20]
 80069f2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80069f6:	b29b      	uxth	r3, r3
 80069f8:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 80069fc:	1d38      	adds	r0, r7, #4
 80069fe:	6800      	ldr	r0, [r0, #0]
 8006a00:	f000 fed1 	bl	80077a6 <USB_WritePMA>
 8006a04:	e1a0      	b.n	8006d48 <USB_EPStartXfer+0xe2c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006a06:	463b      	mov	r3, r7
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	785b      	ldrb	r3, [r3, #1]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d17a      	bne.n	8006b06 <USB_EPStartXfer+0xbea>
 8006a10:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006a14:	1d3a      	adds	r2, r7, #4
 8006a16:	6812      	ldr	r2, [r2, #0]
 8006a18:	601a      	str	r2, [r3, #0]
 8006a1a:	1d3b      	adds	r3, r7, #4
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a22:	b29b      	uxth	r3, r3
 8006a24:	4619      	mov	r1, r3
 8006a26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006a2a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8006a2e:	6812      	ldr	r2, [r2, #0]
 8006a30:	440a      	add	r2, r1
 8006a32:	601a      	str	r2, [r3, #0]
 8006a34:	463b      	mov	r3, r7
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	781b      	ldrb	r3, [r3, #0]
 8006a3a:	011a      	lsls	r2, r3, #4
 8006a3c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4413      	add	r3, r2
 8006a44:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006a48:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006a4c:	601a      	str	r2, [r3, #0]
 8006a4e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d11a      	bne.n	8006a8c <USB_EPStartXfer+0xb70>
 8006a56:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	881b      	ldrh	r3, [r3, #0]
 8006a5e:	b29b      	uxth	r3, r3
 8006a60:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006a64:	b29a      	uxth	r2, r3
 8006a66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	801a      	strh	r2, [r3, #0]
 8006a6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	881b      	ldrh	r3, [r3, #0]
 8006a76:	b29b      	uxth	r3, r3
 8006a78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a80:	b29a      	uxth	r2, r3
 8006a82:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	801a      	strh	r2, [r3, #0]
 8006a8a:	e067      	b.n	8006b5c <USB_EPStartXfer+0xc40>
 8006a8c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006a90:	2b3e      	cmp	r3, #62	; 0x3e
 8006a92:	d819      	bhi.n	8006ac8 <USB_EPStartXfer+0xbac>
 8006a94:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006a98:	085b      	lsrs	r3, r3, #1
 8006a9a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006a9e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006aa2:	f003 0301 	and.w	r3, r3, #1
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d004      	beq.n	8006ab4 <USB_EPStartXfer+0xb98>
 8006aaa:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006aae:	3301      	adds	r3, #1
 8006ab0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006ab4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006ab8:	b29b      	uxth	r3, r3
 8006aba:	029b      	lsls	r3, r3, #10
 8006abc:	b29a      	uxth	r2, r3
 8006abe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	801a      	strh	r2, [r3, #0]
 8006ac6:	e049      	b.n	8006b5c <USB_EPStartXfer+0xc40>
 8006ac8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006acc:	095b      	lsrs	r3, r3, #5
 8006ace:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006ad2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006ad6:	f003 031f 	and.w	r3, r3, #31
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d104      	bne.n	8006ae8 <USB_EPStartXfer+0xbcc>
 8006ade:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006ae2:	3b01      	subs	r3, #1
 8006ae4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006ae8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006aec:	b29b      	uxth	r3, r3
 8006aee:	029b      	lsls	r3, r3, #10
 8006af0:	b29b      	uxth	r3, r3
 8006af2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006af6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006afa:	b29a      	uxth	r2, r3
 8006afc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	801a      	strh	r2, [r3, #0]
 8006b04:	e02a      	b.n	8006b5c <USB_EPStartXfer+0xc40>
 8006b06:	463b      	mov	r3, r7
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	785b      	ldrb	r3, [r3, #1]
 8006b0c:	2b01      	cmp	r3, #1
 8006b0e:	d125      	bne.n	8006b5c <USB_EPStartXfer+0xc40>
 8006b10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b14:	1d3a      	adds	r2, r7, #4
 8006b16:	6812      	ldr	r2, [r2, #0]
 8006b18:	601a      	str	r2, [r3, #0]
 8006b1a:	1d3b      	adds	r3, r7, #4
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b22:	b29b      	uxth	r3, r3
 8006b24:	4619      	mov	r1, r3
 8006b26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b2a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8006b2e:	6812      	ldr	r2, [r2, #0]
 8006b30:	440a      	add	r2, r1
 8006b32:	601a      	str	r2, [r3, #0]
 8006b34:	463b      	mov	r3, r7
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	781b      	ldrb	r3, [r3, #0]
 8006b3a:	011a      	lsls	r2, r3, #4
 8006b3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4413      	add	r3, r2
 8006b44:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006b48:	f107 0320 	add.w	r3, r7, #32
 8006b4c:	601a      	str	r2, [r3, #0]
 8006b4e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006b52:	b29a      	uxth	r2, r3
 8006b54:	f107 0320 	add.w	r3, r7, #32
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006b5c:	463b      	mov	r3, r7
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	891b      	ldrh	r3, [r3, #8]
 8006b62:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006b66:	463b      	mov	r3, r7
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	6959      	ldr	r1, [r3, #20]
 8006b6c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006b70:	b29b      	uxth	r3, r3
 8006b72:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 8006b76:	1d38      	adds	r0, r7, #4
 8006b78:	6800      	ldr	r0, [r0, #0]
 8006b7a:	f000 fe14 	bl	80077a6 <USB_WritePMA>
          ep->xfer_buff += len;
 8006b7e:	463b      	mov	r3, r7
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	695a      	ldr	r2, [r3, #20]
 8006b84:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006b88:	441a      	add	r2, r3
 8006b8a:	463b      	mov	r3, r7
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8006b90:	463b      	mov	r3, r7
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	6a1a      	ldr	r2, [r3, #32]
 8006b96:	463b      	mov	r3, r7
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	691b      	ldr	r3, [r3, #16]
 8006b9c:	429a      	cmp	r2, r3
 8006b9e:	d909      	bls.n	8006bb4 <USB_EPStartXfer+0xc98>
          {
            ep->xfer_len_db -= len;
 8006ba0:	463b      	mov	r3, r7
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	6a1a      	ldr	r2, [r3, #32]
 8006ba6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006baa:	1ad2      	subs	r2, r2, r3
 8006bac:	463b      	mov	r3, r7
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	621a      	str	r2, [r3, #32]
 8006bb2:	e008      	b.n	8006bc6 <USB_EPStartXfer+0xcaa>
          }
          else
          {
            len = ep->xfer_len_db;
 8006bb4:	463b      	mov	r3, r7
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	6a1b      	ldr	r3, [r3, #32]
 8006bba:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
            ep->xfer_len_db = 0U;
 8006bbe:	463b      	mov	r3, r7
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8006bc6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	f000 80bc 	beq.w	8006d48 <USB_EPStartXfer+0xe2c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006bd0:	f107 031c 	add.w	r3, r7, #28
 8006bd4:	1d3a      	adds	r2, r7, #4
 8006bd6:	6812      	ldr	r2, [r2, #0]
 8006bd8:	601a      	str	r2, [r3, #0]
 8006bda:	463b      	mov	r3, r7
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	785b      	ldrb	r3, [r3, #1]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d17a      	bne.n	8006cda <USB_EPStartXfer+0xdbe>
 8006be4:	f107 0318 	add.w	r3, r7, #24
 8006be8:	1d3a      	adds	r2, r7, #4
 8006bea:	6812      	ldr	r2, [r2, #0]
 8006bec:	601a      	str	r2, [r3, #0]
 8006bee:	1d3b      	adds	r3, r7, #4
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bf6:	b29b      	uxth	r3, r3
 8006bf8:	4619      	mov	r1, r3
 8006bfa:	f107 0318 	add.w	r3, r7, #24
 8006bfe:	f107 0218 	add.w	r2, r7, #24
 8006c02:	6812      	ldr	r2, [r2, #0]
 8006c04:	440a      	add	r2, r1
 8006c06:	601a      	str	r2, [r3, #0]
 8006c08:	463b      	mov	r3, r7
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	781b      	ldrb	r3, [r3, #0]
 8006c0e:	011a      	lsls	r2, r3, #4
 8006c10:	f107 0318 	add.w	r3, r7, #24
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4413      	add	r3, r2
 8006c18:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8006c1c:	f107 0314 	add.w	r3, r7, #20
 8006c20:	601a      	str	r2, [r3, #0]
 8006c22:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d11a      	bne.n	8006c60 <USB_EPStartXfer+0xd44>
 8006c2a:	f107 0314 	add.w	r3, r7, #20
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	881b      	ldrh	r3, [r3, #0]
 8006c32:	b29b      	uxth	r3, r3
 8006c34:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006c38:	b29a      	uxth	r2, r3
 8006c3a:	f107 0314 	add.w	r3, r7, #20
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	801a      	strh	r2, [r3, #0]
 8006c42:	f107 0314 	add.w	r3, r7, #20
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	881b      	ldrh	r3, [r3, #0]
 8006c4a:	b29b      	uxth	r3, r3
 8006c4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c54:	b29a      	uxth	r2, r3
 8006c56:	f107 0314 	add.w	r3, r7, #20
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	801a      	strh	r2, [r3, #0]
 8006c5e:	e062      	b.n	8006d26 <USB_EPStartXfer+0xe0a>
 8006c60:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006c64:	2b3e      	cmp	r3, #62	; 0x3e
 8006c66:	d819      	bhi.n	8006c9c <USB_EPStartXfer+0xd80>
 8006c68:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006c6c:	085b      	lsrs	r3, r3, #1
 8006c6e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006c72:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006c76:	f003 0301 	and.w	r3, r3, #1
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d004      	beq.n	8006c88 <USB_EPStartXfer+0xd6c>
 8006c7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c82:	3301      	adds	r3, #1
 8006c84:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006c88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c8c:	b29b      	uxth	r3, r3
 8006c8e:	029b      	lsls	r3, r3, #10
 8006c90:	b29a      	uxth	r2, r3
 8006c92:	f107 0314 	add.w	r3, r7, #20
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	801a      	strh	r2, [r3, #0]
 8006c9a:	e044      	b.n	8006d26 <USB_EPStartXfer+0xe0a>
 8006c9c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006ca0:	095b      	lsrs	r3, r3, #5
 8006ca2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006ca6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006caa:	f003 031f 	and.w	r3, r3, #31
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d104      	bne.n	8006cbc <USB_EPStartXfer+0xda0>
 8006cb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006cb6:	3b01      	subs	r3, #1
 8006cb8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006cbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006cc0:	b29b      	uxth	r3, r3
 8006cc2:	029b      	lsls	r3, r3, #10
 8006cc4:	b29b      	uxth	r3, r3
 8006cc6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cce:	b29a      	uxth	r2, r3
 8006cd0:	f107 0314 	add.w	r3, r7, #20
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	801a      	strh	r2, [r3, #0]
 8006cd8:	e025      	b.n	8006d26 <USB_EPStartXfer+0xe0a>
 8006cda:	463b      	mov	r3, r7
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	785b      	ldrb	r3, [r3, #1]
 8006ce0:	2b01      	cmp	r3, #1
 8006ce2:	d120      	bne.n	8006d26 <USB_EPStartXfer+0xe0a>
 8006ce4:	1d3b      	adds	r3, r7, #4
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cec:	b29b      	uxth	r3, r3
 8006cee:	4619      	mov	r1, r3
 8006cf0:	f107 031c 	add.w	r3, r7, #28
 8006cf4:	f107 021c 	add.w	r2, r7, #28
 8006cf8:	6812      	ldr	r2, [r2, #0]
 8006cfa:	440a      	add	r2, r1
 8006cfc:	601a      	str	r2, [r3, #0]
 8006cfe:	463b      	mov	r3, r7
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	781b      	ldrb	r3, [r3, #0]
 8006d04:	011a      	lsls	r2, r3, #4
 8006d06:	f107 031c 	add.w	r3, r7, #28
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4413      	add	r3, r2
 8006d0e:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8006d12:	f107 0310 	add.w	r3, r7, #16
 8006d16:	601a      	str	r2, [r3, #0]
 8006d18:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006d1c:	b29a      	uxth	r2, r3
 8006d1e:	f107 0310 	add.w	r3, r7, #16
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006d26:	463b      	mov	r3, r7
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	895b      	ldrh	r3, [r3, #10]
 8006d2c:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006d30:	463b      	mov	r3, r7
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	6959      	ldr	r1, [r3, #20]
 8006d36:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006d3a:	b29b      	uxth	r3, r3
 8006d3c:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 8006d40:	1d38      	adds	r0, r7, #4
 8006d42:	6800      	ldr	r0, [r0, #0]
 8006d44:	f000 fd2f 	bl	80077a6 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006d48:	1d3b      	adds	r3, r7, #4
 8006d4a:	681a      	ldr	r2, [r3, #0]
 8006d4c:	463b      	mov	r3, r7
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	781b      	ldrb	r3, [r3, #0]
 8006d52:	009b      	lsls	r3, r3, #2
 8006d54:	4413      	add	r3, r2
 8006d56:	881b      	ldrh	r3, [r3, #0]
 8006d58:	b29b      	uxth	r3, r3
 8006d5a:	f107 020e 	add.w	r2, r7, #14
 8006d5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d66:	8013      	strh	r3, [r2, #0]
 8006d68:	f107 030e 	add.w	r3, r7, #14
 8006d6c:	f107 020e 	add.w	r2, r7, #14
 8006d70:	8812      	ldrh	r2, [r2, #0]
 8006d72:	f082 0210 	eor.w	r2, r2, #16
 8006d76:	801a      	strh	r2, [r3, #0]
 8006d78:	f107 030e 	add.w	r3, r7, #14
 8006d7c:	f107 020e 	add.w	r2, r7, #14
 8006d80:	8812      	ldrh	r2, [r2, #0]
 8006d82:	f082 0220 	eor.w	r2, r2, #32
 8006d86:	801a      	strh	r2, [r3, #0]
 8006d88:	1d3b      	adds	r3, r7, #4
 8006d8a:	681a      	ldr	r2, [r3, #0]
 8006d8c:	463b      	mov	r3, r7
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	781b      	ldrb	r3, [r3, #0]
 8006d92:	009b      	lsls	r3, r3, #2
 8006d94:	441a      	add	r2, r3
 8006d96:	f107 030e 	add.w	r3, r7, #14
 8006d9a:	881b      	ldrh	r3, [r3, #0]
 8006d9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006da0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006da4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006da8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dac:	b29b      	uxth	r3, r3
 8006dae:	8013      	strh	r3, [r2, #0]
 8006db0:	e3b5      	b.n	800751e <USB_EPStartXfer+0x1602>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006db2:	463b      	mov	r3, r7
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	7b1b      	ldrb	r3, [r3, #12]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	f040 8090 	bne.w	8006ede <USB_EPStartXfer+0xfc2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006dbe:	463b      	mov	r3, r7
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	699a      	ldr	r2, [r3, #24]
 8006dc4:	463b      	mov	r3, r7
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	691b      	ldr	r3, [r3, #16]
 8006dca:	429a      	cmp	r2, r3
 8006dcc:	d90e      	bls.n	8006dec <USB_EPStartXfer+0xed0>
      {
        len = ep->maxpacket;
 8006dce:	463b      	mov	r3, r7
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	691b      	ldr	r3, [r3, #16]
 8006dd4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
        ep->xfer_len -= len;
 8006dd8:	463b      	mov	r3, r7
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	699a      	ldr	r2, [r3, #24]
 8006dde:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006de2:	1ad2      	subs	r2, r2, r3
 8006de4:	463b      	mov	r3, r7
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	619a      	str	r2, [r3, #24]
 8006dea:	e008      	b.n	8006dfe <USB_EPStartXfer+0xee2>
      }
      else
      {
        len = ep->xfer_len;
 8006dec:	463b      	mov	r3, r7
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	699b      	ldr	r3, [r3, #24]
 8006df2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
        ep->xfer_len = 0U;
 8006df6:	463b      	mov	r3, r7
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006dfe:	1d3b      	adds	r3, r7, #4
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006e06:	1d3b      	adds	r3, r7, #4
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e0e:	b29b      	uxth	r3, r3
 8006e10:	461a      	mov	r2, r3
 8006e12:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006e16:	4413      	add	r3, r2
 8006e18:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006e1c:	463b      	mov	r3, r7
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	781b      	ldrb	r3, [r3, #0]
 8006e22:	011a      	lsls	r2, r3, #4
 8006e24:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006e28:	4413      	add	r3, r2
 8006e2a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006e2e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006e32:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d116      	bne.n	8006e68 <USB_EPStartXfer+0xf4c>
 8006e3a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006e3e:	881b      	ldrh	r3, [r3, #0]
 8006e40:	b29b      	uxth	r3, r3
 8006e42:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006e46:	b29a      	uxth	r2, r3
 8006e48:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006e4c:	801a      	strh	r2, [r3, #0]
 8006e4e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006e52:	881b      	ldrh	r3, [r3, #0]
 8006e54:	b29b      	uxth	r3, r3
 8006e56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e5e:	b29a      	uxth	r2, r3
 8006e60:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006e64:	801a      	strh	r2, [r3, #0]
 8006e66:	e32c      	b.n	80074c2 <USB_EPStartXfer+0x15a6>
 8006e68:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006e6c:	2b3e      	cmp	r3, #62	; 0x3e
 8006e6e:	d818      	bhi.n	8006ea2 <USB_EPStartXfer+0xf86>
 8006e70:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006e74:	085b      	lsrs	r3, r3, #1
 8006e76:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006e7a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006e7e:	f003 0301 	and.w	r3, r3, #1
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d004      	beq.n	8006e90 <USB_EPStartXfer+0xf74>
 8006e86:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006e8a:	3301      	adds	r3, #1
 8006e8c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006e90:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006e94:	b29b      	uxth	r3, r3
 8006e96:	029b      	lsls	r3, r3, #10
 8006e98:	b29a      	uxth	r2, r3
 8006e9a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006e9e:	801a      	strh	r2, [r3, #0]
 8006ea0:	e30f      	b.n	80074c2 <USB_EPStartXfer+0x15a6>
 8006ea2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006ea6:	095b      	lsrs	r3, r3, #5
 8006ea8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006eac:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006eb0:	f003 031f 	and.w	r3, r3, #31
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d104      	bne.n	8006ec2 <USB_EPStartXfer+0xfa6>
 8006eb8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006ebc:	3b01      	subs	r3, #1
 8006ebe:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006ec2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006ec6:	b29b      	uxth	r3, r3
 8006ec8:	029b      	lsls	r3, r3, #10
 8006eca:	b29b      	uxth	r3, r3
 8006ecc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ed0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ed4:	b29a      	uxth	r2, r3
 8006ed6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006eda:	801a      	strh	r2, [r3, #0]
 8006edc:	e2f1      	b.n	80074c2 <USB_EPStartXfer+0x15a6>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006ede:	463b      	mov	r3, r7
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	78db      	ldrb	r3, [r3, #3]
 8006ee4:	2b02      	cmp	r3, #2
 8006ee6:	f040 818f 	bne.w	8007208 <USB_EPStartXfer+0x12ec>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006eea:	463b      	mov	r3, r7
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	785b      	ldrb	r3, [r3, #1]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d175      	bne.n	8006fe0 <USB_EPStartXfer+0x10c4>
 8006ef4:	1d3b      	adds	r3, r7, #4
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006efc:	1d3b      	adds	r3, r7, #4
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f04:	b29b      	uxth	r3, r3
 8006f06:	461a      	mov	r2, r3
 8006f08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f0c:	4413      	add	r3, r2
 8006f0e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006f12:	463b      	mov	r3, r7
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	781b      	ldrb	r3, [r3, #0]
 8006f18:	011a      	lsls	r2, r3, #4
 8006f1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f1e:	4413      	add	r3, r2
 8006f20:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006f24:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006f28:	463b      	mov	r3, r7
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	691b      	ldr	r3, [r3, #16]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d116      	bne.n	8006f60 <USB_EPStartXfer+0x1044>
 8006f32:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006f36:	881b      	ldrh	r3, [r3, #0]
 8006f38:	b29b      	uxth	r3, r3
 8006f3a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006f3e:	b29a      	uxth	r2, r3
 8006f40:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006f44:	801a      	strh	r2, [r3, #0]
 8006f46:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006f4a:	881b      	ldrh	r3, [r3, #0]
 8006f4c:	b29b      	uxth	r3, r3
 8006f4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f56:	b29a      	uxth	r2, r3
 8006f58:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006f5c:	801a      	strh	r2, [r3, #0]
 8006f5e:	e065      	b.n	800702c <USB_EPStartXfer+0x1110>
 8006f60:	463b      	mov	r3, r7
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	691b      	ldr	r3, [r3, #16]
 8006f66:	2b3e      	cmp	r3, #62	; 0x3e
 8006f68:	d81a      	bhi.n	8006fa0 <USB_EPStartXfer+0x1084>
 8006f6a:	463b      	mov	r3, r7
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	691b      	ldr	r3, [r3, #16]
 8006f70:	085b      	lsrs	r3, r3, #1
 8006f72:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006f76:	463b      	mov	r3, r7
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	691b      	ldr	r3, [r3, #16]
 8006f7c:	f003 0301 	and.w	r3, r3, #1
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d004      	beq.n	8006f8e <USB_EPStartXfer+0x1072>
 8006f84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f88:	3301      	adds	r3, #1
 8006f8a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006f8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f92:	b29b      	uxth	r3, r3
 8006f94:	029b      	lsls	r3, r3, #10
 8006f96:	b29a      	uxth	r2, r3
 8006f98:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006f9c:	801a      	strh	r2, [r3, #0]
 8006f9e:	e045      	b.n	800702c <USB_EPStartXfer+0x1110>
 8006fa0:	463b      	mov	r3, r7
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	691b      	ldr	r3, [r3, #16]
 8006fa6:	095b      	lsrs	r3, r3, #5
 8006fa8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006fac:	463b      	mov	r3, r7
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	691b      	ldr	r3, [r3, #16]
 8006fb2:	f003 031f 	and.w	r3, r3, #31
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d104      	bne.n	8006fc4 <USB_EPStartXfer+0x10a8>
 8006fba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006fbe:	3b01      	subs	r3, #1
 8006fc0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006fc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006fc8:	b29b      	uxth	r3, r3
 8006fca:	029b      	lsls	r3, r3, #10
 8006fcc:	b29b      	uxth	r3, r3
 8006fce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fd6:	b29a      	uxth	r2, r3
 8006fd8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006fdc:	801a      	strh	r2, [r3, #0]
 8006fde:	e025      	b.n	800702c <USB_EPStartXfer+0x1110>
 8006fe0:	463b      	mov	r3, r7
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	785b      	ldrb	r3, [r3, #1]
 8006fe6:	2b01      	cmp	r3, #1
 8006fe8:	d120      	bne.n	800702c <USB_EPStartXfer+0x1110>
 8006fea:	1d3b      	adds	r3, r7, #4
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006ff2:	1d3b      	adds	r3, r7, #4
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ffa:	b29b      	uxth	r3, r3
 8006ffc:	461a      	mov	r2, r3
 8006ffe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007002:	4413      	add	r3, r2
 8007004:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007008:	463b      	mov	r3, r7
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	781b      	ldrb	r3, [r3, #0]
 800700e:	011a      	lsls	r2, r3, #4
 8007010:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007014:	4413      	add	r3, r2
 8007016:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800701a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800701e:	463b      	mov	r3, r7
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	691b      	ldr	r3, [r3, #16]
 8007024:	b29a      	uxth	r2, r3
 8007026:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800702a:	801a      	strh	r2, [r3, #0]
 800702c:	1d3b      	adds	r3, r7, #4
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007034:	463b      	mov	r3, r7
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	785b      	ldrb	r3, [r3, #1]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d175      	bne.n	800712a <USB_EPStartXfer+0x120e>
 800703e:	1d3b      	adds	r3, r7, #4
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007046:	1d3b      	adds	r3, r7, #4
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800704e:	b29b      	uxth	r3, r3
 8007050:	461a      	mov	r2, r3
 8007052:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007056:	4413      	add	r3, r2
 8007058:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800705c:	463b      	mov	r3, r7
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	781b      	ldrb	r3, [r3, #0]
 8007062:	011a      	lsls	r2, r3, #4
 8007064:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007068:	4413      	add	r3, r2
 800706a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800706e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007072:	463b      	mov	r3, r7
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	691b      	ldr	r3, [r3, #16]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d116      	bne.n	80070aa <USB_EPStartXfer+0x118e>
 800707c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007080:	881b      	ldrh	r3, [r3, #0]
 8007082:	b29b      	uxth	r3, r3
 8007084:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007088:	b29a      	uxth	r2, r3
 800708a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800708e:	801a      	strh	r2, [r3, #0]
 8007090:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007094:	881b      	ldrh	r3, [r3, #0]
 8007096:	b29b      	uxth	r3, r3
 8007098:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800709c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070a0:	b29a      	uxth	r2, r3
 80070a2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80070a6:	801a      	strh	r2, [r3, #0]
 80070a8:	e061      	b.n	800716e <USB_EPStartXfer+0x1252>
 80070aa:	463b      	mov	r3, r7
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	691b      	ldr	r3, [r3, #16]
 80070b0:	2b3e      	cmp	r3, #62	; 0x3e
 80070b2:	d81a      	bhi.n	80070ea <USB_EPStartXfer+0x11ce>
 80070b4:	463b      	mov	r3, r7
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	691b      	ldr	r3, [r3, #16]
 80070ba:	085b      	lsrs	r3, r3, #1
 80070bc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80070c0:	463b      	mov	r3, r7
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	691b      	ldr	r3, [r3, #16]
 80070c6:	f003 0301 	and.w	r3, r3, #1
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d004      	beq.n	80070d8 <USB_EPStartXfer+0x11bc>
 80070ce:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80070d2:	3301      	adds	r3, #1
 80070d4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80070d8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80070dc:	b29b      	uxth	r3, r3
 80070de:	029b      	lsls	r3, r3, #10
 80070e0:	b29a      	uxth	r2, r3
 80070e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80070e6:	801a      	strh	r2, [r3, #0]
 80070e8:	e041      	b.n	800716e <USB_EPStartXfer+0x1252>
 80070ea:	463b      	mov	r3, r7
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	691b      	ldr	r3, [r3, #16]
 80070f0:	095b      	lsrs	r3, r3, #5
 80070f2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80070f6:	463b      	mov	r3, r7
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	691b      	ldr	r3, [r3, #16]
 80070fc:	f003 031f 	and.w	r3, r3, #31
 8007100:	2b00      	cmp	r3, #0
 8007102:	d104      	bne.n	800710e <USB_EPStartXfer+0x11f2>
 8007104:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007108:	3b01      	subs	r3, #1
 800710a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800710e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007112:	b29b      	uxth	r3, r3
 8007114:	029b      	lsls	r3, r3, #10
 8007116:	b29b      	uxth	r3, r3
 8007118:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800711c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007120:	b29a      	uxth	r2, r3
 8007122:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007126:	801a      	strh	r2, [r3, #0]
 8007128:	e021      	b.n	800716e <USB_EPStartXfer+0x1252>
 800712a:	463b      	mov	r3, r7
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	785b      	ldrb	r3, [r3, #1]
 8007130:	2b01      	cmp	r3, #1
 8007132:	d11c      	bne.n	800716e <USB_EPStartXfer+0x1252>
 8007134:	1d3b      	adds	r3, r7, #4
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800713c:	b29b      	uxth	r3, r3
 800713e:	461a      	mov	r2, r3
 8007140:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007144:	4413      	add	r3, r2
 8007146:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800714a:	463b      	mov	r3, r7
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	781b      	ldrb	r3, [r3, #0]
 8007150:	011a      	lsls	r2, r3, #4
 8007152:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007156:	4413      	add	r3, r2
 8007158:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800715c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007160:	463b      	mov	r3, r7
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	691b      	ldr	r3, [r3, #16]
 8007166:	b29a      	uxth	r2, r3
 8007168:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800716c:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800716e:	463b      	mov	r3, r7
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	69db      	ldr	r3, [r3, #28]
 8007174:	2b00      	cmp	r3, #0
 8007176:	f000 81a4 	beq.w	80074c2 <USB_EPStartXfer+0x15a6>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800717a:	1d3b      	adds	r3, r7, #4
 800717c:	681a      	ldr	r2, [r3, #0]
 800717e:	463b      	mov	r3, r7
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	781b      	ldrb	r3, [r3, #0]
 8007184:	009b      	lsls	r3, r3, #2
 8007186:	4413      	add	r3, r2
 8007188:	881b      	ldrh	r3, [r3, #0]
 800718a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800718e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007192:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007196:	2b00      	cmp	r3, #0
 8007198:	d005      	beq.n	80071a6 <USB_EPStartXfer+0x128a>
 800719a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800719e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d10d      	bne.n	80071c2 <USB_EPStartXfer+0x12a6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80071a6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80071aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	f040 8187 	bne.w	80074c2 <USB_EPStartXfer+0x15a6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80071b4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80071b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071bc:	2b00      	cmp	r3, #0
 80071be:	f040 8180 	bne.w	80074c2 <USB_EPStartXfer+0x15a6>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80071c2:	1d3b      	adds	r3, r7, #4
 80071c4:	681a      	ldr	r2, [r3, #0]
 80071c6:	463b      	mov	r3, r7
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	781b      	ldrb	r3, [r3, #0]
 80071cc:	009b      	lsls	r3, r3, #2
 80071ce:	4413      	add	r3, r2
 80071d0:	881b      	ldrh	r3, [r3, #0]
 80071d2:	b29b      	uxth	r3, r3
 80071d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071dc:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
 80071e0:	1d3b      	adds	r3, r7, #4
 80071e2:	681a      	ldr	r2, [r3, #0]
 80071e4:	463b      	mov	r3, r7
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	781b      	ldrb	r3, [r3, #0]
 80071ea:	009b      	lsls	r3, r3, #2
 80071ec:	441a      	add	r2, r3
 80071ee:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 80071f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071fe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007202:	b29b      	uxth	r3, r3
 8007204:	8013      	strh	r3, [r2, #0]
 8007206:	e15c      	b.n	80074c2 <USB_EPStartXfer+0x15a6>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007208:	463b      	mov	r3, r7
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	78db      	ldrb	r3, [r3, #3]
 800720e:	2b01      	cmp	r3, #1
 8007210:	f040 8155 	bne.w	80074be <USB_EPStartXfer+0x15a2>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007214:	463b      	mov	r3, r7
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	699a      	ldr	r2, [r3, #24]
 800721a:	463b      	mov	r3, r7
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	691b      	ldr	r3, [r3, #16]
 8007220:	429a      	cmp	r2, r3
 8007222:	d90e      	bls.n	8007242 <USB_EPStartXfer+0x1326>
        {
          len = ep->maxpacket;
 8007224:	463b      	mov	r3, r7
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	691b      	ldr	r3, [r3, #16]
 800722a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
          ep->xfer_len -= len;
 800722e:	463b      	mov	r3, r7
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	699a      	ldr	r2, [r3, #24]
 8007234:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007238:	1ad2      	subs	r2, r2, r3
 800723a:	463b      	mov	r3, r7
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	619a      	str	r2, [r3, #24]
 8007240:	e008      	b.n	8007254 <USB_EPStartXfer+0x1338>
        }
        else
        {
          len = ep->xfer_len;
 8007242:	463b      	mov	r3, r7
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	699b      	ldr	r3, [r3, #24]
 8007248:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
          ep->xfer_len = 0U;
 800724c:	463b      	mov	r3, r7
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	2200      	movs	r2, #0
 8007252:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007254:	463b      	mov	r3, r7
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	785b      	ldrb	r3, [r3, #1]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d16f      	bne.n	800733e <USB_EPStartXfer+0x1422>
 800725e:	1d3b      	adds	r3, r7, #4
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007266:	1d3b      	adds	r3, r7, #4
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800726e:	b29b      	uxth	r3, r3
 8007270:	461a      	mov	r2, r3
 8007272:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007276:	4413      	add	r3, r2
 8007278:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800727c:	463b      	mov	r3, r7
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	781b      	ldrb	r3, [r3, #0]
 8007282:	011a      	lsls	r2, r3, #4
 8007284:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007288:	4413      	add	r3, r2
 800728a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800728e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007292:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007296:	2b00      	cmp	r3, #0
 8007298:	d116      	bne.n	80072c8 <USB_EPStartXfer+0x13ac>
 800729a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800729e:	881b      	ldrh	r3, [r3, #0]
 80072a0:	b29b      	uxth	r3, r3
 80072a2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80072a6:	b29a      	uxth	r2, r3
 80072a8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80072ac:	801a      	strh	r2, [r3, #0]
 80072ae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80072b2:	881b      	ldrh	r3, [r3, #0]
 80072b4:	b29b      	uxth	r3, r3
 80072b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072be:	b29a      	uxth	r2, r3
 80072c0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80072c4:	801a      	strh	r2, [r3, #0]
 80072c6:	e05f      	b.n	8007388 <USB_EPStartXfer+0x146c>
 80072c8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80072cc:	2b3e      	cmp	r3, #62	; 0x3e
 80072ce:	d818      	bhi.n	8007302 <USB_EPStartXfer+0x13e6>
 80072d0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80072d4:	085b      	lsrs	r3, r3, #1
 80072d6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80072da:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80072de:	f003 0301 	and.w	r3, r3, #1
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d004      	beq.n	80072f0 <USB_EPStartXfer+0x13d4>
 80072e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072ea:	3301      	adds	r3, #1
 80072ec:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80072f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072f4:	b29b      	uxth	r3, r3
 80072f6:	029b      	lsls	r3, r3, #10
 80072f8:	b29a      	uxth	r2, r3
 80072fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80072fe:	801a      	strh	r2, [r3, #0]
 8007300:	e042      	b.n	8007388 <USB_EPStartXfer+0x146c>
 8007302:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007306:	095b      	lsrs	r3, r3, #5
 8007308:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800730c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007310:	f003 031f 	and.w	r3, r3, #31
 8007314:	2b00      	cmp	r3, #0
 8007316:	d104      	bne.n	8007322 <USB_EPStartXfer+0x1406>
 8007318:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800731c:	3b01      	subs	r3, #1
 800731e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007322:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007326:	b29b      	uxth	r3, r3
 8007328:	029b      	lsls	r3, r3, #10
 800732a:	b29b      	uxth	r3, r3
 800732c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007330:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007334:	b29a      	uxth	r2, r3
 8007336:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800733a:	801a      	strh	r2, [r3, #0]
 800733c:	e024      	b.n	8007388 <USB_EPStartXfer+0x146c>
 800733e:	463b      	mov	r3, r7
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	785b      	ldrb	r3, [r3, #1]
 8007344:	2b01      	cmp	r3, #1
 8007346:	d11f      	bne.n	8007388 <USB_EPStartXfer+0x146c>
 8007348:	1d3b      	adds	r3, r7, #4
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007350:	1d3b      	adds	r3, r7, #4
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007358:	b29b      	uxth	r3, r3
 800735a:	461a      	mov	r2, r3
 800735c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007360:	4413      	add	r3, r2
 8007362:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007366:	463b      	mov	r3, r7
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	781b      	ldrb	r3, [r3, #0]
 800736c:	011a      	lsls	r2, r3, #4
 800736e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007372:	4413      	add	r3, r2
 8007374:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007378:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800737c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007380:	b29a      	uxth	r2, r3
 8007382:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007386:	801a      	strh	r2, [r3, #0]
 8007388:	1d3b      	adds	r3, r7, #4
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007390:	463b      	mov	r3, r7
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	785b      	ldrb	r3, [r3, #1]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d16f      	bne.n	800747a <USB_EPStartXfer+0x155e>
 800739a:	1d3b      	adds	r3, r7, #4
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80073a2:	1d3b      	adds	r3, r7, #4
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073aa:	b29b      	uxth	r3, r3
 80073ac:	461a      	mov	r2, r3
 80073ae:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80073b2:	4413      	add	r3, r2
 80073b4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80073b8:	463b      	mov	r3, r7
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	781b      	ldrb	r3, [r3, #0]
 80073be:	011a      	lsls	r2, r3, #4
 80073c0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80073c4:	4413      	add	r3, r2
 80073c6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80073ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80073ce:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d116      	bne.n	8007404 <USB_EPStartXfer+0x14e8>
 80073d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073da:	881b      	ldrh	r3, [r3, #0]
 80073dc:	b29b      	uxth	r3, r3
 80073de:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80073e2:	b29a      	uxth	r2, r3
 80073e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073e8:	801a      	strh	r2, [r3, #0]
 80073ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073ee:	881b      	ldrh	r3, [r3, #0]
 80073f0:	b29b      	uxth	r3, r3
 80073f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073fa:	b29a      	uxth	r2, r3
 80073fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007400:	801a      	strh	r2, [r3, #0]
 8007402:	e05e      	b.n	80074c2 <USB_EPStartXfer+0x15a6>
 8007404:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007408:	2b3e      	cmp	r3, #62	; 0x3e
 800740a:	d818      	bhi.n	800743e <USB_EPStartXfer+0x1522>
 800740c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007410:	085b      	lsrs	r3, r3, #1
 8007412:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007416:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800741a:	f003 0301 	and.w	r3, r3, #1
 800741e:	2b00      	cmp	r3, #0
 8007420:	d004      	beq.n	800742c <USB_EPStartXfer+0x1510>
 8007422:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007426:	3301      	adds	r3, #1
 8007428:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800742c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007430:	b29b      	uxth	r3, r3
 8007432:	029b      	lsls	r3, r3, #10
 8007434:	b29a      	uxth	r2, r3
 8007436:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800743a:	801a      	strh	r2, [r3, #0]
 800743c:	e041      	b.n	80074c2 <USB_EPStartXfer+0x15a6>
 800743e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007442:	095b      	lsrs	r3, r3, #5
 8007444:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007448:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800744c:	f003 031f 	and.w	r3, r3, #31
 8007450:	2b00      	cmp	r3, #0
 8007452:	d104      	bne.n	800745e <USB_EPStartXfer+0x1542>
 8007454:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007458:	3b01      	subs	r3, #1
 800745a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800745e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007462:	b29b      	uxth	r3, r3
 8007464:	029b      	lsls	r3, r3, #10
 8007466:	b29b      	uxth	r3, r3
 8007468:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800746c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007470:	b29a      	uxth	r2, r3
 8007472:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007476:	801a      	strh	r2, [r3, #0]
 8007478:	e023      	b.n	80074c2 <USB_EPStartXfer+0x15a6>
 800747a:	463b      	mov	r3, r7
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	785b      	ldrb	r3, [r3, #1]
 8007480:	2b01      	cmp	r3, #1
 8007482:	d11e      	bne.n	80074c2 <USB_EPStartXfer+0x15a6>
 8007484:	1d3b      	adds	r3, r7, #4
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800748c:	b29b      	uxth	r3, r3
 800748e:	461a      	mov	r2, r3
 8007490:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007494:	4413      	add	r3, r2
 8007496:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800749a:	463b      	mov	r3, r7
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	781b      	ldrb	r3, [r3, #0]
 80074a0:	011a      	lsls	r2, r3, #4
 80074a2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80074a6:	4413      	add	r3, r2
 80074a8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80074ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80074b0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80074b4:	b29a      	uxth	r2, r3
 80074b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074ba:	801a      	strh	r2, [r3, #0]
 80074bc:	e001      	b.n	80074c2 <USB_EPStartXfer+0x15a6>
      }
      else
      {
        return HAL_ERROR;
 80074be:	2301      	movs	r3, #1
 80074c0:	e02e      	b.n	8007520 <USB_EPStartXfer+0x1604>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80074c2:	1d3b      	adds	r3, r7, #4
 80074c4:	681a      	ldr	r2, [r3, #0]
 80074c6:	463b      	mov	r3, r7
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	781b      	ldrb	r3, [r3, #0]
 80074cc:	009b      	lsls	r3, r3, #2
 80074ce:	4413      	add	r3, r2
 80074d0:	881b      	ldrh	r3, [r3, #0]
 80074d2:	b29b      	uxth	r3, r3
 80074d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80074d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074dc:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 80074e0:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80074e4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80074e8:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 80074ec:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80074f0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80074f4:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 80074f8:	1d3b      	adds	r3, r7, #4
 80074fa:	681a      	ldr	r2, [r3, #0]
 80074fc:	463b      	mov	r3, r7
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	781b      	ldrb	r3, [r3, #0]
 8007502:	009b      	lsls	r3, r3, #2
 8007504:	441a      	add	r2, r3
 8007506:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800750a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800750e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007512:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007516:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800751a:	b29b      	uxth	r3, r3
 800751c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800751e:	2300      	movs	r3, #0
}
 8007520:	4618      	mov	r0, r3
 8007522:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8007526:	46bd      	mov	sp, r7
 8007528:	bd80      	pop	{r7, pc}

0800752a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800752a:	b480      	push	{r7}
 800752c:	b085      	sub	sp, #20
 800752e:	af00      	add	r7, sp, #0
 8007530:	6078      	str	r0, [r7, #4]
 8007532:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	785b      	ldrb	r3, [r3, #1]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d020      	beq.n	800757e <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800753c:	687a      	ldr	r2, [r7, #4]
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	781b      	ldrb	r3, [r3, #0]
 8007542:	009b      	lsls	r3, r3, #2
 8007544:	4413      	add	r3, r2
 8007546:	881b      	ldrh	r3, [r3, #0]
 8007548:	b29b      	uxth	r3, r3
 800754a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800754e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007552:	81fb      	strh	r3, [r7, #14]
 8007554:	89fb      	ldrh	r3, [r7, #14]
 8007556:	f083 0310 	eor.w	r3, r3, #16
 800755a:	81fb      	strh	r3, [r7, #14]
 800755c:	687a      	ldr	r2, [r7, #4]
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	781b      	ldrb	r3, [r3, #0]
 8007562:	009b      	lsls	r3, r3, #2
 8007564:	441a      	add	r2, r3
 8007566:	89fb      	ldrh	r3, [r7, #14]
 8007568:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800756c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007570:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007574:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007578:	b29b      	uxth	r3, r3
 800757a:	8013      	strh	r3, [r2, #0]
 800757c:	e01f      	b.n	80075be <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800757e:	687a      	ldr	r2, [r7, #4]
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	781b      	ldrb	r3, [r3, #0]
 8007584:	009b      	lsls	r3, r3, #2
 8007586:	4413      	add	r3, r2
 8007588:	881b      	ldrh	r3, [r3, #0]
 800758a:	b29b      	uxth	r3, r3
 800758c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007590:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007594:	81bb      	strh	r3, [r7, #12]
 8007596:	89bb      	ldrh	r3, [r7, #12]
 8007598:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800759c:	81bb      	strh	r3, [r7, #12]
 800759e:	687a      	ldr	r2, [r7, #4]
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	781b      	ldrb	r3, [r3, #0]
 80075a4:	009b      	lsls	r3, r3, #2
 80075a6:	441a      	add	r2, r3
 80075a8:	89bb      	ldrh	r3, [r7, #12]
 80075aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075ba:	b29b      	uxth	r3, r3
 80075bc:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80075be:	2300      	movs	r3, #0
}
 80075c0:	4618      	mov	r0, r3
 80075c2:	3714      	adds	r7, #20
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bc80      	pop	{r7}
 80075c8:	4770      	bx	lr

080075ca <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80075ca:	b480      	push	{r7}
 80075cc:	b087      	sub	sp, #28
 80075ce:	af00      	add	r7, sp, #0
 80075d0:	6078      	str	r0, [r7, #4]
 80075d2:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	7b1b      	ldrb	r3, [r3, #12]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	f040 809d 	bne.w	8007718 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	785b      	ldrb	r3, [r3, #1]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d04c      	beq.n	8007680 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80075e6:	687a      	ldr	r2, [r7, #4]
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	781b      	ldrb	r3, [r3, #0]
 80075ec:	009b      	lsls	r3, r3, #2
 80075ee:	4413      	add	r3, r2
 80075f0:	881b      	ldrh	r3, [r3, #0]
 80075f2:	82fb      	strh	r3, [r7, #22]
 80075f4:	8afb      	ldrh	r3, [r7, #22]
 80075f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d01b      	beq.n	8007636 <USB_EPClearStall+0x6c>
 80075fe:	687a      	ldr	r2, [r7, #4]
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	781b      	ldrb	r3, [r3, #0]
 8007604:	009b      	lsls	r3, r3, #2
 8007606:	4413      	add	r3, r2
 8007608:	881b      	ldrh	r3, [r3, #0]
 800760a:	b29b      	uxth	r3, r3
 800760c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007610:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007614:	82bb      	strh	r3, [r7, #20]
 8007616:	687a      	ldr	r2, [r7, #4]
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	781b      	ldrb	r3, [r3, #0]
 800761c:	009b      	lsls	r3, r3, #2
 800761e:	441a      	add	r2, r3
 8007620:	8abb      	ldrh	r3, [r7, #20]
 8007622:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007626:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800762a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800762e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007632:	b29b      	uxth	r3, r3
 8007634:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	78db      	ldrb	r3, [r3, #3]
 800763a:	2b01      	cmp	r3, #1
 800763c:	d06c      	beq.n	8007718 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800763e:	687a      	ldr	r2, [r7, #4]
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	781b      	ldrb	r3, [r3, #0]
 8007644:	009b      	lsls	r3, r3, #2
 8007646:	4413      	add	r3, r2
 8007648:	881b      	ldrh	r3, [r3, #0]
 800764a:	b29b      	uxth	r3, r3
 800764c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007650:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007654:	827b      	strh	r3, [r7, #18]
 8007656:	8a7b      	ldrh	r3, [r7, #18]
 8007658:	f083 0320 	eor.w	r3, r3, #32
 800765c:	827b      	strh	r3, [r7, #18]
 800765e:	687a      	ldr	r2, [r7, #4]
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	781b      	ldrb	r3, [r3, #0]
 8007664:	009b      	lsls	r3, r3, #2
 8007666:	441a      	add	r2, r3
 8007668:	8a7b      	ldrh	r3, [r7, #18]
 800766a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800766e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007672:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007676:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800767a:	b29b      	uxth	r3, r3
 800767c:	8013      	strh	r3, [r2, #0]
 800767e:	e04b      	b.n	8007718 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007680:	687a      	ldr	r2, [r7, #4]
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	781b      	ldrb	r3, [r3, #0]
 8007686:	009b      	lsls	r3, r3, #2
 8007688:	4413      	add	r3, r2
 800768a:	881b      	ldrh	r3, [r3, #0]
 800768c:	823b      	strh	r3, [r7, #16]
 800768e:	8a3b      	ldrh	r3, [r7, #16]
 8007690:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007694:	2b00      	cmp	r3, #0
 8007696:	d01b      	beq.n	80076d0 <USB_EPClearStall+0x106>
 8007698:	687a      	ldr	r2, [r7, #4]
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	781b      	ldrb	r3, [r3, #0]
 800769e:	009b      	lsls	r3, r3, #2
 80076a0:	4413      	add	r3, r2
 80076a2:	881b      	ldrh	r3, [r3, #0]
 80076a4:	b29b      	uxth	r3, r3
 80076a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076ae:	81fb      	strh	r3, [r7, #14]
 80076b0:	687a      	ldr	r2, [r7, #4]
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	781b      	ldrb	r3, [r3, #0]
 80076b6:	009b      	lsls	r3, r3, #2
 80076b8:	441a      	add	r2, r3
 80076ba:	89fb      	ldrh	r3, [r7, #14]
 80076bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80076c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076cc:	b29b      	uxth	r3, r3
 80076ce:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80076d0:	687a      	ldr	r2, [r7, #4]
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	781b      	ldrb	r3, [r3, #0]
 80076d6:	009b      	lsls	r3, r3, #2
 80076d8:	4413      	add	r3, r2
 80076da:	881b      	ldrh	r3, [r3, #0]
 80076dc:	b29b      	uxth	r3, r3
 80076de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80076e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076e6:	81bb      	strh	r3, [r7, #12]
 80076e8:	89bb      	ldrh	r3, [r7, #12]
 80076ea:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80076ee:	81bb      	strh	r3, [r7, #12]
 80076f0:	89bb      	ldrh	r3, [r7, #12]
 80076f2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80076f6:	81bb      	strh	r3, [r7, #12]
 80076f8:	687a      	ldr	r2, [r7, #4]
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	781b      	ldrb	r3, [r3, #0]
 80076fe:	009b      	lsls	r3, r3, #2
 8007700:	441a      	add	r2, r3
 8007702:	89bb      	ldrh	r3, [r7, #12]
 8007704:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007708:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800770c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007710:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007714:	b29b      	uxth	r3, r3
 8007716:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007718:	2300      	movs	r3, #0
}
 800771a:	4618      	mov	r0, r3
 800771c:	371c      	adds	r7, #28
 800771e:	46bd      	mov	sp, r7
 8007720:	bc80      	pop	{r7}
 8007722:	4770      	bx	lr

08007724 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007724:	b480      	push	{r7}
 8007726:	b083      	sub	sp, #12
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
 800772c:	460b      	mov	r3, r1
 800772e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007730:	78fb      	ldrb	r3, [r7, #3]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d103      	bne.n	800773e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2280      	movs	r2, #128	; 0x80
 800773a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800773e:	2300      	movs	r3, #0
}
 8007740:	4618      	mov	r0, r3
 8007742:	370c      	adds	r7, #12
 8007744:	46bd      	mov	sp, r7
 8007746:	bc80      	pop	{r7}
 8007748:	4770      	bx	lr

0800774a <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800774a:	b480      	push	{r7}
 800774c:	b083      	sub	sp, #12
 800774e:	af00      	add	r7, sp, #0
 8007750:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007752:	2300      	movs	r3, #0
}
 8007754:	4618      	mov	r0, r3
 8007756:	370c      	adds	r7, #12
 8007758:	46bd      	mov	sp, r7
 800775a:	bc80      	pop	{r7}
 800775c:	4770      	bx	lr

0800775e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800775e:	b480      	push	{r7}
 8007760:	b083      	sub	sp, #12
 8007762:	af00      	add	r7, sp, #0
 8007764:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007766:	2300      	movs	r3, #0
}
 8007768:	4618      	mov	r0, r3
 800776a:	370c      	adds	r7, #12
 800776c:	46bd      	mov	sp, r7
 800776e:	bc80      	pop	{r7}
 8007770:	4770      	bx	lr

08007772 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8007772:	b480      	push	{r7}
 8007774:	b085      	sub	sp, #20
 8007776:	af00      	add	r7, sp, #0
 8007778:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007780:	b29b      	uxth	r3, r3
 8007782:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007784:	68fb      	ldr	r3, [r7, #12]
}
 8007786:	4618      	mov	r0, r3
 8007788:	3714      	adds	r7, #20
 800778a:	46bd      	mov	sp, r7
 800778c:	bc80      	pop	{r7}
 800778e:	4770      	bx	lr

08007790 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8007790:	b480      	push	{r7}
 8007792:	b083      	sub	sp, #12
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
 8007798:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800779a:	2300      	movs	r3, #0
}
 800779c:	4618      	mov	r0, r3
 800779e:	370c      	adds	r7, #12
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bc80      	pop	{r7}
 80077a4:	4770      	bx	lr

080077a6 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80077a6:	b480      	push	{r7}
 80077a8:	b08d      	sub	sp, #52	; 0x34
 80077aa:	af00      	add	r7, sp, #0
 80077ac:	60f8      	str	r0, [r7, #12]
 80077ae:	60b9      	str	r1, [r7, #8]
 80077b0:	4611      	mov	r1, r2
 80077b2:	461a      	mov	r2, r3
 80077b4:	460b      	mov	r3, r1
 80077b6:	80fb      	strh	r3, [r7, #6]
 80077b8:	4613      	mov	r3, r2
 80077ba:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80077bc:	88bb      	ldrh	r3, [r7, #4]
 80077be:	3301      	adds	r3, #1
 80077c0:	085b      	lsrs	r3, r3, #1
 80077c2:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80077cc:	88fb      	ldrh	r3, [r7, #6]
 80077ce:	005a      	lsls	r2, r3, #1
 80077d0:	69fb      	ldr	r3, [r7, #28]
 80077d2:	4413      	add	r3, r2
 80077d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80077d8:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80077da:	6a3b      	ldr	r3, [r7, #32]
 80077dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80077de:	e01e      	b.n	800781e <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80077e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e2:	781b      	ldrb	r3, [r3, #0]
 80077e4:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80077e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e8:	3301      	adds	r3, #1
 80077ea:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80077ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ee:	781b      	ldrb	r3, [r3, #0]
 80077f0:	b29b      	uxth	r3, r3
 80077f2:	021b      	lsls	r3, r3, #8
 80077f4:	b29b      	uxth	r3, r3
 80077f6:	461a      	mov	r2, r3
 80077f8:	69bb      	ldr	r3, [r7, #24]
 80077fa:	4313      	orrs	r3, r2
 80077fc:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80077fe:	697b      	ldr	r3, [r7, #20]
 8007800:	b29a      	uxth	r2, r3
 8007802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007804:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007808:	3302      	adds	r3, #2
 800780a:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800780c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800780e:	3302      	adds	r3, #2
 8007810:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8007812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007814:	3301      	adds	r3, #1
 8007816:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8007818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800781a:	3b01      	subs	r3, #1
 800781c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800781e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007820:	2b00      	cmp	r3, #0
 8007822:	d1dd      	bne.n	80077e0 <USB_WritePMA+0x3a>
  }
}
 8007824:	bf00      	nop
 8007826:	3734      	adds	r7, #52	; 0x34
 8007828:	46bd      	mov	sp, r7
 800782a:	bc80      	pop	{r7}
 800782c:	4770      	bx	lr

0800782e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800782e:	b480      	push	{r7}
 8007830:	b08b      	sub	sp, #44	; 0x2c
 8007832:	af00      	add	r7, sp, #0
 8007834:	60f8      	str	r0, [r7, #12]
 8007836:	60b9      	str	r1, [r7, #8]
 8007838:	4611      	mov	r1, r2
 800783a:	461a      	mov	r2, r3
 800783c:	460b      	mov	r3, r1
 800783e:	80fb      	strh	r3, [r7, #6]
 8007840:	4613      	mov	r3, r2
 8007842:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007844:	88bb      	ldrh	r3, [r7, #4]
 8007846:	085b      	lsrs	r3, r3, #1
 8007848:	b29b      	uxth	r3, r3
 800784a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007854:	88fb      	ldrh	r3, [r7, #6]
 8007856:	005a      	lsls	r2, r3, #1
 8007858:	697b      	ldr	r3, [r7, #20]
 800785a:	4413      	add	r3, r2
 800785c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007860:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8007862:	69bb      	ldr	r3, [r7, #24]
 8007864:	627b      	str	r3, [r7, #36]	; 0x24
 8007866:	e01b      	b.n	80078a0 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8007868:	6a3b      	ldr	r3, [r7, #32]
 800786a:	881b      	ldrh	r3, [r3, #0]
 800786c:	b29b      	uxth	r3, r3
 800786e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007870:	6a3b      	ldr	r3, [r7, #32]
 8007872:	3302      	adds	r3, #2
 8007874:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007876:	693b      	ldr	r3, [r7, #16]
 8007878:	b2da      	uxtb	r2, r3
 800787a:	69fb      	ldr	r3, [r7, #28]
 800787c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800787e:	69fb      	ldr	r3, [r7, #28]
 8007880:	3301      	adds	r3, #1
 8007882:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8007884:	693b      	ldr	r3, [r7, #16]
 8007886:	0a1b      	lsrs	r3, r3, #8
 8007888:	b2da      	uxtb	r2, r3
 800788a:	69fb      	ldr	r3, [r7, #28]
 800788c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800788e:	69fb      	ldr	r3, [r7, #28]
 8007890:	3301      	adds	r3, #1
 8007892:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007894:	6a3b      	ldr	r3, [r7, #32]
 8007896:	3302      	adds	r3, #2
 8007898:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800789a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800789c:	3b01      	subs	r3, #1
 800789e:	627b      	str	r3, [r7, #36]	; 0x24
 80078a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d1e0      	bne.n	8007868 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80078a6:	88bb      	ldrh	r3, [r7, #4]
 80078a8:	f003 0301 	and.w	r3, r3, #1
 80078ac:	b29b      	uxth	r3, r3
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d007      	beq.n	80078c2 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80078b2:	6a3b      	ldr	r3, [r7, #32]
 80078b4:	881b      	ldrh	r3, [r3, #0]
 80078b6:	b29b      	uxth	r3, r3
 80078b8:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80078ba:	693b      	ldr	r3, [r7, #16]
 80078bc:	b2da      	uxtb	r2, r3
 80078be:	69fb      	ldr	r3, [r7, #28]
 80078c0:	701a      	strb	r2, [r3, #0]
  }
}
 80078c2:	bf00      	nop
 80078c4:	372c      	adds	r7, #44	; 0x2c
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bc80      	pop	{r7}
 80078ca:	4770      	bx	lr

080078cc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b084      	sub	sp, #16
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
 80078d4:	460b      	mov	r3, r1
 80078d6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80078d8:	2300      	movs	r3, #0
 80078da:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	7c1b      	ldrb	r3, [r3, #16]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d115      	bne.n	8007910 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80078e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80078e8:	2202      	movs	r2, #2
 80078ea:	2181      	movs	r1, #129	; 0x81
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f003 f858 	bl	800a9a2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2201      	movs	r2, #1
 80078f6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80078f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80078fc:	2202      	movs	r2, #2
 80078fe:	2101      	movs	r1, #1
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	f003 f84e 	bl	800a9a2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2201      	movs	r2, #1
 800790a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800790e:	e012      	b.n	8007936 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007910:	2340      	movs	r3, #64	; 0x40
 8007912:	2202      	movs	r2, #2
 8007914:	2181      	movs	r1, #129	; 0x81
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f003 f843 	bl	800a9a2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2201      	movs	r2, #1
 8007920:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007922:	2340      	movs	r3, #64	; 0x40
 8007924:	2202      	movs	r2, #2
 8007926:	2101      	movs	r1, #1
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f003 f83a 	bl	800a9a2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2201      	movs	r2, #1
 8007932:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007936:	2308      	movs	r3, #8
 8007938:	2203      	movs	r2, #3
 800793a:	2182      	movs	r1, #130	; 0x82
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	f003 f830 	bl	800a9a2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2201      	movs	r2, #1
 8007946:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007948:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800794c:	f003 f950 	bl	800abf0 <USBD_static_malloc>
 8007950:	4602      	mov	r2, r0
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800795e:	2b00      	cmp	r3, #0
 8007960:	d102      	bne.n	8007968 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8007962:	2301      	movs	r3, #1
 8007964:	73fb      	strb	r3, [r7, #15]
 8007966:	e026      	b.n	80079b6 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800796e:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	2200      	movs	r2, #0
 800797e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8007982:	68bb      	ldr	r3, [r7, #8]
 8007984:	2200      	movs	r2, #0
 8007986:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	7c1b      	ldrb	r3, [r3, #16]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d109      	bne.n	80079a6 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007992:	68bb      	ldr	r3, [r7, #8]
 8007994:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007998:	f44f 7300 	mov.w	r3, #512	; 0x200
 800799c:	2101      	movs	r1, #1
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f003 f8f0 	bl	800ab84 <USBD_LL_PrepareReceive>
 80079a4:	e007      	b.n	80079b6 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80079a6:	68bb      	ldr	r3, [r7, #8]
 80079a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80079ac:	2340      	movs	r3, #64	; 0x40
 80079ae:	2101      	movs	r1, #1
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	f003 f8e7 	bl	800ab84 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80079b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	3710      	adds	r7, #16
 80079bc:	46bd      	mov	sp, r7
 80079be:	bd80      	pop	{r7, pc}

080079c0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b084      	sub	sp, #16
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
 80079c8:	460b      	mov	r3, r1
 80079ca:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80079cc:	2300      	movs	r3, #0
 80079ce:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80079d0:	2181      	movs	r1, #129	; 0x81
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f003 f80b 	bl	800a9ee <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2200      	movs	r2, #0
 80079dc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80079de:	2101      	movs	r1, #1
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	f003 f804 	bl	800a9ee <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2200      	movs	r2, #0
 80079ea:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80079ee:	2182      	movs	r1, #130	; 0x82
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	f002 fffc 	bl	800a9ee <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2200      	movs	r2, #0
 80079fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d00e      	beq.n	8007a24 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a0c:	685b      	ldr	r3, [r3, #4]
 8007a0e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a16:	4618      	mov	r0, r3
 8007a18:	f003 f8f6 	bl	800ac08 <USBD_static_free>
    pdev->pClassData = NULL;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8007a24:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a26:	4618      	mov	r0, r3
 8007a28:	3710      	adds	r7, #16
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	bd80      	pop	{r7, pc}

08007a2e <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007a2e:	b580      	push	{r7, lr}
 8007a30:	b086      	sub	sp, #24
 8007a32:	af00      	add	r7, sp, #0
 8007a34:	6078      	str	r0, [r7, #4]
 8007a36:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a3e:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007a40:	2300      	movs	r3, #0
 8007a42:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007a44:	2300      	movs	r3, #0
 8007a46:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8007a48:	2300      	movs	r3, #0
 8007a4a:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	781b      	ldrb	r3, [r3, #0]
 8007a50:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d039      	beq.n	8007acc <USBD_CDC_Setup+0x9e>
 8007a58:	2b20      	cmp	r3, #32
 8007a5a:	d17c      	bne.n	8007b56 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	88db      	ldrh	r3, [r3, #6]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d029      	beq.n	8007ab8 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	781b      	ldrb	r3, [r3, #0]
 8007a68:	b25b      	sxtb	r3, r3
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	da11      	bge.n	8007a92 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a74:	689b      	ldr	r3, [r3, #8]
 8007a76:	683a      	ldr	r2, [r7, #0]
 8007a78:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8007a7a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007a7c:	683a      	ldr	r2, [r7, #0]
 8007a7e:	88d2      	ldrh	r2, [r2, #6]
 8007a80:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007a82:	6939      	ldr	r1, [r7, #16]
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	88db      	ldrh	r3, [r3, #6]
 8007a88:	461a      	mov	r2, r3
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f001 f9fa 	bl	8008e84 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8007a90:	e068      	b.n	8007b64 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	785a      	ldrb	r2, [r3, #1]
 8007a96:	693b      	ldr	r3, [r7, #16]
 8007a98:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	88db      	ldrh	r3, [r3, #6]
 8007aa0:	b2da      	uxtb	r2, r3
 8007aa2:	693b      	ldr	r3, [r7, #16]
 8007aa4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007aa8:	6939      	ldr	r1, [r7, #16]
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	88db      	ldrh	r3, [r3, #6]
 8007aae:	461a      	mov	r2, r3
 8007ab0:	6878      	ldr	r0, [r7, #4]
 8007ab2:	f001 fa15 	bl	8008ee0 <USBD_CtlPrepareRx>
      break;
 8007ab6:	e055      	b.n	8007b64 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007abe:	689b      	ldr	r3, [r3, #8]
 8007ac0:	683a      	ldr	r2, [r7, #0]
 8007ac2:	7850      	ldrb	r0, [r2, #1]
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	6839      	ldr	r1, [r7, #0]
 8007ac8:	4798      	blx	r3
      break;
 8007aca:	e04b      	b.n	8007b64 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	785b      	ldrb	r3, [r3, #1]
 8007ad0:	2b0a      	cmp	r3, #10
 8007ad2:	d017      	beq.n	8007b04 <USBD_CDC_Setup+0xd6>
 8007ad4:	2b0b      	cmp	r3, #11
 8007ad6:	d029      	beq.n	8007b2c <USBD_CDC_Setup+0xfe>
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d133      	bne.n	8007b44 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ae2:	2b03      	cmp	r3, #3
 8007ae4:	d107      	bne.n	8007af6 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007ae6:	f107 030c 	add.w	r3, r7, #12
 8007aea:	2202      	movs	r2, #2
 8007aec:	4619      	mov	r1, r3
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f001 f9c8 	bl	8008e84 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007af4:	e02e      	b.n	8007b54 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8007af6:	6839      	ldr	r1, [r7, #0]
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f001 f959 	bl	8008db0 <USBD_CtlError>
            ret = USBD_FAIL;
 8007afe:	2302      	movs	r3, #2
 8007b00:	75fb      	strb	r3, [r7, #23]
          break;
 8007b02:	e027      	b.n	8007b54 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b0a:	2b03      	cmp	r3, #3
 8007b0c:	d107      	bne.n	8007b1e <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8007b0e:	f107 030f 	add.w	r3, r7, #15
 8007b12:	2201      	movs	r2, #1
 8007b14:	4619      	mov	r1, r3
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f001 f9b4 	bl	8008e84 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007b1c:	e01a      	b.n	8007b54 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8007b1e:	6839      	ldr	r1, [r7, #0]
 8007b20:	6878      	ldr	r0, [r7, #4]
 8007b22:	f001 f945 	bl	8008db0 <USBD_CtlError>
            ret = USBD_FAIL;
 8007b26:	2302      	movs	r3, #2
 8007b28:	75fb      	strb	r3, [r7, #23]
          break;
 8007b2a:	e013      	b.n	8007b54 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b32:	2b03      	cmp	r3, #3
 8007b34:	d00d      	beq.n	8007b52 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8007b36:	6839      	ldr	r1, [r7, #0]
 8007b38:	6878      	ldr	r0, [r7, #4]
 8007b3a:	f001 f939 	bl	8008db0 <USBD_CtlError>
            ret = USBD_FAIL;
 8007b3e:	2302      	movs	r3, #2
 8007b40:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007b42:	e006      	b.n	8007b52 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8007b44:	6839      	ldr	r1, [r7, #0]
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	f001 f932 	bl	8008db0 <USBD_CtlError>
          ret = USBD_FAIL;
 8007b4c:	2302      	movs	r3, #2
 8007b4e:	75fb      	strb	r3, [r7, #23]
          break;
 8007b50:	e000      	b.n	8007b54 <USBD_CDC_Setup+0x126>
          break;
 8007b52:	bf00      	nop
      }
      break;
 8007b54:	e006      	b.n	8007b64 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8007b56:	6839      	ldr	r1, [r7, #0]
 8007b58:	6878      	ldr	r0, [r7, #4]
 8007b5a:	f001 f929 	bl	8008db0 <USBD_CtlError>
      ret = USBD_FAIL;
 8007b5e:	2302      	movs	r3, #2
 8007b60:	75fb      	strb	r3, [r7, #23]
      break;
 8007b62:	bf00      	nop
  }

  return ret;
 8007b64:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b66:	4618      	mov	r0, r3
 8007b68:	3718      	adds	r7, #24
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	bd80      	pop	{r7, pc}

08007b6e <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007b6e:	b580      	push	{r7, lr}
 8007b70:	b084      	sub	sp, #16
 8007b72:	af00      	add	r7, sp, #0
 8007b74:	6078      	str	r0, [r7, #4]
 8007b76:	460b      	mov	r3, r1
 8007b78:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b80:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007b88:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d03a      	beq.n	8007c0a <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007b94:	78fa      	ldrb	r2, [r7, #3]
 8007b96:	6879      	ldr	r1, [r7, #4]
 8007b98:	4613      	mov	r3, r2
 8007b9a:	009b      	lsls	r3, r3, #2
 8007b9c:	4413      	add	r3, r2
 8007b9e:	009b      	lsls	r3, r3, #2
 8007ba0:	440b      	add	r3, r1
 8007ba2:	331c      	adds	r3, #28
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d029      	beq.n	8007bfe <USBD_CDC_DataIn+0x90>
 8007baa:	78fa      	ldrb	r2, [r7, #3]
 8007bac:	6879      	ldr	r1, [r7, #4]
 8007bae:	4613      	mov	r3, r2
 8007bb0:	009b      	lsls	r3, r3, #2
 8007bb2:	4413      	add	r3, r2
 8007bb4:	009b      	lsls	r3, r3, #2
 8007bb6:	440b      	add	r3, r1
 8007bb8:	331c      	adds	r3, #28
 8007bba:	681a      	ldr	r2, [r3, #0]
 8007bbc:	78f9      	ldrb	r1, [r7, #3]
 8007bbe:	68b8      	ldr	r0, [r7, #8]
 8007bc0:	460b      	mov	r3, r1
 8007bc2:	009b      	lsls	r3, r3, #2
 8007bc4:	440b      	add	r3, r1
 8007bc6:	00db      	lsls	r3, r3, #3
 8007bc8:	4403      	add	r3, r0
 8007bca:	3338      	adds	r3, #56	; 0x38
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	fbb2 f1f3 	udiv	r1, r2, r3
 8007bd2:	fb03 f301 	mul.w	r3, r3, r1
 8007bd6:	1ad3      	subs	r3, r2, r3
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d110      	bne.n	8007bfe <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8007bdc:	78fa      	ldrb	r2, [r7, #3]
 8007bde:	6879      	ldr	r1, [r7, #4]
 8007be0:	4613      	mov	r3, r2
 8007be2:	009b      	lsls	r3, r3, #2
 8007be4:	4413      	add	r3, r2
 8007be6:	009b      	lsls	r3, r3, #2
 8007be8:	440b      	add	r3, r1
 8007bea:	331c      	adds	r3, #28
 8007bec:	2200      	movs	r2, #0
 8007bee:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007bf0:	78f9      	ldrb	r1, [r7, #3]
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	f002 ffa1 	bl	800ab3e <USBD_LL_Transmit>
 8007bfc:	e003      	b.n	8007c06 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	2200      	movs	r2, #0
 8007c02:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8007c06:	2300      	movs	r3, #0
 8007c08:	e000      	b.n	8007c0c <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8007c0a:	2302      	movs	r3, #2
  }
}
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	3710      	adds	r7, #16
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bd80      	pop	{r7, pc}

08007c14 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b084      	sub	sp, #16
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
 8007c1c:	460b      	mov	r3, r1
 8007c1e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c26:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007c28:	78fb      	ldrb	r3, [r7, #3]
 8007c2a:	4619      	mov	r1, r3
 8007c2c:	6878      	ldr	r0, [r7, #4]
 8007c2e:	f002 ffcc 	bl	800abca <USBD_LL_GetRxDataSize>
 8007c32:	4602      	mov	r2, r0
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d00d      	beq.n	8007c60 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c4a:	68db      	ldr	r3, [r3, #12]
 8007c4c:	68fa      	ldr	r2, [r7, #12]
 8007c4e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007c52:	68fa      	ldr	r2, [r7, #12]
 8007c54:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007c58:	4611      	mov	r1, r2
 8007c5a:	4798      	blx	r3

    return USBD_OK;
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	e000      	b.n	8007c62 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8007c60:	2302      	movs	r3, #2
  }
}
 8007c62:	4618      	mov	r0, r3
 8007c64:	3710      	adds	r7, #16
 8007c66:	46bd      	mov	sp, r7
 8007c68:	bd80      	pop	{r7, pc}

08007c6a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007c6a:	b580      	push	{r7, lr}
 8007c6c:	b084      	sub	sp, #16
 8007c6e:	af00      	add	r7, sp, #0
 8007c70:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c78:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d015      	beq.n	8007cb0 <USBD_CDC_EP0_RxReady+0x46>
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007c8a:	2bff      	cmp	r3, #255	; 0xff
 8007c8c:	d010      	beq.n	8007cb0 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c94:	689b      	ldr	r3, [r3, #8]
 8007c96:	68fa      	ldr	r2, [r7, #12]
 8007c98:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8007c9c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007c9e:	68fa      	ldr	r2, [r7, #12]
 8007ca0:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007ca4:	b292      	uxth	r2, r2
 8007ca6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	22ff      	movs	r2, #255	; 0xff
 8007cac:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8007cb0:	2300      	movs	r3, #0
}
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	3710      	adds	r7, #16
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	bd80      	pop	{r7, pc}
	...

08007cbc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007cbc:	b480      	push	{r7}
 8007cbe:	b083      	sub	sp, #12
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2243      	movs	r2, #67	; 0x43
 8007cc8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8007cca:	4b03      	ldr	r3, [pc, #12]	; (8007cd8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007ccc:	4618      	mov	r0, r3
 8007cce:	370c      	adds	r7, #12
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	bc80      	pop	{r7}
 8007cd4:	4770      	bx	lr
 8007cd6:	bf00      	nop
 8007cd8:	20000094 	.word	0x20000094

08007cdc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007cdc:	b480      	push	{r7}
 8007cde:	b083      	sub	sp, #12
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2243      	movs	r2, #67	; 0x43
 8007ce8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8007cea:	4b03      	ldr	r3, [pc, #12]	; (8007cf8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	370c      	adds	r7, #12
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bc80      	pop	{r7}
 8007cf4:	4770      	bx	lr
 8007cf6:	bf00      	nop
 8007cf8:	20000050 	.word	0x20000050

08007cfc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007cfc:	b480      	push	{r7}
 8007cfe:	b083      	sub	sp, #12
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2243      	movs	r2, #67	; 0x43
 8007d08:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8007d0a:	4b03      	ldr	r3, [pc, #12]	; (8007d18 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	370c      	adds	r7, #12
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bc80      	pop	{r7}
 8007d14:	4770      	bx	lr
 8007d16:	bf00      	nop
 8007d18:	200000d8 	.word	0x200000d8

08007d1c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b083      	sub	sp, #12
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	220a      	movs	r2, #10
 8007d28:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8007d2a:	4b03      	ldr	r3, [pc, #12]	; (8007d38 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	370c      	adds	r7, #12
 8007d30:	46bd      	mov	sp, r7
 8007d32:	bc80      	pop	{r7}
 8007d34:	4770      	bx	lr
 8007d36:	bf00      	nop
 8007d38:	2000000c 	.word	0x2000000c

08007d3c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8007d3c:	b480      	push	{r7}
 8007d3e:	b085      	sub	sp, #20
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
 8007d44:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007d46:	2302      	movs	r3, #2
 8007d48:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d005      	beq.n	8007d5c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	683a      	ldr	r2, [r7, #0]
 8007d54:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8007d58:	2300      	movs	r3, #0
 8007d5a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007d5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d5e:	4618      	mov	r0, r3
 8007d60:	3714      	adds	r7, #20
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bc80      	pop	{r7}
 8007d66:	4770      	bx	lr

08007d68 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8007d68:	b480      	push	{r7}
 8007d6a:	b087      	sub	sp, #28
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	60f8      	str	r0, [r7, #12]
 8007d70:	60b9      	str	r1, [r7, #8]
 8007d72:	4613      	mov	r3, r2
 8007d74:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d7c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007d7e:	697b      	ldr	r3, [r7, #20]
 8007d80:	68ba      	ldr	r2, [r7, #8]
 8007d82:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007d86:	88fa      	ldrh	r2, [r7, #6]
 8007d88:	697b      	ldr	r3, [r7, #20]
 8007d8a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8007d8e:	2300      	movs	r3, #0
}
 8007d90:	4618      	mov	r0, r3
 8007d92:	371c      	adds	r7, #28
 8007d94:	46bd      	mov	sp, r7
 8007d96:	bc80      	pop	{r7}
 8007d98:	4770      	bx	lr

08007d9a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8007d9a:	b480      	push	{r7}
 8007d9c:	b085      	sub	sp, #20
 8007d9e:	af00      	add	r7, sp, #0
 8007da0:	6078      	str	r0, [r7, #4]
 8007da2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007daa:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	683a      	ldr	r2, [r7, #0]
 8007db0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8007db4:	2300      	movs	r3, #0
}
 8007db6:	4618      	mov	r0, r3
 8007db8:	3714      	adds	r7, #20
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	bc80      	pop	{r7}
 8007dbe:	4770      	bx	lr

08007dc0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b084      	sub	sp, #16
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dce:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d01c      	beq.n	8007e14 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d115      	bne.n	8007e10 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	2201      	movs	r2, #1
 8007de8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007e02:	b29b      	uxth	r3, r3
 8007e04:	2181      	movs	r1, #129	; 0x81
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f002 fe99 	bl	800ab3e <USBD_LL_Transmit>

      return USBD_OK;
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	e002      	b.n	8007e16 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8007e10:	2301      	movs	r3, #1
 8007e12:	e000      	b.n	8007e16 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8007e14:	2302      	movs	r3, #2
  }
}
 8007e16:	4618      	mov	r0, r3
 8007e18:	3710      	adds	r7, #16
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}

08007e1e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007e1e:	b580      	push	{r7, lr}
 8007e20:	b084      	sub	sp, #16
 8007e22:	af00      	add	r7, sp, #0
 8007e24:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e2c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d017      	beq.n	8007e68 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	7c1b      	ldrb	r3, [r3, #16]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d109      	bne.n	8007e54 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007e46:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007e4a:	2101      	movs	r1, #1
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	f002 fe99 	bl	800ab84 <USBD_LL_PrepareReceive>
 8007e52:	e007      	b.n	8007e64 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007e5a:	2340      	movs	r3, #64	; 0x40
 8007e5c:	2101      	movs	r1, #1
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f002 fe90 	bl	800ab84 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007e64:	2300      	movs	r3, #0
 8007e66:	e000      	b.n	8007e6a <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8007e68:	2302      	movs	r3, #2
  }
}
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	3710      	adds	r7, #16
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bd80      	pop	{r7, pc}

08007e72 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007e72:	b580      	push	{r7, lr}
 8007e74:	b084      	sub	sp, #16
 8007e76:	af00      	add	r7, sp, #0
 8007e78:	60f8      	str	r0, [r7, #12]
 8007e7a:	60b9      	str	r1, [r7, #8]
 8007e7c:	4613      	mov	r3, r2
 8007e7e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d101      	bne.n	8007e8a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007e86:	2302      	movs	r3, #2
 8007e88:	e01a      	b.n	8007ec0 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d003      	beq.n	8007e9c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	2200      	movs	r2, #0
 8007e98:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007e9c:	68bb      	ldr	r3, [r7, #8]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d003      	beq.n	8007eaa <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	68ba      	ldr	r2, [r7, #8]
 8007ea6:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	2201      	movs	r2, #1
 8007eae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	79fa      	ldrb	r2, [r7, #7]
 8007eb6:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007eb8:	68f8      	ldr	r0, [r7, #12]
 8007eba:	f002 fcfd 	bl	800a8b8 <USBD_LL_Init>

  return USBD_OK;
 8007ebe:	2300      	movs	r3, #0
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	3710      	adds	r7, #16
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	bd80      	pop	{r7, pc}

08007ec8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007ec8:	b480      	push	{r7}
 8007eca:	b085      	sub	sp, #20
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
 8007ed0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d006      	beq.n	8007eea <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	683a      	ldr	r2, [r7, #0]
 8007ee0:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	73fb      	strb	r3, [r7, #15]
 8007ee8:	e001      	b.n	8007eee <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007eea:	2302      	movs	r3, #2
 8007eec:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007eee:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	3714      	adds	r7, #20
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bc80      	pop	{r7}
 8007ef8:	4770      	bx	lr

08007efa <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007efa:	b580      	push	{r7, lr}
 8007efc:	b082      	sub	sp, #8
 8007efe:	af00      	add	r7, sp, #0
 8007f00:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f002 fd32 	bl	800a96c <USBD_LL_Start>

  return USBD_OK;
 8007f08:	2300      	movs	r3, #0
}
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	3708      	adds	r7, #8
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	bd80      	pop	{r7, pc}

08007f12 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007f12:	b480      	push	{r7}
 8007f14:	b083      	sub	sp, #12
 8007f16:	af00      	add	r7, sp, #0
 8007f18:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007f1a:	2300      	movs	r3, #0
}
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	370c      	adds	r7, #12
 8007f20:	46bd      	mov	sp, r7
 8007f22:	bc80      	pop	{r7}
 8007f24:	4770      	bx	lr

08007f26 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007f26:	b580      	push	{r7, lr}
 8007f28:	b084      	sub	sp, #16
 8007f2a:	af00      	add	r7, sp, #0
 8007f2c:	6078      	str	r0, [r7, #4]
 8007f2e:	460b      	mov	r3, r1
 8007f30:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007f32:	2302      	movs	r3, #2
 8007f34:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d00c      	beq.n	8007f5a <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	78fa      	ldrb	r2, [r7, #3]
 8007f4a:	4611      	mov	r1, r2
 8007f4c:	6878      	ldr	r0, [r7, #4]
 8007f4e:	4798      	blx	r3
 8007f50:	4603      	mov	r3, r0
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d101      	bne.n	8007f5a <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007f56:	2300      	movs	r3, #0
 8007f58:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007f5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	3710      	adds	r7, #16
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bd80      	pop	{r7, pc}

08007f64 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b082      	sub	sp, #8
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
 8007f6c:	460b      	mov	r3, r1
 8007f6e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f76:	685b      	ldr	r3, [r3, #4]
 8007f78:	78fa      	ldrb	r2, [r7, #3]
 8007f7a:	4611      	mov	r1, r2
 8007f7c:	6878      	ldr	r0, [r7, #4]
 8007f7e:	4798      	blx	r3

  return USBD_OK;
 8007f80:	2300      	movs	r3, #0
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	3708      	adds	r7, #8
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}

08007f8a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007f8a:	b580      	push	{r7, lr}
 8007f8c:	b082      	sub	sp, #8
 8007f8e:	af00      	add	r7, sp, #0
 8007f90:	6078      	str	r0, [r7, #4]
 8007f92:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007f9a:	6839      	ldr	r1, [r7, #0]
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	f000 fecb 	bl	8008d38 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2201      	movs	r2, #1
 8007fa6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007fb0:	461a      	mov	r2, r3
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007fbe:	f003 031f 	and.w	r3, r3, #31
 8007fc2:	2b01      	cmp	r3, #1
 8007fc4:	d00c      	beq.n	8007fe0 <USBD_LL_SetupStage+0x56>
 8007fc6:	2b01      	cmp	r3, #1
 8007fc8:	d302      	bcc.n	8007fd0 <USBD_LL_SetupStage+0x46>
 8007fca:	2b02      	cmp	r3, #2
 8007fcc:	d010      	beq.n	8007ff0 <USBD_LL_SetupStage+0x66>
 8007fce:	e017      	b.n	8008000 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007fd6:	4619      	mov	r1, r3
 8007fd8:	6878      	ldr	r0, [r7, #4]
 8007fda:	f000 f9cb 	bl	8008374 <USBD_StdDevReq>
      break;
 8007fde:	e01a      	b.n	8008016 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007fe6:	4619      	mov	r1, r3
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	f000 fa2d 	bl	8008448 <USBD_StdItfReq>
      break;
 8007fee:	e012      	b.n	8008016 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007ff6:	4619      	mov	r1, r3
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f000 fa6b 	bl	80084d4 <USBD_StdEPReq>
      break;
 8007ffe:	e00a      	b.n	8008016 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008006:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800800a:	b2db      	uxtb	r3, r3
 800800c:	4619      	mov	r1, r3
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f002 fd0c 	bl	800aa2c <USBD_LL_StallEP>
      break;
 8008014:	bf00      	nop
  }

  return USBD_OK;
 8008016:	2300      	movs	r3, #0
}
 8008018:	4618      	mov	r0, r3
 800801a:	3708      	adds	r7, #8
 800801c:	46bd      	mov	sp, r7
 800801e:	bd80      	pop	{r7, pc}

08008020 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b086      	sub	sp, #24
 8008024:	af00      	add	r7, sp, #0
 8008026:	60f8      	str	r0, [r7, #12]
 8008028:	460b      	mov	r3, r1
 800802a:	607a      	str	r2, [r7, #4]
 800802c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800802e:	7afb      	ldrb	r3, [r7, #11]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d14b      	bne.n	80080cc <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800803a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008042:	2b03      	cmp	r3, #3
 8008044:	d134      	bne.n	80080b0 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8008046:	697b      	ldr	r3, [r7, #20]
 8008048:	68da      	ldr	r2, [r3, #12]
 800804a:	697b      	ldr	r3, [r7, #20]
 800804c:	691b      	ldr	r3, [r3, #16]
 800804e:	429a      	cmp	r2, r3
 8008050:	d919      	bls.n	8008086 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8008052:	697b      	ldr	r3, [r7, #20]
 8008054:	68da      	ldr	r2, [r3, #12]
 8008056:	697b      	ldr	r3, [r7, #20]
 8008058:	691b      	ldr	r3, [r3, #16]
 800805a:	1ad2      	subs	r2, r2, r3
 800805c:	697b      	ldr	r3, [r7, #20]
 800805e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008060:	697b      	ldr	r3, [r7, #20]
 8008062:	68da      	ldr	r2, [r3, #12]
 8008064:	697b      	ldr	r3, [r7, #20]
 8008066:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008068:	429a      	cmp	r2, r3
 800806a:	d203      	bcs.n	8008074 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800806c:	697b      	ldr	r3, [r7, #20]
 800806e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8008070:	b29b      	uxth	r3, r3
 8008072:	e002      	b.n	800807a <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008074:	697b      	ldr	r3, [r7, #20]
 8008076:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008078:	b29b      	uxth	r3, r3
 800807a:	461a      	mov	r2, r3
 800807c:	6879      	ldr	r1, [r7, #4]
 800807e:	68f8      	ldr	r0, [r7, #12]
 8008080:	f000 ff4c 	bl	8008f1c <USBD_CtlContinueRx>
 8008084:	e038      	b.n	80080f8 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800808c:	691b      	ldr	r3, [r3, #16]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d00a      	beq.n	80080a8 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008098:	2b03      	cmp	r3, #3
 800809a:	d105      	bne.n	80080a8 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080a2:	691b      	ldr	r3, [r3, #16]
 80080a4:	68f8      	ldr	r0, [r7, #12]
 80080a6:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80080a8:	68f8      	ldr	r0, [r7, #12]
 80080aa:	f000 ff49 	bl	8008f40 <USBD_CtlSendStatus>
 80080ae:	e023      	b.n	80080f8 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80080b6:	2b05      	cmp	r3, #5
 80080b8:	d11e      	bne.n	80080f8 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	2200      	movs	r2, #0
 80080be:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80080c2:	2100      	movs	r1, #0
 80080c4:	68f8      	ldr	r0, [r7, #12]
 80080c6:	f002 fcb1 	bl	800aa2c <USBD_LL_StallEP>
 80080ca:	e015      	b.n	80080f8 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080d2:	699b      	ldr	r3, [r3, #24]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d00d      	beq.n	80080f4 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80080de:	2b03      	cmp	r3, #3
 80080e0:	d108      	bne.n	80080f4 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080e8:	699b      	ldr	r3, [r3, #24]
 80080ea:	7afa      	ldrb	r2, [r7, #11]
 80080ec:	4611      	mov	r1, r2
 80080ee:	68f8      	ldr	r0, [r7, #12]
 80080f0:	4798      	blx	r3
 80080f2:	e001      	b.n	80080f8 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80080f4:	2302      	movs	r3, #2
 80080f6:	e000      	b.n	80080fa <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80080f8:	2300      	movs	r3, #0
}
 80080fa:	4618      	mov	r0, r3
 80080fc:	3718      	adds	r7, #24
 80080fe:	46bd      	mov	sp, r7
 8008100:	bd80      	pop	{r7, pc}

08008102 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008102:	b580      	push	{r7, lr}
 8008104:	b086      	sub	sp, #24
 8008106:	af00      	add	r7, sp, #0
 8008108:	60f8      	str	r0, [r7, #12]
 800810a:	460b      	mov	r3, r1
 800810c:	607a      	str	r2, [r7, #4]
 800810e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008110:	7afb      	ldrb	r3, [r7, #11]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d17f      	bne.n	8008216 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	3314      	adds	r3, #20
 800811a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008122:	2b02      	cmp	r3, #2
 8008124:	d15c      	bne.n	80081e0 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8008126:	697b      	ldr	r3, [r7, #20]
 8008128:	68da      	ldr	r2, [r3, #12]
 800812a:	697b      	ldr	r3, [r7, #20]
 800812c:	691b      	ldr	r3, [r3, #16]
 800812e:	429a      	cmp	r2, r3
 8008130:	d915      	bls.n	800815e <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8008132:	697b      	ldr	r3, [r7, #20]
 8008134:	68da      	ldr	r2, [r3, #12]
 8008136:	697b      	ldr	r3, [r7, #20]
 8008138:	691b      	ldr	r3, [r3, #16]
 800813a:	1ad2      	subs	r2, r2, r3
 800813c:	697b      	ldr	r3, [r7, #20]
 800813e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8008140:	697b      	ldr	r3, [r7, #20]
 8008142:	68db      	ldr	r3, [r3, #12]
 8008144:	b29b      	uxth	r3, r3
 8008146:	461a      	mov	r2, r3
 8008148:	6879      	ldr	r1, [r7, #4]
 800814a:	68f8      	ldr	r0, [r7, #12]
 800814c:	f000 feb6 	bl	8008ebc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008150:	2300      	movs	r3, #0
 8008152:	2200      	movs	r2, #0
 8008154:	2100      	movs	r1, #0
 8008156:	68f8      	ldr	r0, [r7, #12]
 8008158:	f002 fd14 	bl	800ab84 <USBD_LL_PrepareReceive>
 800815c:	e04e      	b.n	80081fc <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800815e:	697b      	ldr	r3, [r7, #20]
 8008160:	689b      	ldr	r3, [r3, #8]
 8008162:	697a      	ldr	r2, [r7, #20]
 8008164:	6912      	ldr	r2, [r2, #16]
 8008166:	fbb3 f1f2 	udiv	r1, r3, r2
 800816a:	fb02 f201 	mul.w	r2, r2, r1
 800816e:	1a9b      	subs	r3, r3, r2
 8008170:	2b00      	cmp	r3, #0
 8008172:	d11c      	bne.n	80081ae <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8008174:	697b      	ldr	r3, [r7, #20]
 8008176:	689a      	ldr	r2, [r3, #8]
 8008178:	697b      	ldr	r3, [r7, #20]
 800817a:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800817c:	429a      	cmp	r2, r3
 800817e:	d316      	bcc.n	80081ae <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8008180:	697b      	ldr	r3, [r7, #20]
 8008182:	689a      	ldr	r2, [r3, #8]
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800818a:	429a      	cmp	r2, r3
 800818c:	d20f      	bcs.n	80081ae <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800818e:	2200      	movs	r2, #0
 8008190:	2100      	movs	r1, #0
 8008192:	68f8      	ldr	r0, [r7, #12]
 8008194:	f000 fe92 	bl	8008ebc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	2200      	movs	r2, #0
 800819c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80081a0:	2300      	movs	r3, #0
 80081a2:	2200      	movs	r2, #0
 80081a4:	2100      	movs	r1, #0
 80081a6:	68f8      	ldr	r0, [r7, #12]
 80081a8:	f002 fcec 	bl	800ab84 <USBD_LL_PrepareReceive>
 80081ac:	e026      	b.n	80081fc <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081b4:	68db      	ldr	r3, [r3, #12]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d00a      	beq.n	80081d0 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80081c0:	2b03      	cmp	r3, #3
 80081c2:	d105      	bne.n	80081d0 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081ca:	68db      	ldr	r3, [r3, #12]
 80081cc:	68f8      	ldr	r0, [r7, #12]
 80081ce:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80081d0:	2180      	movs	r1, #128	; 0x80
 80081d2:	68f8      	ldr	r0, [r7, #12]
 80081d4:	f002 fc2a 	bl	800aa2c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80081d8:	68f8      	ldr	r0, [r7, #12]
 80081da:	f000 fec4 	bl	8008f66 <USBD_CtlReceiveStatus>
 80081de:	e00d      	b.n	80081fc <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80081e6:	2b04      	cmp	r3, #4
 80081e8:	d004      	beq.n	80081f4 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d103      	bne.n	80081fc <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80081f4:	2180      	movs	r1, #128	; 0x80
 80081f6:	68f8      	ldr	r0, [r7, #12]
 80081f8:	f002 fc18 	bl	800aa2c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008202:	2b01      	cmp	r3, #1
 8008204:	d11d      	bne.n	8008242 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8008206:	68f8      	ldr	r0, [r7, #12]
 8008208:	f7ff fe83 	bl	8007f12 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	2200      	movs	r2, #0
 8008210:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008214:	e015      	b.n	8008242 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800821c:	695b      	ldr	r3, [r3, #20]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d00d      	beq.n	800823e <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008228:	2b03      	cmp	r3, #3
 800822a:	d108      	bne.n	800823e <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008232:	695b      	ldr	r3, [r3, #20]
 8008234:	7afa      	ldrb	r2, [r7, #11]
 8008236:	4611      	mov	r1, r2
 8008238:	68f8      	ldr	r0, [r7, #12]
 800823a:	4798      	blx	r3
 800823c:	e001      	b.n	8008242 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800823e:	2302      	movs	r3, #2
 8008240:	e000      	b.n	8008244 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8008242:	2300      	movs	r3, #0
}
 8008244:	4618      	mov	r0, r3
 8008246:	3718      	adds	r7, #24
 8008248:	46bd      	mov	sp, r7
 800824a:	bd80      	pop	{r7, pc}

0800824c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b082      	sub	sp, #8
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008254:	2340      	movs	r3, #64	; 0x40
 8008256:	2200      	movs	r2, #0
 8008258:	2100      	movs	r1, #0
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	f002 fba1 	bl	800a9a2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2201      	movs	r2, #1
 8008264:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2240      	movs	r2, #64	; 0x40
 800826c:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008270:	2340      	movs	r3, #64	; 0x40
 8008272:	2200      	movs	r2, #0
 8008274:	2180      	movs	r1, #128	; 0x80
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	f002 fb93 	bl	800a9a2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2201      	movs	r2, #1
 8008280:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2240      	movs	r2, #64	; 0x40
 8008286:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2201      	movs	r2, #1
 800828c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2200      	movs	r2, #0
 8008294:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2200      	movs	r2, #0
 800829c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2200      	movs	r2, #0
 80082a2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d009      	beq.n	80082c4 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082b6:	685b      	ldr	r3, [r3, #4]
 80082b8:	687a      	ldr	r2, [r7, #4]
 80082ba:	6852      	ldr	r2, [r2, #4]
 80082bc:	b2d2      	uxtb	r2, r2
 80082be:	4611      	mov	r1, r2
 80082c0:	6878      	ldr	r0, [r7, #4]
 80082c2:	4798      	blx	r3
  }

  return USBD_OK;
 80082c4:	2300      	movs	r3, #0
}
 80082c6:	4618      	mov	r0, r3
 80082c8:	3708      	adds	r7, #8
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bd80      	pop	{r7, pc}

080082ce <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80082ce:	b480      	push	{r7}
 80082d0:	b083      	sub	sp, #12
 80082d2:	af00      	add	r7, sp, #0
 80082d4:	6078      	str	r0, [r7, #4]
 80082d6:	460b      	mov	r3, r1
 80082d8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	78fa      	ldrb	r2, [r7, #3]
 80082de:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80082e0:	2300      	movs	r3, #0
}
 80082e2:	4618      	mov	r0, r3
 80082e4:	370c      	adds	r7, #12
 80082e6:	46bd      	mov	sp, r7
 80082e8:	bc80      	pop	{r7}
 80082ea:	4770      	bx	lr

080082ec <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80082ec:	b480      	push	{r7}
 80082ee:	b083      	sub	sp, #12
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2204      	movs	r2, #4
 8008304:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008308:	2300      	movs	r3, #0
}
 800830a:	4618      	mov	r0, r3
 800830c:	370c      	adds	r7, #12
 800830e:	46bd      	mov	sp, r7
 8008310:	bc80      	pop	{r7}
 8008312:	4770      	bx	lr

08008314 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008314:	b480      	push	{r7}
 8008316:	b083      	sub	sp, #12
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008322:	2b04      	cmp	r3, #4
 8008324:	d105      	bne.n	8008332 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008332:	2300      	movs	r3, #0
}
 8008334:	4618      	mov	r0, r3
 8008336:	370c      	adds	r7, #12
 8008338:	46bd      	mov	sp, r7
 800833a:	bc80      	pop	{r7}
 800833c:	4770      	bx	lr

0800833e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800833e:	b580      	push	{r7, lr}
 8008340:	b082      	sub	sp, #8
 8008342:	af00      	add	r7, sp, #0
 8008344:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800834c:	2b03      	cmp	r3, #3
 800834e:	d10b      	bne.n	8008368 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008356:	69db      	ldr	r3, [r3, #28]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d005      	beq.n	8008368 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008362:	69db      	ldr	r3, [r3, #28]
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008368:	2300      	movs	r3, #0
}
 800836a:	4618      	mov	r0, r3
 800836c:	3708      	adds	r7, #8
 800836e:	46bd      	mov	sp, r7
 8008370:	bd80      	pop	{r7, pc}
	...

08008374 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b084      	sub	sp, #16
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
 800837c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800837e:	2300      	movs	r3, #0
 8008380:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	781b      	ldrb	r3, [r3, #0]
 8008386:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800838a:	2b20      	cmp	r3, #32
 800838c:	d004      	beq.n	8008398 <USBD_StdDevReq+0x24>
 800838e:	2b40      	cmp	r3, #64	; 0x40
 8008390:	d002      	beq.n	8008398 <USBD_StdDevReq+0x24>
 8008392:	2b00      	cmp	r3, #0
 8008394:	d008      	beq.n	80083a8 <USBD_StdDevReq+0x34>
 8008396:	e04c      	b.n	8008432 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800839e:	689b      	ldr	r3, [r3, #8]
 80083a0:	6839      	ldr	r1, [r7, #0]
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	4798      	blx	r3
      break;
 80083a6:	e049      	b.n	800843c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	785b      	ldrb	r3, [r3, #1]
 80083ac:	2b09      	cmp	r3, #9
 80083ae:	d83a      	bhi.n	8008426 <USBD_StdDevReq+0xb2>
 80083b0:	a201      	add	r2, pc, #4	; (adr r2, 80083b8 <USBD_StdDevReq+0x44>)
 80083b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083b6:	bf00      	nop
 80083b8:	08008409 	.word	0x08008409
 80083bc:	0800841d 	.word	0x0800841d
 80083c0:	08008427 	.word	0x08008427
 80083c4:	08008413 	.word	0x08008413
 80083c8:	08008427 	.word	0x08008427
 80083cc:	080083eb 	.word	0x080083eb
 80083d0:	080083e1 	.word	0x080083e1
 80083d4:	08008427 	.word	0x08008427
 80083d8:	080083ff 	.word	0x080083ff
 80083dc:	080083f5 	.word	0x080083f5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80083e0:	6839      	ldr	r1, [r7, #0]
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f000 f9d4 	bl	8008790 <USBD_GetDescriptor>
          break;
 80083e8:	e022      	b.n	8008430 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80083ea:	6839      	ldr	r1, [r7, #0]
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f000 fb37 	bl	8008a60 <USBD_SetAddress>
          break;
 80083f2:	e01d      	b.n	8008430 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80083f4:	6839      	ldr	r1, [r7, #0]
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	f000 fb74 	bl	8008ae4 <USBD_SetConfig>
          break;
 80083fc:	e018      	b.n	8008430 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80083fe:	6839      	ldr	r1, [r7, #0]
 8008400:	6878      	ldr	r0, [r7, #4]
 8008402:	f000 fbfd 	bl	8008c00 <USBD_GetConfig>
          break;
 8008406:	e013      	b.n	8008430 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008408:	6839      	ldr	r1, [r7, #0]
 800840a:	6878      	ldr	r0, [r7, #4]
 800840c:	f000 fc2c 	bl	8008c68 <USBD_GetStatus>
          break;
 8008410:	e00e      	b.n	8008430 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008412:	6839      	ldr	r1, [r7, #0]
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f000 fc5a 	bl	8008cce <USBD_SetFeature>
          break;
 800841a:	e009      	b.n	8008430 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800841c:	6839      	ldr	r1, [r7, #0]
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	f000 fc69 	bl	8008cf6 <USBD_ClrFeature>
          break;
 8008424:	e004      	b.n	8008430 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8008426:	6839      	ldr	r1, [r7, #0]
 8008428:	6878      	ldr	r0, [r7, #4]
 800842a:	f000 fcc1 	bl	8008db0 <USBD_CtlError>
          break;
 800842e:	bf00      	nop
      }
      break;
 8008430:	e004      	b.n	800843c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8008432:	6839      	ldr	r1, [r7, #0]
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f000 fcbb 	bl	8008db0 <USBD_CtlError>
      break;
 800843a:	bf00      	nop
  }

  return ret;
 800843c:	7bfb      	ldrb	r3, [r7, #15]
}
 800843e:	4618      	mov	r0, r3
 8008440:	3710      	adds	r7, #16
 8008442:	46bd      	mov	sp, r7
 8008444:	bd80      	pop	{r7, pc}
 8008446:	bf00      	nop

08008448 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b084      	sub	sp, #16
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
 8008450:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008452:	2300      	movs	r3, #0
 8008454:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	781b      	ldrb	r3, [r3, #0]
 800845a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800845e:	2b20      	cmp	r3, #32
 8008460:	d003      	beq.n	800846a <USBD_StdItfReq+0x22>
 8008462:	2b40      	cmp	r3, #64	; 0x40
 8008464:	d001      	beq.n	800846a <USBD_StdItfReq+0x22>
 8008466:	2b00      	cmp	r3, #0
 8008468:	d12a      	bne.n	80084c0 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008470:	3b01      	subs	r3, #1
 8008472:	2b02      	cmp	r3, #2
 8008474:	d81d      	bhi.n	80084b2 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	889b      	ldrh	r3, [r3, #4]
 800847a:	b2db      	uxtb	r3, r3
 800847c:	2b01      	cmp	r3, #1
 800847e:	d813      	bhi.n	80084a8 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008486:	689b      	ldr	r3, [r3, #8]
 8008488:	6839      	ldr	r1, [r7, #0]
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	4798      	blx	r3
 800848e:	4603      	mov	r3, r0
 8008490:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	88db      	ldrh	r3, [r3, #6]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d110      	bne.n	80084bc <USBD_StdItfReq+0x74>
 800849a:	7bfb      	ldrb	r3, [r7, #15]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d10d      	bne.n	80084bc <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 80084a0:	6878      	ldr	r0, [r7, #4]
 80084a2:	f000 fd4d 	bl	8008f40 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80084a6:	e009      	b.n	80084bc <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 80084a8:	6839      	ldr	r1, [r7, #0]
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f000 fc80 	bl	8008db0 <USBD_CtlError>
          break;
 80084b0:	e004      	b.n	80084bc <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 80084b2:	6839      	ldr	r1, [r7, #0]
 80084b4:	6878      	ldr	r0, [r7, #4]
 80084b6:	f000 fc7b 	bl	8008db0 <USBD_CtlError>
          break;
 80084ba:	e000      	b.n	80084be <USBD_StdItfReq+0x76>
          break;
 80084bc:	bf00      	nop
      }
      break;
 80084be:	e004      	b.n	80084ca <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 80084c0:	6839      	ldr	r1, [r7, #0]
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	f000 fc74 	bl	8008db0 <USBD_CtlError>
      break;
 80084c8:	bf00      	nop
  }

  return USBD_OK;
 80084ca:	2300      	movs	r3, #0
}
 80084cc:	4618      	mov	r0, r3
 80084ce:	3710      	adds	r7, #16
 80084d0:	46bd      	mov	sp, r7
 80084d2:	bd80      	pop	{r7, pc}

080084d4 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b084      	sub	sp, #16
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
 80084dc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80084de:	2300      	movs	r3, #0
 80084e0:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	889b      	ldrh	r3, [r3, #4]
 80084e6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	781b      	ldrb	r3, [r3, #0]
 80084ec:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80084f0:	2b20      	cmp	r3, #32
 80084f2:	d004      	beq.n	80084fe <USBD_StdEPReq+0x2a>
 80084f4:	2b40      	cmp	r3, #64	; 0x40
 80084f6:	d002      	beq.n	80084fe <USBD_StdEPReq+0x2a>
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d008      	beq.n	800850e <USBD_StdEPReq+0x3a>
 80084fc:	e13d      	b.n	800877a <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008504:	689b      	ldr	r3, [r3, #8]
 8008506:	6839      	ldr	r1, [r7, #0]
 8008508:	6878      	ldr	r0, [r7, #4]
 800850a:	4798      	blx	r3
      break;
 800850c:	e13a      	b.n	8008784 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	781b      	ldrb	r3, [r3, #0]
 8008512:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008516:	2b20      	cmp	r3, #32
 8008518:	d10a      	bne.n	8008530 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008520:	689b      	ldr	r3, [r3, #8]
 8008522:	6839      	ldr	r1, [r7, #0]
 8008524:	6878      	ldr	r0, [r7, #4]
 8008526:	4798      	blx	r3
 8008528:	4603      	mov	r3, r0
 800852a:	73fb      	strb	r3, [r7, #15]

        return ret;
 800852c:	7bfb      	ldrb	r3, [r7, #15]
 800852e:	e12a      	b.n	8008786 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	785b      	ldrb	r3, [r3, #1]
 8008534:	2b01      	cmp	r3, #1
 8008536:	d03e      	beq.n	80085b6 <USBD_StdEPReq+0xe2>
 8008538:	2b03      	cmp	r3, #3
 800853a:	d002      	beq.n	8008542 <USBD_StdEPReq+0x6e>
 800853c:	2b00      	cmp	r3, #0
 800853e:	d070      	beq.n	8008622 <USBD_StdEPReq+0x14e>
 8008540:	e115      	b.n	800876e <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008548:	2b02      	cmp	r3, #2
 800854a:	d002      	beq.n	8008552 <USBD_StdEPReq+0x7e>
 800854c:	2b03      	cmp	r3, #3
 800854e:	d015      	beq.n	800857c <USBD_StdEPReq+0xa8>
 8008550:	e02b      	b.n	80085aa <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008552:	7bbb      	ldrb	r3, [r7, #14]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d00c      	beq.n	8008572 <USBD_StdEPReq+0x9e>
 8008558:	7bbb      	ldrb	r3, [r7, #14]
 800855a:	2b80      	cmp	r3, #128	; 0x80
 800855c:	d009      	beq.n	8008572 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800855e:	7bbb      	ldrb	r3, [r7, #14]
 8008560:	4619      	mov	r1, r3
 8008562:	6878      	ldr	r0, [r7, #4]
 8008564:	f002 fa62 	bl	800aa2c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008568:	2180      	movs	r1, #128	; 0x80
 800856a:	6878      	ldr	r0, [r7, #4]
 800856c:	f002 fa5e 	bl	800aa2c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008570:	e020      	b.n	80085b4 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8008572:	6839      	ldr	r1, [r7, #0]
 8008574:	6878      	ldr	r0, [r7, #4]
 8008576:	f000 fc1b 	bl	8008db0 <USBD_CtlError>
              break;
 800857a:	e01b      	b.n	80085b4 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	885b      	ldrh	r3, [r3, #2]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d10e      	bne.n	80085a2 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8008584:	7bbb      	ldrb	r3, [r7, #14]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d00b      	beq.n	80085a2 <USBD_StdEPReq+0xce>
 800858a:	7bbb      	ldrb	r3, [r7, #14]
 800858c:	2b80      	cmp	r3, #128	; 0x80
 800858e:	d008      	beq.n	80085a2 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	88db      	ldrh	r3, [r3, #6]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d104      	bne.n	80085a2 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008598:	7bbb      	ldrb	r3, [r7, #14]
 800859a:	4619      	mov	r1, r3
 800859c:	6878      	ldr	r0, [r7, #4]
 800859e:	f002 fa45 	bl	800aa2c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	f000 fccc 	bl	8008f40 <USBD_CtlSendStatus>

              break;
 80085a8:	e004      	b.n	80085b4 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 80085aa:	6839      	ldr	r1, [r7, #0]
 80085ac:	6878      	ldr	r0, [r7, #4]
 80085ae:	f000 fbff 	bl	8008db0 <USBD_CtlError>
              break;
 80085b2:	bf00      	nop
          }
          break;
 80085b4:	e0e0      	b.n	8008778 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085bc:	2b02      	cmp	r3, #2
 80085be:	d002      	beq.n	80085c6 <USBD_StdEPReq+0xf2>
 80085c0:	2b03      	cmp	r3, #3
 80085c2:	d015      	beq.n	80085f0 <USBD_StdEPReq+0x11c>
 80085c4:	e026      	b.n	8008614 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80085c6:	7bbb      	ldrb	r3, [r7, #14]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d00c      	beq.n	80085e6 <USBD_StdEPReq+0x112>
 80085cc:	7bbb      	ldrb	r3, [r7, #14]
 80085ce:	2b80      	cmp	r3, #128	; 0x80
 80085d0:	d009      	beq.n	80085e6 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80085d2:	7bbb      	ldrb	r3, [r7, #14]
 80085d4:	4619      	mov	r1, r3
 80085d6:	6878      	ldr	r0, [r7, #4]
 80085d8:	f002 fa28 	bl	800aa2c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80085dc:	2180      	movs	r1, #128	; 0x80
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	f002 fa24 	bl	800aa2c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80085e4:	e01c      	b.n	8008620 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 80085e6:	6839      	ldr	r1, [r7, #0]
 80085e8:	6878      	ldr	r0, [r7, #4]
 80085ea:	f000 fbe1 	bl	8008db0 <USBD_CtlError>
              break;
 80085ee:	e017      	b.n	8008620 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	885b      	ldrh	r3, [r3, #2]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d112      	bne.n	800861e <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80085f8:	7bbb      	ldrb	r3, [r7, #14]
 80085fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d004      	beq.n	800860c <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008602:	7bbb      	ldrb	r3, [r7, #14]
 8008604:	4619      	mov	r1, r3
 8008606:	6878      	ldr	r0, [r7, #4]
 8008608:	f002 fa2f 	bl	800aa6a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800860c:	6878      	ldr	r0, [r7, #4]
 800860e:	f000 fc97 	bl	8008f40 <USBD_CtlSendStatus>
              }
              break;
 8008612:	e004      	b.n	800861e <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8008614:	6839      	ldr	r1, [r7, #0]
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f000 fbca 	bl	8008db0 <USBD_CtlError>
              break;
 800861c:	e000      	b.n	8008620 <USBD_StdEPReq+0x14c>
              break;
 800861e:	bf00      	nop
          }
          break;
 8008620:	e0aa      	b.n	8008778 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008628:	2b02      	cmp	r3, #2
 800862a:	d002      	beq.n	8008632 <USBD_StdEPReq+0x15e>
 800862c:	2b03      	cmp	r3, #3
 800862e:	d032      	beq.n	8008696 <USBD_StdEPReq+0x1c2>
 8008630:	e097      	b.n	8008762 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008632:	7bbb      	ldrb	r3, [r7, #14]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d007      	beq.n	8008648 <USBD_StdEPReq+0x174>
 8008638:	7bbb      	ldrb	r3, [r7, #14]
 800863a:	2b80      	cmp	r3, #128	; 0x80
 800863c:	d004      	beq.n	8008648 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 800863e:	6839      	ldr	r1, [r7, #0]
 8008640:	6878      	ldr	r0, [r7, #4]
 8008642:	f000 fbb5 	bl	8008db0 <USBD_CtlError>
                break;
 8008646:	e091      	b.n	800876c <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008648:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800864c:	2b00      	cmp	r3, #0
 800864e:	da0b      	bge.n	8008668 <USBD_StdEPReq+0x194>
 8008650:	7bbb      	ldrb	r3, [r7, #14]
 8008652:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008656:	4613      	mov	r3, r2
 8008658:	009b      	lsls	r3, r3, #2
 800865a:	4413      	add	r3, r2
 800865c:	009b      	lsls	r3, r3, #2
 800865e:	3310      	adds	r3, #16
 8008660:	687a      	ldr	r2, [r7, #4]
 8008662:	4413      	add	r3, r2
 8008664:	3304      	adds	r3, #4
 8008666:	e00b      	b.n	8008680 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008668:	7bbb      	ldrb	r3, [r7, #14]
 800866a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800866e:	4613      	mov	r3, r2
 8008670:	009b      	lsls	r3, r3, #2
 8008672:	4413      	add	r3, r2
 8008674:	009b      	lsls	r3, r3, #2
 8008676:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800867a:	687a      	ldr	r2, [r7, #4]
 800867c:	4413      	add	r3, r2
 800867e:	3304      	adds	r3, #4
 8008680:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008682:	68bb      	ldr	r3, [r7, #8]
 8008684:	2200      	movs	r2, #0
 8008686:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008688:	68bb      	ldr	r3, [r7, #8]
 800868a:	2202      	movs	r2, #2
 800868c:	4619      	mov	r1, r3
 800868e:	6878      	ldr	r0, [r7, #4]
 8008690:	f000 fbf8 	bl	8008e84 <USBD_CtlSendData>
              break;
 8008694:	e06a      	b.n	800876c <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008696:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800869a:	2b00      	cmp	r3, #0
 800869c:	da11      	bge.n	80086c2 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800869e:	7bbb      	ldrb	r3, [r7, #14]
 80086a0:	f003 020f 	and.w	r2, r3, #15
 80086a4:	6879      	ldr	r1, [r7, #4]
 80086a6:	4613      	mov	r3, r2
 80086a8:	009b      	lsls	r3, r3, #2
 80086aa:	4413      	add	r3, r2
 80086ac:	009b      	lsls	r3, r3, #2
 80086ae:	440b      	add	r3, r1
 80086b0:	3318      	adds	r3, #24
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d117      	bne.n	80086e8 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 80086b8:	6839      	ldr	r1, [r7, #0]
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	f000 fb78 	bl	8008db0 <USBD_CtlError>
                  break;
 80086c0:	e054      	b.n	800876c <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80086c2:	7bbb      	ldrb	r3, [r7, #14]
 80086c4:	f003 020f 	and.w	r2, r3, #15
 80086c8:	6879      	ldr	r1, [r7, #4]
 80086ca:	4613      	mov	r3, r2
 80086cc:	009b      	lsls	r3, r3, #2
 80086ce:	4413      	add	r3, r2
 80086d0:	009b      	lsls	r3, r3, #2
 80086d2:	440b      	add	r3, r1
 80086d4:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d104      	bne.n	80086e8 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 80086de:	6839      	ldr	r1, [r7, #0]
 80086e0:	6878      	ldr	r0, [r7, #4]
 80086e2:	f000 fb65 	bl	8008db0 <USBD_CtlError>
                  break;
 80086e6:	e041      	b.n	800876c <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80086e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	da0b      	bge.n	8008708 <USBD_StdEPReq+0x234>
 80086f0:	7bbb      	ldrb	r3, [r7, #14]
 80086f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80086f6:	4613      	mov	r3, r2
 80086f8:	009b      	lsls	r3, r3, #2
 80086fa:	4413      	add	r3, r2
 80086fc:	009b      	lsls	r3, r3, #2
 80086fe:	3310      	adds	r3, #16
 8008700:	687a      	ldr	r2, [r7, #4]
 8008702:	4413      	add	r3, r2
 8008704:	3304      	adds	r3, #4
 8008706:	e00b      	b.n	8008720 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008708:	7bbb      	ldrb	r3, [r7, #14]
 800870a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800870e:	4613      	mov	r3, r2
 8008710:	009b      	lsls	r3, r3, #2
 8008712:	4413      	add	r3, r2
 8008714:	009b      	lsls	r3, r3, #2
 8008716:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800871a:	687a      	ldr	r2, [r7, #4]
 800871c:	4413      	add	r3, r2
 800871e:	3304      	adds	r3, #4
 8008720:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008722:	7bbb      	ldrb	r3, [r7, #14]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d002      	beq.n	800872e <USBD_StdEPReq+0x25a>
 8008728:	7bbb      	ldrb	r3, [r7, #14]
 800872a:	2b80      	cmp	r3, #128	; 0x80
 800872c:	d103      	bne.n	8008736 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 800872e:	68bb      	ldr	r3, [r7, #8]
 8008730:	2200      	movs	r2, #0
 8008732:	601a      	str	r2, [r3, #0]
 8008734:	e00e      	b.n	8008754 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008736:	7bbb      	ldrb	r3, [r7, #14]
 8008738:	4619      	mov	r1, r3
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	f002 f9b4 	bl	800aaa8 <USBD_LL_IsStallEP>
 8008740:	4603      	mov	r3, r0
 8008742:	2b00      	cmp	r3, #0
 8008744:	d003      	beq.n	800874e <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8008746:	68bb      	ldr	r3, [r7, #8]
 8008748:	2201      	movs	r2, #1
 800874a:	601a      	str	r2, [r3, #0]
 800874c:	e002      	b.n	8008754 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 800874e:	68bb      	ldr	r3, [r7, #8]
 8008750:	2200      	movs	r2, #0
 8008752:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008754:	68bb      	ldr	r3, [r7, #8]
 8008756:	2202      	movs	r2, #2
 8008758:	4619      	mov	r1, r3
 800875a:	6878      	ldr	r0, [r7, #4]
 800875c:	f000 fb92 	bl	8008e84 <USBD_CtlSendData>
              break;
 8008760:	e004      	b.n	800876c <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8008762:	6839      	ldr	r1, [r7, #0]
 8008764:	6878      	ldr	r0, [r7, #4]
 8008766:	f000 fb23 	bl	8008db0 <USBD_CtlError>
              break;
 800876a:	bf00      	nop
          }
          break;
 800876c:	e004      	b.n	8008778 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 800876e:	6839      	ldr	r1, [r7, #0]
 8008770:	6878      	ldr	r0, [r7, #4]
 8008772:	f000 fb1d 	bl	8008db0 <USBD_CtlError>
          break;
 8008776:	bf00      	nop
      }
      break;
 8008778:	e004      	b.n	8008784 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 800877a:	6839      	ldr	r1, [r7, #0]
 800877c:	6878      	ldr	r0, [r7, #4]
 800877e:	f000 fb17 	bl	8008db0 <USBD_CtlError>
      break;
 8008782:	bf00      	nop
  }

  return ret;
 8008784:	7bfb      	ldrb	r3, [r7, #15]
}
 8008786:	4618      	mov	r0, r3
 8008788:	3710      	adds	r7, #16
 800878a:	46bd      	mov	sp, r7
 800878c:	bd80      	pop	{r7, pc}
	...

08008790 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b084      	sub	sp, #16
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
 8008798:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800879a:	2300      	movs	r3, #0
 800879c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800879e:	2300      	movs	r3, #0
 80087a0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80087a2:	2300      	movs	r3, #0
 80087a4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	885b      	ldrh	r3, [r3, #2]
 80087aa:	0a1b      	lsrs	r3, r3, #8
 80087ac:	b29b      	uxth	r3, r3
 80087ae:	3b01      	subs	r3, #1
 80087b0:	2b06      	cmp	r3, #6
 80087b2:	f200 8128 	bhi.w	8008a06 <USBD_GetDescriptor+0x276>
 80087b6:	a201      	add	r2, pc, #4	; (adr r2, 80087bc <USBD_GetDescriptor+0x2c>)
 80087b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087bc:	080087d9 	.word	0x080087d9
 80087c0:	080087f1 	.word	0x080087f1
 80087c4:	08008831 	.word	0x08008831
 80087c8:	08008a07 	.word	0x08008a07
 80087cc:	08008a07 	.word	0x08008a07
 80087d0:	080089a7 	.word	0x080089a7
 80087d4:	080089d3 	.word	0x080089d3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	687a      	ldr	r2, [r7, #4]
 80087e2:	7c12      	ldrb	r2, [r2, #16]
 80087e4:	f107 0108 	add.w	r1, r7, #8
 80087e8:	4610      	mov	r0, r2
 80087ea:	4798      	blx	r3
 80087ec:	60f8      	str	r0, [r7, #12]
      break;
 80087ee:	e112      	b.n	8008a16 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	7c1b      	ldrb	r3, [r3, #16]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d10d      	bne.n	8008814 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008800:	f107 0208 	add.w	r2, r7, #8
 8008804:	4610      	mov	r0, r2
 8008806:	4798      	blx	r3
 8008808:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	3301      	adds	r3, #1
 800880e:	2202      	movs	r2, #2
 8008810:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008812:	e100      	b.n	8008a16 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800881a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800881c:	f107 0208 	add.w	r2, r7, #8
 8008820:	4610      	mov	r0, r2
 8008822:	4798      	blx	r3
 8008824:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	3301      	adds	r3, #1
 800882a:	2202      	movs	r2, #2
 800882c:	701a      	strb	r2, [r3, #0]
      break;
 800882e:	e0f2      	b.n	8008a16 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	885b      	ldrh	r3, [r3, #2]
 8008834:	b2db      	uxtb	r3, r3
 8008836:	2b05      	cmp	r3, #5
 8008838:	f200 80ac 	bhi.w	8008994 <USBD_GetDescriptor+0x204>
 800883c:	a201      	add	r2, pc, #4	; (adr r2, 8008844 <USBD_GetDescriptor+0xb4>)
 800883e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008842:	bf00      	nop
 8008844:	0800885d 	.word	0x0800885d
 8008848:	08008891 	.word	0x08008891
 800884c:	080088c5 	.word	0x080088c5
 8008850:	080088f9 	.word	0x080088f9
 8008854:	0800892d 	.word	0x0800892d
 8008858:	08008961 	.word	0x08008961
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008862:	685b      	ldr	r3, [r3, #4]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d00b      	beq.n	8008880 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800886e:	685b      	ldr	r3, [r3, #4]
 8008870:	687a      	ldr	r2, [r7, #4]
 8008872:	7c12      	ldrb	r2, [r2, #16]
 8008874:	f107 0108 	add.w	r1, r7, #8
 8008878:	4610      	mov	r0, r2
 800887a:	4798      	blx	r3
 800887c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800887e:	e091      	b.n	80089a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008880:	6839      	ldr	r1, [r7, #0]
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	f000 fa94 	bl	8008db0 <USBD_CtlError>
            err++;
 8008888:	7afb      	ldrb	r3, [r7, #11]
 800888a:	3301      	adds	r3, #1
 800888c:	72fb      	strb	r3, [r7, #11]
          break;
 800888e:	e089      	b.n	80089a4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008896:	689b      	ldr	r3, [r3, #8]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d00b      	beq.n	80088b4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80088a2:	689b      	ldr	r3, [r3, #8]
 80088a4:	687a      	ldr	r2, [r7, #4]
 80088a6:	7c12      	ldrb	r2, [r2, #16]
 80088a8:	f107 0108 	add.w	r1, r7, #8
 80088ac:	4610      	mov	r0, r2
 80088ae:	4798      	blx	r3
 80088b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80088b2:	e077      	b.n	80089a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80088b4:	6839      	ldr	r1, [r7, #0]
 80088b6:	6878      	ldr	r0, [r7, #4]
 80088b8:	f000 fa7a 	bl	8008db0 <USBD_CtlError>
            err++;
 80088bc:	7afb      	ldrb	r3, [r7, #11]
 80088be:	3301      	adds	r3, #1
 80088c0:	72fb      	strb	r3, [r7, #11]
          break;
 80088c2:	e06f      	b.n	80089a4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80088ca:	68db      	ldr	r3, [r3, #12]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d00b      	beq.n	80088e8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80088d6:	68db      	ldr	r3, [r3, #12]
 80088d8:	687a      	ldr	r2, [r7, #4]
 80088da:	7c12      	ldrb	r2, [r2, #16]
 80088dc:	f107 0108 	add.w	r1, r7, #8
 80088e0:	4610      	mov	r0, r2
 80088e2:	4798      	blx	r3
 80088e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80088e6:	e05d      	b.n	80089a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80088e8:	6839      	ldr	r1, [r7, #0]
 80088ea:	6878      	ldr	r0, [r7, #4]
 80088ec:	f000 fa60 	bl	8008db0 <USBD_CtlError>
            err++;
 80088f0:	7afb      	ldrb	r3, [r7, #11]
 80088f2:	3301      	adds	r3, #1
 80088f4:	72fb      	strb	r3, [r7, #11]
          break;
 80088f6:	e055      	b.n	80089a4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80088fe:	691b      	ldr	r3, [r3, #16]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d00b      	beq.n	800891c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800890a:	691b      	ldr	r3, [r3, #16]
 800890c:	687a      	ldr	r2, [r7, #4]
 800890e:	7c12      	ldrb	r2, [r2, #16]
 8008910:	f107 0108 	add.w	r1, r7, #8
 8008914:	4610      	mov	r0, r2
 8008916:	4798      	blx	r3
 8008918:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800891a:	e043      	b.n	80089a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800891c:	6839      	ldr	r1, [r7, #0]
 800891e:	6878      	ldr	r0, [r7, #4]
 8008920:	f000 fa46 	bl	8008db0 <USBD_CtlError>
            err++;
 8008924:	7afb      	ldrb	r3, [r7, #11]
 8008926:	3301      	adds	r3, #1
 8008928:	72fb      	strb	r3, [r7, #11]
          break;
 800892a:	e03b      	b.n	80089a4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008932:	695b      	ldr	r3, [r3, #20]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d00b      	beq.n	8008950 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800893e:	695b      	ldr	r3, [r3, #20]
 8008940:	687a      	ldr	r2, [r7, #4]
 8008942:	7c12      	ldrb	r2, [r2, #16]
 8008944:	f107 0108 	add.w	r1, r7, #8
 8008948:	4610      	mov	r0, r2
 800894a:	4798      	blx	r3
 800894c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800894e:	e029      	b.n	80089a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008950:	6839      	ldr	r1, [r7, #0]
 8008952:	6878      	ldr	r0, [r7, #4]
 8008954:	f000 fa2c 	bl	8008db0 <USBD_CtlError>
            err++;
 8008958:	7afb      	ldrb	r3, [r7, #11]
 800895a:	3301      	adds	r3, #1
 800895c:	72fb      	strb	r3, [r7, #11]
          break;
 800895e:	e021      	b.n	80089a4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008966:	699b      	ldr	r3, [r3, #24]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d00b      	beq.n	8008984 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008972:	699b      	ldr	r3, [r3, #24]
 8008974:	687a      	ldr	r2, [r7, #4]
 8008976:	7c12      	ldrb	r2, [r2, #16]
 8008978:	f107 0108 	add.w	r1, r7, #8
 800897c:	4610      	mov	r0, r2
 800897e:	4798      	blx	r3
 8008980:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008982:	e00f      	b.n	80089a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008984:	6839      	ldr	r1, [r7, #0]
 8008986:	6878      	ldr	r0, [r7, #4]
 8008988:	f000 fa12 	bl	8008db0 <USBD_CtlError>
            err++;
 800898c:	7afb      	ldrb	r3, [r7, #11]
 800898e:	3301      	adds	r3, #1
 8008990:	72fb      	strb	r3, [r7, #11]
          break;
 8008992:	e007      	b.n	80089a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008994:	6839      	ldr	r1, [r7, #0]
 8008996:	6878      	ldr	r0, [r7, #4]
 8008998:	f000 fa0a 	bl	8008db0 <USBD_CtlError>
          err++;
 800899c:	7afb      	ldrb	r3, [r7, #11]
 800899e:	3301      	adds	r3, #1
 80089a0:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80089a2:	e038      	b.n	8008a16 <USBD_GetDescriptor+0x286>
 80089a4:	e037      	b.n	8008a16 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	7c1b      	ldrb	r3, [r3, #16]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d109      	bne.n	80089c2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089b6:	f107 0208 	add.w	r2, r7, #8
 80089ba:	4610      	mov	r0, r2
 80089bc:	4798      	blx	r3
 80089be:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80089c0:	e029      	b.n	8008a16 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80089c2:	6839      	ldr	r1, [r7, #0]
 80089c4:	6878      	ldr	r0, [r7, #4]
 80089c6:	f000 f9f3 	bl	8008db0 <USBD_CtlError>
        err++;
 80089ca:	7afb      	ldrb	r3, [r7, #11]
 80089cc:	3301      	adds	r3, #1
 80089ce:	72fb      	strb	r3, [r7, #11]
      break;
 80089d0:	e021      	b.n	8008a16 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	7c1b      	ldrb	r3, [r3, #16]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d10d      	bne.n	80089f6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089e2:	f107 0208 	add.w	r2, r7, #8
 80089e6:	4610      	mov	r0, r2
 80089e8:	4798      	blx	r3
 80089ea:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	3301      	adds	r3, #1
 80089f0:	2207      	movs	r2, #7
 80089f2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80089f4:	e00f      	b.n	8008a16 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80089f6:	6839      	ldr	r1, [r7, #0]
 80089f8:	6878      	ldr	r0, [r7, #4]
 80089fa:	f000 f9d9 	bl	8008db0 <USBD_CtlError>
        err++;
 80089fe:	7afb      	ldrb	r3, [r7, #11]
 8008a00:	3301      	adds	r3, #1
 8008a02:	72fb      	strb	r3, [r7, #11]
      break;
 8008a04:	e007      	b.n	8008a16 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008a06:	6839      	ldr	r1, [r7, #0]
 8008a08:	6878      	ldr	r0, [r7, #4]
 8008a0a:	f000 f9d1 	bl	8008db0 <USBD_CtlError>
      err++;
 8008a0e:	7afb      	ldrb	r3, [r7, #11]
 8008a10:	3301      	adds	r3, #1
 8008a12:	72fb      	strb	r3, [r7, #11]
      break;
 8008a14:	bf00      	nop
  }

  if (err != 0U)
 8008a16:	7afb      	ldrb	r3, [r7, #11]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d11c      	bne.n	8008a56 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008a1c:	893b      	ldrh	r3, [r7, #8]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d011      	beq.n	8008a46 <USBD_GetDescriptor+0x2b6>
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	88db      	ldrh	r3, [r3, #6]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d00d      	beq.n	8008a46 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	88da      	ldrh	r2, [r3, #6]
 8008a2e:	893b      	ldrh	r3, [r7, #8]
 8008a30:	4293      	cmp	r3, r2
 8008a32:	bf28      	it	cs
 8008a34:	4613      	movcs	r3, r2
 8008a36:	b29b      	uxth	r3, r3
 8008a38:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008a3a:	893b      	ldrh	r3, [r7, #8]
 8008a3c:	461a      	mov	r2, r3
 8008a3e:	68f9      	ldr	r1, [r7, #12]
 8008a40:	6878      	ldr	r0, [r7, #4]
 8008a42:	f000 fa1f 	bl	8008e84 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	88db      	ldrh	r3, [r3, #6]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d104      	bne.n	8008a58 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8008a4e:	6878      	ldr	r0, [r7, #4]
 8008a50:	f000 fa76 	bl	8008f40 <USBD_CtlSendStatus>
 8008a54:	e000      	b.n	8008a58 <USBD_GetDescriptor+0x2c8>
    return;
 8008a56:	bf00      	nop
    }
  }
}
 8008a58:	3710      	adds	r7, #16
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	bd80      	pop	{r7, pc}
 8008a5e:	bf00      	nop

08008a60 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b084      	sub	sp, #16
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
 8008a68:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	889b      	ldrh	r3, [r3, #4]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d130      	bne.n	8008ad4 <USBD_SetAddress+0x74>
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	88db      	ldrh	r3, [r3, #6]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d12c      	bne.n	8008ad4 <USBD_SetAddress+0x74>
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	885b      	ldrh	r3, [r3, #2]
 8008a7e:	2b7f      	cmp	r3, #127	; 0x7f
 8008a80:	d828      	bhi.n	8008ad4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	885b      	ldrh	r3, [r3, #2]
 8008a86:	b2db      	uxtb	r3, r3
 8008a88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a8c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a94:	2b03      	cmp	r3, #3
 8008a96:	d104      	bne.n	8008aa2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008a98:	6839      	ldr	r1, [r7, #0]
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	f000 f988 	bl	8008db0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008aa0:	e01c      	b.n	8008adc <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	7bfa      	ldrb	r2, [r7, #15]
 8008aa6:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008aaa:	7bfb      	ldrb	r3, [r7, #15]
 8008aac:	4619      	mov	r1, r3
 8008aae:	6878      	ldr	r0, [r7, #4]
 8008ab0:	f002 f826 	bl	800ab00 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008ab4:	6878      	ldr	r0, [r7, #4]
 8008ab6:	f000 fa43 	bl	8008f40 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008aba:	7bfb      	ldrb	r3, [r7, #15]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d004      	beq.n	8008aca <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2202      	movs	r2, #2
 8008ac4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ac8:	e008      	b.n	8008adc <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	2201      	movs	r2, #1
 8008ace:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ad2:	e003      	b.n	8008adc <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008ad4:	6839      	ldr	r1, [r7, #0]
 8008ad6:	6878      	ldr	r0, [r7, #4]
 8008ad8:	f000 f96a 	bl	8008db0 <USBD_CtlError>
  }
}
 8008adc:	bf00      	nop
 8008ade:	3710      	adds	r7, #16
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	bd80      	pop	{r7, pc}

08008ae4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b082      	sub	sp, #8
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
 8008aec:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	885b      	ldrh	r3, [r3, #2]
 8008af2:	b2da      	uxtb	r2, r3
 8008af4:	4b41      	ldr	r3, [pc, #260]	; (8008bfc <USBD_SetConfig+0x118>)
 8008af6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008af8:	4b40      	ldr	r3, [pc, #256]	; (8008bfc <USBD_SetConfig+0x118>)
 8008afa:	781b      	ldrb	r3, [r3, #0]
 8008afc:	2b01      	cmp	r3, #1
 8008afe:	d904      	bls.n	8008b0a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008b00:	6839      	ldr	r1, [r7, #0]
 8008b02:	6878      	ldr	r0, [r7, #4]
 8008b04:	f000 f954 	bl	8008db0 <USBD_CtlError>
 8008b08:	e075      	b.n	8008bf6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b10:	2b02      	cmp	r3, #2
 8008b12:	d002      	beq.n	8008b1a <USBD_SetConfig+0x36>
 8008b14:	2b03      	cmp	r3, #3
 8008b16:	d023      	beq.n	8008b60 <USBD_SetConfig+0x7c>
 8008b18:	e062      	b.n	8008be0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008b1a:	4b38      	ldr	r3, [pc, #224]	; (8008bfc <USBD_SetConfig+0x118>)
 8008b1c:	781b      	ldrb	r3, [r3, #0]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d01a      	beq.n	8008b58 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8008b22:	4b36      	ldr	r3, [pc, #216]	; (8008bfc <USBD_SetConfig+0x118>)
 8008b24:	781b      	ldrb	r3, [r3, #0]
 8008b26:	461a      	mov	r2, r3
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2203      	movs	r2, #3
 8008b30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008b34:	4b31      	ldr	r3, [pc, #196]	; (8008bfc <USBD_SetConfig+0x118>)
 8008b36:	781b      	ldrb	r3, [r3, #0]
 8008b38:	4619      	mov	r1, r3
 8008b3a:	6878      	ldr	r0, [r7, #4]
 8008b3c:	f7ff f9f3 	bl	8007f26 <USBD_SetClassConfig>
 8008b40:	4603      	mov	r3, r0
 8008b42:	2b02      	cmp	r3, #2
 8008b44:	d104      	bne.n	8008b50 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8008b46:	6839      	ldr	r1, [r7, #0]
 8008b48:	6878      	ldr	r0, [r7, #4]
 8008b4a:	f000 f931 	bl	8008db0 <USBD_CtlError>
            return;
 8008b4e:	e052      	b.n	8008bf6 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008b50:	6878      	ldr	r0, [r7, #4]
 8008b52:	f000 f9f5 	bl	8008f40 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008b56:	e04e      	b.n	8008bf6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008b58:	6878      	ldr	r0, [r7, #4]
 8008b5a:	f000 f9f1 	bl	8008f40 <USBD_CtlSendStatus>
        break;
 8008b5e:	e04a      	b.n	8008bf6 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008b60:	4b26      	ldr	r3, [pc, #152]	; (8008bfc <USBD_SetConfig+0x118>)
 8008b62:	781b      	ldrb	r3, [r3, #0]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d112      	bne.n	8008b8e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2202      	movs	r2, #2
 8008b6c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8008b70:	4b22      	ldr	r3, [pc, #136]	; (8008bfc <USBD_SetConfig+0x118>)
 8008b72:	781b      	ldrb	r3, [r3, #0]
 8008b74:	461a      	mov	r2, r3
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8008b7a:	4b20      	ldr	r3, [pc, #128]	; (8008bfc <USBD_SetConfig+0x118>)
 8008b7c:	781b      	ldrb	r3, [r3, #0]
 8008b7e:	4619      	mov	r1, r3
 8008b80:	6878      	ldr	r0, [r7, #4]
 8008b82:	f7ff f9ef 	bl	8007f64 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008b86:	6878      	ldr	r0, [r7, #4]
 8008b88:	f000 f9da 	bl	8008f40 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008b8c:	e033      	b.n	8008bf6 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8008b8e:	4b1b      	ldr	r3, [pc, #108]	; (8008bfc <USBD_SetConfig+0x118>)
 8008b90:	781b      	ldrb	r3, [r3, #0]
 8008b92:	461a      	mov	r2, r3
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	685b      	ldr	r3, [r3, #4]
 8008b98:	429a      	cmp	r2, r3
 8008b9a:	d01d      	beq.n	8008bd8 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	685b      	ldr	r3, [r3, #4]
 8008ba0:	b2db      	uxtb	r3, r3
 8008ba2:	4619      	mov	r1, r3
 8008ba4:	6878      	ldr	r0, [r7, #4]
 8008ba6:	f7ff f9dd 	bl	8007f64 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008baa:	4b14      	ldr	r3, [pc, #80]	; (8008bfc <USBD_SetConfig+0x118>)
 8008bac:	781b      	ldrb	r3, [r3, #0]
 8008bae:	461a      	mov	r2, r3
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008bb4:	4b11      	ldr	r3, [pc, #68]	; (8008bfc <USBD_SetConfig+0x118>)
 8008bb6:	781b      	ldrb	r3, [r3, #0]
 8008bb8:	4619      	mov	r1, r3
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	f7ff f9b3 	bl	8007f26 <USBD_SetClassConfig>
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	2b02      	cmp	r3, #2
 8008bc4:	d104      	bne.n	8008bd0 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8008bc6:	6839      	ldr	r1, [r7, #0]
 8008bc8:	6878      	ldr	r0, [r7, #4]
 8008bca:	f000 f8f1 	bl	8008db0 <USBD_CtlError>
            return;
 8008bce:	e012      	b.n	8008bf6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008bd0:	6878      	ldr	r0, [r7, #4]
 8008bd2:	f000 f9b5 	bl	8008f40 <USBD_CtlSendStatus>
        break;
 8008bd6:	e00e      	b.n	8008bf6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008bd8:	6878      	ldr	r0, [r7, #4]
 8008bda:	f000 f9b1 	bl	8008f40 <USBD_CtlSendStatus>
        break;
 8008bde:	e00a      	b.n	8008bf6 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008be0:	6839      	ldr	r1, [r7, #0]
 8008be2:	6878      	ldr	r0, [r7, #4]
 8008be4:	f000 f8e4 	bl	8008db0 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008be8:	4b04      	ldr	r3, [pc, #16]	; (8008bfc <USBD_SetConfig+0x118>)
 8008bea:	781b      	ldrb	r3, [r3, #0]
 8008bec:	4619      	mov	r1, r3
 8008bee:	6878      	ldr	r0, [r7, #4]
 8008bf0:	f7ff f9b8 	bl	8007f64 <USBD_ClrClassConfig>
        break;
 8008bf4:	bf00      	nop
    }
  }
}
 8008bf6:	3708      	adds	r7, #8
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	bd80      	pop	{r7, pc}
 8008bfc:	200003fc 	.word	0x200003fc

08008c00 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b082      	sub	sp, #8
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
 8008c08:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	88db      	ldrh	r3, [r3, #6]
 8008c0e:	2b01      	cmp	r3, #1
 8008c10:	d004      	beq.n	8008c1c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008c12:	6839      	ldr	r1, [r7, #0]
 8008c14:	6878      	ldr	r0, [r7, #4]
 8008c16:	f000 f8cb 	bl	8008db0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008c1a:	e021      	b.n	8008c60 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c22:	2b01      	cmp	r3, #1
 8008c24:	db17      	blt.n	8008c56 <USBD_GetConfig+0x56>
 8008c26:	2b02      	cmp	r3, #2
 8008c28:	dd02      	ble.n	8008c30 <USBD_GetConfig+0x30>
 8008c2a:	2b03      	cmp	r3, #3
 8008c2c:	d00b      	beq.n	8008c46 <USBD_GetConfig+0x46>
 8008c2e:	e012      	b.n	8008c56 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2200      	movs	r2, #0
 8008c34:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	3308      	adds	r3, #8
 8008c3a:	2201      	movs	r2, #1
 8008c3c:	4619      	mov	r1, r3
 8008c3e:	6878      	ldr	r0, [r7, #4]
 8008c40:	f000 f920 	bl	8008e84 <USBD_CtlSendData>
        break;
 8008c44:	e00c      	b.n	8008c60 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	3304      	adds	r3, #4
 8008c4a:	2201      	movs	r2, #1
 8008c4c:	4619      	mov	r1, r3
 8008c4e:	6878      	ldr	r0, [r7, #4]
 8008c50:	f000 f918 	bl	8008e84 <USBD_CtlSendData>
        break;
 8008c54:	e004      	b.n	8008c60 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8008c56:	6839      	ldr	r1, [r7, #0]
 8008c58:	6878      	ldr	r0, [r7, #4]
 8008c5a:	f000 f8a9 	bl	8008db0 <USBD_CtlError>
        break;
 8008c5e:	bf00      	nop
}
 8008c60:	bf00      	nop
 8008c62:	3708      	adds	r7, #8
 8008c64:	46bd      	mov	sp, r7
 8008c66:	bd80      	pop	{r7, pc}

08008c68 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b082      	sub	sp, #8
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
 8008c70:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c78:	3b01      	subs	r3, #1
 8008c7a:	2b02      	cmp	r3, #2
 8008c7c:	d81e      	bhi.n	8008cbc <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	88db      	ldrh	r3, [r3, #6]
 8008c82:	2b02      	cmp	r3, #2
 8008c84:	d004      	beq.n	8008c90 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008c86:	6839      	ldr	r1, [r7, #0]
 8008c88:	6878      	ldr	r0, [r7, #4]
 8008c8a:	f000 f891 	bl	8008db0 <USBD_CtlError>
        break;
 8008c8e:	e01a      	b.n	8008cc6 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2201      	movs	r2, #1
 8008c94:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d005      	beq.n	8008cac <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	68db      	ldr	r3, [r3, #12]
 8008ca4:	f043 0202 	orr.w	r2, r3, #2
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	330c      	adds	r3, #12
 8008cb0:	2202      	movs	r2, #2
 8008cb2:	4619      	mov	r1, r3
 8008cb4:	6878      	ldr	r0, [r7, #4]
 8008cb6:	f000 f8e5 	bl	8008e84 <USBD_CtlSendData>
      break;
 8008cba:	e004      	b.n	8008cc6 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8008cbc:	6839      	ldr	r1, [r7, #0]
 8008cbe:	6878      	ldr	r0, [r7, #4]
 8008cc0:	f000 f876 	bl	8008db0 <USBD_CtlError>
      break;
 8008cc4:	bf00      	nop
  }
}
 8008cc6:	bf00      	nop
 8008cc8:	3708      	adds	r7, #8
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	bd80      	pop	{r7, pc}

08008cce <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008cce:	b580      	push	{r7, lr}
 8008cd0:	b082      	sub	sp, #8
 8008cd2:	af00      	add	r7, sp, #0
 8008cd4:	6078      	str	r0, [r7, #4]
 8008cd6:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	885b      	ldrh	r3, [r3, #2]
 8008cdc:	2b01      	cmp	r3, #1
 8008cde:	d106      	bne.n	8008cee <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2201      	movs	r2, #1
 8008ce4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8008ce8:	6878      	ldr	r0, [r7, #4]
 8008cea:	f000 f929 	bl	8008f40 <USBD_CtlSendStatus>
  }
}
 8008cee:	bf00      	nop
 8008cf0:	3708      	adds	r7, #8
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	bd80      	pop	{r7, pc}

08008cf6 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008cf6:	b580      	push	{r7, lr}
 8008cf8:	b082      	sub	sp, #8
 8008cfa:	af00      	add	r7, sp, #0
 8008cfc:	6078      	str	r0, [r7, #4]
 8008cfe:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d06:	3b01      	subs	r3, #1
 8008d08:	2b02      	cmp	r3, #2
 8008d0a:	d80b      	bhi.n	8008d24 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	885b      	ldrh	r3, [r3, #2]
 8008d10:	2b01      	cmp	r3, #1
 8008d12:	d10c      	bne.n	8008d2e <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2200      	movs	r2, #0
 8008d18:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8008d1c:	6878      	ldr	r0, [r7, #4]
 8008d1e:	f000 f90f 	bl	8008f40 <USBD_CtlSendStatus>
      }
      break;
 8008d22:	e004      	b.n	8008d2e <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008d24:	6839      	ldr	r1, [r7, #0]
 8008d26:	6878      	ldr	r0, [r7, #4]
 8008d28:	f000 f842 	bl	8008db0 <USBD_CtlError>
      break;
 8008d2c:	e000      	b.n	8008d30 <USBD_ClrFeature+0x3a>
      break;
 8008d2e:	bf00      	nop
  }
}
 8008d30:	bf00      	nop
 8008d32:	3708      	adds	r7, #8
 8008d34:	46bd      	mov	sp, r7
 8008d36:	bd80      	pop	{r7, pc}

08008d38 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008d38:	b480      	push	{r7}
 8008d3a:	b083      	sub	sp, #12
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
 8008d40:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	781a      	ldrb	r2, [r3, #0]
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008d4a:	683b      	ldr	r3, [r7, #0]
 8008d4c:	785a      	ldrb	r2, [r3, #1]
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	3302      	adds	r3, #2
 8008d56:	781b      	ldrb	r3, [r3, #0]
 8008d58:	b29a      	uxth	r2, r3
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	3303      	adds	r3, #3
 8008d5e:	781b      	ldrb	r3, [r3, #0]
 8008d60:	b29b      	uxth	r3, r3
 8008d62:	021b      	lsls	r3, r3, #8
 8008d64:	b29b      	uxth	r3, r3
 8008d66:	4413      	add	r3, r2
 8008d68:	b29a      	uxth	r2, r3
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	3304      	adds	r3, #4
 8008d72:	781b      	ldrb	r3, [r3, #0]
 8008d74:	b29a      	uxth	r2, r3
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	3305      	adds	r3, #5
 8008d7a:	781b      	ldrb	r3, [r3, #0]
 8008d7c:	b29b      	uxth	r3, r3
 8008d7e:	021b      	lsls	r3, r3, #8
 8008d80:	b29b      	uxth	r3, r3
 8008d82:	4413      	add	r3, r2
 8008d84:	b29a      	uxth	r2, r3
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	3306      	adds	r3, #6
 8008d8e:	781b      	ldrb	r3, [r3, #0]
 8008d90:	b29a      	uxth	r2, r3
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	3307      	adds	r3, #7
 8008d96:	781b      	ldrb	r3, [r3, #0]
 8008d98:	b29b      	uxth	r3, r3
 8008d9a:	021b      	lsls	r3, r3, #8
 8008d9c:	b29b      	uxth	r3, r3
 8008d9e:	4413      	add	r3, r2
 8008da0:	b29a      	uxth	r2, r3
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	80da      	strh	r2, [r3, #6]

}
 8008da6:	bf00      	nop
 8008da8:	370c      	adds	r7, #12
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bc80      	pop	{r7}
 8008dae:	4770      	bx	lr

08008db0 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b082      	sub	sp, #8
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
 8008db8:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008dba:	2180      	movs	r1, #128	; 0x80
 8008dbc:	6878      	ldr	r0, [r7, #4]
 8008dbe:	f001 fe35 	bl	800aa2c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008dc2:	2100      	movs	r1, #0
 8008dc4:	6878      	ldr	r0, [r7, #4]
 8008dc6:	f001 fe31 	bl	800aa2c <USBD_LL_StallEP>
}
 8008dca:	bf00      	nop
 8008dcc:	3708      	adds	r7, #8
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bd80      	pop	{r7, pc}

08008dd2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008dd2:	b580      	push	{r7, lr}
 8008dd4:	b086      	sub	sp, #24
 8008dd6:	af00      	add	r7, sp, #0
 8008dd8:	60f8      	str	r0, [r7, #12]
 8008dda:	60b9      	str	r1, [r7, #8]
 8008ddc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008dde:	2300      	movs	r3, #0
 8008de0:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d032      	beq.n	8008e4e <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008de8:	68f8      	ldr	r0, [r7, #12]
 8008dea:	f000 f834 	bl	8008e56 <USBD_GetLen>
 8008dee:	4603      	mov	r3, r0
 8008df0:	3301      	adds	r3, #1
 8008df2:	b29b      	uxth	r3, r3
 8008df4:	005b      	lsls	r3, r3, #1
 8008df6:	b29a      	uxth	r2, r3
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008dfc:	7dfb      	ldrb	r3, [r7, #23]
 8008dfe:	1c5a      	adds	r2, r3, #1
 8008e00:	75fa      	strb	r2, [r7, #23]
 8008e02:	461a      	mov	r2, r3
 8008e04:	68bb      	ldr	r3, [r7, #8]
 8008e06:	4413      	add	r3, r2
 8008e08:	687a      	ldr	r2, [r7, #4]
 8008e0a:	7812      	ldrb	r2, [r2, #0]
 8008e0c:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008e0e:	7dfb      	ldrb	r3, [r7, #23]
 8008e10:	1c5a      	adds	r2, r3, #1
 8008e12:	75fa      	strb	r2, [r7, #23]
 8008e14:	461a      	mov	r2, r3
 8008e16:	68bb      	ldr	r3, [r7, #8]
 8008e18:	4413      	add	r3, r2
 8008e1a:	2203      	movs	r2, #3
 8008e1c:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008e1e:	e012      	b.n	8008e46 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008e20:	7dfb      	ldrb	r3, [r7, #23]
 8008e22:	1c5a      	adds	r2, r3, #1
 8008e24:	75fa      	strb	r2, [r7, #23]
 8008e26:	461a      	mov	r2, r3
 8008e28:	68bb      	ldr	r3, [r7, #8]
 8008e2a:	441a      	add	r2, r3
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	1c59      	adds	r1, r3, #1
 8008e30:	60f9      	str	r1, [r7, #12]
 8008e32:	781b      	ldrb	r3, [r3, #0]
 8008e34:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008e36:	7dfb      	ldrb	r3, [r7, #23]
 8008e38:	1c5a      	adds	r2, r3, #1
 8008e3a:	75fa      	strb	r2, [r7, #23]
 8008e3c:	461a      	mov	r2, r3
 8008e3e:	68bb      	ldr	r3, [r7, #8]
 8008e40:	4413      	add	r3, r2
 8008e42:	2200      	movs	r2, #0
 8008e44:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	781b      	ldrb	r3, [r3, #0]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d1e8      	bne.n	8008e20 <USBD_GetString+0x4e>
    }
  }
}
 8008e4e:	bf00      	nop
 8008e50:	3718      	adds	r7, #24
 8008e52:	46bd      	mov	sp, r7
 8008e54:	bd80      	pop	{r7, pc}

08008e56 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008e56:	b480      	push	{r7}
 8008e58:	b085      	sub	sp, #20
 8008e5a:	af00      	add	r7, sp, #0
 8008e5c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008e5e:	2300      	movs	r3, #0
 8008e60:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008e62:	e005      	b.n	8008e70 <USBD_GetLen+0x1a>
  {
    len++;
 8008e64:	7bfb      	ldrb	r3, [r7, #15]
 8008e66:	3301      	adds	r3, #1
 8008e68:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	3301      	adds	r3, #1
 8008e6e:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	781b      	ldrb	r3, [r3, #0]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d1f5      	bne.n	8008e64 <USBD_GetLen+0xe>
  }

  return len;
 8008e78:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	3714      	adds	r7, #20
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	bc80      	pop	{r7}
 8008e82:	4770      	bx	lr

08008e84 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b084      	sub	sp, #16
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	60f8      	str	r0, [r7, #12]
 8008e8c:	60b9      	str	r1, [r7, #8]
 8008e8e:	4613      	mov	r3, r2
 8008e90:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	2202      	movs	r2, #2
 8008e96:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008e9a:	88fa      	ldrh	r2, [r7, #6]
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008ea0:	88fa      	ldrh	r2, [r7, #6]
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008ea6:	88fb      	ldrh	r3, [r7, #6]
 8008ea8:	68ba      	ldr	r2, [r7, #8]
 8008eaa:	2100      	movs	r1, #0
 8008eac:	68f8      	ldr	r0, [r7, #12]
 8008eae:	f001 fe46 	bl	800ab3e <USBD_LL_Transmit>

  return USBD_OK;
 8008eb2:	2300      	movs	r3, #0
}
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	3710      	adds	r7, #16
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	bd80      	pop	{r7, pc}

08008ebc <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b084      	sub	sp, #16
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	60f8      	str	r0, [r7, #12]
 8008ec4:	60b9      	str	r1, [r7, #8]
 8008ec6:	4613      	mov	r3, r2
 8008ec8:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008eca:	88fb      	ldrh	r3, [r7, #6]
 8008ecc:	68ba      	ldr	r2, [r7, #8]
 8008ece:	2100      	movs	r1, #0
 8008ed0:	68f8      	ldr	r0, [r7, #12]
 8008ed2:	f001 fe34 	bl	800ab3e <USBD_LL_Transmit>

  return USBD_OK;
 8008ed6:	2300      	movs	r3, #0
}
 8008ed8:	4618      	mov	r0, r3
 8008eda:	3710      	adds	r7, #16
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bd80      	pop	{r7, pc}

08008ee0 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b084      	sub	sp, #16
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	60f8      	str	r0, [r7, #12]
 8008ee8:	60b9      	str	r1, [r7, #8]
 8008eea:	4613      	mov	r3, r2
 8008eec:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	2203      	movs	r2, #3
 8008ef2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008ef6:	88fa      	ldrh	r2, [r7, #6]
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8008efe:	88fa      	ldrh	r2, [r7, #6]
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008f06:	88fb      	ldrh	r3, [r7, #6]
 8008f08:	68ba      	ldr	r2, [r7, #8]
 8008f0a:	2100      	movs	r1, #0
 8008f0c:	68f8      	ldr	r0, [r7, #12]
 8008f0e:	f001 fe39 	bl	800ab84 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008f12:	2300      	movs	r3, #0
}
 8008f14:	4618      	mov	r0, r3
 8008f16:	3710      	adds	r7, #16
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	bd80      	pop	{r7, pc}

08008f1c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b084      	sub	sp, #16
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	60f8      	str	r0, [r7, #12]
 8008f24:	60b9      	str	r1, [r7, #8]
 8008f26:	4613      	mov	r3, r2
 8008f28:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008f2a:	88fb      	ldrh	r3, [r7, #6]
 8008f2c:	68ba      	ldr	r2, [r7, #8]
 8008f2e:	2100      	movs	r1, #0
 8008f30:	68f8      	ldr	r0, [r7, #12]
 8008f32:	f001 fe27 	bl	800ab84 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008f36:	2300      	movs	r3, #0
}
 8008f38:	4618      	mov	r0, r3
 8008f3a:	3710      	adds	r7, #16
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	bd80      	pop	{r7, pc}

08008f40 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b082      	sub	sp, #8
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	2204      	movs	r2, #4
 8008f4c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008f50:	2300      	movs	r3, #0
 8008f52:	2200      	movs	r2, #0
 8008f54:	2100      	movs	r1, #0
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	f001 fdf1 	bl	800ab3e <USBD_LL_Transmit>

  return USBD_OK;
 8008f5c:	2300      	movs	r3, #0
}
 8008f5e:	4618      	mov	r0, r3
 8008f60:	3708      	adds	r7, #8
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bd80      	pop	{r7, pc}

08008f66 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008f66:	b580      	push	{r7, lr}
 8008f68:	b082      	sub	sp, #8
 8008f6a:	af00      	add	r7, sp, #0
 8008f6c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	2205      	movs	r2, #5
 8008f72:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008f76:	2300      	movs	r3, #0
 8008f78:	2200      	movs	r2, #0
 8008f7a:	2100      	movs	r1, #0
 8008f7c:	6878      	ldr	r0, [r7, #4]
 8008f7e:	f001 fe01 	bl	800ab84 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008f82:	2300      	movs	r3, #0
}
 8008f84:	4618      	mov	r0, r3
 8008f86:	3708      	adds	r7, #8
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	bd80      	pop	{r7, pc}

08008f8c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8008f8c:	b480      	push	{r7}
 8008f8e:	b085      	sub	sp, #20
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	4603      	mov	r3, r0
 8008f94:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008f96:	2300      	movs	r3, #0
 8008f98:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8008f9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008f9e:	2b84      	cmp	r3, #132	; 0x84
 8008fa0:	d005      	beq.n	8008fae <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8008fa2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	4413      	add	r3, r2
 8008faa:	3303      	adds	r3, #3
 8008fac:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8008fae:	68fb      	ldr	r3, [r7, #12]
}
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	3714      	adds	r7, #20
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	bc80      	pop	{r7}
 8008fb8:	4770      	bx	lr

08008fba <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008fba:	b580      	push	{r7, lr}
 8008fbc:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8008fbe:	f000 fe43 	bl	8009c48 <vTaskStartScheduler>
  
  return osOK;
 8008fc2:	2300      	movs	r3, #0
}
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	bd80      	pop	{r7, pc}

08008fc8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008fc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008fca:	b089      	sub	sp, #36	; 0x24
 8008fcc:	af04      	add	r7, sp, #16
 8008fce:	6078      	str	r0, [r7, #4]
 8008fd0:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	695b      	ldr	r3, [r3, #20]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d020      	beq.n	800901c <osThreadCreate+0x54>
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	699b      	ldr	r3, [r3, #24]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d01c      	beq.n	800901c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	685c      	ldr	r4, [r3, #4]
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681d      	ldr	r5, [r3, #0]
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	691e      	ldr	r6, [r3, #16]
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	f7ff ffc9 	bl	8008f8c <makeFreeRtosPriority>
 8008ffa:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	695b      	ldr	r3, [r3, #20]
 8009000:	687a      	ldr	r2, [r7, #4]
 8009002:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009004:	9202      	str	r2, [sp, #8]
 8009006:	9301      	str	r3, [sp, #4]
 8009008:	9100      	str	r1, [sp, #0]
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	4632      	mov	r2, r6
 800900e:	4629      	mov	r1, r5
 8009010:	4620      	mov	r0, r4
 8009012:	f000 fc5f 	bl	80098d4 <xTaskCreateStatic>
 8009016:	4603      	mov	r3, r0
 8009018:	60fb      	str	r3, [r7, #12]
 800901a:	e01c      	b.n	8009056 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	685c      	ldr	r4, [r3, #4]
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009028:	b29e      	uxth	r6, r3
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009030:	4618      	mov	r0, r3
 8009032:	f7ff ffab 	bl	8008f8c <makeFreeRtosPriority>
 8009036:	4602      	mov	r2, r0
 8009038:	f107 030c 	add.w	r3, r7, #12
 800903c:	9301      	str	r3, [sp, #4]
 800903e:	9200      	str	r2, [sp, #0]
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	4632      	mov	r2, r6
 8009044:	4629      	mov	r1, r5
 8009046:	4620      	mov	r0, r4
 8009048:	f000 fc9d 	bl	8009986 <xTaskCreate>
 800904c:	4603      	mov	r3, r0
 800904e:	2b01      	cmp	r3, #1
 8009050:	d001      	beq.n	8009056 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8009052:	2300      	movs	r3, #0
 8009054:	e000      	b.n	8009058 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8009056:	68fb      	ldr	r3, [r7, #12]
}
 8009058:	4618      	mov	r0, r3
 800905a:	3714      	adds	r7, #20
 800905c:	46bd      	mov	sp, r7
 800905e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009060 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b084      	sub	sp, #16
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d001      	beq.n	8009076 <osDelay+0x16>
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	e000      	b.n	8009078 <osDelay+0x18>
 8009076:	2301      	movs	r3, #1
 8009078:	4618      	mov	r0, r3
 800907a:	f000 fdb1 	bl	8009be0 <vTaskDelay>
  
  return osOK;
 800907e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8009080:	4618      	mov	r0, r3
 8009082:	3710      	adds	r7, #16
 8009084:	46bd      	mov	sp, r7
 8009086:	bd80      	pop	{r7, pc}

08009088 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009088:	b480      	push	{r7}
 800908a:	b083      	sub	sp, #12
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	f103 0208 	add.w	r2, r3, #8
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	f04f 32ff 	mov.w	r2, #4294967295
 80090a0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	f103 0208 	add.w	r2, r3, #8
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	f103 0208 	add.w	r2, r3, #8
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	2200      	movs	r2, #0
 80090ba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80090bc:	bf00      	nop
 80090be:	370c      	adds	r7, #12
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bc80      	pop	{r7}
 80090c4:	4770      	bx	lr

080090c6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80090c6:	b480      	push	{r7}
 80090c8:	b083      	sub	sp, #12
 80090ca:	af00      	add	r7, sp, #0
 80090cc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	2200      	movs	r2, #0
 80090d2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80090d4:	bf00      	nop
 80090d6:	370c      	adds	r7, #12
 80090d8:	46bd      	mov	sp, r7
 80090da:	bc80      	pop	{r7}
 80090dc:	4770      	bx	lr

080090de <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80090de:	b480      	push	{r7}
 80090e0:	b085      	sub	sp, #20
 80090e2:	af00      	add	r7, sp, #0
 80090e4:	6078      	str	r0, [r7, #4]
 80090e6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	685b      	ldr	r3, [r3, #4]
 80090ec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	68fa      	ldr	r2, [r7, #12]
 80090f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	689a      	ldr	r2, [r3, #8]
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	689b      	ldr	r3, [r3, #8]
 8009100:	683a      	ldr	r2, [r7, #0]
 8009102:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	683a      	ldr	r2, [r7, #0]
 8009108:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	687a      	ldr	r2, [r7, #4]
 800910e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	1c5a      	adds	r2, r3, #1
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	601a      	str	r2, [r3, #0]
}
 800911a:	bf00      	nop
 800911c:	3714      	adds	r7, #20
 800911e:	46bd      	mov	sp, r7
 8009120:	bc80      	pop	{r7}
 8009122:	4770      	bx	lr

08009124 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009124:	b480      	push	{r7}
 8009126:	b085      	sub	sp, #20
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
 800912c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	f1b3 3fff 	cmp.w	r3, #4294967295
 800913a:	d103      	bne.n	8009144 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	691b      	ldr	r3, [r3, #16]
 8009140:	60fb      	str	r3, [r7, #12]
 8009142:	e00c      	b.n	800915e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	3308      	adds	r3, #8
 8009148:	60fb      	str	r3, [r7, #12]
 800914a:	e002      	b.n	8009152 <vListInsert+0x2e>
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	685b      	ldr	r3, [r3, #4]
 8009150:	60fb      	str	r3, [r7, #12]
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	685b      	ldr	r3, [r3, #4]
 8009156:	681a      	ldr	r2, [r3, #0]
 8009158:	68bb      	ldr	r3, [r7, #8]
 800915a:	429a      	cmp	r2, r3
 800915c:	d9f6      	bls.n	800914c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	685a      	ldr	r2, [r3, #4]
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009166:	683b      	ldr	r3, [r7, #0]
 8009168:	685b      	ldr	r3, [r3, #4]
 800916a:	683a      	ldr	r2, [r7, #0]
 800916c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800916e:	683b      	ldr	r3, [r7, #0]
 8009170:	68fa      	ldr	r2, [r7, #12]
 8009172:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	683a      	ldr	r2, [r7, #0]
 8009178:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	687a      	ldr	r2, [r7, #4]
 800917e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	1c5a      	adds	r2, r3, #1
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	601a      	str	r2, [r3, #0]
}
 800918a:	bf00      	nop
 800918c:	3714      	adds	r7, #20
 800918e:	46bd      	mov	sp, r7
 8009190:	bc80      	pop	{r7}
 8009192:	4770      	bx	lr

08009194 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009194:	b480      	push	{r7}
 8009196:	b085      	sub	sp, #20
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	691b      	ldr	r3, [r3, #16]
 80091a0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	685b      	ldr	r3, [r3, #4]
 80091a6:	687a      	ldr	r2, [r7, #4]
 80091a8:	6892      	ldr	r2, [r2, #8]
 80091aa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	689b      	ldr	r3, [r3, #8]
 80091b0:	687a      	ldr	r2, [r7, #4]
 80091b2:	6852      	ldr	r2, [r2, #4]
 80091b4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	685a      	ldr	r2, [r3, #4]
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	429a      	cmp	r2, r3
 80091be:	d103      	bne.n	80091c8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	689a      	ldr	r2, [r3, #8]
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2200      	movs	r2, #0
 80091cc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	1e5a      	subs	r2, r3, #1
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	681b      	ldr	r3, [r3, #0]
}
 80091dc:	4618      	mov	r0, r3
 80091de:	3714      	adds	r7, #20
 80091e0:	46bd      	mov	sp, r7
 80091e2:	bc80      	pop	{r7}
 80091e4:	4770      	bx	lr
	...

080091e8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80091e8:	b480      	push	{r7}
 80091ea:	b085      	sub	sp, #20
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	60f8      	str	r0, [r7, #12]
 80091f0:	60b9      	str	r1, [r7, #8]
 80091f2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	3b04      	subs	r3, #4
 80091f8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009200:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	3b04      	subs	r3, #4
 8009206:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009208:	68bb      	ldr	r3, [r7, #8]
 800920a:	f023 0201 	bic.w	r2, r3, #1
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	3b04      	subs	r3, #4
 8009216:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009218:	4a08      	ldr	r2, [pc, #32]	; (800923c <pxPortInitialiseStack+0x54>)
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	3b14      	subs	r3, #20
 8009222:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009224:	687a      	ldr	r2, [r7, #4]
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	3b20      	subs	r3, #32
 800922e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009230:	68fb      	ldr	r3, [r7, #12]
}
 8009232:	4618      	mov	r0, r3
 8009234:	3714      	adds	r7, #20
 8009236:	46bd      	mov	sp, r7
 8009238:	bc80      	pop	{r7}
 800923a:	4770      	bx	lr
 800923c:	08009241 	.word	0x08009241

08009240 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009240:	b480      	push	{r7}
 8009242:	b085      	sub	sp, #20
 8009244:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8009246:	2300      	movs	r3, #0
 8009248:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800924a:	4b10      	ldr	r3, [pc, #64]	; (800928c <prvTaskExitError+0x4c>)
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009252:	d009      	beq.n	8009268 <prvTaskExitError+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009258:	f383 8811 	msr	BASEPRI, r3
 800925c:	f3bf 8f6f 	isb	sy
 8009260:	f3bf 8f4f 	dsb	sy
 8009264:	60fb      	str	r3, [r7, #12]
 8009266:	e7fe      	b.n	8009266 <prvTaskExitError+0x26>
 8009268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800926c:	f383 8811 	msr	BASEPRI, r3
 8009270:	f3bf 8f6f 	isb	sy
 8009274:	f3bf 8f4f 	dsb	sy
 8009278:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800927a:	bf00      	nop
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d0fc      	beq.n	800927c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009282:	bf00      	nop
 8009284:	3714      	adds	r7, #20
 8009286:	46bd      	mov	sp, r7
 8009288:	bc80      	pop	{r7}
 800928a:	4770      	bx	lr
 800928c:	2000011c 	.word	0x2000011c

08009290 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009290:	4b07      	ldr	r3, [pc, #28]	; (80092b0 <pxCurrentTCBConst2>)
 8009292:	6819      	ldr	r1, [r3, #0]
 8009294:	6808      	ldr	r0, [r1, #0]
 8009296:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800929a:	f380 8809 	msr	PSP, r0
 800929e:	f3bf 8f6f 	isb	sy
 80092a2:	f04f 0000 	mov.w	r0, #0
 80092a6:	f380 8811 	msr	BASEPRI, r0
 80092aa:	f04e 0e0d 	orr.w	lr, lr, #13
 80092ae:	4770      	bx	lr

080092b0 <pxCurrentTCBConst2>:
 80092b0:	2000101c 	.word	0x2000101c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80092b4:	bf00      	nop
 80092b6:	bf00      	nop

080092b8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80092b8:	4806      	ldr	r0, [pc, #24]	; (80092d4 <prvPortStartFirstTask+0x1c>)
 80092ba:	6800      	ldr	r0, [r0, #0]
 80092bc:	6800      	ldr	r0, [r0, #0]
 80092be:	f380 8808 	msr	MSP, r0
 80092c2:	b662      	cpsie	i
 80092c4:	b661      	cpsie	f
 80092c6:	f3bf 8f4f 	dsb	sy
 80092ca:	f3bf 8f6f 	isb	sy
 80092ce:	df00      	svc	0
 80092d0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80092d2:	bf00      	nop
 80092d4:	e000ed08 	.word	0xe000ed08

080092d8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b084      	sub	sp, #16
 80092dc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80092de:	4b31      	ldr	r3, [pc, #196]	; (80093a4 <xPortStartScheduler+0xcc>)
 80092e0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	781b      	ldrb	r3, [r3, #0]
 80092e6:	b2db      	uxtb	r3, r3
 80092e8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	22ff      	movs	r2, #255	; 0xff
 80092ee:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	781b      	ldrb	r3, [r3, #0]
 80092f4:	b2db      	uxtb	r3, r3
 80092f6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80092f8:	78fb      	ldrb	r3, [r7, #3]
 80092fa:	b2db      	uxtb	r3, r3
 80092fc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009300:	b2da      	uxtb	r2, r3
 8009302:	4b29      	ldr	r3, [pc, #164]	; (80093a8 <xPortStartScheduler+0xd0>)
 8009304:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009306:	4b29      	ldr	r3, [pc, #164]	; (80093ac <xPortStartScheduler+0xd4>)
 8009308:	2207      	movs	r2, #7
 800930a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800930c:	e009      	b.n	8009322 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800930e:	4b27      	ldr	r3, [pc, #156]	; (80093ac <xPortStartScheduler+0xd4>)
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	3b01      	subs	r3, #1
 8009314:	4a25      	ldr	r2, [pc, #148]	; (80093ac <xPortStartScheduler+0xd4>)
 8009316:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009318:	78fb      	ldrb	r3, [r7, #3]
 800931a:	b2db      	uxtb	r3, r3
 800931c:	005b      	lsls	r3, r3, #1
 800931e:	b2db      	uxtb	r3, r3
 8009320:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009322:	78fb      	ldrb	r3, [r7, #3]
 8009324:	b2db      	uxtb	r3, r3
 8009326:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800932a:	2b80      	cmp	r3, #128	; 0x80
 800932c:	d0ef      	beq.n	800930e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800932e:	4b1f      	ldr	r3, [pc, #124]	; (80093ac <xPortStartScheduler+0xd4>)
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	f1c3 0307 	rsb	r3, r3, #7
 8009336:	2b04      	cmp	r3, #4
 8009338:	d009      	beq.n	800934e <xPortStartScheduler+0x76>
 800933a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800933e:	f383 8811 	msr	BASEPRI, r3
 8009342:	f3bf 8f6f 	isb	sy
 8009346:	f3bf 8f4f 	dsb	sy
 800934a:	60bb      	str	r3, [r7, #8]
 800934c:	e7fe      	b.n	800934c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800934e:	4b17      	ldr	r3, [pc, #92]	; (80093ac <xPortStartScheduler+0xd4>)
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	021b      	lsls	r3, r3, #8
 8009354:	4a15      	ldr	r2, [pc, #84]	; (80093ac <xPortStartScheduler+0xd4>)
 8009356:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009358:	4b14      	ldr	r3, [pc, #80]	; (80093ac <xPortStartScheduler+0xd4>)
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009360:	4a12      	ldr	r2, [pc, #72]	; (80093ac <xPortStartScheduler+0xd4>)
 8009362:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	b2da      	uxtb	r2, r3
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800936c:	4a10      	ldr	r2, [pc, #64]	; (80093b0 <xPortStartScheduler+0xd8>)
 800936e:	4b10      	ldr	r3, [pc, #64]	; (80093b0 <xPortStartScheduler+0xd8>)
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009376:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009378:	4a0d      	ldr	r2, [pc, #52]	; (80093b0 <xPortStartScheduler+0xd8>)
 800937a:	4b0d      	ldr	r3, [pc, #52]	; (80093b0 <xPortStartScheduler+0xd8>)
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009382:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009384:	f000 f8b0 	bl	80094e8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009388:	4b0a      	ldr	r3, [pc, #40]	; (80093b4 <xPortStartScheduler+0xdc>)
 800938a:	2200      	movs	r2, #0
 800938c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800938e:	f7ff ff93 	bl	80092b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009392:	f000 fe1d 	bl	8009fd0 <vTaskSwitchContext>
	prvTaskExitError();
 8009396:	f7ff ff53 	bl	8009240 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800939a:	2300      	movs	r3, #0
}
 800939c:	4618      	mov	r0, r3
 800939e:	3710      	adds	r7, #16
 80093a0:	46bd      	mov	sp, r7
 80093a2:	bd80      	pop	{r7, pc}
 80093a4:	e000e400 	.word	0xe000e400
 80093a8:	200003fd 	.word	0x200003fd
 80093ac:	20000400 	.word	0x20000400
 80093b0:	e000ed20 	.word	0xe000ed20
 80093b4:	2000011c 	.word	0x2000011c

080093b8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80093b8:	b480      	push	{r7}
 80093ba:	b083      	sub	sp, #12
 80093bc:	af00      	add	r7, sp, #0
 80093be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093c2:	f383 8811 	msr	BASEPRI, r3
 80093c6:	f3bf 8f6f 	isb	sy
 80093ca:	f3bf 8f4f 	dsb	sy
 80093ce:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80093d0:	4b0e      	ldr	r3, [pc, #56]	; (800940c <vPortEnterCritical+0x54>)
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	3301      	adds	r3, #1
 80093d6:	4a0d      	ldr	r2, [pc, #52]	; (800940c <vPortEnterCritical+0x54>)
 80093d8:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80093da:	4b0c      	ldr	r3, [pc, #48]	; (800940c <vPortEnterCritical+0x54>)
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	2b01      	cmp	r3, #1
 80093e0:	d10e      	bne.n	8009400 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80093e2:	4b0b      	ldr	r3, [pc, #44]	; (8009410 <vPortEnterCritical+0x58>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	b2db      	uxtb	r3, r3
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d009      	beq.n	8009400 <vPortEnterCritical+0x48>
 80093ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093f0:	f383 8811 	msr	BASEPRI, r3
 80093f4:	f3bf 8f6f 	isb	sy
 80093f8:	f3bf 8f4f 	dsb	sy
 80093fc:	603b      	str	r3, [r7, #0]
 80093fe:	e7fe      	b.n	80093fe <vPortEnterCritical+0x46>
	}
}
 8009400:	bf00      	nop
 8009402:	370c      	adds	r7, #12
 8009404:	46bd      	mov	sp, r7
 8009406:	bc80      	pop	{r7}
 8009408:	4770      	bx	lr
 800940a:	bf00      	nop
 800940c:	2000011c 	.word	0x2000011c
 8009410:	e000ed04 	.word	0xe000ed04

08009414 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009414:	b480      	push	{r7}
 8009416:	b083      	sub	sp, #12
 8009418:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800941a:	4b10      	ldr	r3, [pc, #64]	; (800945c <vPortExitCritical+0x48>)
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d109      	bne.n	8009436 <vPortExitCritical+0x22>
 8009422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009426:	f383 8811 	msr	BASEPRI, r3
 800942a:	f3bf 8f6f 	isb	sy
 800942e:	f3bf 8f4f 	dsb	sy
 8009432:	607b      	str	r3, [r7, #4]
 8009434:	e7fe      	b.n	8009434 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8009436:	4b09      	ldr	r3, [pc, #36]	; (800945c <vPortExitCritical+0x48>)
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	3b01      	subs	r3, #1
 800943c:	4a07      	ldr	r2, [pc, #28]	; (800945c <vPortExitCritical+0x48>)
 800943e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009440:	4b06      	ldr	r3, [pc, #24]	; (800945c <vPortExitCritical+0x48>)
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d104      	bne.n	8009452 <vPortExitCritical+0x3e>
 8009448:	2300      	movs	r3, #0
 800944a:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8009452:	bf00      	nop
 8009454:	370c      	adds	r7, #12
 8009456:	46bd      	mov	sp, r7
 8009458:	bc80      	pop	{r7}
 800945a:	4770      	bx	lr
 800945c:	2000011c 	.word	0x2000011c

08009460 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009460:	f3ef 8009 	mrs	r0, PSP
 8009464:	f3bf 8f6f 	isb	sy
 8009468:	4b0d      	ldr	r3, [pc, #52]	; (80094a0 <pxCurrentTCBConst>)
 800946a:	681a      	ldr	r2, [r3, #0]
 800946c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009470:	6010      	str	r0, [r2, #0]
 8009472:	e92d 4008 	stmdb	sp!, {r3, lr}
 8009476:	f04f 0050 	mov.w	r0, #80	; 0x50
 800947a:	f380 8811 	msr	BASEPRI, r0
 800947e:	f000 fda7 	bl	8009fd0 <vTaskSwitchContext>
 8009482:	f04f 0000 	mov.w	r0, #0
 8009486:	f380 8811 	msr	BASEPRI, r0
 800948a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800948e:	6819      	ldr	r1, [r3, #0]
 8009490:	6808      	ldr	r0, [r1, #0]
 8009492:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009496:	f380 8809 	msr	PSP, r0
 800949a:	f3bf 8f6f 	isb	sy
 800949e:	4770      	bx	lr

080094a0 <pxCurrentTCBConst>:
 80094a0:	2000101c 	.word	0x2000101c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80094a4:	bf00      	nop
 80094a6:	bf00      	nop

080094a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b082      	sub	sp, #8
 80094ac:	af00      	add	r7, sp, #0
	__asm volatile
 80094ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094b2:	f383 8811 	msr	BASEPRI, r3
 80094b6:	f3bf 8f6f 	isb	sy
 80094ba:	f3bf 8f4f 	dsb	sy
 80094be:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80094c0:	f000 fcca 	bl	8009e58 <xTaskIncrementTick>
 80094c4:	4603      	mov	r3, r0
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d003      	beq.n	80094d2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80094ca:	4b06      	ldr	r3, [pc, #24]	; (80094e4 <SysTick_Handler+0x3c>)
 80094cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094d0:	601a      	str	r2, [r3, #0]
 80094d2:	2300      	movs	r3, #0
 80094d4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80094d6:	683b      	ldr	r3, [r7, #0]
 80094d8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80094dc:	bf00      	nop
 80094de:	3708      	adds	r7, #8
 80094e0:	46bd      	mov	sp, r7
 80094e2:	bd80      	pop	{r7, pc}
 80094e4:	e000ed04 	.word	0xe000ed04

080094e8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80094e8:	b480      	push	{r7}
 80094ea:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80094ec:	4b0a      	ldr	r3, [pc, #40]	; (8009518 <vPortSetupTimerInterrupt+0x30>)
 80094ee:	2200      	movs	r2, #0
 80094f0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80094f2:	4b0a      	ldr	r3, [pc, #40]	; (800951c <vPortSetupTimerInterrupt+0x34>)
 80094f4:	2200      	movs	r2, #0
 80094f6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80094f8:	4a09      	ldr	r2, [pc, #36]	; (8009520 <vPortSetupTimerInterrupt+0x38>)
 80094fa:	4b0a      	ldr	r3, [pc, #40]	; (8009524 <vPortSetupTimerInterrupt+0x3c>)
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	490a      	ldr	r1, [pc, #40]	; (8009528 <vPortSetupTimerInterrupt+0x40>)
 8009500:	fba1 1303 	umull	r1, r3, r1, r3
 8009504:	099b      	lsrs	r3, r3, #6
 8009506:	3b01      	subs	r3, #1
 8009508:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800950a:	4b03      	ldr	r3, [pc, #12]	; (8009518 <vPortSetupTimerInterrupt+0x30>)
 800950c:	2207      	movs	r2, #7
 800950e:	601a      	str	r2, [r3, #0]
}
 8009510:	bf00      	nop
 8009512:	46bd      	mov	sp, r7
 8009514:	bc80      	pop	{r7}
 8009516:	4770      	bx	lr
 8009518:	e000e010 	.word	0xe000e010
 800951c:	e000e018 	.word	0xe000e018
 8009520:	e000e014 	.word	0xe000e014
 8009524:	20000000 	.word	0x20000000
 8009528:	10624dd3 	.word	0x10624dd3

0800952c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b08a      	sub	sp, #40	; 0x28
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009534:	2300      	movs	r3, #0
 8009536:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009538:	f000 fbe4 	bl	8009d04 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800953c:	4b57      	ldr	r3, [pc, #348]	; (800969c <pvPortMalloc+0x170>)
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d101      	bne.n	8009548 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009544:	f000 f90c 	bl	8009760 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009548:	4b55      	ldr	r3, [pc, #340]	; (80096a0 <pvPortMalloc+0x174>)
 800954a:	681a      	ldr	r2, [r3, #0]
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	4013      	ands	r3, r2
 8009550:	2b00      	cmp	r3, #0
 8009552:	f040 808c 	bne.w	800966e <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	2b00      	cmp	r3, #0
 800955a:	d01c      	beq.n	8009596 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800955c:	2208      	movs	r2, #8
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	4413      	add	r3, r2
 8009562:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	f003 0307 	and.w	r3, r3, #7
 800956a:	2b00      	cmp	r3, #0
 800956c:	d013      	beq.n	8009596 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	f023 0307 	bic.w	r3, r3, #7
 8009574:	3308      	adds	r3, #8
 8009576:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	f003 0307 	and.w	r3, r3, #7
 800957e:	2b00      	cmp	r3, #0
 8009580:	d009      	beq.n	8009596 <pvPortMalloc+0x6a>
	__asm volatile
 8009582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009586:	f383 8811 	msr	BASEPRI, r3
 800958a:	f3bf 8f6f 	isb	sy
 800958e:	f3bf 8f4f 	dsb	sy
 8009592:	617b      	str	r3, [r7, #20]
 8009594:	e7fe      	b.n	8009594 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d068      	beq.n	800966e <pvPortMalloc+0x142>
 800959c:	4b41      	ldr	r3, [pc, #260]	; (80096a4 <pvPortMalloc+0x178>)
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	687a      	ldr	r2, [r7, #4]
 80095a2:	429a      	cmp	r2, r3
 80095a4:	d863      	bhi.n	800966e <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80095a6:	4b40      	ldr	r3, [pc, #256]	; (80096a8 <pvPortMalloc+0x17c>)
 80095a8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80095aa:	4b3f      	ldr	r3, [pc, #252]	; (80096a8 <pvPortMalloc+0x17c>)
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80095b0:	e004      	b.n	80095bc <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80095b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095b4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80095b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80095bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095be:	685a      	ldr	r2, [r3, #4]
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	429a      	cmp	r2, r3
 80095c4:	d203      	bcs.n	80095ce <pvPortMalloc+0xa2>
 80095c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d1f1      	bne.n	80095b2 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80095ce:	4b33      	ldr	r3, [pc, #204]	; (800969c <pvPortMalloc+0x170>)
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095d4:	429a      	cmp	r2, r3
 80095d6:	d04a      	beq.n	800966e <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80095d8:	6a3b      	ldr	r3, [r7, #32]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	2208      	movs	r2, #8
 80095de:	4413      	add	r3, r2
 80095e0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80095e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095e4:	681a      	ldr	r2, [r3, #0]
 80095e6:	6a3b      	ldr	r3, [r7, #32]
 80095e8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80095ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ec:	685a      	ldr	r2, [r3, #4]
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	1ad2      	subs	r2, r2, r3
 80095f2:	2308      	movs	r3, #8
 80095f4:	005b      	lsls	r3, r3, #1
 80095f6:	429a      	cmp	r2, r3
 80095f8:	d91e      	bls.n	8009638 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80095fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	4413      	add	r3, r2
 8009600:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009602:	69bb      	ldr	r3, [r7, #24]
 8009604:	f003 0307 	and.w	r3, r3, #7
 8009608:	2b00      	cmp	r3, #0
 800960a:	d009      	beq.n	8009620 <pvPortMalloc+0xf4>
 800960c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009610:	f383 8811 	msr	BASEPRI, r3
 8009614:	f3bf 8f6f 	isb	sy
 8009618:	f3bf 8f4f 	dsb	sy
 800961c:	613b      	str	r3, [r7, #16]
 800961e:	e7fe      	b.n	800961e <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009622:	685a      	ldr	r2, [r3, #4]
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	1ad2      	subs	r2, r2, r3
 8009628:	69bb      	ldr	r3, [r7, #24]
 800962a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800962c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800962e:	687a      	ldr	r2, [r7, #4]
 8009630:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009632:	69b8      	ldr	r0, [r7, #24]
 8009634:	f000 f8f6 	bl	8009824 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009638:	4b1a      	ldr	r3, [pc, #104]	; (80096a4 <pvPortMalloc+0x178>)
 800963a:	681a      	ldr	r2, [r3, #0]
 800963c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800963e:	685b      	ldr	r3, [r3, #4]
 8009640:	1ad3      	subs	r3, r2, r3
 8009642:	4a18      	ldr	r2, [pc, #96]	; (80096a4 <pvPortMalloc+0x178>)
 8009644:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009646:	4b17      	ldr	r3, [pc, #92]	; (80096a4 <pvPortMalloc+0x178>)
 8009648:	681a      	ldr	r2, [r3, #0]
 800964a:	4b18      	ldr	r3, [pc, #96]	; (80096ac <pvPortMalloc+0x180>)
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	429a      	cmp	r2, r3
 8009650:	d203      	bcs.n	800965a <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009652:	4b14      	ldr	r3, [pc, #80]	; (80096a4 <pvPortMalloc+0x178>)
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	4a15      	ldr	r2, [pc, #84]	; (80096ac <pvPortMalloc+0x180>)
 8009658:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800965a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800965c:	685a      	ldr	r2, [r3, #4]
 800965e:	4b10      	ldr	r3, [pc, #64]	; (80096a0 <pvPortMalloc+0x174>)
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	431a      	orrs	r2, r3
 8009664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009666:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800966a:	2200      	movs	r2, #0
 800966c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800966e:	f000 fb57 	bl	8009d20 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009672:	69fb      	ldr	r3, [r7, #28]
 8009674:	f003 0307 	and.w	r3, r3, #7
 8009678:	2b00      	cmp	r3, #0
 800967a:	d009      	beq.n	8009690 <pvPortMalloc+0x164>
 800967c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009680:	f383 8811 	msr	BASEPRI, r3
 8009684:	f3bf 8f6f 	isb	sy
 8009688:	f3bf 8f4f 	dsb	sy
 800968c:	60fb      	str	r3, [r7, #12]
 800968e:	e7fe      	b.n	800968e <pvPortMalloc+0x162>
	return pvReturn;
 8009690:	69fb      	ldr	r3, [r7, #28]
}
 8009692:	4618      	mov	r0, r3
 8009694:	3728      	adds	r7, #40	; 0x28
 8009696:	46bd      	mov	sp, r7
 8009698:	bd80      	pop	{r7, pc}
 800969a:	bf00      	nop
 800969c:	2000100c 	.word	0x2000100c
 80096a0:	20001018 	.word	0x20001018
 80096a4:	20001010 	.word	0x20001010
 80096a8:	20001004 	.word	0x20001004
 80096ac:	20001014 	.word	0x20001014

080096b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b086      	sub	sp, #24
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d046      	beq.n	8009750 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80096c2:	2308      	movs	r3, #8
 80096c4:	425b      	negs	r3, r3
 80096c6:	697a      	ldr	r2, [r7, #20]
 80096c8:	4413      	add	r3, r2
 80096ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80096cc:	697b      	ldr	r3, [r7, #20]
 80096ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80096d0:	693b      	ldr	r3, [r7, #16]
 80096d2:	685a      	ldr	r2, [r3, #4]
 80096d4:	4b20      	ldr	r3, [pc, #128]	; (8009758 <vPortFree+0xa8>)
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	4013      	ands	r3, r2
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d109      	bne.n	80096f2 <vPortFree+0x42>
 80096de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096e2:	f383 8811 	msr	BASEPRI, r3
 80096e6:	f3bf 8f6f 	isb	sy
 80096ea:	f3bf 8f4f 	dsb	sy
 80096ee:	60fb      	str	r3, [r7, #12]
 80096f0:	e7fe      	b.n	80096f0 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80096f2:	693b      	ldr	r3, [r7, #16]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d009      	beq.n	800970e <vPortFree+0x5e>
 80096fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096fe:	f383 8811 	msr	BASEPRI, r3
 8009702:	f3bf 8f6f 	isb	sy
 8009706:	f3bf 8f4f 	dsb	sy
 800970a:	60bb      	str	r3, [r7, #8]
 800970c:	e7fe      	b.n	800970c <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800970e:	693b      	ldr	r3, [r7, #16]
 8009710:	685a      	ldr	r2, [r3, #4]
 8009712:	4b11      	ldr	r3, [pc, #68]	; (8009758 <vPortFree+0xa8>)
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	4013      	ands	r3, r2
 8009718:	2b00      	cmp	r3, #0
 800971a:	d019      	beq.n	8009750 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800971c:	693b      	ldr	r3, [r7, #16]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d115      	bne.n	8009750 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009724:	693b      	ldr	r3, [r7, #16]
 8009726:	685a      	ldr	r2, [r3, #4]
 8009728:	4b0b      	ldr	r3, [pc, #44]	; (8009758 <vPortFree+0xa8>)
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	43db      	mvns	r3, r3
 800972e:	401a      	ands	r2, r3
 8009730:	693b      	ldr	r3, [r7, #16]
 8009732:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009734:	f000 fae6 	bl	8009d04 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009738:	693b      	ldr	r3, [r7, #16]
 800973a:	685a      	ldr	r2, [r3, #4]
 800973c:	4b07      	ldr	r3, [pc, #28]	; (800975c <vPortFree+0xac>)
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	4413      	add	r3, r2
 8009742:	4a06      	ldr	r2, [pc, #24]	; (800975c <vPortFree+0xac>)
 8009744:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009746:	6938      	ldr	r0, [r7, #16]
 8009748:	f000 f86c 	bl	8009824 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800974c:	f000 fae8 	bl	8009d20 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009750:	bf00      	nop
 8009752:	3718      	adds	r7, #24
 8009754:	46bd      	mov	sp, r7
 8009756:	bd80      	pop	{r7, pc}
 8009758:	20001018 	.word	0x20001018
 800975c:	20001010 	.word	0x20001010

08009760 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009760:	b480      	push	{r7}
 8009762:	b085      	sub	sp, #20
 8009764:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009766:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800976a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800976c:	4b27      	ldr	r3, [pc, #156]	; (800980c <prvHeapInit+0xac>)
 800976e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	f003 0307 	and.w	r3, r3, #7
 8009776:	2b00      	cmp	r3, #0
 8009778:	d00c      	beq.n	8009794 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	3307      	adds	r3, #7
 800977e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	f023 0307 	bic.w	r3, r3, #7
 8009786:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009788:	68ba      	ldr	r2, [r7, #8]
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	1ad3      	subs	r3, r2, r3
 800978e:	4a1f      	ldr	r2, [pc, #124]	; (800980c <prvHeapInit+0xac>)
 8009790:	4413      	add	r3, r2
 8009792:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009798:	4a1d      	ldr	r2, [pc, #116]	; (8009810 <prvHeapInit+0xb0>)
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800979e:	4b1c      	ldr	r3, [pc, #112]	; (8009810 <prvHeapInit+0xb0>)
 80097a0:	2200      	movs	r2, #0
 80097a2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80097a4:	687a      	ldr	r2, [r7, #4]
 80097a6:	68bb      	ldr	r3, [r7, #8]
 80097a8:	4413      	add	r3, r2
 80097aa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80097ac:	2208      	movs	r2, #8
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	1a9b      	subs	r3, r3, r2
 80097b2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	f023 0307 	bic.w	r3, r3, #7
 80097ba:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	4a15      	ldr	r2, [pc, #84]	; (8009814 <prvHeapInit+0xb4>)
 80097c0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80097c2:	4b14      	ldr	r3, [pc, #80]	; (8009814 <prvHeapInit+0xb4>)
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	2200      	movs	r2, #0
 80097c8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80097ca:	4b12      	ldr	r3, [pc, #72]	; (8009814 <prvHeapInit+0xb4>)
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	2200      	movs	r2, #0
 80097d0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80097d6:	683b      	ldr	r3, [r7, #0]
 80097d8:	68fa      	ldr	r2, [r7, #12]
 80097da:	1ad2      	subs	r2, r2, r3
 80097dc:	683b      	ldr	r3, [r7, #0]
 80097de:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80097e0:	4b0c      	ldr	r3, [pc, #48]	; (8009814 <prvHeapInit+0xb4>)
 80097e2:	681a      	ldr	r2, [r3, #0]
 80097e4:	683b      	ldr	r3, [r7, #0]
 80097e6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	685b      	ldr	r3, [r3, #4]
 80097ec:	4a0a      	ldr	r2, [pc, #40]	; (8009818 <prvHeapInit+0xb8>)
 80097ee:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80097f0:	683b      	ldr	r3, [r7, #0]
 80097f2:	685b      	ldr	r3, [r3, #4]
 80097f4:	4a09      	ldr	r2, [pc, #36]	; (800981c <prvHeapInit+0xbc>)
 80097f6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80097f8:	4b09      	ldr	r3, [pc, #36]	; (8009820 <prvHeapInit+0xc0>)
 80097fa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80097fe:	601a      	str	r2, [r3, #0]
}
 8009800:	bf00      	nop
 8009802:	3714      	adds	r7, #20
 8009804:	46bd      	mov	sp, r7
 8009806:	bc80      	pop	{r7}
 8009808:	4770      	bx	lr
 800980a:	bf00      	nop
 800980c:	20000404 	.word	0x20000404
 8009810:	20001004 	.word	0x20001004
 8009814:	2000100c 	.word	0x2000100c
 8009818:	20001014 	.word	0x20001014
 800981c:	20001010 	.word	0x20001010
 8009820:	20001018 	.word	0x20001018

08009824 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009824:	b480      	push	{r7}
 8009826:	b085      	sub	sp, #20
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800982c:	4b27      	ldr	r3, [pc, #156]	; (80098cc <prvInsertBlockIntoFreeList+0xa8>)
 800982e:	60fb      	str	r3, [r7, #12]
 8009830:	e002      	b.n	8009838 <prvInsertBlockIntoFreeList+0x14>
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	60fb      	str	r3, [r7, #12]
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	681a      	ldr	r2, [r3, #0]
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	429a      	cmp	r2, r3
 8009840:	d3f7      	bcc.n	8009832 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	685b      	ldr	r3, [r3, #4]
 800984a:	68ba      	ldr	r2, [r7, #8]
 800984c:	441a      	add	r2, r3
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	429a      	cmp	r2, r3
 8009852:	d108      	bne.n	8009866 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	685a      	ldr	r2, [r3, #4]
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	685b      	ldr	r3, [r3, #4]
 800985c:	441a      	add	r2, r3
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	685b      	ldr	r3, [r3, #4]
 800986e:	68ba      	ldr	r2, [r7, #8]
 8009870:	441a      	add	r2, r3
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	429a      	cmp	r2, r3
 8009878:	d118      	bne.n	80098ac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	681a      	ldr	r2, [r3, #0]
 800987e:	4b14      	ldr	r3, [pc, #80]	; (80098d0 <prvInsertBlockIntoFreeList+0xac>)
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	429a      	cmp	r2, r3
 8009884:	d00d      	beq.n	80098a2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	685a      	ldr	r2, [r3, #4]
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	685b      	ldr	r3, [r3, #4]
 8009890:	441a      	add	r2, r3
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	681a      	ldr	r2, [r3, #0]
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	601a      	str	r2, [r3, #0]
 80098a0:	e008      	b.n	80098b4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80098a2:	4b0b      	ldr	r3, [pc, #44]	; (80098d0 <prvInsertBlockIntoFreeList+0xac>)
 80098a4:	681a      	ldr	r2, [r3, #0]
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	601a      	str	r2, [r3, #0]
 80098aa:	e003      	b.n	80098b4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	681a      	ldr	r2, [r3, #0]
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80098b4:	68fa      	ldr	r2, [r7, #12]
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	429a      	cmp	r2, r3
 80098ba:	d002      	beq.n	80098c2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	687a      	ldr	r2, [r7, #4]
 80098c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80098c2:	bf00      	nop
 80098c4:	3714      	adds	r7, #20
 80098c6:	46bd      	mov	sp, r7
 80098c8:	bc80      	pop	{r7}
 80098ca:	4770      	bx	lr
 80098cc:	20001004 	.word	0x20001004
 80098d0:	2000100c 	.word	0x2000100c

080098d4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b08e      	sub	sp, #56	; 0x38
 80098d8:	af04      	add	r7, sp, #16
 80098da:	60f8      	str	r0, [r7, #12]
 80098dc:	60b9      	str	r1, [r7, #8]
 80098de:	607a      	str	r2, [r7, #4]
 80098e0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80098e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d109      	bne.n	80098fc <xTaskCreateStatic+0x28>
 80098e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098ec:	f383 8811 	msr	BASEPRI, r3
 80098f0:	f3bf 8f6f 	isb	sy
 80098f4:	f3bf 8f4f 	dsb	sy
 80098f8:	623b      	str	r3, [r7, #32]
 80098fa:	e7fe      	b.n	80098fa <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80098fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d109      	bne.n	8009916 <xTaskCreateStatic+0x42>
 8009902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009906:	f383 8811 	msr	BASEPRI, r3
 800990a:	f3bf 8f6f 	isb	sy
 800990e:	f3bf 8f4f 	dsb	sy
 8009912:	61fb      	str	r3, [r7, #28]
 8009914:	e7fe      	b.n	8009914 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009916:	2354      	movs	r3, #84	; 0x54
 8009918:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800991a:	693b      	ldr	r3, [r7, #16]
 800991c:	2b54      	cmp	r3, #84	; 0x54
 800991e:	d009      	beq.n	8009934 <xTaskCreateStatic+0x60>
 8009920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009924:	f383 8811 	msr	BASEPRI, r3
 8009928:	f3bf 8f6f 	isb	sy
 800992c:	f3bf 8f4f 	dsb	sy
 8009930:	61bb      	str	r3, [r7, #24]
 8009932:	e7fe      	b.n	8009932 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009936:	2b00      	cmp	r3, #0
 8009938:	d01e      	beq.n	8009978 <xTaskCreateStatic+0xa4>
 800993a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800993c:	2b00      	cmp	r3, #0
 800993e:	d01b      	beq.n	8009978 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009942:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009946:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009948:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800994a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800994c:	2202      	movs	r2, #2
 800994e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009952:	2300      	movs	r3, #0
 8009954:	9303      	str	r3, [sp, #12]
 8009956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009958:	9302      	str	r3, [sp, #8]
 800995a:	f107 0314 	add.w	r3, r7, #20
 800995e:	9301      	str	r3, [sp, #4]
 8009960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009962:	9300      	str	r3, [sp, #0]
 8009964:	683b      	ldr	r3, [r7, #0]
 8009966:	687a      	ldr	r2, [r7, #4]
 8009968:	68b9      	ldr	r1, [r7, #8]
 800996a:	68f8      	ldr	r0, [r7, #12]
 800996c:	f000 f850 	bl	8009a10 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009970:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009972:	f000 f8cb 	bl	8009b0c <prvAddNewTaskToReadyList>
 8009976:	e001      	b.n	800997c <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8009978:	2300      	movs	r3, #0
 800997a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800997c:	697b      	ldr	r3, [r7, #20]
	}
 800997e:	4618      	mov	r0, r3
 8009980:	3728      	adds	r7, #40	; 0x28
 8009982:	46bd      	mov	sp, r7
 8009984:	bd80      	pop	{r7, pc}

08009986 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009986:	b580      	push	{r7, lr}
 8009988:	b08c      	sub	sp, #48	; 0x30
 800998a:	af04      	add	r7, sp, #16
 800998c:	60f8      	str	r0, [r7, #12]
 800998e:	60b9      	str	r1, [r7, #8]
 8009990:	603b      	str	r3, [r7, #0]
 8009992:	4613      	mov	r3, r2
 8009994:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009996:	88fb      	ldrh	r3, [r7, #6]
 8009998:	009b      	lsls	r3, r3, #2
 800999a:	4618      	mov	r0, r3
 800999c:	f7ff fdc6 	bl	800952c <pvPortMalloc>
 80099a0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80099a2:	697b      	ldr	r3, [r7, #20]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d00e      	beq.n	80099c6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80099a8:	2054      	movs	r0, #84	; 0x54
 80099aa:	f7ff fdbf 	bl	800952c <pvPortMalloc>
 80099ae:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80099b0:	69fb      	ldr	r3, [r7, #28]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d003      	beq.n	80099be <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80099b6:	69fb      	ldr	r3, [r7, #28]
 80099b8:	697a      	ldr	r2, [r7, #20]
 80099ba:	631a      	str	r2, [r3, #48]	; 0x30
 80099bc:	e005      	b.n	80099ca <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80099be:	6978      	ldr	r0, [r7, #20]
 80099c0:	f7ff fe76 	bl	80096b0 <vPortFree>
 80099c4:	e001      	b.n	80099ca <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80099c6:	2300      	movs	r3, #0
 80099c8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80099ca:	69fb      	ldr	r3, [r7, #28]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d017      	beq.n	8009a00 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80099d0:	69fb      	ldr	r3, [r7, #28]
 80099d2:	2200      	movs	r2, #0
 80099d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80099d8:	88fa      	ldrh	r2, [r7, #6]
 80099da:	2300      	movs	r3, #0
 80099dc:	9303      	str	r3, [sp, #12]
 80099de:	69fb      	ldr	r3, [r7, #28]
 80099e0:	9302      	str	r3, [sp, #8]
 80099e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099e4:	9301      	str	r3, [sp, #4]
 80099e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099e8:	9300      	str	r3, [sp, #0]
 80099ea:	683b      	ldr	r3, [r7, #0]
 80099ec:	68b9      	ldr	r1, [r7, #8]
 80099ee:	68f8      	ldr	r0, [r7, #12]
 80099f0:	f000 f80e 	bl	8009a10 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80099f4:	69f8      	ldr	r0, [r7, #28]
 80099f6:	f000 f889 	bl	8009b0c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80099fa:	2301      	movs	r3, #1
 80099fc:	61bb      	str	r3, [r7, #24]
 80099fe:	e002      	b.n	8009a06 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009a00:	f04f 33ff 	mov.w	r3, #4294967295
 8009a04:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009a06:	69bb      	ldr	r3, [r7, #24]
	}
 8009a08:	4618      	mov	r0, r3
 8009a0a:	3720      	adds	r7, #32
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	bd80      	pop	{r7, pc}

08009a10 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b088      	sub	sp, #32
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	60f8      	str	r0, [r7, #12]
 8009a18:	60b9      	str	r1, [r7, #8]
 8009a1a:	607a      	str	r2, [r7, #4]
 8009a1c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8009a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009a28:	3b01      	subs	r3, #1
 8009a2a:	009b      	lsls	r3, r3, #2
 8009a2c:	4413      	add	r3, r2
 8009a2e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8009a30:	69bb      	ldr	r3, [r7, #24]
 8009a32:	f023 0307 	bic.w	r3, r3, #7
 8009a36:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009a38:	69bb      	ldr	r3, [r7, #24]
 8009a3a:	f003 0307 	and.w	r3, r3, #7
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d009      	beq.n	8009a56 <prvInitialiseNewTask+0x46>
 8009a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a46:	f383 8811 	msr	BASEPRI, r3
 8009a4a:	f3bf 8f6f 	isb	sy
 8009a4e:	f3bf 8f4f 	dsb	sy
 8009a52:	617b      	str	r3, [r7, #20]
 8009a54:	e7fe      	b.n	8009a54 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009a56:	2300      	movs	r3, #0
 8009a58:	61fb      	str	r3, [r7, #28]
 8009a5a:	e012      	b.n	8009a82 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009a5c:	68ba      	ldr	r2, [r7, #8]
 8009a5e:	69fb      	ldr	r3, [r7, #28]
 8009a60:	4413      	add	r3, r2
 8009a62:	7819      	ldrb	r1, [r3, #0]
 8009a64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a66:	69fb      	ldr	r3, [r7, #28]
 8009a68:	4413      	add	r3, r2
 8009a6a:	3334      	adds	r3, #52	; 0x34
 8009a6c:	460a      	mov	r2, r1
 8009a6e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8009a70:	68ba      	ldr	r2, [r7, #8]
 8009a72:	69fb      	ldr	r3, [r7, #28]
 8009a74:	4413      	add	r3, r2
 8009a76:	781b      	ldrb	r3, [r3, #0]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d006      	beq.n	8009a8a <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009a7c:	69fb      	ldr	r3, [r7, #28]
 8009a7e:	3301      	adds	r3, #1
 8009a80:	61fb      	str	r3, [r7, #28]
 8009a82:	69fb      	ldr	r3, [r7, #28]
 8009a84:	2b0f      	cmp	r3, #15
 8009a86:	d9e9      	bls.n	8009a5c <prvInitialiseNewTask+0x4c>
 8009a88:	e000      	b.n	8009a8c <prvInitialiseNewTask+0x7c>
		{
			break;
 8009a8a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a8e:	2200      	movs	r2, #0
 8009a90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a96:	2b06      	cmp	r3, #6
 8009a98:	d901      	bls.n	8009a9e <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009a9a:	2306      	movs	r3, #6
 8009a9c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aa0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009aa2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aa6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009aa8:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8009aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aac:	2200      	movs	r2, #0
 8009aae:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ab2:	3304      	adds	r3, #4
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	f7ff fb06 	bl	80090c6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009abc:	3318      	adds	r3, #24
 8009abe:	4618      	mov	r0, r3
 8009ac0:	f7ff fb01 	bl	80090c6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ac6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ac8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009acc:	f1c3 0207 	rsb	r2, r3, #7
 8009ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ad2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ad6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ad8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009adc:	2200      	movs	r2, #0
 8009ade:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009ae8:	683a      	ldr	r2, [r7, #0]
 8009aea:	68f9      	ldr	r1, [r7, #12]
 8009aec:	69b8      	ldr	r0, [r7, #24]
 8009aee:	f7ff fb7b 	bl	80091e8 <pxPortInitialiseStack>
 8009af2:	4602      	mov	r2, r0
 8009af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009af6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8009af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d002      	beq.n	8009b04 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b02:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009b04:	bf00      	nop
 8009b06:	3720      	adds	r7, #32
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	bd80      	pop	{r7, pc}

08009b0c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b082      	sub	sp, #8
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009b14:	f7ff fc50 	bl	80093b8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009b18:	4b2a      	ldr	r3, [pc, #168]	; (8009bc4 <prvAddNewTaskToReadyList+0xb8>)
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	3301      	adds	r3, #1
 8009b1e:	4a29      	ldr	r2, [pc, #164]	; (8009bc4 <prvAddNewTaskToReadyList+0xb8>)
 8009b20:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009b22:	4b29      	ldr	r3, [pc, #164]	; (8009bc8 <prvAddNewTaskToReadyList+0xbc>)
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d109      	bne.n	8009b3e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009b2a:	4a27      	ldr	r2, [pc, #156]	; (8009bc8 <prvAddNewTaskToReadyList+0xbc>)
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009b30:	4b24      	ldr	r3, [pc, #144]	; (8009bc4 <prvAddNewTaskToReadyList+0xb8>)
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	2b01      	cmp	r3, #1
 8009b36:	d110      	bne.n	8009b5a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009b38:	f000 fabc 	bl	800a0b4 <prvInitialiseTaskLists>
 8009b3c:	e00d      	b.n	8009b5a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009b3e:	4b23      	ldr	r3, [pc, #140]	; (8009bcc <prvAddNewTaskToReadyList+0xc0>)
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d109      	bne.n	8009b5a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009b46:	4b20      	ldr	r3, [pc, #128]	; (8009bc8 <prvAddNewTaskToReadyList+0xbc>)
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b50:	429a      	cmp	r2, r3
 8009b52:	d802      	bhi.n	8009b5a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009b54:	4a1c      	ldr	r2, [pc, #112]	; (8009bc8 <prvAddNewTaskToReadyList+0xbc>)
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009b5a:	4b1d      	ldr	r3, [pc, #116]	; (8009bd0 <prvAddNewTaskToReadyList+0xc4>)
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	3301      	adds	r3, #1
 8009b60:	4a1b      	ldr	r2, [pc, #108]	; (8009bd0 <prvAddNewTaskToReadyList+0xc4>)
 8009b62:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b68:	2201      	movs	r2, #1
 8009b6a:	409a      	lsls	r2, r3
 8009b6c:	4b19      	ldr	r3, [pc, #100]	; (8009bd4 <prvAddNewTaskToReadyList+0xc8>)
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	4313      	orrs	r3, r2
 8009b72:	4a18      	ldr	r2, [pc, #96]	; (8009bd4 <prvAddNewTaskToReadyList+0xc8>)
 8009b74:	6013      	str	r3, [r2, #0]
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b7a:	4613      	mov	r3, r2
 8009b7c:	009b      	lsls	r3, r3, #2
 8009b7e:	4413      	add	r3, r2
 8009b80:	009b      	lsls	r3, r3, #2
 8009b82:	4a15      	ldr	r2, [pc, #84]	; (8009bd8 <prvAddNewTaskToReadyList+0xcc>)
 8009b84:	441a      	add	r2, r3
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	3304      	adds	r3, #4
 8009b8a:	4619      	mov	r1, r3
 8009b8c:	4610      	mov	r0, r2
 8009b8e:	f7ff faa6 	bl	80090de <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009b92:	f7ff fc3f 	bl	8009414 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009b96:	4b0d      	ldr	r3, [pc, #52]	; (8009bcc <prvAddNewTaskToReadyList+0xc0>)
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d00e      	beq.n	8009bbc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009b9e:	4b0a      	ldr	r3, [pc, #40]	; (8009bc8 <prvAddNewTaskToReadyList+0xbc>)
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ba8:	429a      	cmp	r2, r3
 8009baa:	d207      	bcs.n	8009bbc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009bac:	4b0b      	ldr	r3, [pc, #44]	; (8009bdc <prvAddNewTaskToReadyList+0xd0>)
 8009bae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009bb2:	601a      	str	r2, [r3, #0]
 8009bb4:	f3bf 8f4f 	dsb	sy
 8009bb8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009bbc:	bf00      	nop
 8009bbe:	3708      	adds	r7, #8
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	bd80      	pop	{r7, pc}
 8009bc4:	2000111c 	.word	0x2000111c
 8009bc8:	2000101c 	.word	0x2000101c
 8009bcc:	20001128 	.word	0x20001128
 8009bd0:	20001138 	.word	0x20001138
 8009bd4:	20001124 	.word	0x20001124
 8009bd8:	20001020 	.word	0x20001020
 8009bdc:	e000ed04 	.word	0xe000ed04

08009be0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b084      	sub	sp, #16
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009be8:	2300      	movs	r3, #0
 8009bea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d016      	beq.n	8009c20 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009bf2:	4b13      	ldr	r3, [pc, #76]	; (8009c40 <vTaskDelay+0x60>)
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d009      	beq.n	8009c0e <vTaskDelay+0x2e>
 8009bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bfe:	f383 8811 	msr	BASEPRI, r3
 8009c02:	f3bf 8f6f 	isb	sy
 8009c06:	f3bf 8f4f 	dsb	sy
 8009c0a:	60bb      	str	r3, [r7, #8]
 8009c0c:	e7fe      	b.n	8009c0c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8009c0e:	f000 f879 	bl	8009d04 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009c12:	2100      	movs	r1, #0
 8009c14:	6878      	ldr	r0, [r7, #4]
 8009c16:	f000 fb0b 	bl	800a230 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009c1a:	f000 f881 	bl	8009d20 <xTaskResumeAll>
 8009c1e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d107      	bne.n	8009c36 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8009c26:	4b07      	ldr	r3, [pc, #28]	; (8009c44 <vTaskDelay+0x64>)
 8009c28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c2c:	601a      	str	r2, [r3, #0]
 8009c2e:	f3bf 8f4f 	dsb	sy
 8009c32:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009c36:	bf00      	nop
 8009c38:	3710      	adds	r7, #16
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	bd80      	pop	{r7, pc}
 8009c3e:	bf00      	nop
 8009c40:	20001144 	.word	0x20001144
 8009c44:	e000ed04 	.word	0xe000ed04

08009c48 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b08a      	sub	sp, #40	; 0x28
 8009c4c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009c4e:	2300      	movs	r3, #0
 8009c50:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009c52:	2300      	movs	r3, #0
 8009c54:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009c56:	463a      	mov	r2, r7
 8009c58:	1d39      	adds	r1, r7, #4
 8009c5a:	f107 0308 	add.w	r3, r7, #8
 8009c5e:	4618      	mov	r0, r3
 8009c60:	f7f6 faac 	bl	80001bc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009c64:	6839      	ldr	r1, [r7, #0]
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	68ba      	ldr	r2, [r7, #8]
 8009c6a:	9202      	str	r2, [sp, #8]
 8009c6c:	9301      	str	r3, [sp, #4]
 8009c6e:	2300      	movs	r3, #0
 8009c70:	9300      	str	r3, [sp, #0]
 8009c72:	2300      	movs	r3, #0
 8009c74:	460a      	mov	r2, r1
 8009c76:	491d      	ldr	r1, [pc, #116]	; (8009cec <vTaskStartScheduler+0xa4>)
 8009c78:	481d      	ldr	r0, [pc, #116]	; (8009cf0 <vTaskStartScheduler+0xa8>)
 8009c7a:	f7ff fe2b 	bl	80098d4 <xTaskCreateStatic>
 8009c7e:	4602      	mov	r2, r0
 8009c80:	4b1c      	ldr	r3, [pc, #112]	; (8009cf4 <vTaskStartScheduler+0xac>)
 8009c82:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009c84:	4b1b      	ldr	r3, [pc, #108]	; (8009cf4 <vTaskStartScheduler+0xac>)
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d002      	beq.n	8009c92 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009c8c:	2301      	movs	r3, #1
 8009c8e:	617b      	str	r3, [r7, #20]
 8009c90:	e001      	b.n	8009c96 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009c92:	2300      	movs	r3, #0
 8009c94:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009c96:	697b      	ldr	r3, [r7, #20]
 8009c98:	2b01      	cmp	r3, #1
 8009c9a:	d115      	bne.n	8009cc8 <vTaskStartScheduler+0x80>
 8009c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ca0:	f383 8811 	msr	BASEPRI, r3
 8009ca4:	f3bf 8f6f 	isb	sy
 8009ca8:	f3bf 8f4f 	dsb	sy
 8009cac:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009cae:	4b12      	ldr	r3, [pc, #72]	; (8009cf8 <vTaskStartScheduler+0xb0>)
 8009cb0:	f04f 32ff 	mov.w	r2, #4294967295
 8009cb4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009cb6:	4b11      	ldr	r3, [pc, #68]	; (8009cfc <vTaskStartScheduler+0xb4>)
 8009cb8:	2201      	movs	r2, #1
 8009cba:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8009cbc:	4b10      	ldr	r3, [pc, #64]	; (8009d00 <vTaskStartScheduler+0xb8>)
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009cc2:	f7ff fb09 	bl	80092d8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009cc6:	e00d      	b.n	8009ce4 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009cc8:	697b      	ldr	r3, [r7, #20]
 8009cca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cce:	d109      	bne.n	8009ce4 <vTaskStartScheduler+0x9c>
 8009cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cd4:	f383 8811 	msr	BASEPRI, r3
 8009cd8:	f3bf 8f6f 	isb	sy
 8009cdc:	f3bf 8f4f 	dsb	sy
 8009ce0:	60fb      	str	r3, [r7, #12]
 8009ce2:	e7fe      	b.n	8009ce2 <vTaskStartScheduler+0x9a>
}
 8009ce4:	bf00      	nop
 8009ce6:	3718      	adds	r7, #24
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	bd80      	pop	{r7, pc}
 8009cec:	0800b48c 	.word	0x0800b48c
 8009cf0:	0800a085 	.word	0x0800a085
 8009cf4:	20001140 	.word	0x20001140
 8009cf8:	2000113c 	.word	0x2000113c
 8009cfc:	20001128 	.word	0x20001128
 8009d00:	20001120 	.word	0x20001120

08009d04 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009d04:	b480      	push	{r7}
 8009d06:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009d08:	4b04      	ldr	r3, [pc, #16]	; (8009d1c <vTaskSuspendAll+0x18>)
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	3301      	adds	r3, #1
 8009d0e:	4a03      	ldr	r2, [pc, #12]	; (8009d1c <vTaskSuspendAll+0x18>)
 8009d10:	6013      	str	r3, [r2, #0]
}
 8009d12:	bf00      	nop
 8009d14:	46bd      	mov	sp, r7
 8009d16:	bc80      	pop	{r7}
 8009d18:	4770      	bx	lr
 8009d1a:	bf00      	nop
 8009d1c:	20001144 	.word	0x20001144

08009d20 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b084      	sub	sp, #16
 8009d24:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009d26:	2300      	movs	r3, #0
 8009d28:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009d2e:	4b41      	ldr	r3, [pc, #260]	; (8009e34 <xTaskResumeAll+0x114>)
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d109      	bne.n	8009d4a <xTaskResumeAll+0x2a>
 8009d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d3a:	f383 8811 	msr	BASEPRI, r3
 8009d3e:	f3bf 8f6f 	isb	sy
 8009d42:	f3bf 8f4f 	dsb	sy
 8009d46:	603b      	str	r3, [r7, #0]
 8009d48:	e7fe      	b.n	8009d48 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009d4a:	f7ff fb35 	bl	80093b8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009d4e:	4b39      	ldr	r3, [pc, #228]	; (8009e34 <xTaskResumeAll+0x114>)
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	3b01      	subs	r3, #1
 8009d54:	4a37      	ldr	r2, [pc, #220]	; (8009e34 <xTaskResumeAll+0x114>)
 8009d56:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009d58:	4b36      	ldr	r3, [pc, #216]	; (8009e34 <xTaskResumeAll+0x114>)
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d161      	bne.n	8009e24 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009d60:	4b35      	ldr	r3, [pc, #212]	; (8009e38 <xTaskResumeAll+0x118>)
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d05d      	beq.n	8009e24 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009d68:	e02e      	b.n	8009dc8 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8009d6a:	4b34      	ldr	r3, [pc, #208]	; (8009e3c <xTaskResumeAll+0x11c>)
 8009d6c:	68db      	ldr	r3, [r3, #12]
 8009d6e:	68db      	ldr	r3, [r3, #12]
 8009d70:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	3318      	adds	r3, #24
 8009d76:	4618      	mov	r0, r3
 8009d78:	f7ff fa0c 	bl	8009194 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	3304      	adds	r3, #4
 8009d80:	4618      	mov	r0, r3
 8009d82:	f7ff fa07 	bl	8009194 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d8a:	2201      	movs	r2, #1
 8009d8c:	409a      	lsls	r2, r3
 8009d8e:	4b2c      	ldr	r3, [pc, #176]	; (8009e40 <xTaskResumeAll+0x120>)
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	4313      	orrs	r3, r2
 8009d94:	4a2a      	ldr	r2, [pc, #168]	; (8009e40 <xTaskResumeAll+0x120>)
 8009d96:	6013      	str	r3, [r2, #0]
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d9c:	4613      	mov	r3, r2
 8009d9e:	009b      	lsls	r3, r3, #2
 8009da0:	4413      	add	r3, r2
 8009da2:	009b      	lsls	r3, r3, #2
 8009da4:	4a27      	ldr	r2, [pc, #156]	; (8009e44 <xTaskResumeAll+0x124>)
 8009da6:	441a      	add	r2, r3
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	3304      	adds	r3, #4
 8009dac:	4619      	mov	r1, r3
 8009dae:	4610      	mov	r0, r2
 8009db0:	f7ff f995 	bl	80090de <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009db8:	4b23      	ldr	r3, [pc, #140]	; (8009e48 <xTaskResumeAll+0x128>)
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dbe:	429a      	cmp	r2, r3
 8009dc0:	d302      	bcc.n	8009dc8 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8009dc2:	4b22      	ldr	r3, [pc, #136]	; (8009e4c <xTaskResumeAll+0x12c>)
 8009dc4:	2201      	movs	r2, #1
 8009dc6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009dc8:	4b1c      	ldr	r3, [pc, #112]	; (8009e3c <xTaskResumeAll+0x11c>)
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d1cc      	bne.n	8009d6a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d001      	beq.n	8009dda <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009dd6:	f000 fa07 	bl	800a1e8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009dda:	4b1d      	ldr	r3, [pc, #116]	; (8009e50 <xTaskResumeAll+0x130>)
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d010      	beq.n	8009e08 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009de6:	f000 f837 	bl	8009e58 <xTaskIncrementTick>
 8009dea:	4603      	mov	r3, r0
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d002      	beq.n	8009df6 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8009df0:	4b16      	ldr	r3, [pc, #88]	; (8009e4c <xTaskResumeAll+0x12c>)
 8009df2:	2201      	movs	r2, #1
 8009df4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	3b01      	subs	r3, #1
 8009dfa:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d1f1      	bne.n	8009de6 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8009e02:	4b13      	ldr	r3, [pc, #76]	; (8009e50 <xTaskResumeAll+0x130>)
 8009e04:	2200      	movs	r2, #0
 8009e06:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009e08:	4b10      	ldr	r3, [pc, #64]	; (8009e4c <xTaskResumeAll+0x12c>)
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d009      	beq.n	8009e24 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009e10:	2301      	movs	r3, #1
 8009e12:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009e14:	4b0f      	ldr	r3, [pc, #60]	; (8009e54 <xTaskResumeAll+0x134>)
 8009e16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e1a:	601a      	str	r2, [r3, #0]
 8009e1c:	f3bf 8f4f 	dsb	sy
 8009e20:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009e24:	f7ff faf6 	bl	8009414 <vPortExitCritical>

	return xAlreadyYielded;
 8009e28:	68bb      	ldr	r3, [r7, #8]
}
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	3710      	adds	r7, #16
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	bd80      	pop	{r7, pc}
 8009e32:	bf00      	nop
 8009e34:	20001144 	.word	0x20001144
 8009e38:	2000111c 	.word	0x2000111c
 8009e3c:	200010dc 	.word	0x200010dc
 8009e40:	20001124 	.word	0x20001124
 8009e44:	20001020 	.word	0x20001020
 8009e48:	2000101c 	.word	0x2000101c
 8009e4c:	20001130 	.word	0x20001130
 8009e50:	2000112c 	.word	0x2000112c
 8009e54:	e000ed04 	.word	0xe000ed04

08009e58 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b086      	sub	sp, #24
 8009e5c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009e5e:	2300      	movs	r3, #0
 8009e60:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009e62:	4b50      	ldr	r3, [pc, #320]	; (8009fa4 <xTaskIncrementTick+0x14c>)
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	f040 808c 	bne.w	8009f84 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009e6c:	4b4e      	ldr	r3, [pc, #312]	; (8009fa8 <xTaskIncrementTick+0x150>)
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	3301      	adds	r3, #1
 8009e72:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009e74:	4a4c      	ldr	r2, [pc, #304]	; (8009fa8 <xTaskIncrementTick+0x150>)
 8009e76:	693b      	ldr	r3, [r7, #16]
 8009e78:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009e7a:	693b      	ldr	r3, [r7, #16]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d11f      	bne.n	8009ec0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8009e80:	4b4a      	ldr	r3, [pc, #296]	; (8009fac <xTaskIncrementTick+0x154>)
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d009      	beq.n	8009e9e <xTaskIncrementTick+0x46>
 8009e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e8e:	f383 8811 	msr	BASEPRI, r3
 8009e92:	f3bf 8f6f 	isb	sy
 8009e96:	f3bf 8f4f 	dsb	sy
 8009e9a:	603b      	str	r3, [r7, #0]
 8009e9c:	e7fe      	b.n	8009e9c <xTaskIncrementTick+0x44>
 8009e9e:	4b43      	ldr	r3, [pc, #268]	; (8009fac <xTaskIncrementTick+0x154>)
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	60fb      	str	r3, [r7, #12]
 8009ea4:	4b42      	ldr	r3, [pc, #264]	; (8009fb0 <xTaskIncrementTick+0x158>)
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	4a40      	ldr	r2, [pc, #256]	; (8009fac <xTaskIncrementTick+0x154>)
 8009eaa:	6013      	str	r3, [r2, #0]
 8009eac:	4a40      	ldr	r2, [pc, #256]	; (8009fb0 <xTaskIncrementTick+0x158>)
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	6013      	str	r3, [r2, #0]
 8009eb2:	4b40      	ldr	r3, [pc, #256]	; (8009fb4 <xTaskIncrementTick+0x15c>)
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	3301      	adds	r3, #1
 8009eb8:	4a3e      	ldr	r2, [pc, #248]	; (8009fb4 <xTaskIncrementTick+0x15c>)
 8009eba:	6013      	str	r3, [r2, #0]
 8009ebc:	f000 f994 	bl	800a1e8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009ec0:	4b3d      	ldr	r3, [pc, #244]	; (8009fb8 <xTaskIncrementTick+0x160>)
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	693a      	ldr	r2, [r7, #16]
 8009ec6:	429a      	cmp	r2, r3
 8009ec8:	d34d      	bcc.n	8009f66 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009eca:	4b38      	ldr	r3, [pc, #224]	; (8009fac <xTaskIncrementTick+0x154>)
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d101      	bne.n	8009ed8 <xTaskIncrementTick+0x80>
 8009ed4:	2301      	movs	r3, #1
 8009ed6:	e000      	b.n	8009eda <xTaskIncrementTick+0x82>
 8009ed8:	2300      	movs	r3, #0
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d004      	beq.n	8009ee8 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ede:	4b36      	ldr	r3, [pc, #216]	; (8009fb8 <xTaskIncrementTick+0x160>)
 8009ee0:	f04f 32ff 	mov.w	r2, #4294967295
 8009ee4:	601a      	str	r2, [r3, #0]
					break;
 8009ee6:	e03e      	b.n	8009f66 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009ee8:	4b30      	ldr	r3, [pc, #192]	; (8009fac <xTaskIncrementTick+0x154>)
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	68db      	ldr	r3, [r3, #12]
 8009eee:	68db      	ldr	r3, [r3, #12]
 8009ef0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009ef2:	68bb      	ldr	r3, [r7, #8]
 8009ef4:	685b      	ldr	r3, [r3, #4]
 8009ef6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009ef8:	693a      	ldr	r2, [r7, #16]
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	429a      	cmp	r2, r3
 8009efe:	d203      	bcs.n	8009f08 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009f00:	4a2d      	ldr	r2, [pc, #180]	; (8009fb8 <xTaskIncrementTick+0x160>)
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	6013      	str	r3, [r2, #0]
						break;
 8009f06:	e02e      	b.n	8009f66 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009f08:	68bb      	ldr	r3, [r7, #8]
 8009f0a:	3304      	adds	r3, #4
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	f7ff f941 	bl	8009194 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009f12:	68bb      	ldr	r3, [r7, #8]
 8009f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d004      	beq.n	8009f24 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009f1a:	68bb      	ldr	r3, [r7, #8]
 8009f1c:	3318      	adds	r3, #24
 8009f1e:	4618      	mov	r0, r3
 8009f20:	f7ff f938 	bl	8009194 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009f24:	68bb      	ldr	r3, [r7, #8]
 8009f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f28:	2201      	movs	r2, #1
 8009f2a:	409a      	lsls	r2, r3
 8009f2c:	4b23      	ldr	r3, [pc, #140]	; (8009fbc <xTaskIncrementTick+0x164>)
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	4313      	orrs	r3, r2
 8009f32:	4a22      	ldr	r2, [pc, #136]	; (8009fbc <xTaskIncrementTick+0x164>)
 8009f34:	6013      	str	r3, [r2, #0]
 8009f36:	68bb      	ldr	r3, [r7, #8]
 8009f38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f3a:	4613      	mov	r3, r2
 8009f3c:	009b      	lsls	r3, r3, #2
 8009f3e:	4413      	add	r3, r2
 8009f40:	009b      	lsls	r3, r3, #2
 8009f42:	4a1f      	ldr	r2, [pc, #124]	; (8009fc0 <xTaskIncrementTick+0x168>)
 8009f44:	441a      	add	r2, r3
 8009f46:	68bb      	ldr	r3, [r7, #8]
 8009f48:	3304      	adds	r3, #4
 8009f4a:	4619      	mov	r1, r3
 8009f4c:	4610      	mov	r0, r2
 8009f4e:	f7ff f8c6 	bl	80090de <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009f52:	68bb      	ldr	r3, [r7, #8]
 8009f54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f56:	4b1b      	ldr	r3, [pc, #108]	; (8009fc4 <xTaskIncrementTick+0x16c>)
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f5c:	429a      	cmp	r2, r3
 8009f5e:	d3b4      	bcc.n	8009eca <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8009f60:	2301      	movs	r3, #1
 8009f62:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009f64:	e7b1      	b.n	8009eca <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009f66:	4b17      	ldr	r3, [pc, #92]	; (8009fc4 <xTaskIncrementTick+0x16c>)
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f6c:	4914      	ldr	r1, [pc, #80]	; (8009fc0 <xTaskIncrementTick+0x168>)
 8009f6e:	4613      	mov	r3, r2
 8009f70:	009b      	lsls	r3, r3, #2
 8009f72:	4413      	add	r3, r2
 8009f74:	009b      	lsls	r3, r3, #2
 8009f76:	440b      	add	r3, r1
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	2b01      	cmp	r3, #1
 8009f7c:	d907      	bls.n	8009f8e <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8009f7e:	2301      	movs	r3, #1
 8009f80:	617b      	str	r3, [r7, #20]
 8009f82:	e004      	b.n	8009f8e <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009f84:	4b10      	ldr	r3, [pc, #64]	; (8009fc8 <xTaskIncrementTick+0x170>)
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	3301      	adds	r3, #1
 8009f8a:	4a0f      	ldr	r2, [pc, #60]	; (8009fc8 <xTaskIncrementTick+0x170>)
 8009f8c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009f8e:	4b0f      	ldr	r3, [pc, #60]	; (8009fcc <xTaskIncrementTick+0x174>)
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d001      	beq.n	8009f9a <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8009f96:	2301      	movs	r3, #1
 8009f98:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009f9a:	697b      	ldr	r3, [r7, #20]
}
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	3718      	adds	r7, #24
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	bd80      	pop	{r7, pc}
 8009fa4:	20001144 	.word	0x20001144
 8009fa8:	20001120 	.word	0x20001120
 8009fac:	200010d4 	.word	0x200010d4
 8009fb0:	200010d8 	.word	0x200010d8
 8009fb4:	20001134 	.word	0x20001134
 8009fb8:	2000113c 	.word	0x2000113c
 8009fbc:	20001124 	.word	0x20001124
 8009fc0:	20001020 	.word	0x20001020
 8009fc4:	2000101c 	.word	0x2000101c
 8009fc8:	2000112c 	.word	0x2000112c
 8009fcc:	20001130 	.word	0x20001130

08009fd0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009fd0:	b480      	push	{r7}
 8009fd2:	b087      	sub	sp, #28
 8009fd4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009fd6:	4b26      	ldr	r3, [pc, #152]	; (800a070 <vTaskSwitchContext+0xa0>)
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d003      	beq.n	8009fe6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009fde:	4b25      	ldr	r3, [pc, #148]	; (800a074 <vTaskSwitchContext+0xa4>)
 8009fe0:	2201      	movs	r2, #1
 8009fe2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009fe4:	e03e      	b.n	800a064 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8009fe6:	4b23      	ldr	r3, [pc, #140]	; (800a074 <vTaskSwitchContext+0xa4>)
 8009fe8:	2200      	movs	r2, #0
 8009fea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8009fec:	4b22      	ldr	r3, [pc, #136]	; (800a078 <vTaskSwitchContext+0xa8>)
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	fab3 f383 	clz	r3, r3
 8009ff8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8009ffa:	7afb      	ldrb	r3, [r7, #11]
 8009ffc:	f1c3 031f 	rsb	r3, r3, #31
 800a000:	617b      	str	r3, [r7, #20]
 800a002:	491e      	ldr	r1, [pc, #120]	; (800a07c <vTaskSwitchContext+0xac>)
 800a004:	697a      	ldr	r2, [r7, #20]
 800a006:	4613      	mov	r3, r2
 800a008:	009b      	lsls	r3, r3, #2
 800a00a:	4413      	add	r3, r2
 800a00c:	009b      	lsls	r3, r3, #2
 800a00e:	440b      	add	r3, r1
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d109      	bne.n	800a02a <vTaskSwitchContext+0x5a>
	__asm volatile
 800a016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a01a:	f383 8811 	msr	BASEPRI, r3
 800a01e:	f3bf 8f6f 	isb	sy
 800a022:	f3bf 8f4f 	dsb	sy
 800a026:	607b      	str	r3, [r7, #4]
 800a028:	e7fe      	b.n	800a028 <vTaskSwitchContext+0x58>
 800a02a:	697a      	ldr	r2, [r7, #20]
 800a02c:	4613      	mov	r3, r2
 800a02e:	009b      	lsls	r3, r3, #2
 800a030:	4413      	add	r3, r2
 800a032:	009b      	lsls	r3, r3, #2
 800a034:	4a11      	ldr	r2, [pc, #68]	; (800a07c <vTaskSwitchContext+0xac>)
 800a036:	4413      	add	r3, r2
 800a038:	613b      	str	r3, [r7, #16]
 800a03a:	693b      	ldr	r3, [r7, #16]
 800a03c:	685b      	ldr	r3, [r3, #4]
 800a03e:	685a      	ldr	r2, [r3, #4]
 800a040:	693b      	ldr	r3, [r7, #16]
 800a042:	605a      	str	r2, [r3, #4]
 800a044:	693b      	ldr	r3, [r7, #16]
 800a046:	685a      	ldr	r2, [r3, #4]
 800a048:	693b      	ldr	r3, [r7, #16]
 800a04a:	3308      	adds	r3, #8
 800a04c:	429a      	cmp	r2, r3
 800a04e:	d104      	bne.n	800a05a <vTaskSwitchContext+0x8a>
 800a050:	693b      	ldr	r3, [r7, #16]
 800a052:	685b      	ldr	r3, [r3, #4]
 800a054:	685a      	ldr	r2, [r3, #4]
 800a056:	693b      	ldr	r3, [r7, #16]
 800a058:	605a      	str	r2, [r3, #4]
 800a05a:	693b      	ldr	r3, [r7, #16]
 800a05c:	685b      	ldr	r3, [r3, #4]
 800a05e:	68db      	ldr	r3, [r3, #12]
 800a060:	4a07      	ldr	r2, [pc, #28]	; (800a080 <vTaskSwitchContext+0xb0>)
 800a062:	6013      	str	r3, [r2, #0]
}
 800a064:	bf00      	nop
 800a066:	371c      	adds	r7, #28
 800a068:	46bd      	mov	sp, r7
 800a06a:	bc80      	pop	{r7}
 800a06c:	4770      	bx	lr
 800a06e:	bf00      	nop
 800a070:	20001144 	.word	0x20001144
 800a074:	20001130 	.word	0x20001130
 800a078:	20001124 	.word	0x20001124
 800a07c:	20001020 	.word	0x20001020
 800a080:	2000101c 	.word	0x2000101c

0800a084 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a084:	b580      	push	{r7, lr}
 800a086:	b082      	sub	sp, #8
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a08c:	f000 f852 	bl	800a134 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a090:	4b06      	ldr	r3, [pc, #24]	; (800a0ac <prvIdleTask+0x28>)
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	2b01      	cmp	r3, #1
 800a096:	d9f9      	bls.n	800a08c <prvIdleTask+0x8>
			{
				taskYIELD();
 800a098:	4b05      	ldr	r3, [pc, #20]	; (800a0b0 <prvIdleTask+0x2c>)
 800a09a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a09e:	601a      	str	r2, [r3, #0]
 800a0a0:	f3bf 8f4f 	dsb	sy
 800a0a4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a0a8:	e7f0      	b.n	800a08c <prvIdleTask+0x8>
 800a0aa:	bf00      	nop
 800a0ac:	20001020 	.word	0x20001020
 800a0b0:	e000ed04 	.word	0xe000ed04

0800a0b4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b082      	sub	sp, #8
 800a0b8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	607b      	str	r3, [r7, #4]
 800a0be:	e00c      	b.n	800a0da <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a0c0:	687a      	ldr	r2, [r7, #4]
 800a0c2:	4613      	mov	r3, r2
 800a0c4:	009b      	lsls	r3, r3, #2
 800a0c6:	4413      	add	r3, r2
 800a0c8:	009b      	lsls	r3, r3, #2
 800a0ca:	4a12      	ldr	r2, [pc, #72]	; (800a114 <prvInitialiseTaskLists+0x60>)
 800a0cc:	4413      	add	r3, r2
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	f7fe ffda 	bl	8009088 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	3301      	adds	r3, #1
 800a0d8:	607b      	str	r3, [r7, #4]
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	2b06      	cmp	r3, #6
 800a0de:	d9ef      	bls.n	800a0c0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a0e0:	480d      	ldr	r0, [pc, #52]	; (800a118 <prvInitialiseTaskLists+0x64>)
 800a0e2:	f7fe ffd1 	bl	8009088 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a0e6:	480d      	ldr	r0, [pc, #52]	; (800a11c <prvInitialiseTaskLists+0x68>)
 800a0e8:	f7fe ffce 	bl	8009088 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a0ec:	480c      	ldr	r0, [pc, #48]	; (800a120 <prvInitialiseTaskLists+0x6c>)
 800a0ee:	f7fe ffcb 	bl	8009088 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a0f2:	480c      	ldr	r0, [pc, #48]	; (800a124 <prvInitialiseTaskLists+0x70>)
 800a0f4:	f7fe ffc8 	bl	8009088 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a0f8:	480b      	ldr	r0, [pc, #44]	; (800a128 <prvInitialiseTaskLists+0x74>)
 800a0fa:	f7fe ffc5 	bl	8009088 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a0fe:	4b0b      	ldr	r3, [pc, #44]	; (800a12c <prvInitialiseTaskLists+0x78>)
 800a100:	4a05      	ldr	r2, [pc, #20]	; (800a118 <prvInitialiseTaskLists+0x64>)
 800a102:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a104:	4b0a      	ldr	r3, [pc, #40]	; (800a130 <prvInitialiseTaskLists+0x7c>)
 800a106:	4a05      	ldr	r2, [pc, #20]	; (800a11c <prvInitialiseTaskLists+0x68>)
 800a108:	601a      	str	r2, [r3, #0]
}
 800a10a:	bf00      	nop
 800a10c:	3708      	adds	r7, #8
 800a10e:	46bd      	mov	sp, r7
 800a110:	bd80      	pop	{r7, pc}
 800a112:	bf00      	nop
 800a114:	20001020 	.word	0x20001020
 800a118:	200010ac 	.word	0x200010ac
 800a11c:	200010c0 	.word	0x200010c0
 800a120:	200010dc 	.word	0x200010dc
 800a124:	200010f0 	.word	0x200010f0
 800a128:	20001108 	.word	0x20001108
 800a12c:	200010d4 	.word	0x200010d4
 800a130:	200010d8 	.word	0x200010d8

0800a134 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a134:	b580      	push	{r7, lr}
 800a136:	b082      	sub	sp, #8
 800a138:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a13a:	e019      	b.n	800a170 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a13c:	f7ff f93c 	bl	80093b8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800a140:	4b0f      	ldr	r3, [pc, #60]	; (800a180 <prvCheckTasksWaitingTermination+0x4c>)
 800a142:	68db      	ldr	r3, [r3, #12]
 800a144:	68db      	ldr	r3, [r3, #12]
 800a146:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	3304      	adds	r3, #4
 800a14c:	4618      	mov	r0, r3
 800a14e:	f7ff f821 	bl	8009194 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a152:	4b0c      	ldr	r3, [pc, #48]	; (800a184 <prvCheckTasksWaitingTermination+0x50>)
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	3b01      	subs	r3, #1
 800a158:	4a0a      	ldr	r2, [pc, #40]	; (800a184 <prvCheckTasksWaitingTermination+0x50>)
 800a15a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a15c:	4b0a      	ldr	r3, [pc, #40]	; (800a188 <prvCheckTasksWaitingTermination+0x54>)
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	3b01      	subs	r3, #1
 800a162:	4a09      	ldr	r2, [pc, #36]	; (800a188 <prvCheckTasksWaitingTermination+0x54>)
 800a164:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a166:	f7ff f955 	bl	8009414 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a16a:	6878      	ldr	r0, [r7, #4]
 800a16c:	f000 f80e 	bl	800a18c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a170:	4b05      	ldr	r3, [pc, #20]	; (800a188 <prvCheckTasksWaitingTermination+0x54>)
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d1e1      	bne.n	800a13c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a178:	bf00      	nop
 800a17a:	3708      	adds	r7, #8
 800a17c:	46bd      	mov	sp, r7
 800a17e:	bd80      	pop	{r7, pc}
 800a180:	200010f0 	.word	0x200010f0
 800a184:	2000111c 	.word	0x2000111c
 800a188:	20001104 	.word	0x20001104

0800a18c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b084      	sub	sp, #16
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d108      	bne.n	800a1b0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	f7ff fa84 	bl	80096b0 <vPortFree>
				vPortFree( pxTCB );
 800a1a8:	6878      	ldr	r0, [r7, #4]
 800a1aa:	f7ff fa81 	bl	80096b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a1ae:	e017      	b.n	800a1e0 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a1b6:	2b01      	cmp	r3, #1
 800a1b8:	d103      	bne.n	800a1c2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a1ba:	6878      	ldr	r0, [r7, #4]
 800a1bc:	f7ff fa78 	bl	80096b0 <vPortFree>
	}
 800a1c0:	e00e      	b.n	800a1e0 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a1c8:	2b02      	cmp	r3, #2
 800a1ca:	d009      	beq.n	800a1e0 <prvDeleteTCB+0x54>
 800a1cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1d0:	f383 8811 	msr	BASEPRI, r3
 800a1d4:	f3bf 8f6f 	isb	sy
 800a1d8:	f3bf 8f4f 	dsb	sy
 800a1dc:	60fb      	str	r3, [r7, #12]
 800a1de:	e7fe      	b.n	800a1de <prvDeleteTCB+0x52>
	}
 800a1e0:	bf00      	nop
 800a1e2:	3710      	adds	r7, #16
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	bd80      	pop	{r7, pc}

0800a1e8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a1e8:	b480      	push	{r7}
 800a1ea:	b083      	sub	sp, #12
 800a1ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a1ee:	4b0e      	ldr	r3, [pc, #56]	; (800a228 <prvResetNextTaskUnblockTime+0x40>)
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d101      	bne.n	800a1fc <prvResetNextTaskUnblockTime+0x14>
 800a1f8:	2301      	movs	r3, #1
 800a1fa:	e000      	b.n	800a1fe <prvResetNextTaskUnblockTime+0x16>
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d004      	beq.n	800a20c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a202:	4b0a      	ldr	r3, [pc, #40]	; (800a22c <prvResetNextTaskUnblockTime+0x44>)
 800a204:	f04f 32ff 	mov.w	r2, #4294967295
 800a208:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a20a:	e008      	b.n	800a21e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800a20c:	4b06      	ldr	r3, [pc, #24]	; (800a228 <prvResetNextTaskUnblockTime+0x40>)
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	68db      	ldr	r3, [r3, #12]
 800a212:	68db      	ldr	r3, [r3, #12]
 800a214:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	685b      	ldr	r3, [r3, #4]
 800a21a:	4a04      	ldr	r2, [pc, #16]	; (800a22c <prvResetNextTaskUnblockTime+0x44>)
 800a21c:	6013      	str	r3, [r2, #0]
}
 800a21e:	bf00      	nop
 800a220:	370c      	adds	r7, #12
 800a222:	46bd      	mov	sp, r7
 800a224:	bc80      	pop	{r7}
 800a226:	4770      	bx	lr
 800a228:	200010d4 	.word	0x200010d4
 800a22c:	2000113c 	.word	0x2000113c

0800a230 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a230:	b580      	push	{r7, lr}
 800a232:	b084      	sub	sp, #16
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
 800a238:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a23a:	4b29      	ldr	r3, [pc, #164]	; (800a2e0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a240:	4b28      	ldr	r3, [pc, #160]	; (800a2e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	3304      	adds	r3, #4
 800a246:	4618      	mov	r0, r3
 800a248:	f7fe ffa4 	bl	8009194 <uxListRemove>
 800a24c:	4603      	mov	r3, r0
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d10b      	bne.n	800a26a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800a252:	4b24      	ldr	r3, [pc, #144]	; (800a2e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a258:	2201      	movs	r2, #1
 800a25a:	fa02 f303 	lsl.w	r3, r2, r3
 800a25e:	43da      	mvns	r2, r3
 800a260:	4b21      	ldr	r3, [pc, #132]	; (800a2e8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	4013      	ands	r3, r2
 800a266:	4a20      	ldr	r2, [pc, #128]	; (800a2e8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a268:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a270:	d10a      	bne.n	800a288 <prvAddCurrentTaskToDelayedList+0x58>
 800a272:	683b      	ldr	r3, [r7, #0]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d007      	beq.n	800a288 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a278:	4b1a      	ldr	r3, [pc, #104]	; (800a2e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	3304      	adds	r3, #4
 800a27e:	4619      	mov	r1, r3
 800a280:	481a      	ldr	r0, [pc, #104]	; (800a2ec <prvAddCurrentTaskToDelayedList+0xbc>)
 800a282:	f7fe ff2c 	bl	80090de <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a286:	e026      	b.n	800a2d6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a288:	68fa      	ldr	r2, [r7, #12]
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	4413      	add	r3, r2
 800a28e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a290:	4b14      	ldr	r3, [pc, #80]	; (800a2e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	68ba      	ldr	r2, [r7, #8]
 800a296:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a298:	68ba      	ldr	r2, [r7, #8]
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	429a      	cmp	r2, r3
 800a29e:	d209      	bcs.n	800a2b4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a2a0:	4b13      	ldr	r3, [pc, #76]	; (800a2f0 <prvAddCurrentTaskToDelayedList+0xc0>)
 800a2a2:	681a      	ldr	r2, [r3, #0]
 800a2a4:	4b0f      	ldr	r3, [pc, #60]	; (800a2e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	3304      	adds	r3, #4
 800a2aa:	4619      	mov	r1, r3
 800a2ac:	4610      	mov	r0, r2
 800a2ae:	f7fe ff39 	bl	8009124 <vListInsert>
}
 800a2b2:	e010      	b.n	800a2d6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a2b4:	4b0f      	ldr	r3, [pc, #60]	; (800a2f4 <prvAddCurrentTaskToDelayedList+0xc4>)
 800a2b6:	681a      	ldr	r2, [r3, #0]
 800a2b8:	4b0a      	ldr	r3, [pc, #40]	; (800a2e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	3304      	adds	r3, #4
 800a2be:	4619      	mov	r1, r3
 800a2c0:	4610      	mov	r0, r2
 800a2c2:	f7fe ff2f 	bl	8009124 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a2c6:	4b0c      	ldr	r3, [pc, #48]	; (800a2f8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	68ba      	ldr	r2, [r7, #8]
 800a2cc:	429a      	cmp	r2, r3
 800a2ce:	d202      	bcs.n	800a2d6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800a2d0:	4a09      	ldr	r2, [pc, #36]	; (800a2f8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a2d2:	68bb      	ldr	r3, [r7, #8]
 800a2d4:	6013      	str	r3, [r2, #0]
}
 800a2d6:	bf00      	nop
 800a2d8:	3710      	adds	r7, #16
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	bd80      	pop	{r7, pc}
 800a2de:	bf00      	nop
 800a2e0:	20001120 	.word	0x20001120
 800a2e4:	2000101c 	.word	0x2000101c
 800a2e8:	20001124 	.word	0x20001124
 800a2ec:	20001108 	.word	0x20001108
 800a2f0:	200010d8 	.word	0x200010d8
 800a2f4:	200010d4 	.word	0x200010d4
 800a2f8:	2000113c 	.word	0x2000113c

0800a2fc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a2fc:	b580      	push	{r7, lr}
 800a2fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a300:	2200      	movs	r2, #0
 800a302:	4912      	ldr	r1, [pc, #72]	; (800a34c <MX_USB_DEVICE_Init+0x50>)
 800a304:	4812      	ldr	r0, [pc, #72]	; (800a350 <MX_USB_DEVICE_Init+0x54>)
 800a306:	f7fd fdb4 	bl	8007e72 <USBD_Init>
 800a30a:	4603      	mov	r3, r0
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d001      	beq.n	800a314 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a310:	f7f6 f932 	bl	8000578 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a314:	490f      	ldr	r1, [pc, #60]	; (800a354 <MX_USB_DEVICE_Init+0x58>)
 800a316:	480e      	ldr	r0, [pc, #56]	; (800a350 <MX_USB_DEVICE_Init+0x54>)
 800a318:	f7fd fdd6 	bl	8007ec8 <USBD_RegisterClass>
 800a31c:	4603      	mov	r3, r0
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d001      	beq.n	800a326 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a322:	f7f6 f929 	bl	8000578 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a326:	490c      	ldr	r1, [pc, #48]	; (800a358 <MX_USB_DEVICE_Init+0x5c>)
 800a328:	4809      	ldr	r0, [pc, #36]	; (800a350 <MX_USB_DEVICE_Init+0x54>)
 800a32a:	f7fd fd07 	bl	8007d3c <USBD_CDC_RegisterInterface>
 800a32e:	4603      	mov	r3, r0
 800a330:	2b00      	cmp	r3, #0
 800a332:	d001      	beq.n	800a338 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a334:	f7f6 f920 	bl	8000578 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a338:	4805      	ldr	r0, [pc, #20]	; (800a350 <MX_USB_DEVICE_Init+0x54>)
 800a33a:	f7fd fdde 	bl	8007efa <USBD_Start>
 800a33e:	4603      	mov	r3, r0
 800a340:	2b00      	cmp	r3, #0
 800a342:	d001      	beq.n	800a348 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a344:	f7f6 f918 	bl	8000578 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a348:	bf00      	nop
 800a34a:	bd80      	pop	{r7, pc}
 800a34c:	20000130 	.word	0x20000130
 800a350:	200018a4 	.word	0x200018a4
 800a354:	20000018 	.word	0x20000018
 800a358:	20000120 	.word	0x20000120

0800a35c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a35c:	b580      	push	{r7, lr}
 800a35e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a360:	2200      	movs	r2, #0
 800a362:	4905      	ldr	r1, [pc, #20]	; (800a378 <CDC_Init_FS+0x1c>)
 800a364:	4805      	ldr	r0, [pc, #20]	; (800a37c <CDC_Init_FS+0x20>)
 800a366:	f7fd fcff 	bl	8007d68 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a36a:	4905      	ldr	r1, [pc, #20]	; (800a380 <CDC_Init_FS+0x24>)
 800a36c:	4803      	ldr	r0, [pc, #12]	; (800a37c <CDC_Init_FS+0x20>)
 800a36e:	f7fd fd14 	bl	8007d9a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a372:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a374:	4618      	mov	r0, r3
 800a376:	bd80      	pop	{r7, pc}
 800a378:	20001bcc 	.word	0x20001bcc
 800a37c:	200018a4 	.word	0x200018a4
 800a380:	20001b68 	.word	0x20001b68

0800a384 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a384:	b480      	push	{r7}
 800a386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a388:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a38a:	4618      	mov	r0, r3
 800a38c:	46bd      	mov	sp, r7
 800a38e:	bc80      	pop	{r7}
 800a390:	4770      	bx	lr
	...

0800a394 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a394:	b480      	push	{r7}
 800a396:	b083      	sub	sp, #12
 800a398:	af00      	add	r7, sp, #0
 800a39a:	4603      	mov	r3, r0
 800a39c:	6039      	str	r1, [r7, #0]
 800a39e:	71fb      	strb	r3, [r7, #7]
 800a3a0:	4613      	mov	r3, r2
 800a3a2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a3a4:	79fb      	ldrb	r3, [r7, #7]
 800a3a6:	2b23      	cmp	r3, #35	; 0x23
 800a3a8:	d84a      	bhi.n	800a440 <CDC_Control_FS+0xac>
 800a3aa:	a201      	add	r2, pc, #4	; (adr r2, 800a3b0 <CDC_Control_FS+0x1c>)
 800a3ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3b0:	0800a441 	.word	0x0800a441
 800a3b4:	0800a441 	.word	0x0800a441
 800a3b8:	0800a441 	.word	0x0800a441
 800a3bc:	0800a441 	.word	0x0800a441
 800a3c0:	0800a441 	.word	0x0800a441
 800a3c4:	0800a441 	.word	0x0800a441
 800a3c8:	0800a441 	.word	0x0800a441
 800a3cc:	0800a441 	.word	0x0800a441
 800a3d0:	0800a441 	.word	0x0800a441
 800a3d4:	0800a441 	.word	0x0800a441
 800a3d8:	0800a441 	.word	0x0800a441
 800a3dc:	0800a441 	.word	0x0800a441
 800a3e0:	0800a441 	.word	0x0800a441
 800a3e4:	0800a441 	.word	0x0800a441
 800a3e8:	0800a441 	.word	0x0800a441
 800a3ec:	0800a441 	.word	0x0800a441
 800a3f0:	0800a441 	.word	0x0800a441
 800a3f4:	0800a441 	.word	0x0800a441
 800a3f8:	0800a441 	.word	0x0800a441
 800a3fc:	0800a441 	.word	0x0800a441
 800a400:	0800a441 	.word	0x0800a441
 800a404:	0800a441 	.word	0x0800a441
 800a408:	0800a441 	.word	0x0800a441
 800a40c:	0800a441 	.word	0x0800a441
 800a410:	0800a441 	.word	0x0800a441
 800a414:	0800a441 	.word	0x0800a441
 800a418:	0800a441 	.word	0x0800a441
 800a41c:	0800a441 	.word	0x0800a441
 800a420:	0800a441 	.word	0x0800a441
 800a424:	0800a441 	.word	0x0800a441
 800a428:	0800a441 	.word	0x0800a441
 800a42c:	0800a441 	.word	0x0800a441
 800a430:	0800a441 	.word	0x0800a441
 800a434:	0800a441 	.word	0x0800a441
 800a438:	0800a441 	.word	0x0800a441
 800a43c:	0800a441 	.word	0x0800a441
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a440:	bf00      	nop
  }

  return (USBD_OK);
 800a442:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a444:	4618      	mov	r0, r3
 800a446:	370c      	adds	r7, #12
 800a448:	46bd      	mov	sp, r7
 800a44a:	bc80      	pop	{r7}
 800a44c:	4770      	bx	lr
 800a44e:	bf00      	nop

0800a450 <CDC_Receive_FS>:
int idx=0;
void ReadComand(char * Bufer,int Leng);


static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a450:	b580      	push	{r7, lr}
 800a452:	b082      	sub	sp, #8
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
 800a458:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a45a:	6879      	ldr	r1, [r7, #4]
 800a45c:	4818      	ldr	r0, [pc, #96]	; (800a4c0 <CDC_Receive_FS+0x70>)
 800a45e:	f7fd fc9c 	bl	8007d9a <USBD_CDC_SetRxBuffer>



  if(Buf[0]=='\r'){
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	781b      	ldrb	r3, [r3, #0]
 800a466:	2b0d      	cmp	r3, #13
 800a468:	d112      	bne.n	800a490 <CDC_Receive_FS+0x40>
     BuferUsb[idx++]=Buf[0];
 800a46a:	4b16      	ldr	r3, [pc, #88]	; (800a4c4 <CDC_Receive_FS+0x74>)
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	1c5a      	adds	r2, r3, #1
 800a470:	4914      	ldr	r1, [pc, #80]	; (800a4c4 <CDC_Receive_FS+0x74>)
 800a472:	600a      	str	r2, [r1, #0]
 800a474:	687a      	ldr	r2, [r7, #4]
 800a476:	7811      	ldrb	r1, [r2, #0]
 800a478:	4a13      	ldr	r2, [pc, #76]	; (800a4c8 <CDC_Receive_FS+0x78>)
 800a47a:	54d1      	strb	r1, [r2, r3]
    ReadComand(BuferUsb,idx);
 800a47c:	4b11      	ldr	r3, [pc, #68]	; (800a4c4 <CDC_Receive_FS+0x74>)
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	4619      	mov	r1, r3
 800a482:	4811      	ldr	r0, [pc, #68]	; (800a4c8 <CDC_Receive_FS+0x78>)
 800a484:	f000 fc00 	bl	800ac88 <ReadComand>
     idx=0;
 800a488:	4b0e      	ldr	r3, [pc, #56]	; (800a4c4 <CDC_Receive_FS+0x74>)
 800a48a:	2200      	movs	r2, #0
 800a48c:	601a      	str	r2, [r3, #0]
 800a48e:	e00f      	b.n	800a4b0 <CDC_Receive_FS+0x60>

  }else{
      if(idx>=100){idx=0;}
 800a490:	4b0c      	ldr	r3, [pc, #48]	; (800a4c4 <CDC_Receive_FS+0x74>)
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	2b63      	cmp	r3, #99	; 0x63
 800a496:	dd02      	ble.n	800a49e <CDC_Receive_FS+0x4e>
 800a498:	4b0a      	ldr	r3, [pc, #40]	; (800a4c4 <CDC_Receive_FS+0x74>)
 800a49a:	2200      	movs	r2, #0
 800a49c:	601a      	str	r2, [r3, #0]
      BuferUsb[idx++]=Buf[0];
 800a49e:	4b09      	ldr	r3, [pc, #36]	; (800a4c4 <CDC_Receive_FS+0x74>)
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	1c5a      	adds	r2, r3, #1
 800a4a4:	4907      	ldr	r1, [pc, #28]	; (800a4c4 <CDC_Receive_FS+0x74>)
 800a4a6:	600a      	str	r2, [r1, #0]
 800a4a8:	687a      	ldr	r2, [r7, #4]
 800a4aa:	7811      	ldrb	r1, [r2, #0]
 800a4ac:	4a06      	ldr	r2, [pc, #24]	; (800a4c8 <CDC_Receive_FS+0x78>)
 800a4ae:	54d1      	strb	r1, [r2, r3]

  }



  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a4b0:	4803      	ldr	r0, [pc, #12]	; (800a4c0 <CDC_Receive_FS+0x70>)
 800a4b2:	f7fd fcb4 	bl	8007e1e <USBD_CDC_ReceivePacket>


  return (USBD_OK);
 800a4b6:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	3708      	adds	r7, #8
 800a4bc:	46bd      	mov	sp, r7
 800a4be:	bd80      	pop	{r7, pc}
 800a4c0:	200018a4 	.word	0x200018a4
 800a4c4:	200011ac 	.word	0x200011ac
 800a4c8:	20001148 	.word	0x20001148

0800a4cc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	b084      	sub	sp, #16
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	6078      	str	r0, [r7, #4]
 800a4d4:	460b      	mov	r3, r1
 800a4d6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a4d8:	2300      	movs	r3, #0
 800a4da:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a4dc:	4b0d      	ldr	r3, [pc, #52]	; (800a514 <CDC_Transmit_FS+0x48>)
 800a4de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4e2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a4e4:	68bb      	ldr	r3, [r7, #8]
 800a4e6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d001      	beq.n	800a4f2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a4ee:	2301      	movs	r3, #1
 800a4f0:	e00b      	b.n	800a50a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a4f2:	887b      	ldrh	r3, [r7, #2]
 800a4f4:	461a      	mov	r2, r3
 800a4f6:	6879      	ldr	r1, [r7, #4]
 800a4f8:	4806      	ldr	r0, [pc, #24]	; (800a514 <CDC_Transmit_FS+0x48>)
 800a4fa:	f7fd fc35 	bl	8007d68 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a4fe:	4805      	ldr	r0, [pc, #20]	; (800a514 <CDC_Transmit_FS+0x48>)
 800a500:	f7fd fc5e 	bl	8007dc0 <USBD_CDC_TransmitPacket>
 800a504:	4603      	mov	r3, r0
 800a506:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a508:	7bfb      	ldrb	r3, [r7, #15]
}
 800a50a:	4618      	mov	r0, r3
 800a50c:	3710      	adds	r7, #16
 800a50e:	46bd      	mov	sp, r7
 800a510:	bd80      	pop	{r7, pc}
 800a512:	bf00      	nop
 800a514:	200018a4 	.word	0x200018a4

0800a518 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a518:	b480      	push	{r7}
 800a51a:	b083      	sub	sp, #12
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	4603      	mov	r3, r0
 800a520:	6039      	str	r1, [r7, #0]
 800a522:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a524:	683b      	ldr	r3, [r7, #0]
 800a526:	2212      	movs	r2, #18
 800a528:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a52a:	4b03      	ldr	r3, [pc, #12]	; (800a538 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a52c:	4618      	mov	r0, r3
 800a52e:	370c      	adds	r7, #12
 800a530:	46bd      	mov	sp, r7
 800a532:	bc80      	pop	{r7}
 800a534:	4770      	bx	lr
 800a536:	bf00      	nop
 800a538:	2000014c 	.word	0x2000014c

0800a53c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a53c:	b480      	push	{r7}
 800a53e:	b083      	sub	sp, #12
 800a540:	af00      	add	r7, sp, #0
 800a542:	4603      	mov	r3, r0
 800a544:	6039      	str	r1, [r7, #0]
 800a546:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a548:	683b      	ldr	r3, [r7, #0]
 800a54a:	2204      	movs	r2, #4
 800a54c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a54e:	4b03      	ldr	r3, [pc, #12]	; (800a55c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a550:	4618      	mov	r0, r3
 800a552:	370c      	adds	r7, #12
 800a554:	46bd      	mov	sp, r7
 800a556:	bc80      	pop	{r7}
 800a558:	4770      	bx	lr
 800a55a:	bf00      	nop
 800a55c:	20000160 	.word	0x20000160

0800a560 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a560:	b580      	push	{r7, lr}
 800a562:	b082      	sub	sp, #8
 800a564:	af00      	add	r7, sp, #0
 800a566:	4603      	mov	r3, r0
 800a568:	6039      	str	r1, [r7, #0]
 800a56a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a56c:	79fb      	ldrb	r3, [r7, #7]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d105      	bne.n	800a57e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a572:	683a      	ldr	r2, [r7, #0]
 800a574:	4907      	ldr	r1, [pc, #28]	; (800a594 <USBD_FS_ProductStrDescriptor+0x34>)
 800a576:	4808      	ldr	r0, [pc, #32]	; (800a598 <USBD_FS_ProductStrDescriptor+0x38>)
 800a578:	f7fe fc2b 	bl	8008dd2 <USBD_GetString>
 800a57c:	e004      	b.n	800a588 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a57e:	683a      	ldr	r2, [r7, #0]
 800a580:	4904      	ldr	r1, [pc, #16]	; (800a594 <USBD_FS_ProductStrDescriptor+0x34>)
 800a582:	4805      	ldr	r0, [pc, #20]	; (800a598 <USBD_FS_ProductStrDescriptor+0x38>)
 800a584:	f7fe fc25 	bl	8008dd2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a588:	4b02      	ldr	r3, [pc, #8]	; (800a594 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a58a:	4618      	mov	r0, r3
 800a58c:	3708      	adds	r7, #8
 800a58e:	46bd      	mov	sp, r7
 800a590:	bd80      	pop	{r7, pc}
 800a592:	bf00      	nop
 800a594:	20001c30 	.word	0x20001c30
 800a598:	0800b494 	.word	0x0800b494

0800a59c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b082      	sub	sp, #8
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	4603      	mov	r3, r0
 800a5a4:	6039      	str	r1, [r7, #0]
 800a5a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a5a8:	683a      	ldr	r2, [r7, #0]
 800a5aa:	4904      	ldr	r1, [pc, #16]	; (800a5bc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a5ac:	4804      	ldr	r0, [pc, #16]	; (800a5c0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a5ae:	f7fe fc10 	bl	8008dd2 <USBD_GetString>
  return USBD_StrDesc;
 800a5b2:	4b02      	ldr	r3, [pc, #8]	; (800a5bc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	3708      	adds	r7, #8
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	bd80      	pop	{r7, pc}
 800a5bc:	20001c30 	.word	0x20001c30
 800a5c0:	0800b49c 	.word	0x0800b49c

0800a5c4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a5c4:	b580      	push	{r7, lr}
 800a5c6:	b082      	sub	sp, #8
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	4603      	mov	r3, r0
 800a5cc:	6039      	str	r1, [r7, #0]
 800a5ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a5d0:	683b      	ldr	r3, [r7, #0]
 800a5d2:	221a      	movs	r2, #26
 800a5d4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a5d6:	f000 f843 	bl	800a660 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a5da:	4b02      	ldr	r3, [pc, #8]	; (800a5e4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a5dc:	4618      	mov	r0, r3
 800a5de:	3708      	adds	r7, #8
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	bd80      	pop	{r7, pc}
 800a5e4:	20000164 	.word	0x20000164

0800a5e8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	b082      	sub	sp, #8
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	4603      	mov	r3, r0
 800a5f0:	6039      	str	r1, [r7, #0]
 800a5f2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a5f4:	79fb      	ldrb	r3, [r7, #7]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d105      	bne.n	800a606 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a5fa:	683a      	ldr	r2, [r7, #0]
 800a5fc:	4907      	ldr	r1, [pc, #28]	; (800a61c <USBD_FS_ConfigStrDescriptor+0x34>)
 800a5fe:	4808      	ldr	r0, [pc, #32]	; (800a620 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a600:	f7fe fbe7 	bl	8008dd2 <USBD_GetString>
 800a604:	e004      	b.n	800a610 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a606:	683a      	ldr	r2, [r7, #0]
 800a608:	4904      	ldr	r1, [pc, #16]	; (800a61c <USBD_FS_ConfigStrDescriptor+0x34>)
 800a60a:	4805      	ldr	r0, [pc, #20]	; (800a620 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a60c:	f7fe fbe1 	bl	8008dd2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a610:	4b02      	ldr	r3, [pc, #8]	; (800a61c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a612:	4618      	mov	r0, r3
 800a614:	3708      	adds	r7, #8
 800a616:	46bd      	mov	sp, r7
 800a618:	bd80      	pop	{r7, pc}
 800a61a:	bf00      	nop
 800a61c:	20001c30 	.word	0x20001c30
 800a620:	0800b4b0 	.word	0x0800b4b0

0800a624 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a624:	b580      	push	{r7, lr}
 800a626:	b082      	sub	sp, #8
 800a628:	af00      	add	r7, sp, #0
 800a62a:	4603      	mov	r3, r0
 800a62c:	6039      	str	r1, [r7, #0]
 800a62e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a630:	79fb      	ldrb	r3, [r7, #7]
 800a632:	2b00      	cmp	r3, #0
 800a634:	d105      	bne.n	800a642 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a636:	683a      	ldr	r2, [r7, #0]
 800a638:	4907      	ldr	r1, [pc, #28]	; (800a658 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a63a:	4808      	ldr	r0, [pc, #32]	; (800a65c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a63c:	f7fe fbc9 	bl	8008dd2 <USBD_GetString>
 800a640:	e004      	b.n	800a64c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a642:	683a      	ldr	r2, [r7, #0]
 800a644:	4904      	ldr	r1, [pc, #16]	; (800a658 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a646:	4805      	ldr	r0, [pc, #20]	; (800a65c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a648:	f7fe fbc3 	bl	8008dd2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a64c:	4b02      	ldr	r3, [pc, #8]	; (800a658 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a64e:	4618      	mov	r0, r3
 800a650:	3708      	adds	r7, #8
 800a652:	46bd      	mov	sp, r7
 800a654:	bd80      	pop	{r7, pc}
 800a656:	bf00      	nop
 800a658:	20001c30 	.word	0x20001c30
 800a65c:	0800b4bc 	.word	0x0800b4bc

0800a660 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a660:	b580      	push	{r7, lr}
 800a662:	b084      	sub	sp, #16
 800a664:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a666:	4b0f      	ldr	r3, [pc, #60]	; (800a6a4 <Get_SerialNum+0x44>)
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a66c:	4b0e      	ldr	r3, [pc, #56]	; (800a6a8 <Get_SerialNum+0x48>)
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a672:	4b0e      	ldr	r3, [pc, #56]	; (800a6ac <Get_SerialNum+0x4c>)
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a678:	68fa      	ldr	r2, [r7, #12]
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	4413      	add	r3, r2
 800a67e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d009      	beq.n	800a69a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a686:	2208      	movs	r2, #8
 800a688:	4909      	ldr	r1, [pc, #36]	; (800a6b0 <Get_SerialNum+0x50>)
 800a68a:	68f8      	ldr	r0, [r7, #12]
 800a68c:	f000 f814 	bl	800a6b8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a690:	2204      	movs	r2, #4
 800a692:	4908      	ldr	r1, [pc, #32]	; (800a6b4 <Get_SerialNum+0x54>)
 800a694:	68b8      	ldr	r0, [r7, #8]
 800a696:	f000 f80f 	bl	800a6b8 <IntToUnicode>
  }
}
 800a69a:	bf00      	nop
 800a69c:	3710      	adds	r7, #16
 800a69e:	46bd      	mov	sp, r7
 800a6a0:	bd80      	pop	{r7, pc}
 800a6a2:	bf00      	nop
 800a6a4:	1ffff7e8 	.word	0x1ffff7e8
 800a6a8:	1ffff7ec 	.word	0x1ffff7ec
 800a6ac:	1ffff7f0 	.word	0x1ffff7f0
 800a6b0:	20000166 	.word	0x20000166
 800a6b4:	20000176 	.word	0x20000176

0800a6b8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a6b8:	b480      	push	{r7}
 800a6ba:	b087      	sub	sp, #28
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	60f8      	str	r0, [r7, #12]
 800a6c0:	60b9      	str	r1, [r7, #8]
 800a6c2:	4613      	mov	r3, r2
 800a6c4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	75fb      	strb	r3, [r7, #23]
 800a6ce:	e027      	b.n	800a720 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	0f1b      	lsrs	r3, r3, #28
 800a6d4:	2b09      	cmp	r3, #9
 800a6d6:	d80b      	bhi.n	800a6f0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a6d8:	7dfb      	ldrb	r3, [r7, #23]
 800a6da:	005b      	lsls	r3, r3, #1
 800a6dc:	461a      	mov	r2, r3
 800a6de:	68bb      	ldr	r3, [r7, #8]
 800a6e0:	4413      	add	r3, r2
 800a6e2:	68fa      	ldr	r2, [r7, #12]
 800a6e4:	0f12      	lsrs	r2, r2, #28
 800a6e6:	b2d2      	uxtb	r2, r2
 800a6e8:	3230      	adds	r2, #48	; 0x30
 800a6ea:	b2d2      	uxtb	r2, r2
 800a6ec:	701a      	strb	r2, [r3, #0]
 800a6ee:	e00a      	b.n	800a706 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a6f0:	7dfb      	ldrb	r3, [r7, #23]
 800a6f2:	005b      	lsls	r3, r3, #1
 800a6f4:	461a      	mov	r2, r3
 800a6f6:	68bb      	ldr	r3, [r7, #8]
 800a6f8:	4413      	add	r3, r2
 800a6fa:	68fa      	ldr	r2, [r7, #12]
 800a6fc:	0f12      	lsrs	r2, r2, #28
 800a6fe:	b2d2      	uxtb	r2, r2
 800a700:	3237      	adds	r2, #55	; 0x37
 800a702:	b2d2      	uxtb	r2, r2
 800a704:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	011b      	lsls	r3, r3, #4
 800a70a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a70c:	7dfb      	ldrb	r3, [r7, #23]
 800a70e:	005b      	lsls	r3, r3, #1
 800a710:	3301      	adds	r3, #1
 800a712:	68ba      	ldr	r2, [r7, #8]
 800a714:	4413      	add	r3, r2
 800a716:	2200      	movs	r2, #0
 800a718:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a71a:	7dfb      	ldrb	r3, [r7, #23]
 800a71c:	3301      	adds	r3, #1
 800a71e:	75fb      	strb	r3, [r7, #23]
 800a720:	7dfa      	ldrb	r2, [r7, #23]
 800a722:	79fb      	ldrb	r3, [r7, #7]
 800a724:	429a      	cmp	r2, r3
 800a726:	d3d3      	bcc.n	800a6d0 <IntToUnicode+0x18>
  }
}
 800a728:	bf00      	nop
 800a72a:	371c      	adds	r7, #28
 800a72c:	46bd      	mov	sp, r7
 800a72e:	bc80      	pop	{r7}
 800a730:	4770      	bx	lr
	...

0800a734 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a734:	b580      	push	{r7, lr}
 800a736:	b084      	sub	sp, #16
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	4a0d      	ldr	r2, [pc, #52]	; (800a778 <HAL_PCD_MspInit+0x44>)
 800a742:	4293      	cmp	r3, r2
 800a744:	d113      	bne.n	800a76e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a746:	4a0d      	ldr	r2, [pc, #52]	; (800a77c <HAL_PCD_MspInit+0x48>)
 800a748:	4b0c      	ldr	r3, [pc, #48]	; (800a77c <HAL_PCD_MspInit+0x48>)
 800a74a:	69db      	ldr	r3, [r3, #28]
 800a74c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a750:	61d3      	str	r3, [r2, #28]
 800a752:	4b0a      	ldr	r3, [pc, #40]	; (800a77c <HAL_PCD_MspInit+0x48>)
 800a754:	69db      	ldr	r3, [r3, #28]
 800a756:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a75a:	60fb      	str	r3, [r7, #12]
 800a75c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 800a75e:	2200      	movs	r2, #0
 800a760:	2105      	movs	r1, #5
 800a762:	2014      	movs	r0, #20
 800a764:	f7f6 faa2 	bl	8000cac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800a768:	2014      	movs	r0, #20
 800a76a:	f7f6 facb 	bl	8000d04 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a76e:	bf00      	nop
 800a770:	3710      	adds	r7, #16
 800a772:	46bd      	mov	sp, r7
 800a774:	bd80      	pop	{r7, pc}
 800a776:	bf00      	nop
 800a778:	40005c00 	.word	0x40005c00
 800a77c:	40021000 	.word	0x40021000

0800a780 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a780:	b580      	push	{r7, lr}
 800a782:	b082      	sub	sp, #8
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800a794:	4619      	mov	r1, r3
 800a796:	4610      	mov	r0, r2
 800a798:	f7fd fbf7 	bl	8007f8a <USBD_LL_SetupStage>
}
 800a79c:	bf00      	nop
 800a79e:	3708      	adds	r7, #8
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	bd80      	pop	{r7, pc}

0800a7a4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7a4:	b580      	push	{r7, lr}
 800a7a6:	b082      	sub	sp, #8
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	6078      	str	r0, [r7, #4]
 800a7ac:	460b      	mov	r3, r1
 800a7ae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800a7b6:	78fa      	ldrb	r2, [r7, #3]
 800a7b8:	6879      	ldr	r1, [r7, #4]
 800a7ba:	4613      	mov	r3, r2
 800a7bc:	009b      	lsls	r3, r3, #2
 800a7be:	4413      	add	r3, r2
 800a7c0:	00db      	lsls	r3, r3, #3
 800a7c2:	440b      	add	r3, r1
 800a7c4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800a7c8:	681a      	ldr	r2, [r3, #0]
 800a7ca:	78fb      	ldrb	r3, [r7, #3]
 800a7cc:	4619      	mov	r1, r3
 800a7ce:	f7fd fc27 	bl	8008020 <USBD_LL_DataOutStage>
}
 800a7d2:	bf00      	nop
 800a7d4:	3708      	adds	r7, #8
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	bd80      	pop	{r7, pc}

0800a7da <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7da:	b580      	push	{r7, lr}
 800a7dc:	b082      	sub	sp, #8
 800a7de:	af00      	add	r7, sp, #0
 800a7e0:	6078      	str	r0, [r7, #4]
 800a7e2:	460b      	mov	r3, r1
 800a7e4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800a7ec:	78fa      	ldrb	r2, [r7, #3]
 800a7ee:	6879      	ldr	r1, [r7, #4]
 800a7f0:	4613      	mov	r3, r2
 800a7f2:	009b      	lsls	r3, r3, #2
 800a7f4:	4413      	add	r3, r2
 800a7f6:	00db      	lsls	r3, r3, #3
 800a7f8:	440b      	add	r3, r1
 800a7fa:	333c      	adds	r3, #60	; 0x3c
 800a7fc:	681a      	ldr	r2, [r3, #0]
 800a7fe:	78fb      	ldrb	r3, [r7, #3]
 800a800:	4619      	mov	r1, r3
 800a802:	f7fd fc7e 	bl	8008102 <USBD_LL_DataInStage>
}
 800a806:	bf00      	nop
 800a808:	3708      	adds	r7, #8
 800a80a:	46bd      	mov	sp, r7
 800a80c:	bd80      	pop	{r7, pc}

0800a80e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a80e:	b580      	push	{r7, lr}
 800a810:	b082      	sub	sp, #8
 800a812:	af00      	add	r7, sp, #0
 800a814:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a81c:	4618      	mov	r0, r3
 800a81e:	f7fd fd8e 	bl	800833e <USBD_LL_SOF>
}
 800a822:	bf00      	nop
 800a824:	3708      	adds	r7, #8
 800a826:	46bd      	mov	sp, r7
 800a828:	bd80      	pop	{r7, pc}

0800a82a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a82a:	b580      	push	{r7, lr}
 800a82c:	b084      	sub	sp, #16
 800a82e:	af00      	add	r7, sp, #0
 800a830:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a832:	2301      	movs	r3, #1
 800a834:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	689b      	ldr	r3, [r3, #8]
 800a83a:	2b02      	cmp	r3, #2
 800a83c:	d001      	beq.n	800a842 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a83e:	f7f5 fe9b 	bl	8000578 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a848:	7bfa      	ldrb	r2, [r7, #15]
 800a84a:	4611      	mov	r1, r2
 800a84c:	4618      	mov	r0, r3
 800a84e:	f7fd fd3e 	bl	80082ce <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a858:	4618      	mov	r0, r3
 800a85a:	f7fd fcf7 	bl	800824c <USBD_LL_Reset>
}
 800a85e:	bf00      	nop
 800a860:	3710      	adds	r7, #16
 800a862:	46bd      	mov	sp, r7
 800a864:	bd80      	pop	{r7, pc}
	...

0800a868 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a868:	b580      	push	{r7, lr}
 800a86a:	b082      	sub	sp, #8
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a876:	4618      	mov	r0, r3
 800a878:	f7fd fd38 	bl	80082ec <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	699b      	ldr	r3, [r3, #24]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d005      	beq.n	800a890 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a884:	4a04      	ldr	r2, [pc, #16]	; (800a898 <HAL_PCD_SuspendCallback+0x30>)
 800a886:	4b04      	ldr	r3, [pc, #16]	; (800a898 <HAL_PCD_SuspendCallback+0x30>)
 800a888:	691b      	ldr	r3, [r3, #16]
 800a88a:	f043 0306 	orr.w	r3, r3, #6
 800a88e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a890:	bf00      	nop
 800a892:	3708      	adds	r7, #8
 800a894:	46bd      	mov	sp, r7
 800a896:	bd80      	pop	{r7, pc}
 800a898:	e000ed00 	.word	0xe000ed00

0800a89c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a89c:	b580      	push	{r7, lr}
 800a89e:	b082      	sub	sp, #8
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	f7fd fd32 	bl	8008314 <USBD_LL_Resume>
}
 800a8b0:	bf00      	nop
 800a8b2:	3708      	adds	r7, #8
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	bd80      	pop	{r7, pc}

0800a8b8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b082      	sub	sp, #8
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800a8c0:	4a28      	ldr	r2, [pc, #160]	; (800a964 <USBD_LL_Init+0xac>)
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	4a26      	ldr	r2, [pc, #152]	; (800a964 <USBD_LL_Init+0xac>)
 800a8cc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800a8d0:	4b24      	ldr	r3, [pc, #144]	; (800a964 <USBD_LL_Init+0xac>)
 800a8d2:	4a25      	ldr	r2, [pc, #148]	; (800a968 <USBD_LL_Init+0xb0>)
 800a8d4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a8d6:	4b23      	ldr	r3, [pc, #140]	; (800a964 <USBD_LL_Init+0xac>)
 800a8d8:	2208      	movs	r2, #8
 800a8da:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a8dc:	4b21      	ldr	r3, [pc, #132]	; (800a964 <USBD_LL_Init+0xac>)
 800a8de:	2202      	movs	r2, #2
 800a8e0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a8e2:	4b20      	ldr	r3, [pc, #128]	; (800a964 <USBD_LL_Init+0xac>)
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a8e8:	4b1e      	ldr	r3, [pc, #120]	; (800a964 <USBD_LL_Init+0xac>)
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a8ee:	4b1d      	ldr	r3, [pc, #116]	; (800a964 <USBD_LL_Init+0xac>)
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a8f4:	481b      	ldr	r0, [pc, #108]	; (800a964 <USBD_LL_Init+0xac>)
 800a8f6:	f7f6 ffed 	bl	80018d4 <HAL_PCD_Init>
 800a8fa:	4603      	mov	r3, r0
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d001      	beq.n	800a904 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800a900:	f7f5 fe3a 	bl	8000578 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a90a:	2318      	movs	r3, #24
 800a90c:	2200      	movs	r2, #0
 800a90e:	2100      	movs	r1, #0
 800a910:	f7f8 fc8d 	bl	800322e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a91a:	2358      	movs	r3, #88	; 0x58
 800a91c:	2200      	movs	r2, #0
 800a91e:	2180      	movs	r1, #128	; 0x80
 800a920:	f7f8 fc85 	bl	800322e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a92a:	23c0      	movs	r3, #192	; 0xc0
 800a92c:	2200      	movs	r2, #0
 800a92e:	2181      	movs	r1, #129	; 0x81
 800a930:	f7f8 fc7d 	bl	800322e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a93a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800a93e:	2200      	movs	r2, #0
 800a940:	2101      	movs	r1, #1
 800a942:	f7f8 fc74 	bl	800322e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a94c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a950:	2200      	movs	r2, #0
 800a952:	2182      	movs	r1, #130	; 0x82
 800a954:	f7f8 fc6b 	bl	800322e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800a958:	2300      	movs	r3, #0
}
 800a95a:	4618      	mov	r0, r3
 800a95c:	3708      	adds	r7, #8
 800a95e:	46bd      	mov	sp, r7
 800a960:	bd80      	pop	{r7, pc}
 800a962:	bf00      	nop
 800a964:	20001e30 	.word	0x20001e30
 800a968:	40005c00 	.word	0x40005c00

0800a96c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a96c:	b580      	push	{r7, lr}
 800a96e:	b084      	sub	sp, #16
 800a970:	af00      	add	r7, sp, #0
 800a972:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a974:	2300      	movs	r3, #0
 800a976:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a978:	2300      	movs	r3, #0
 800a97a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a982:	4618      	mov	r0, r3
 800a984:	f7f7 f8be 	bl	8001b04 <HAL_PCD_Start>
 800a988:	4603      	mov	r3, r0
 800a98a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a98c:	7bfb      	ldrb	r3, [r7, #15]
 800a98e:	4618      	mov	r0, r3
 800a990:	f000 f94e 	bl	800ac30 <USBD_Get_USB_Status>
 800a994:	4603      	mov	r3, r0
 800a996:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a998:	7bbb      	ldrb	r3, [r7, #14]
}
 800a99a:	4618      	mov	r0, r3
 800a99c:	3710      	adds	r7, #16
 800a99e:	46bd      	mov	sp, r7
 800a9a0:	bd80      	pop	{r7, pc}

0800a9a2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a9a2:	b580      	push	{r7, lr}
 800a9a4:	b084      	sub	sp, #16
 800a9a6:	af00      	add	r7, sp, #0
 800a9a8:	6078      	str	r0, [r7, #4]
 800a9aa:	4608      	mov	r0, r1
 800a9ac:	4611      	mov	r1, r2
 800a9ae:	461a      	mov	r2, r3
 800a9b0:	4603      	mov	r3, r0
 800a9b2:	70fb      	strb	r3, [r7, #3]
 800a9b4:	460b      	mov	r3, r1
 800a9b6:	70bb      	strb	r3, [r7, #2]
 800a9b8:	4613      	mov	r3, r2
 800a9ba:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9bc:	2300      	movs	r3, #0
 800a9be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a9ca:	78bb      	ldrb	r3, [r7, #2]
 800a9cc:	883a      	ldrh	r2, [r7, #0]
 800a9ce:	78f9      	ldrb	r1, [r7, #3]
 800a9d0:	f7f7 fa38 	bl	8001e44 <HAL_PCD_EP_Open>
 800a9d4:	4603      	mov	r3, r0
 800a9d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a9d8:	7bfb      	ldrb	r3, [r7, #15]
 800a9da:	4618      	mov	r0, r3
 800a9dc:	f000 f928 	bl	800ac30 <USBD_Get_USB_Status>
 800a9e0:	4603      	mov	r3, r0
 800a9e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a9e4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	3710      	adds	r7, #16
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	bd80      	pop	{r7, pc}

0800a9ee <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a9ee:	b580      	push	{r7, lr}
 800a9f0:	b084      	sub	sp, #16
 800a9f2:	af00      	add	r7, sp, #0
 800a9f4:	6078      	str	r0, [r7, #4]
 800a9f6:	460b      	mov	r3, r1
 800a9f8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9fa:	2300      	movs	r3, #0
 800a9fc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9fe:	2300      	movs	r3, #0
 800aa00:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aa08:	78fa      	ldrb	r2, [r7, #3]
 800aa0a:	4611      	mov	r1, r2
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	f7f7 fa7f 	bl	8001f10 <HAL_PCD_EP_Close>
 800aa12:	4603      	mov	r3, r0
 800aa14:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa16:	7bfb      	ldrb	r3, [r7, #15]
 800aa18:	4618      	mov	r0, r3
 800aa1a:	f000 f909 	bl	800ac30 <USBD_Get_USB_Status>
 800aa1e:	4603      	mov	r3, r0
 800aa20:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa22:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa24:	4618      	mov	r0, r3
 800aa26:	3710      	adds	r7, #16
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	bd80      	pop	{r7, pc}

0800aa2c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aa2c:	b580      	push	{r7, lr}
 800aa2e:	b084      	sub	sp, #16
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	6078      	str	r0, [r7, #4]
 800aa34:	460b      	mov	r3, r1
 800aa36:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa38:	2300      	movs	r3, #0
 800aa3a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aa46:	78fa      	ldrb	r2, [r7, #3]
 800aa48:	4611      	mov	r1, r2
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	f7f7 fb3f 	bl	80020ce <HAL_PCD_EP_SetStall>
 800aa50:	4603      	mov	r3, r0
 800aa52:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa54:	7bfb      	ldrb	r3, [r7, #15]
 800aa56:	4618      	mov	r0, r3
 800aa58:	f000 f8ea 	bl	800ac30 <USBD_Get_USB_Status>
 800aa5c:	4603      	mov	r3, r0
 800aa5e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa60:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa62:	4618      	mov	r0, r3
 800aa64:	3710      	adds	r7, #16
 800aa66:	46bd      	mov	sp, r7
 800aa68:	bd80      	pop	{r7, pc}

0800aa6a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aa6a:	b580      	push	{r7, lr}
 800aa6c:	b084      	sub	sp, #16
 800aa6e:	af00      	add	r7, sp, #0
 800aa70:	6078      	str	r0, [r7, #4]
 800aa72:	460b      	mov	r3, r1
 800aa74:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa76:	2300      	movs	r3, #0
 800aa78:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aa84:	78fa      	ldrb	r2, [r7, #3]
 800aa86:	4611      	mov	r1, r2
 800aa88:	4618      	mov	r0, r3
 800aa8a:	f7f7 fb80 	bl	800218e <HAL_PCD_EP_ClrStall>
 800aa8e:	4603      	mov	r3, r0
 800aa90:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa92:	7bfb      	ldrb	r3, [r7, #15]
 800aa94:	4618      	mov	r0, r3
 800aa96:	f000 f8cb 	bl	800ac30 <USBD_Get_USB_Status>
 800aa9a:	4603      	mov	r3, r0
 800aa9c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa9e:	7bbb      	ldrb	r3, [r7, #14]
}
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	3710      	adds	r7, #16
 800aaa4:	46bd      	mov	sp, r7
 800aaa6:	bd80      	pop	{r7, pc}

0800aaa8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aaa8:	b480      	push	{r7}
 800aaaa:	b085      	sub	sp, #20
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	6078      	str	r0, [r7, #4]
 800aab0:	460b      	mov	r3, r1
 800aab2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aaba:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800aabc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	da0c      	bge.n	800aade <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800aac4:	78fb      	ldrb	r3, [r7, #3]
 800aac6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aaca:	68f9      	ldr	r1, [r7, #12]
 800aacc:	1c5a      	adds	r2, r3, #1
 800aace:	4613      	mov	r3, r2
 800aad0:	009b      	lsls	r3, r3, #2
 800aad2:	4413      	add	r3, r2
 800aad4:	00db      	lsls	r3, r3, #3
 800aad6:	440b      	add	r3, r1
 800aad8:	3302      	adds	r3, #2
 800aada:	781b      	ldrb	r3, [r3, #0]
 800aadc:	e00b      	b.n	800aaf6 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800aade:	78fb      	ldrb	r3, [r7, #3]
 800aae0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aae4:	68f9      	ldr	r1, [r7, #12]
 800aae6:	4613      	mov	r3, r2
 800aae8:	009b      	lsls	r3, r3, #2
 800aaea:	4413      	add	r3, r2
 800aaec:	00db      	lsls	r3, r3, #3
 800aaee:	440b      	add	r3, r1
 800aaf0:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800aaf4:	781b      	ldrb	r3, [r3, #0]
  }
}
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	3714      	adds	r7, #20
 800aafa:	46bd      	mov	sp, r7
 800aafc:	bc80      	pop	{r7}
 800aafe:	4770      	bx	lr

0800ab00 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ab00:	b580      	push	{r7, lr}
 800ab02:	b084      	sub	sp, #16
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	6078      	str	r0, [r7, #4]
 800ab08:	460b      	mov	r3, r1
 800ab0a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab10:	2300      	movs	r3, #0
 800ab12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ab1a:	78fa      	ldrb	r2, [r7, #3]
 800ab1c:	4611      	mov	r1, r2
 800ab1e:	4618      	mov	r0, r3
 800ab20:	f7f7 f96b 	bl	8001dfa <HAL_PCD_SetAddress>
 800ab24:	4603      	mov	r3, r0
 800ab26:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab28:	7bfb      	ldrb	r3, [r7, #15]
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	f000 f880 	bl	800ac30 <USBD_Get_USB_Status>
 800ab30:	4603      	mov	r3, r0
 800ab32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ab34:	7bbb      	ldrb	r3, [r7, #14]
}
 800ab36:	4618      	mov	r0, r3
 800ab38:	3710      	adds	r7, #16
 800ab3a:	46bd      	mov	sp, r7
 800ab3c:	bd80      	pop	{r7, pc}

0800ab3e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ab3e:	b580      	push	{r7, lr}
 800ab40:	b086      	sub	sp, #24
 800ab42:	af00      	add	r7, sp, #0
 800ab44:	60f8      	str	r0, [r7, #12]
 800ab46:	607a      	str	r2, [r7, #4]
 800ab48:	461a      	mov	r2, r3
 800ab4a:	460b      	mov	r3, r1
 800ab4c:	72fb      	strb	r3, [r7, #11]
 800ab4e:	4613      	mov	r3, r2
 800ab50:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab52:	2300      	movs	r3, #0
 800ab54:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab56:	2300      	movs	r3, #0
 800ab58:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ab60:	893b      	ldrh	r3, [r7, #8]
 800ab62:	7af9      	ldrb	r1, [r7, #11]
 800ab64:	687a      	ldr	r2, [r7, #4]
 800ab66:	f7f7 fa6f 	bl	8002048 <HAL_PCD_EP_Transmit>
 800ab6a:	4603      	mov	r3, r0
 800ab6c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab6e:	7dfb      	ldrb	r3, [r7, #23]
 800ab70:	4618      	mov	r0, r3
 800ab72:	f000 f85d 	bl	800ac30 <USBD_Get_USB_Status>
 800ab76:	4603      	mov	r3, r0
 800ab78:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ab7a:	7dbb      	ldrb	r3, [r7, #22]
}
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	3718      	adds	r7, #24
 800ab80:	46bd      	mov	sp, r7
 800ab82:	bd80      	pop	{r7, pc}

0800ab84 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ab84:	b580      	push	{r7, lr}
 800ab86:	b086      	sub	sp, #24
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	60f8      	str	r0, [r7, #12]
 800ab8c:	607a      	str	r2, [r7, #4]
 800ab8e:	461a      	mov	r2, r3
 800ab90:	460b      	mov	r3, r1
 800ab92:	72fb      	strb	r3, [r7, #11]
 800ab94:	4613      	mov	r3, r2
 800ab96:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab98:	2300      	movs	r3, #0
 800ab9a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab9c:	2300      	movs	r3, #0
 800ab9e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800aba6:	893b      	ldrh	r3, [r7, #8]
 800aba8:	7af9      	ldrb	r1, [r7, #11]
 800abaa:	687a      	ldr	r2, [r7, #4]
 800abac:	f7f7 f9f8 	bl	8001fa0 <HAL_PCD_EP_Receive>
 800abb0:	4603      	mov	r3, r0
 800abb2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800abb4:	7dfb      	ldrb	r3, [r7, #23]
 800abb6:	4618      	mov	r0, r3
 800abb8:	f000 f83a 	bl	800ac30 <USBD_Get_USB_Status>
 800abbc:	4603      	mov	r3, r0
 800abbe:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800abc0:	7dbb      	ldrb	r3, [r7, #22]
}
 800abc2:	4618      	mov	r0, r3
 800abc4:	3718      	adds	r7, #24
 800abc6:	46bd      	mov	sp, r7
 800abc8:	bd80      	pop	{r7, pc}

0800abca <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800abca:	b580      	push	{r7, lr}
 800abcc:	b082      	sub	sp, #8
 800abce:	af00      	add	r7, sp, #0
 800abd0:	6078      	str	r0, [r7, #4]
 800abd2:	460b      	mov	r3, r1
 800abd4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800abdc:	78fa      	ldrb	r2, [r7, #3]
 800abde:	4611      	mov	r1, r2
 800abe0:	4618      	mov	r0, r3
 800abe2:	f7f7 fa1a 	bl	800201a <HAL_PCD_EP_GetRxCount>
 800abe6:	4603      	mov	r3, r0
}
 800abe8:	4618      	mov	r0, r3
 800abea:	3708      	adds	r7, #8
 800abec:	46bd      	mov	sp, r7
 800abee:	bd80      	pop	{r7, pc}

0800abf0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800abf0:	b480      	push	{r7}
 800abf2:	b083      	sub	sp, #12
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800abf8:	4b02      	ldr	r3, [pc, #8]	; (800ac04 <USBD_static_malloc+0x14>)
}
 800abfa:	4618      	mov	r0, r3
 800abfc:	370c      	adds	r7, #12
 800abfe:	46bd      	mov	sp, r7
 800ac00:	bc80      	pop	{r7}
 800ac02:	4770      	bx	lr
 800ac04:	200011b0 	.word	0x200011b0

0800ac08 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ac08:	b480      	push	{r7}
 800ac0a:	b083      	sub	sp, #12
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	6078      	str	r0, [r7, #4]

}
 800ac10:	bf00      	nop
 800ac12:	370c      	adds	r7, #12
 800ac14:	46bd      	mov	sp, r7
 800ac16:	bc80      	pop	{r7}
 800ac18:	4770      	bx	lr

0800ac1a <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac1a:	b480      	push	{r7}
 800ac1c:	b083      	sub	sp, #12
 800ac1e:	af00      	add	r7, sp, #0
 800ac20:	6078      	str	r0, [r7, #4]
 800ac22:	460b      	mov	r3, r1
 800ac24:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800ac26:	bf00      	nop
 800ac28:	370c      	adds	r7, #12
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	bc80      	pop	{r7}
 800ac2e:	4770      	bx	lr

0800ac30 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ac30:	b480      	push	{r7}
 800ac32:	b085      	sub	sp, #20
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	4603      	mov	r3, r0
 800ac38:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ac3e:	79fb      	ldrb	r3, [r7, #7]
 800ac40:	2b03      	cmp	r3, #3
 800ac42:	d817      	bhi.n	800ac74 <USBD_Get_USB_Status+0x44>
 800ac44:	a201      	add	r2, pc, #4	; (adr r2, 800ac4c <USBD_Get_USB_Status+0x1c>)
 800ac46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac4a:	bf00      	nop
 800ac4c:	0800ac5d 	.word	0x0800ac5d
 800ac50:	0800ac63 	.word	0x0800ac63
 800ac54:	0800ac69 	.word	0x0800ac69
 800ac58:	0800ac6f 	.word	0x0800ac6f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ac5c:	2300      	movs	r3, #0
 800ac5e:	73fb      	strb	r3, [r7, #15]
    break;
 800ac60:	e00b      	b.n	800ac7a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ac62:	2302      	movs	r3, #2
 800ac64:	73fb      	strb	r3, [r7, #15]
    break;
 800ac66:	e008      	b.n	800ac7a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ac68:	2301      	movs	r3, #1
 800ac6a:	73fb      	strb	r3, [r7, #15]
    break;
 800ac6c:	e005      	b.n	800ac7a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ac6e:	2302      	movs	r3, #2
 800ac70:	73fb      	strb	r3, [r7, #15]
    break;
 800ac72:	e002      	b.n	800ac7a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ac74:	2302      	movs	r3, #2
 800ac76:	73fb      	strb	r3, [r7, #15]
    break;
 800ac78:	bf00      	nop
  }
  return usb_status;
 800ac7a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	3714      	adds	r7, #20
 800ac80:	46bd      	mov	sp, r7
 800ac82:	bc80      	pop	{r7}
 800ac84:	4770      	bx	lr
 800ac86:	bf00      	nop

0800ac88 <ReadComand>:





void ReadComand(char * Bufer,int Leng){
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b082      	sub	sp, #8
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
 800ac90:	6039      	str	r1, [r7, #0]


 /// HAL_UARTEx_ReceiveToIdle_DMA(&huart1 ,RxData,1);
	HAL_UARTEx_ReceiveToIdle_DMA(&huart1 ,RxData,ReceivSize);
 800ac92:	2332      	movs	r3, #50	; 0x32
 800ac94:	b29b      	uxth	r3, r3
 800ac96:	461a      	mov	r2, r3
 800ac98:	4907      	ldr	r1, [pc, #28]	; (800acb8 <ReadComand+0x30>)
 800ac9a:	4808      	ldr	r0, [pc, #32]	; (800acbc <ReadComand+0x34>)
 800ac9c:	f7f9 fddc 	bl	8004858 <HAL_UARTEx_ReceiveToIdle_DMA>
  HAL_UART_Transmit_DMA (&huart1  ,Bufer,Leng);
 800aca0:	683b      	ldr	r3, [r7, #0]
 800aca2:	b29b      	uxth	r3, r3
 800aca4:	461a      	mov	r2, r3
 800aca6:	6879      	ldr	r1, [r7, #4]
 800aca8:	4804      	ldr	r0, [pc, #16]	; (800acbc <ReadComand+0x34>)
 800acaa:	f7f9 fd69 	bl	8004780 <HAL_UART_Transmit_DMA>

  //CDC_Transmit_FS(Bufer, Leng);



}
 800acae:	bf00      	nop
 800acb0:	3708      	adds	r7, #8
 800acb2:	46bd      	mov	sp, r7
 800acb4:	bd80      	pop	{r7, pc}
 800acb6:	bf00      	nop
 800acb8:	200013d0 	.word	0x200013d0
 800acbc:	20001818 	.word	0x20001818

0800acc0 <Print_GSM>:


//--------------  UART -------


void Print_GSM(char*data){
 800acc0:	b480      	push	{r7}
 800acc2:	b083      	sub	sp, #12
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	6078      	str	r0, [r7, #4]
//HAL_UART_Transmit_DMA (&huart1  ,data,  sizeof(data));
}
 800acc8:	bf00      	nop
 800acca:	370c      	adds	r7, #12
 800accc:	46bd      	mov	sp, r7
 800acce:	bc80      	pop	{r7}
 800acd0:	4770      	bx	lr
	...

0800acd4 <SendToUSB>:



static int SizeRxData;

void SendToUSB(void){
 800acd4:	b580      	push	{r7, lr}
 800acd6:	af00      	add	r7, sp, #0

  if((SizeRxData !=0) &&(statusDMA==0)){
 800acd8:	4b0c      	ldr	r3, [pc, #48]	; (800ad0c <SendToUSB+0x38>)
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d010      	beq.n	800ad02 <SendToUSB+0x2e>
 800ace0:	4b0b      	ldr	r3, [pc, #44]	; (800ad10 <SendToUSB+0x3c>)
 800ace2:	781b      	ldrb	r3, [r3, #0]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d10c      	bne.n	800ad02 <SendToUSB+0x2e>
	  statusDMA=1;
 800ace8:	4b09      	ldr	r3, [pc, #36]	; (800ad10 <SendToUSB+0x3c>)
 800acea:	2201      	movs	r2, #1
 800acec:	701a      	strb	r2, [r3, #0]
      CDC_Transmit_FS(RxData,SizeRxData);
 800acee:	4b07      	ldr	r3, [pc, #28]	; (800ad0c <SendToUSB+0x38>)
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	b29b      	uxth	r3, r3
 800acf4:	4619      	mov	r1, r3
 800acf6:	4807      	ldr	r0, [pc, #28]	; (800ad14 <SendToUSB+0x40>)
 800acf8:	f7ff fbe8 	bl	800a4cc <CDC_Transmit_FS>
      SizeRxData=0;
 800acfc:	4b03      	ldr	r3, [pc, #12]	; (800ad0c <SendToUSB+0x38>)
 800acfe:	2200      	movs	r2, #0
 800ad00:	601a      	str	r2, [r3, #0]
  }
  statusDMA=0;
 800ad02:	4b03      	ldr	r3, [pc, #12]	; (800ad10 <SendToUSB+0x3c>)
 800ad04:	2200      	movs	r2, #0
 800ad06:	701a      	strb	r2, [r3, #0]

}
 800ad08:	bf00      	nop
 800ad0a:	bd80      	pop	{r7, pc}
 800ad0c:	20001500 	.word	0x20001500
 800ad10:	200014fc 	.word	0x200014fc
 800ad14:	200013d0 	.word	0x200013d0

0800ad18 <HAL_UARTEx_RxEventCallback>:



 void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	b09e      	sub	sp, #120	; 0x78
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]
 800ad20:	460b      	mov	r3, r1
 800ad22:	807b      	strh	r3, [r7, #2]
      HAL_StatusTypeDef  error;
      unsigned char RxDataBuf[100];
      while (statusDMA==1);
 800ad24:	bf00      	nop
 800ad26:	4b3d      	ldr	r3, [pc, #244]	; (800ae1c <HAL_UARTEx_RxEventCallback+0x104>)
 800ad28:	781b      	ldrb	r3, [r3, #0]
 800ad2a:	2b01      	cmp	r3, #1
 800ad2c:	d0fb      	beq.n	800ad26 <HAL_UARTEx_RxEventCallback+0xe>
      statusDMA=1;
 800ad2e:	4b3b      	ldr	r3, [pc, #236]	; (800ae1c <HAL_UARTEx_RxEventCallback+0x104>)
 800ad30:	2201      	movs	r2, #1
 800ad32:	701a      	strb	r2, [r3, #0]
                error = HAL_UARTEx_ReceiveToIdle_DMA(&huart1 ,RxDataBuf,Size);
 800ad34:	887a      	ldrh	r2, [r7, #2]
 800ad36:	f107 030c 	add.w	r3, r7, #12
 800ad3a:	4619      	mov	r1, r3
 800ad3c:	4838      	ldr	r0, [pc, #224]	; (800ae20 <HAL_UARTEx_RxEventCallback+0x108>)
 800ad3e:	f7f9 fd8b 	bl	8004858 <HAL_UARTEx_ReceiveToIdle_DMA>
 800ad42:	4603      	mov	r3, r0
 800ad44:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

                                 if( error == HAL_OK){
 800ad48:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d122      	bne.n	800ad96 <HAL_UARTEx_RxEventCallback+0x7e>
                                  for (short var = 0;  var < Size; ) {
 800ad50:	2300      	movs	r3, #0
 800ad52:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 800ad56:	e018      	b.n	800ad8a <HAL_UARTEx_RxEventCallback+0x72>
                                	   if(SizeRxData>=300){break;}
 800ad58:	4b32      	ldr	r3, [pc, #200]	; (800ae24 <HAL_UARTEx_RxEventCallback+0x10c>)
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800ad60:	da53      	bge.n	800ae0a <HAL_UARTEx_RxEventCallback+0xf2>
                                        RxData[SizeRxData++] =
 800ad62:	4b30      	ldr	r3, [pc, #192]	; (800ae24 <HAL_UARTEx_RxEventCallback+0x10c>)
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	1c5a      	adds	r2, r3, #1
 800ad68:	492e      	ldr	r1, [pc, #184]	; (800ae24 <HAL_UARTEx_RxEventCallback+0x10c>)
 800ad6a:	600a      	str	r2, [r1, #0]
                                        		RxDataBuf[var++];
 800ad6c:	f9b7 1074 	ldrsh.w	r1, [r7, #116]	; 0x74
 800ad70:	b28a      	uxth	r2, r1
 800ad72:	3201      	adds	r2, #1
 800ad74:	b292      	uxth	r2, r2
 800ad76:	f8a7 2074 	strh.w	r2, [r7, #116]	; 0x74
 800ad7a:	460a      	mov	r2, r1
 800ad7c:	f107 0178 	add.w	r1, r7, #120	; 0x78
 800ad80:	440a      	add	r2, r1
 800ad82:	f812 1c6c 	ldrb.w	r1, [r2, #-108]
                                        RxData[SizeRxData++] =
 800ad86:	4a28      	ldr	r2, [pc, #160]	; (800ae28 <HAL_UARTEx_RxEventCallback+0x110>)
 800ad88:	54d1      	strb	r1, [r2, r3]
                                  for (short var = 0;  var < Size; ) {
 800ad8a:	f9b7 2074 	ldrsh.w	r2, [r7, #116]	; 0x74
 800ad8e:	887b      	ldrh	r3, [r7, #2]
 800ad90:	429a      	cmp	r2, r3
 800ad92:	dbe1      	blt.n	800ad58 <HAL_UARTEx_RxEventCallback+0x40>
 800ad94:	e03a      	b.n	800ae0c <HAL_UARTEx_RxEventCallback+0xf4>



                                 }else{

                               if( error ==HAL_BUSY){
 800ad96:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800ad9a:	2b02      	cmp	r3, #2
 800ad9c:	d130      	bne.n	800ae00 <HAL_UARTEx_RxEventCallback+0xe8>

                                 for (short var = 0;  var < Size;) {
 800ad9e:	2300      	movs	r3, #0
 800ada0:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
 800ada4:	e018      	b.n	800add8 <HAL_UARTEx_RxEventCallback+0xc0>
                                	 if(SizeRxData>=300){break;}
 800ada6:	4b1f      	ldr	r3, [pc, #124]	; (800ae24 <HAL_UARTEx_RxEventCallback+0x10c>)
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800adae:	da19      	bge.n	800ade4 <HAL_UARTEx_RxEventCallback+0xcc>
                                	 RxData[SizeRxData++] = RxDataBuf[var++];
 800adb0:	4b1c      	ldr	r3, [pc, #112]	; (800ae24 <HAL_UARTEx_RxEventCallback+0x10c>)
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	1c5a      	adds	r2, r3, #1
 800adb6:	491b      	ldr	r1, [pc, #108]	; (800ae24 <HAL_UARTEx_RxEventCallback+0x10c>)
 800adb8:	600a      	str	r2, [r1, #0]
 800adba:	f9b7 1072 	ldrsh.w	r1, [r7, #114]	; 0x72
 800adbe:	b28a      	uxth	r2, r1
 800adc0:	3201      	adds	r2, #1
 800adc2:	b292      	uxth	r2, r2
 800adc4:	f8a7 2072 	strh.w	r2, [r7, #114]	; 0x72
 800adc8:	460a      	mov	r2, r1
 800adca:	f107 0178 	add.w	r1, r7, #120	; 0x78
 800adce:	440a      	add	r2, r1
 800add0:	f812 1c6c 	ldrb.w	r1, [r2, #-108]
 800add4:	4a14      	ldr	r2, [pc, #80]	; (800ae28 <HAL_UARTEx_RxEventCallback+0x110>)
 800add6:	54d1      	strb	r1, [r2, r3]
                                 for (short var = 0;  var < Size;) {
 800add8:	f9b7 2072 	ldrsh.w	r2, [r7, #114]	; 0x72
 800addc:	887b      	ldrh	r3, [r7, #2]
 800adde:	429a      	cmp	r2, r3
 800ade0:	dbe1      	blt.n	800ada6 <HAL_UARTEx_RxEventCallback+0x8e>
 800ade2:	e00d      	b.n	800ae00 <HAL_UARTEx_RxEventCallback+0xe8>
                                	 if(SizeRxData>=300){break;}
 800ade4:	bf00      	nop
                                 }


                                 }
                                while( error !=HAL_OK){
 800ade6:	e00b      	b.n	800ae00 <HAL_UARTEx_RxEventCallback+0xe8>
                                 MX_USART1_UART_Init();
 800ade8:	f7f5 fcd4 	bl	8000794 <MX_USART1_UART_Init>
                                 error =  HAL_UARTEx_ReceiveToIdle_DMA(&huart1 ,RxData,ReceivSize);
 800adec:	2332      	movs	r3, #50	; 0x32
 800adee:	b29b      	uxth	r3, r3
 800adf0:	461a      	mov	r2, r3
 800adf2:	490d      	ldr	r1, [pc, #52]	; (800ae28 <HAL_UARTEx_RxEventCallback+0x110>)
 800adf4:	480a      	ldr	r0, [pc, #40]	; (800ae20 <HAL_UARTEx_RxEventCallback+0x108>)
 800adf6:	f7f9 fd2f 	bl	8004858 <HAL_UARTEx_ReceiveToIdle_DMA>
 800adfa:	4603      	mov	r3, r0
 800adfc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
                                while( error !=HAL_OK){
 800ae00:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d1ef      	bne.n	800ade8 <HAL_UARTEx_RxEventCallback+0xd0>
 800ae08:	e000      	b.n	800ae0c <HAL_UARTEx_RxEventCallback+0xf4>
                                	   if(SizeRxData>=300){break;}
 800ae0a:	bf00      	nop
                                // CDC_Transmit_FS(RxData,Size);
                                }}

                                 statusDMA=0;
 800ae0c:	4b03      	ldr	r3, [pc, #12]	; (800ae1c <HAL_UARTEx_RxEventCallback+0x104>)
 800ae0e:	2200      	movs	r2, #0
 800ae10:	701a      	strb	r2, [r3, #0]
}
 800ae12:	bf00      	nop
 800ae14:	3778      	adds	r7, #120	; 0x78
 800ae16:	46bd      	mov	sp, r7
 800ae18:	bd80      	pop	{r7, pc}
 800ae1a:	bf00      	nop
 800ae1c:	200014fc 	.word	0x200014fc
 800ae20:	20001818 	.word	0x20001818
 800ae24:	20001500 	.word	0x20001500
 800ae28:	200013d0 	.word	0x200013d0

0800ae2c <ReadUart>:


 HAL_StatusTypeDef  ReadUart(void){ return HAL_UARTEx_ReceiveToIdle_DMA(&huart1 ,RxData, ReceivSize);}
 800ae2c:	b580      	push	{r7, lr}
 800ae2e:	af00      	add	r7, sp, #0
 800ae30:	2332      	movs	r3, #50	; 0x32
 800ae32:	b29b      	uxth	r3, r3
 800ae34:	461a      	mov	r2, r3
 800ae36:	4903      	ldr	r1, [pc, #12]	; (800ae44 <ReadUart+0x18>)
 800ae38:	4803      	ldr	r0, [pc, #12]	; (800ae48 <ReadUart+0x1c>)
 800ae3a:	f7f9 fd0d 	bl	8004858 <HAL_UARTEx_ReceiveToIdle_DMA>
 800ae3e:	4603      	mov	r3, r0
 800ae40:	4618      	mov	r0, r3
 800ae42:	bd80      	pop	{r7, pc}
 800ae44:	200013d0 	.word	0x200013d0
 800ae48:	20001818 	.word	0x20001818

0800ae4c <ATcomand>:

///////////////////////////////////////////////////////////////////////////////
////               ����� ������                          //////////////////////
///////////////////////////////////////////////////////////////////////////////

void ATcomand(char Comand){
 800ae4c:	b580      	push	{r7, lr}
 800ae4e:	b084      	sub	sp, #16
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	4603      	mov	r3, r0
 800ae54:	71fb      	strb	r3, [r7, #7]
PWRKEY_OF;
CantSmsOK=0;
COMANDA=AT;}}*/

//�������� �������� �������
if(!(COMPARE==COMANDA)){SEND=1; ResComand=0; }
 800ae56:	4ba2      	ldr	r3, [pc, #648]	; (800b0e0 <ATcomand+0x294>)
 800ae58:	781a      	ldrb	r2, [r3, #0]
 800ae5a:	4ba2      	ldr	r3, [pc, #648]	; (800b0e4 <ATcomand+0x298>)
 800ae5c:	781b      	ldrb	r3, [r3, #0]
 800ae5e:	429a      	cmp	r2, r3
 800ae60:	d005      	beq.n	800ae6e <ATcomand+0x22>
 800ae62:	4ba1      	ldr	r3, [pc, #644]	; (800b0e8 <ATcomand+0x29c>)
 800ae64:	2201      	movs	r2, #1
 800ae66:	701a      	strb	r2, [r3, #0]
 800ae68:	4ba0      	ldr	r3, [pc, #640]	; (800b0ec <ATcomand+0x2a0>)
 800ae6a:	2200      	movs	r2, #0
 800ae6c:	701a      	strb	r2, [r3, #0]

    if(SEND==1){ CantSmsOK++;
 800ae6e:	4b9e      	ldr	r3, [pc, #632]	; (800b0e8 <ATcomand+0x29c>)
 800ae70:	781b      	ldrb	r3, [r3, #0]
 800ae72:	2b01      	cmp	r3, #1
 800ae74:	f040 812f 	bne.w	800b0d6 <ATcomand+0x28a>
 800ae78:	4b9d      	ldr	r3, [pc, #628]	; (800b0f0 <ATcomand+0x2a4>)
 800ae7a:	781b      	ldrb	r3, [r3, #0]
 800ae7c:	3301      	adds	r3, #1
 800ae7e:	b2da      	uxtb	r2, r3
 800ae80:	4b9b      	ldr	r3, [pc, #620]	; (800b0f0 <ATcomand+0x2a4>)
 800ae82:	701a      	strb	r2, [r3, #0]
    if(CantSmsOK>1000000){Instal_GSN_GPS=0; TimeInst=0;    PWRKEY_ON;   Seep_OF();  delay (2000);  PWRKEY_OF;CantSmsOK=0; COMANDA=AT;}

      SEND=0;
 800ae84:	4b98      	ldr	r3, [pc, #608]	; (800b0e8 <ATcomand+0x29c>)
 800ae86:	2200      	movs	r2, #0
 800ae88:	701a      	strb	r2, [r3, #0]
   COMPARE=COMANDA;
 800ae8a:	4b96      	ldr	r3, [pc, #600]	; (800b0e4 <ATcomand+0x298>)
 800ae8c:	781a      	ldrb	r2, [r3, #0]
 800ae8e:	4b94      	ldr	r3, [pc, #592]	; (800b0e0 <ATcomand+0x294>)
 800ae90:	701a      	strb	r2, [r3, #0]

  switch (COMANDA){
 800ae92:	4b94      	ldr	r3, [pc, #592]	; (800b0e4 <ATcomand+0x298>)
 800ae94:	781b      	ldrb	r3, [r3, #0]
 800ae96:	3b01      	subs	r3, #1
 800ae98:	2b15      	cmp	r3, #21
 800ae9a:	f200 811c 	bhi.w	800b0d6 <ATcomand+0x28a>
 800ae9e:	a201      	add	r2, pc, #4	; (adr r2, 800aea4 <ATcomand+0x58>)
 800aea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aea4:	0800aefd 	.word	0x0800aefd
 800aea8:	0800af17 	.word	0x0800af17
 800aeac:	0800af35 	.word	0x0800af35
 800aeb0:	0800af45 	.word	0x0800af45
 800aeb4:	0800af4d 	.word	0x0800af4d
 800aeb8:	0800af55 	.word	0x0800af55
 800aebc:	0800b0d7 	.word	0x0800b0d7
 800aec0:	0800af5d 	.word	0x0800af5d
 800aec4:	0800af65 	.word	0x0800af65
 800aec8:	0800af7d 	.word	0x0800af7d
 800aecc:	0800b0bf 	.word	0x0800b0bf
 800aed0:	0800b0cf 	.word	0x0800b0cf
 800aed4:	0800af3d 	.word	0x0800af3d
 800aed8:	0800af85 	.word	0x0800af85
 800aedc:	0800af95 	.word	0x0800af95
 800aee0:	0800b053 	.word	0x0800b053
 800aee4:	0800b0d7 	.word	0x0800b0d7
 800aee8:	0800af6d 	.word	0x0800af6d
 800aeec:	0800af75 	.word	0x0800af75
 800aef0:	0800af8d 	.word	0x0800af8d
 800aef4:	0800b0d7 	.word	0x0800b0d7
 800aef8:	0800b0c7 	.word	0x0800b0c7
  case AT: SLEEP_OF ; osDelay(2000); Print_GSM("ATE0\r");   break;           //�������� ������
 800aefc:	2200      	movs	r2, #0
 800aefe:	2102      	movs	r1, #2
 800af00:	487c      	ldr	r0, [pc, #496]	; (800b0f4 <ATcomand+0x2a8>)
 800af02:	f7f6 fcb5 	bl	8001870 <HAL_GPIO_WritePin>
 800af06:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800af0a:	f7fe f8a9 	bl	8009060 <osDelay>
 800af0e:	487a      	ldr	r0, [pc, #488]	; (800b0f8 <ATcomand+0x2ac>)
 800af10:	f7ff fed6 	bl	800acc0 <Print_GSM>
 800af14:	e0df      	b.n	800b0d6 <ATcomand+0x28a>
  case ATE0: SLEEP_OF ; ERRORAT++; Print_GSM("ATE0\r");  break;          //��������� ���
 800af16:	2200      	movs	r2, #0
 800af18:	2102      	movs	r1, #2
 800af1a:	4876      	ldr	r0, [pc, #472]	; (800b0f4 <ATcomand+0x2a8>)
 800af1c:	f7f6 fca8 	bl	8001870 <HAL_GPIO_WritePin>
 800af20:	4b76      	ldr	r3, [pc, #472]	; (800b0fc <ATcomand+0x2b0>)
 800af22:	781b      	ldrb	r3, [r3, #0]
 800af24:	3301      	adds	r3, #1
 800af26:	b2da      	uxtb	r2, r3
 800af28:	4b74      	ldr	r3, [pc, #464]	; (800b0fc <ATcomand+0x2b0>)
 800af2a:	701a      	strb	r2, [r3, #0]
 800af2c:	4872      	ldr	r0, [pc, #456]	; (800b0f8 <ATcomand+0x2ac>)
 800af2e:	f7ff fec7 	bl	800acc0 <Print_GSM>
 800af32:	e0d0      	b.n	800b0d6 <ATcomand+0x28a>
  case ATCREG: Print_GSM("AT+CREG?\r");  break;      //��������� � �����
 800af34:	4872      	ldr	r0, [pc, #456]	; (800b100 <ATcomand+0x2b4>)
 800af36:	f7ff fec3 	bl	800acc0 <Print_GSM>
 800af3a:	e0cc      	b.n	800b0d6 <ATcomand+0x28a>
  case ATCMGF: Print_GSM("AT+CMGF=1\r");  break;      //��������� ����� ���
 800af3c:	4871      	ldr	r0, [pc, #452]	; (800b104 <ATcomand+0x2b8>)
 800af3e:	f7ff febf 	bl	800acc0 <Print_GSM>
 800af42:	e0c8      	b.n	800b0d6 <ATcomand+0x28a>
  case ATCSQ: Print_GSM("AT+CSQ\r");  break;         //������ GSM
 800af44:	4870      	ldr	r0, [pc, #448]	; (800b108 <ATcomand+0x2bc>)
 800af46:	f7ff febb 	bl	800acc0 <Print_GSM>
 800af4a:	e0c4      	b.n	800b0d6 <ATcomand+0x28a>
  case ATGSN: Print_GSM("AT+GSN\r");  break;         //IMEI
 800af4c:	486f      	ldr	r0, [pc, #444]	; (800b10c <ATcomand+0x2c0>)
 800af4e:	f7ff feb7 	bl	800acc0 <Print_GSM>
 800af52:	e0c0      	b.n	800b0d6 <ATcomand+0x28a>
  case ATCBC: Print_GSM("AT+CBC\r");  break;         //����� ������
 800af54:	486e      	ldr	r0, [pc, #440]	; (800b110 <ATcomand+0x2c4>)
 800af56:	f7ff feb3 	bl	800acc0 <Print_GSM>
 800af5a:	e0bc      	b.n	800b0d6 <ATcomand+0x28a>
  //case ATMGD:  Print_GSM("AT+CMGD=1,4\r");  break;    //�������� �� �������� ���
  case ATMGR:  Print_GSM("AT+CMGR=1\r");  break;    //������ ��� �
 800af5c:	486d      	ldr	r0, [pc, #436]	; (800b114 <ATcomand+0x2c8>)
 800af5e:	f7ff feaf 	bl	800acc0 <Print_GSM>
 800af62:	e0b8      	b.n	800b0d6 <ATcomand+0x28a>
  case ATCPOWD: Print_GSM("AT+CPOWD=1\r");  break;    //PAWER OF
 800af64:	486c      	ldr	r0, [pc, #432]	; (800b118 <ATcomand+0x2cc>)
 800af66:	f7ff feab 	bl	800acc0 <Print_GSM>
 800af6a:	e0b4      	b.n	800b0d6 <ATcomand+0x28a>
  case CSCLK: Print_GSM("AT+CSCLK=1\r");  break;    //Sleep  AT+CSCLK=1
 800af6c:	486b      	ldr	r0, [pc, #428]	; (800b11c <ATcomand+0x2d0>)
 800af6e:	f7ff fea7 	bl	800acc0 <Print_GSM>
 800af72:	e0b0      	b.n	800b0d6 <ATcomand+0x28a>
  case CGNSTST:  Print_GSM("AT+CGNSTST=1\r");  break;    //RESET GSM
 800af74:	486a      	ldr	r0, [pc, #424]	; (800b120 <ATcomand+0x2d4>)
 800af76:	f7ff fea3 	bl	800acc0 <Print_GSM>
 800af7a:	e0ac      	b.n	800b0d6 <ATcomand+0x28a>
  case ATCPIN: Print_GSM("AT+CPIN?\r");  break;       //�������� �������� ������
 800af7c:	4869      	ldr	r0, [pc, #420]	; (800b124 <ATcomand+0x2d8>)
 800af7e:	f7ff fe9f 	bl	800acc0 <Print_GSM>
 800af82:	e0a8      	b.n	800b0d6 <ATcomand+0x28a>
  case ATCMGDA: Print_GSM("AT+CMGD=1,4\r");  break;       //�������� �� ���
 800af84:	4868      	ldr	r0, [pc, #416]	; (800b128 <ATcomand+0x2dc>)
 800af86:	f7ff fe9b 	bl	800acc0 <Print_GSM>
 800af8a:	e0a4      	b.n	800b0d6 <ATcomand+0x28a>
  case CNETLIGHT: Print_GSM("AT+CNETLIGHT=0\r");  break;       //��������� LED ��������� status work
 800af8c:	4867      	ldr	r0, [pc, #412]	; (800b12c <ATcomand+0x2e0>)
 800af8e:	f7ff fe97 	bl	800acc0 <Print_GSM>
 800af92:	e0a0      	b.n	800b0d6 <ATcomand+0x28a>
 //case CFUN1: Print_GSM("AT+CFUN=1\r");  break;       //��������� LED ��������� ��������
case   ATCMGS:
	Cauntidx = 0;
 800af94:	4b66      	ldr	r3, [pc, #408]	; (800b130 <ATcomand+0x2e4>)
 800af96:	2200      	movs	r2, #0
 800af98:	701a      	strb	r2, [r3, #0]
   for(char i = 0; !(Strin[i]==0); )
 800af9a:	2300      	movs	r3, #0
 800af9c:	73fb      	strb	r3, [r7, #15]
 800af9e:	e00e      	b.n	800afbe <ATcomand+0x172>
   {StringSMS[Cauntidx++] = Strin[i++] ; }
 800afa0:	4b63      	ldr	r3, [pc, #396]	; (800b130 <ATcomand+0x2e4>)
 800afa2:	781b      	ldrb	r3, [r3, #0]
 800afa4:	1c5a      	adds	r2, r3, #1
 800afa6:	b2d1      	uxtb	r1, r2
 800afa8:	4a61      	ldr	r2, [pc, #388]	; (800b130 <ATcomand+0x2e4>)
 800afaa:	7011      	strb	r1, [r2, #0]
 800afac:	461a      	mov	r2, r3
 800afae:	7bfb      	ldrb	r3, [r7, #15]
 800afb0:	1c59      	adds	r1, r3, #1
 800afb2:	73f9      	strb	r1, [r7, #15]
 800afb4:	4619      	mov	r1, r3
 800afb6:	4b5f      	ldr	r3, [pc, #380]	; (800b134 <ATcomand+0x2e8>)
 800afb8:	5c59      	ldrb	r1, [r3, r1]
 800afba:	4b5f      	ldr	r3, [pc, #380]	; (800b138 <ATcomand+0x2ec>)
 800afbc:	5499      	strb	r1, [r3, r2]
   for(char i = 0; !(Strin[i]==0); )
 800afbe:	7bfb      	ldrb	r3, [r7, #15]
 800afc0:	4a5c      	ldr	r2, [pc, #368]	; (800b134 <ATcomand+0x2e8>)
 800afc2:	5cd3      	ldrb	r3, [r2, r3]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d1eb      	bne.n	800afa0 <ATcomand+0x154>
     StringSMS[Cauntidx++] ='"';
 800afc8:	4b59      	ldr	r3, [pc, #356]	; (800b130 <ATcomand+0x2e4>)
 800afca:	781b      	ldrb	r3, [r3, #0]
 800afcc:	1c5a      	adds	r2, r3, #1
 800afce:	b2d1      	uxtb	r1, r2
 800afd0:	4a57      	ldr	r2, [pc, #348]	; (800b130 <ATcomand+0x2e4>)
 800afd2:	7011      	strb	r1, [r2, #0]
 800afd4:	461a      	mov	r2, r3
 800afd6:	4b58      	ldr	r3, [pc, #352]	; (800b138 <ATcomand+0x2ec>)
 800afd8:	2122      	movs	r1, #34	; 0x22
 800afda:	5499      	strb	r1, [r3, r2]
      for(char i = 0; !(SMS.NambePhon[i]==0); )
 800afdc:	2300      	movs	r3, #0
 800afde:	73bb      	strb	r3, [r7, #14]
 800afe0:	e00f      	b.n	800b002 <ATcomand+0x1b6>
   { StringSMS[Cauntidx++] = SMS.NambePhon[i++] ; }
 800afe2:	4b53      	ldr	r3, [pc, #332]	; (800b130 <ATcomand+0x2e4>)
 800afe4:	781b      	ldrb	r3, [r3, #0]
 800afe6:	1c5a      	adds	r2, r3, #1
 800afe8:	b2d1      	uxtb	r1, r2
 800afea:	4a51      	ldr	r2, [pc, #324]	; (800b130 <ATcomand+0x2e4>)
 800afec:	7011      	strb	r1, [r2, #0]
 800afee:	461a      	mov	r2, r3
 800aff0:	7bbb      	ldrb	r3, [r7, #14]
 800aff2:	1c59      	adds	r1, r3, #1
 800aff4:	73b9      	strb	r1, [r7, #14]
 800aff6:	4619      	mov	r1, r3
 800aff8:	4b50      	ldr	r3, [pc, #320]	; (800b13c <ATcomand+0x2f0>)
 800affa:	440b      	add	r3, r1
 800affc:	7859      	ldrb	r1, [r3, #1]
 800affe:	4b4e      	ldr	r3, [pc, #312]	; (800b138 <ATcomand+0x2ec>)
 800b000:	5499      	strb	r1, [r3, r2]
      for(char i = 0; !(SMS.NambePhon[i]==0); )
 800b002:	7bbb      	ldrb	r3, [r7, #14]
 800b004:	4a4d      	ldr	r2, [pc, #308]	; (800b13c <ATcomand+0x2f0>)
 800b006:	4413      	add	r3, r2
 800b008:	785b      	ldrb	r3, [r3, #1]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d1e9      	bne.n	800afe2 <ATcomand+0x196>
     StringSMS[Cauntidx++] ='"';
 800b00e:	4b48      	ldr	r3, [pc, #288]	; (800b130 <ATcomand+0x2e4>)
 800b010:	781b      	ldrb	r3, [r3, #0]
 800b012:	1c5a      	adds	r2, r3, #1
 800b014:	b2d1      	uxtb	r1, r2
 800b016:	4a46      	ldr	r2, [pc, #280]	; (800b130 <ATcomand+0x2e4>)
 800b018:	7011      	strb	r1, [r2, #0]
 800b01a:	461a      	mov	r2, r3
 800b01c:	4b46      	ldr	r3, [pc, #280]	; (800b138 <ATcomand+0x2ec>)
 800b01e:	2122      	movs	r1, #34	; 0x22
 800b020:	5499      	strb	r1, [r3, r2]
     StringSMS[Cauntidx++] ='\r';
 800b022:	4b43      	ldr	r3, [pc, #268]	; (800b130 <ATcomand+0x2e4>)
 800b024:	781b      	ldrb	r3, [r3, #0]
 800b026:	1c5a      	adds	r2, r3, #1
 800b028:	b2d1      	uxtb	r1, r2
 800b02a:	4a41      	ldr	r2, [pc, #260]	; (800b130 <ATcomand+0x2e4>)
 800b02c:	7011      	strb	r1, [r2, #0]
 800b02e:	461a      	mov	r2, r3
 800b030:	4b41      	ldr	r3, [pc, #260]	; (800b138 <ATcomand+0x2ec>)
 800b032:	210d      	movs	r1, #13
 800b034:	5499      	strb	r1, [r3, r2]
////////////������� � ��������///////////////
       /// for(char i = 0; !( SMS.TextWRid[i]==0); )
   //{ StringSMS[idx++] = SMS.TextWRid[i++] ; }
   //  StringSMS[idx++] =0x1A;
    ////////////////////
     StringSMS[Cauntidx++] =0;
 800b036:	4b3e      	ldr	r3, [pc, #248]	; (800b130 <ATcomand+0x2e4>)
 800b038:	781b      	ldrb	r3, [r3, #0]
 800b03a:	1c5a      	adds	r2, r3, #1
 800b03c:	b2d1      	uxtb	r1, r2
 800b03e:	4a3c      	ldr	r2, [pc, #240]	; (800b130 <ATcomand+0x2e4>)
 800b040:	7011      	strb	r1, [r2, #0]
 800b042:	461a      	mov	r2, r3
 800b044:	4b3c      	ldr	r3, [pc, #240]	; (800b138 <ATcomand+0x2ec>)
 800b046:	2100      	movs	r1, #0
 800b048:	5499      	strb	r1, [r3, r2]
    Print_GSM(StringSMS);
 800b04a:	483b      	ldr	r0, [pc, #236]	; (800b138 <ATcomand+0x2ec>)
 800b04c:	f7ff fe38 	bl	800acc0 <Print_GSM>
  break;
 800b050:	e041      	b.n	800b0d6 <ATcomand+0x28a>

  case   SMSSEND:
	  Cauntidx = 0;
 800b052:	4b37      	ldr	r3, [pc, #220]	; (800b130 <ATcomand+0x2e4>)
 800b054:	2200      	movs	r2, #0
 800b056:	701a      	strb	r2, [r3, #0]

   for(char i = 0; !( SMS.TextWRid[i]==0); )
 800b058:	2300      	movs	r3, #0
 800b05a:	737b      	strb	r3, [r7, #13]
 800b05c:	e010      	b.n	800b080 <ATcomand+0x234>
   { StringSMS[Cauntidx++] = SMS.TextWRid[i++] ; }
 800b05e:	4b34      	ldr	r3, [pc, #208]	; (800b130 <ATcomand+0x2e4>)
 800b060:	781b      	ldrb	r3, [r3, #0]
 800b062:	1c5a      	adds	r2, r3, #1
 800b064:	b2d1      	uxtb	r1, r2
 800b066:	4a32      	ldr	r2, [pc, #200]	; (800b130 <ATcomand+0x2e4>)
 800b068:	7011      	strb	r1, [r2, #0]
 800b06a:	461a      	mov	r2, r3
 800b06c:	7b7b      	ldrb	r3, [r7, #13]
 800b06e:	1c59      	adds	r1, r3, #1
 800b070:	7379      	strb	r1, [r7, #13]
 800b072:	4619      	mov	r1, r3
 800b074:	4b31      	ldr	r3, [pc, #196]	; (800b13c <ATcomand+0x2f0>)
 800b076:	440b      	add	r3, r1
 800b078:	f893 10dd 	ldrb.w	r1, [r3, #221]	; 0xdd
 800b07c:	4b2e      	ldr	r3, [pc, #184]	; (800b138 <ATcomand+0x2ec>)
 800b07e:	5499      	strb	r1, [r3, r2]
   for(char i = 0; !( SMS.TextWRid[i]==0); )
 800b080:	7b7b      	ldrb	r3, [r7, #13]
 800b082:	4a2e      	ldr	r2, [pc, #184]	; (800b13c <ATcomand+0x2f0>)
 800b084:	4413      	add	r3, r2
 800b086:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d1e7      	bne.n	800b05e <ATcomand+0x212>
     StringSMS[Cauntidx++] =0x1A;
 800b08e:	4b28      	ldr	r3, [pc, #160]	; (800b130 <ATcomand+0x2e4>)
 800b090:	781b      	ldrb	r3, [r3, #0]
 800b092:	1c5a      	adds	r2, r3, #1
 800b094:	b2d1      	uxtb	r1, r2
 800b096:	4a26      	ldr	r2, [pc, #152]	; (800b130 <ATcomand+0x2e4>)
 800b098:	7011      	strb	r1, [r2, #0]
 800b09a:	461a      	mov	r2, r3
 800b09c:	4b26      	ldr	r3, [pc, #152]	; (800b138 <ATcomand+0x2ec>)
 800b09e:	211a      	movs	r1, #26
 800b0a0:	5499      	strb	r1, [r3, r2]
     StringSMS[Cauntidx++] =0;
 800b0a2:	4b23      	ldr	r3, [pc, #140]	; (800b130 <ATcomand+0x2e4>)
 800b0a4:	781b      	ldrb	r3, [r3, #0]
 800b0a6:	1c5a      	adds	r2, r3, #1
 800b0a8:	b2d1      	uxtb	r1, r2
 800b0aa:	4a21      	ldr	r2, [pc, #132]	; (800b130 <ATcomand+0x2e4>)
 800b0ac:	7011      	strb	r1, [r2, #0]
 800b0ae:	461a      	mov	r2, r3
 800b0b0:	4b21      	ldr	r3, [pc, #132]	; (800b138 <ATcomand+0x2ec>)
 800b0b2:	2100      	movs	r1, #0
 800b0b4:	5499      	strb	r1, [r3, r2]
     Print_GSM(StringSMS);
 800b0b6:	4820      	ldr	r0, [pc, #128]	; (800b138 <ATcomand+0x2ec>)
 800b0b8:	f7ff fe02 	bl	800acc0 <Print_GSM>
    break;
 800b0bc:	e00b      	b.n	800b0d6 <ATcomand+0x28a>

  //   gps ////
  case ATCGNSPWR1: Print_GSM("AT+CGNSPWR=1\r");  break;    //�������� GPS
 800b0be:	4820      	ldr	r0, [pc, #128]	; (800b140 <ATcomand+0x2f4>)
 800b0c0:	f7ff fdfe 	bl	800acc0 <Print_GSM>
 800b0c4:	e007      	b.n	800b0d6 <ATcomand+0x28a>
  case ATCGNSPWR0: Print_GSM("AT+CGNSPWR=0\r");  break;    //�������� GPS
 800b0c6:	481f      	ldr	r0, [pc, #124]	; (800b144 <ATcomand+0x2f8>)
 800b0c8:	f7ff fdfa 	bl	800acc0 <Print_GSM>
 800b0cc:	e003      	b.n	800b0d6 <ATcomand+0x28a>
  case ATCGNSINF: Print_GSM("AT+CGNSINF\r");    break;    //������ GPS
 800b0ce:	481e      	ldr	r0, [pc, #120]	; (800b148 <ATcomand+0x2fc>)
 800b0d0:	f7ff fdf6 	bl	800acc0 <Print_GSM>
 800b0d4:	bf00      	nop
 }
   }
  }
 800b0d6:	bf00      	nop
 800b0d8:	3710      	adds	r7, #16
 800b0da:	46bd      	mov	sp, r7
 800b0dc:	bd80      	pop	{r7, pc}
 800b0de:	bf00      	nop
 800b0e0:	200016ab 	.word	0x200016ab
 800b0e4:	2000017e 	.word	0x2000017e
 800b0e8:	20000189 	.word	0x20000189
 800b0ec:	200016ac 	.word	0x200016ac
 800b0f0:	20002216 	.word	0x20002216
 800b0f4:	40010800 	.word	0x40010800
 800b0f8:	0800b4cc 	.word	0x0800b4cc
 800b0fc:	200016ad 	.word	0x200016ad
 800b100:	0800b4d4 	.word	0x0800b4d4
 800b104:	0800b4e0 	.word	0x0800b4e0
 800b108:	0800b4ec 	.word	0x0800b4ec
 800b10c:	0800b4f4 	.word	0x0800b4f4
 800b110:	0800b4fc 	.word	0x0800b4fc
 800b114:	0800b504 	.word	0x0800b504
 800b118:	0800b510 	.word	0x0800b510
 800b11c:	0800b51c 	.word	0x0800b51c
 800b120:	0800b528 	.word	0x0800b528
 800b124:	0800b538 	.word	0x0800b538
 800b128:	0800b544 	.word	0x0800b544
 800b12c:	0800b554 	.word	0x0800b554
 800b130:	200016aa 	.word	0x200016aa
 800b134:	20000180 	.word	0x20000180
 800b138:	2000211c 	.word	0x2000211c
 800b13c:	20001504 	.word	0x20001504
 800b140:	0800b564 	.word	0x0800b564
 800b144:	0800b574 	.word	0x0800b574
 800b148:	0800b584 	.word	0x0800b584

0800b14c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800b14c:	480c      	ldr	r0, [pc, #48]	; (800b180 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800b14e:	490d      	ldr	r1, [pc, #52]	; (800b184 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800b150:	4a0d      	ldr	r2, [pc, #52]	; (800b188 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800b152:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800b154:	e002      	b.n	800b15c <LoopCopyDataInit>

0800b156 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800b156:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800b158:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800b15a:	3304      	adds	r3, #4

0800b15c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800b15c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800b15e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800b160:	d3f9      	bcc.n	800b156 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800b162:	4a0a      	ldr	r2, [pc, #40]	; (800b18c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800b164:	4c0a      	ldr	r4, [pc, #40]	; (800b190 <LoopFillZerobss+0x22>)
  movs r3, #0
 800b166:	2300      	movs	r3, #0
  b LoopFillZerobss
 800b168:	e001      	b.n	800b16e <LoopFillZerobss>

0800b16a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800b16a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800b16c:	3204      	adds	r2, #4

0800b16e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800b16e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800b170:	d3fb      	bcc.n	800b16a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800b172:	f7f5 fb03 	bl	800077c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800b176:	f000 f80f 	bl	800b198 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800b17a:	f7f5 f979 	bl	8000470 <main>
  bx lr
 800b17e:	4770      	bx	lr
  ldr r0, =_sdata
 800b180:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800b184:	2000018c 	.word	0x2000018c
  ldr r2, =_sidata
 800b188:	0800b5b0 	.word	0x0800b5b0
  ldr r2, =_sbss
 800b18c:	2000018c 	.word	0x2000018c
  ldr r4, =_ebss
 800b190:	20002218 	.word	0x20002218

0800b194 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800b194:	e7fe      	b.n	800b194 <ADC1_2_IRQHandler>
	...

0800b198 <__libc_init_array>:
 800b198:	b570      	push	{r4, r5, r6, lr}
 800b19a:	2500      	movs	r5, #0
 800b19c:	4e0c      	ldr	r6, [pc, #48]	; (800b1d0 <__libc_init_array+0x38>)
 800b19e:	4c0d      	ldr	r4, [pc, #52]	; (800b1d4 <__libc_init_array+0x3c>)
 800b1a0:	1ba4      	subs	r4, r4, r6
 800b1a2:	10a4      	asrs	r4, r4, #2
 800b1a4:	42a5      	cmp	r5, r4
 800b1a6:	d109      	bne.n	800b1bc <__libc_init_array+0x24>
 800b1a8:	f000 f822 	bl	800b1f0 <_init>
 800b1ac:	2500      	movs	r5, #0
 800b1ae:	4e0a      	ldr	r6, [pc, #40]	; (800b1d8 <__libc_init_array+0x40>)
 800b1b0:	4c0a      	ldr	r4, [pc, #40]	; (800b1dc <__libc_init_array+0x44>)
 800b1b2:	1ba4      	subs	r4, r4, r6
 800b1b4:	10a4      	asrs	r4, r4, #2
 800b1b6:	42a5      	cmp	r5, r4
 800b1b8:	d105      	bne.n	800b1c6 <__libc_init_array+0x2e>
 800b1ba:	bd70      	pop	{r4, r5, r6, pc}
 800b1bc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b1c0:	4798      	blx	r3
 800b1c2:	3501      	adds	r5, #1
 800b1c4:	e7ee      	b.n	800b1a4 <__libc_init_array+0xc>
 800b1c6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b1ca:	4798      	blx	r3
 800b1cc:	3501      	adds	r5, #1
 800b1ce:	e7f2      	b.n	800b1b6 <__libc_init_array+0x1e>
 800b1d0:	0800b5a8 	.word	0x0800b5a8
 800b1d4:	0800b5a8 	.word	0x0800b5a8
 800b1d8:	0800b5a8 	.word	0x0800b5a8
 800b1dc:	0800b5ac 	.word	0x0800b5ac

0800b1e0 <memset>:
 800b1e0:	4603      	mov	r3, r0
 800b1e2:	4402      	add	r2, r0
 800b1e4:	4293      	cmp	r3, r2
 800b1e6:	d100      	bne.n	800b1ea <memset+0xa>
 800b1e8:	4770      	bx	lr
 800b1ea:	f803 1b01 	strb.w	r1, [r3], #1
 800b1ee:	e7f9      	b.n	800b1e4 <memset+0x4>

0800b1f0 <_init>:
 800b1f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1f2:	bf00      	nop
 800b1f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1f6:	bc08      	pop	{r3}
 800b1f8:	469e      	mov	lr, r3
 800b1fa:	4770      	bx	lr

0800b1fc <_fini>:
 800b1fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1fe:	bf00      	nop
 800b200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b202:	bc08      	pop	{r3}
 800b204:	469e      	mov	lr, r3
 800b206:	4770      	bx	lr
